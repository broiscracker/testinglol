no_protections_packed_vmp8_unpacking_trace.txt
Total unique blocks:              499
                                                                                                             
Total unique blocks (distinct):   500
                                                     
                                                                                                             
# of unique blocks executed:   1746              
-------------------------------------------------------------------------------------------------------------

# of x86-64 instructions including junk: 28689                 
initial block count:   576                                
# of initial blocks executed:   2083              
                                                                                                             
                                                                                                             
-------------------------------------------------------------------------------------------------------------

UB ID: 0 - ['call 0x7ffb6cfa48bf']
UB ID: 1 - ['push r14', 'push r10', 'call 0x7ffb72ba8acd']
UB ID: 2 - ['mov qword ptr [rsp], r9', 'push r12', 'mov r10d, 0x3ca0119a', 'push rax', 'call 0x7ffb72ac85fb']
UB ID: 3 - ['mov eax, 0xbb885e17', 'mov qword ptr [rsp + r10 - 0x3ca0119a], rbx', 'call 0x7ffb72c5aa4c']
UB ID: 4 - ['sub rbp, rdx', 'mov r10d, 0xda962391', 'lea r8, [r10 + r10*8 + 0x4803c381]', 'lea r9, [rip - 0x15]', 'mov r10d, dword ptr [r11]', 'movzx eax, r8b', 'mov ecx, eax', 'lea r11, [r11 + rax*4 - 0x264]', 'xadd eax, r8d', 'movzx edi, cx', 'xor r10d, ebp', 'push rcx', 'bswap eax', 'dec r10d', 'shr byte ptr [rsp + r8*2 - 0x132], 6', 'bswap r10d', 'shl al, 0xc1', 'shr rax, 0x16', 'mov edx, r8d', 'ror r10d, 3', 'xor al, dil', 'lea r10d, [r10 + r8*2 + 0x3228c97a]', 'xchg qword ptr [rsp + r8*2 - 0x134], rcx', 'lea rsi, [rcx + 0x7a6de21]', 'xor r10d, 0xd7940b1e', 'neg word ptr [rsp + r8*2 - 0x130]', 'mov qword ptr [rsp + r8*2 - 0x134], rbp', 'cmovg rcx, rsi', 'shl r8, 0xb', 'xor dword ptr [rsp + r8 - 0x4d000], r10d', 'pop rbp', 'push rax', 'inc r8d', 'movsxd r10, r10d', 'add r9, r10', 'mov qword ptr [rsp + r8 - 0x4d001], r9', 'ret']
UB ID: 5 - ['movzx r8d, cx', 'xor dl, bpl', 'xor dword ptr [rsp + rsi*4 + 0xc], r8d', 'pop r10', 'not dl', 'bts r10, 0x98', 'lea rcx, [r10*4 - 0x6c5b2e6c]', 'rol r8w, 0x2c', 'inc dl', 'mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]', 'ror dl, 1', 'xor word ptr [rsp + r10 - 0x4f1da1c1], r8w', 'neg qword ptr [rsp + rsi]', 'adc dl, sil', 'sar r10d, 0x6b', 'xadd qword ptr [rsp + r10 - 0x9e3b4], rdi', 'neg dl', 'inc r8d', 'sub dl, 0xc', 'neg rsi', 'setl byte ptr [rsp + r10*4 - 0x278ecb]', 'rol dl, 1', 'xor bpl, dl', 'lea rdx, [rsp + rdx + 8]', 'mov qword ptr [rdx + r10*8 - 0x4f1da0], rax', 'mov edi, dword ptr [r11 + r10 - 0x9e3b2]', 'neg qword ptr [rsp + r10*2 - 0x13c768]', 'xor edi, ebp', 'xor edi, 0xe12e3f2d', 'btc r8d, ecx', 'rol edi, 1', 'sub r8w, 0x64a7', 'sal rcx, 0x87', 'xor edi, 0x689d25ab', 'neg edi', 'sal r8w, 0xec', 'mov qword ptr [rsp + r10 - 0x9e3b4], rbp', 'movsx eax, cl', 'btr esi, 0xa1', 'xor dword ptr [rsp + r10 - 0x9e3b4], edi', 'pop rbp', 'xor r10, rax', 'movsxd rdi, edi', 'adc r9, rdi', 'mov rdx, qword ptr [rbx + rsi*2 + 0x10]', 'lea rbx, [r10 + rbx - 0x9e39c]', 'dec si', 'movzx edi, byte ptr [rsi + r11 - 0xfff9]', 'lea r11, [r11 + r10 - 0x9e3ad]', 'jno 0x7ffb72b7d536']
UB ID: 6 - ['ror si, 0xf', 'rol si, 0xc7', 'xor dil, bpl', 'lea rcx, [rax*8 + 0x3d3d7905]', 'ror dil, 1', 'sub rsi, -0x577b11cf', 'xor dil, 0xa1', 'xor r8d, r8d', 'rol r10w, cl', 'adc dil, 0x94', 'sub cx, cx', 'xor dil, 0x9c', 'not r8d', 'btr si, cx', 'xor bpl, dil', 'sar r10w, 0xc6', 'add rdi, rsp', 'xchg ax, r8w', 'mov qword ptr [r10 + rdi - 0x9fed3], rdx', 'dec si', 'add ax, r10w', 'sub sil, al', 'jmp r9']
UB ID: 7 - ['adc dl, 0x31', 'and word ptr [rsp + r10 + 0xc], r10w', 'mov qword ptr [rsp + r10], rsi', 'neg qword ptr [rsp + r10*2 + 9]', 'xor bpl, dl', 'shl qword ptr [rsp + r10 + 5], 0xbf', 'lea rdx, [rsp + rdx + 0x18]', 'mov byte ptr [rsp + r10*8 + 0xc], sil', 'shr r10d, cl', 'jne 0x7ffb72bc1057']
UB ID: 8 - ['mov qword ptr [r10 + rdx], rax', 'mov rdx, qword ptr [r10 + rbx + 8]', 'lea rbx, [rbx + r10*4 + 0x10]', 'setns sil', 'or r10b, byte ptr [rsp + r10 + 0x16]', 'movzx ecx, word ptr [r11 + r10 + 1]', 'movzx eax, word ptr [rsp + r10 + 7]', 'xor cx, bp', 'shr dil, 0x87', 'adc cx, 0xe297', 'movsx r8d, byte ptr [rsp + rsi*2 + 0x11]', 'not cx', 'sub byte ptr [rsp + r10 + 0xd], 0x11', 'sal r8d, 0xfc', 'sbb cx, 0x4b88', 'ror cx, 1', 'xor bp, cx', 'sal r8d, 0x7b', 'call 0x7ffb72be9f6b']
UB ID: 9 - ['mov qword ptr [rsp + rax*4 + 0x860000c], rbp', 'shl r10, 0xf5', 'sbb rsi, rdx', 'xor dword ptr [rsp + rax*2 + 0x430000a], ecx', 'add word ptr [rsp + rax*2 + 0x4300004], ax', 'sal edx, 0xca', 'btr edi, eax', 'mov rbp, qword ptr [rsp + rdx*8 + 8]', 'dec di', 'mov qword ptr [rsp + rdx], rdx', 'movsxd rcx, ecx', 'mov r8d, 0x869b6ea2', 'sbb r10, rdi', 'add word ptr [rsp + rdx], di', 'adc r9, rcx', 'sal sil, 0x46', 'mov rdi, qword ptr [rbx + rdx + 0x10]', 'mov qword ptr [rsp + rdx*2 + 8], -0x6dd6a777', 'jb 0x7ffb72dadbd6']
UB ID: 10 - ['lea rbx, [rdx + rbx + 0x18]', 'neg qword ptr [rsp + rdx*8 + 8]', 'setb r8b', 'movzx esi, word ptr [r11 + rax + 0x2180007]', 'lea r11, [r11 + rdx + 8]', 'push rdx', 'xor si, bp', 'call 0x7ffb72c3e2f2']
UB ID: 11 - ['xor rbp, r10', 'mov qword ptr [rsp + rsi - 0xffae], rdx', 'xor r8, rax', 'btc esi, ecx', 'mov qword ptr [rsi + rbx - 0xffb6], r10', 'push rsi', 'neg ecx', 'xadd eax, esi', 'movzx eax, byte ptr [rax + r11 - 0x2000ff91]', 'shr di, 0xed', 'or dx, 0xec87', 'lea r11, [r11 + rdx*4 - 0x3f607]', 'call 0x7ffb72c67c09']
UB ID: 12 - ['mov rdi, qword ptr [rax + rdi + 0x5519fffd]', 'pop rsi', 'adc rsi, 0x18852e', 'jmp rsi']
UB ID: 527 - ['mov r10d, 0x6980f73e', 'movzx eax, r10b', 'btc ax, 0xae', 'mov rsi, qword ptr [rax + rbx - 0x403e]', 'movsx ecx, al', 'mov edi, ecx', 'mov rcx, qword ptr [rbx + r10 - 0x6980f736]', 'adc rsi, rcx', 'btr di, 0xa7', 'xor rax, rax', 'mov qword ptr [rbx + r10 - 0x6980f736], rsi', 'adc eax, dword ptr [r11 + rax*2]', 'xor eax, ebp', 'neg eax', 'sal di, 0x84', 'lea rcx, [r10 + rdi*4 - 0x4ef4cfdc]', 'ror eax, 2', 'btc di, 0x87', 'sar r10, cl', 'lea eax, [rax + rcx*8 + 0x1bdd2f38]', 'push rcx', 'not eax', 'mov qword ptr [rsp + r10*4], rbp', 'xchg r10, rdi', 'xor dword ptr [rsp + r10*2 - 0x6c0], eax', 'pop rbp', 'push rcx', 'movsxd rax, eax', 'add r9, rax', 'movzx edi, byte ptr [r11]', 'mov edx, 0x8a286702', 'lea rsi, [rdx + 0x219ed34]', 'xor dil, bpl', 'movzx r8d, sil', 'or r8w, dx', 'push rdx', 'not dil', 'mov r10d, r8d', 'push r10', 'dec dil', 'rol dil, 1', 'movsx eax, si', 'rol r10b, 0xe5', 'neg dil', 'rol dx, 0x2e', 'shr esi, 0x42', 'movsx ecx, sil', 'xor bpl, dil', 'neg r8d', 'shl word ptr [rsp + rsi - 0x231094ff], 1', 'not cx', 'lea rdi, [rsp + rdi + 0x10]', 'cwde', 'jbe 0x7ffb72efdfcf']
UB ID: 14 - ['btc r8w, 0xb3', 'xor dword ptr [rsp + r10 - 0x73b0b997], ecx', 'bts r10d, eax', 'call 0x7ffb728ad73b']
UB ID: 15 - ['mov rbp, qword ptr [rsp + r8 - 0x5134888e]', 'movsx esi, r8w', 'movsxd rcx, ecx', 'dec al', 'adc r9, rcx', 'mov rdx, qword ptr [r8 + rbx - 0x5134889e]', 'mov qword ptr [rsp + r8 - 0x5134888e], r10', 'lea rdi, [rsp + rax*8 + 0x158]', 'mov qword ptr [rdi + r10 - 0x73b0b997], rdx', 'mov qword ptr [rsp + r8 - 0x51348896], -0x5bd3dafc', 'mov qword ptr [rsp + r10 - 0x73b0b997], r9', 'ret 8']
UB ID: 16 - ['mov edi, dword ptr [rsi + r11 - 0x7a02ec14]', 'xor edi, ebp', 'lea rdx, [rsi*2 + 0x5d2a8181]', 'dec edi', 'movsx r10d, si', 'ror edi, 1', 'xor ecx, ecx', 'inc rdx', 'dec edi', 'bts rsi, r10', 'bswap edi', 'movzx r8d, dl', 'mov eax, 0xcc270637', 'push rbp', 'or rsi, rax', 'xor dword ptr [rsp + rcx], edi', 'sar dl, 0xe4', 'ror si, 1', 'call 0x7ffb72a2308f']
UB ID: 17 - ['neg si', 'rol si, 1', 'pop r8', 'sub rcx, rcx', 'sbb si, 0x680', 'shl qword ptr [rsp + rcx + 8], 0xc', 'mov qword ptr [rsp + rcx], 0x6f8c9e25', 'xchg qword ptr [rsp + rcx + 5], rcx', 'xor bp, si', 'lea r8, [rdx*8 - 0x57731477]', 'mov r10d, 0x331896', 'lea rsi, [rsp + rsi + 0x10]', 'mov qword ptr [r10 + rsi - 0x331896], rax', 'shr di, 0xcd', 'sub cl, dl', 'movzx eax, r8w', 'mov edx, dword ptr [r11 + r10*4 - 0xcc6254]', 'sub eax, 0x3d374215', 'xor edx, ebp', 'ror r10w, 0xac', 'jb 0x7ffb72987d6b']
UB ID: 18 - ['xchg qword ptr [rsp + r10*4 - 0xce257c], rax', 'xor byte ptr [rsp + r10*2 - 0x6712be], r8b', 'lea edx, [rdi + rdx - 0x5ac0d471]', 'jbe 0x7ffb72d0df06']
UB ID: 19 - ['ror edx, 1', 'ror qword ptr [rsp + r10*8 - 0x19c4b00], 0xfa', 'jb 0x7ffb72b072ba']
UB ID: 20 - ['bswap edx', 'sbb r8w, 0xbf2e', 'rol edx, 3', 'mov qword ptr [rsp + r10 - 0x338959], rbp', 'inc r10w', 'xor dword ptr [rsp + r10*2 - 0x6712bc], edx', 'push r8', 'pop r10', 'mov rbp, qword ptr [rsp + 8]', 'movsxd rdx, edx', 'not rcx', 'mov qword ptr [rsp + 8], -0x59fae262', 'add r9, rdx', 'and r8d, 0x1e9ba438', 'movzx eax, word ptr [r11 + r8 - 0xc032428]', 'movzx edx, di', 'add word ptr [rsp + r8*8 - 0x60192175], di', 'lea r11, [r11 + r8 - 0xc032426]', 'movsx esi, cl', 'xor ax, bp', 'call 0x7ffb72de2b95']
UB ID: 21 - ['not ax', 'lea rdx, [r8 + rdi - 0x47c423fa]', 'neg ax', 'xor rcx, 0x453bcd94', 'ror ax, 1', 'not r10b', 'add ax, 0x5e8f', 'call 0x7ffb72de74ae']
UB ID: 22 - ['push 0x643f3989', 'mov ecx, 0xe3a653b', 'mov edx, dword ptr [rcx + r11 - 0xe3a653b]', 'xor edx, ebp', 'mov edi, ecx', 'movsx r8d, word ptr [rsp + rcx - 0xe3a6538]', 'not edx', 'rol ecx, 0xb', 'lea edx, [rdx + rdi + 0x7065c654]', 'ror edx, 1', 'not byte ptr [rsp + rdi*2 - 0x1c74ca71]', 'bswap edx', 'sub edi, 0x1931938f', 'xor r8b, 0xa6', 'rol edx, 3', 'mov qword ptr [rsp + r8*2 - 0x184], rbp', 'not r10w', 'movzx esi, cx', 'xor bp, r10w', 'sub rcx, rsi', 'lea r10, [rsp + r10 + 8]', 'mov qword ptr [rsp + r8 - 0x80c2], rcx', 'btc dx, 0x19', 'cwde', 'mov qword ptr [rcx + r10 - 0x67a40000], rdi', 'jb 0x7ffb72c16290']
UB ID: 23 - ['movzx esi, byte ptr [r8 + r11 - 0x80bc]', 'call 0x7ffb72c0b213']
UB ID: 24 - ['xor dl, ah', 'xor sil, 0x2e', 'xor bpl, sil', 'lea rsi, [rsp + rsi + 0x18]', 'inc cl', 'shl cx, 3', 'mov rax, qword ptr [rcx + rsi - 0x67a40008]', 'push r10', 'lea rsi, [rcx - 0x277439d4]', 'mov qword ptr [rbx + r8*8 - 0x40610], rax', 'adc si, word ptr [rsp + rcx - 0x67a3ffef]', 'call 0x7ffb72932bc2']
UB ID: 25 - ['push r8', 'mov qword ptr [rsp + r8*2 - 0x10184], r9', 'ret 0x28']
UB ID: 26 - ['mov r8d, dword ptr [r11 + r8*2 - 0x4e0a7558]', 'mov edi, 0x8834e7a7', 'mov esi, edi', 'movzx ecx, di', 'push rsi', 'lea r10, [rcx*8 - 0x67d484cc]', 'lea r8d, [rcx + r8 - 0x410c0608]', 'movsx edx, byte ptr [rsp + rcx - 0xd37e]', 'movzx eax, di', 'bswap r8d', 'sbb rcx, 0x480c4e9f', 'xchg dword ptr [rsp + rdx*2 - 0x65], r10d', 'neg ax', 'xor r8d, 0x3aabe31c', 'xchg byte ptr [rsp + rcx + 0x480b7b27], al', 'push rsi', 'mov qword ptr [rsp + rsi - 0x80], rbp', 'xor eax, 0x2fbddc91', 'xor dword ptr [rsp + rsi*2 - 0x108], r8d', 'mov rbp, qword ptr [rsp + rsi - 0x80]', 'inc dil', 'cqo', 'movsxd r8, r8d', 'inc byte ptr [rsp + rsi - 0x85]', 'add r9, r8', 'and ecx, 0x6532cb33', 'mov r10, rbx', 'je 0x7ffb72b7e82b']
UB ID: 27 - ['neg di', 'mov qword ptr [rsi + rbx - 0x90], r10', 'mov qword ptr [rsp + rsi - 0x80], rax', 'bts rdx, rax', 'mov r8, qword ptr [rsi + r11 - 0x84]', 'ror word ptr [rsp + rsi*2 - 0x10f], 8', 'push rdi', 'call 0x7ffb729acebf']
UB ID: 28 - ['movsx r10d, word ptr [rsp + rsi - 0x7f]', 'neg al', 'shr ax, 1', 'shl rdi, 0xd5', 'lea r8, [rsi + r8 + 0x933b51f]', 'or r10b, 0x91', 'ror r8, 6', 'cdqe', 'xor rbp, r8', 'cqo', 'btc di, 0x1d', 'shl dil, 0x22', 'mov qword ptr [rsi + rbx - 0x98], r8', 'rol byte ptr [rsp + rsi - 0x6d], 0x42', 'lea r8, [rdi*4 + 0x76918820]', 'mov rcx, qword ptr [r11 + rsi*4 - 0x214]', 'rol dl, 0x61', 'shr word ptr [rsp + rsi*4 - 0x206], 0x6e', 'xchg byte ptr [rsp + rsi - 0x6f], dh', 'lea r11, [r11 + rsi - 0x74]', 'pop rax', 'mov eax, r8d', 'xor rcx, rbp', 'lea rcx, [rcx + rsi*4 - 0x1b9fe73d]', 'or word ptr [rsp + rdx - 0xc3fd], dx', 'bswap rcx', 'ror r8, 0xc3', 'neg eax', 'inc byte ptr [rsp + rsi - 0x88]', 'rol rcx, 7', 'xor rcx, 0xffffffffaf9b582f', 'inc rcx', 'not qword ptr [rsp + rsi*4 - 0x212]', 'xor rbp, rcx', 'rol dword ptr [rsp + rsi*2 - 0x110], 0xe5', 'mov qword ptr [rsi + rbx - 0xa0], rcx', 'cwde', 'call 0x7ffb72b6006b']
UB ID: 29 - ['push r8', 'lea rbx, [rsi + rbx - 0xa0]', 'xchg qword ptr [rsp + 8], rdi', 'adc rdi, 0x10edc7', 'jmp rdi']
UB ID: 68 - ['pop r8', 'pop rdx', 'pop rdx', 'pop rax', 'pop rdi', 'mov r8d, esi', 'and cl, dl', 'push rdi', 'push r10', 'btc si, cx', 'dec word ptr [rsp + rdx]', 'xadd r10d, edx', 'inc r10', 'lea eax, [r10 + rax + 0x2940cfcc]', 'push r8', 'sub word ptr [rsp + rsi*4 + 0xe], r8w', 'not eax', 'lea rcx, [rsi + rcx*8 - 0x50c2f3e3]', 'call 0x7ffb72bdd935']
UB ID: 31 - ['xor r10d, ebp', 'ror di, 0xc1', 'rol edi, 0x9e', 'neg r10d', 'neg rdi', 'cdqe', 'call 0x7ffb72a8b1a9']
UB ID: 32 - ['ror r10d, 2', 'mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf', 'inc word ptr [rsp + r8 - 0x20602627]', 'lea r10d, [r10 + r8*4 + 0x6ebe4f90]', 'and si, word ptr [rsp + rdx + 2]', 'not r10d', 'pop r8', 'adc r8, -0xd5dd14d', 'push rbp', 'cwde', 'xor dword ptr [rsp + r8 + 0x4a4e941c], r10d', 'cqo', 'movsx ecx, r8b', 'pop rbp', 'and r8w, 0x2395', 'setne sil', 'movsxd r10, r10d', 'shr si, cl', 'cmovae esi, r8d', 'adc r9, r10', 'btr rdx, 0x28', 'mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]', 'mov r10d, ecx', 'dec al', 'mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]', 'push r10', 'adc rdi, rcx', 'lea rcx, [r10*4 - 0x774591ed]', 'mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi', 'neg byte ptr [rsp + rax - 0x2a9a]', 'setle r8b', 'mov qword ptr [rsp + rax*2 - 0x5542], r9', 'ret']
UB ID: 33 - ['mov r8d, dword ptr [r11]', 'xor edi, edi', 'lea r11, [rdi + r11 + 4]', 'mov esi, 0x529e369e', 'movsx ecx, di', 'xor r8d, ebp', 'add ecx, esi', 'sbb r8d, 0xd9bf8d9b', 'call 0x7ffb72c0da85']
UB ID: 34 - ['mov edx, 0xb4a57380', 'mov r10, qword ptr [rbx]', 'movsx edi, dx', 'sal edi, 0x6f', 'xor dl, dil', 'movzx eax, byte ptr [r11 + rdi*2 - 0x73800000]', 'not dx', 'xor al, bpl', 'movzx r8d, dx', 'btc si, 0x39', 'xor dword ptr [rsp + rax*2 - 0xf520], ecx', 'inc di', 'mov rbp, qword ptr [rsp + rax*4 - 0x1ea48]', 'ror r8b, 0xe1', 'movsxd rcx, ecx', 'add r9, rcx', 'mov rcx, qword ptr [rax + r11 - 0xf523]', 'lea r11, [r11 + rax - 0xf51b]', 'xor rcx, rbp', 'shl rsi, 0x4b', 'ror dil, 0x46', 'not rcx', 'jae 0x7ffb72f12ace']
UB ID: 35 - ['lea rcx, [rax + rcx - 0x42a3fed1]', 'cwd', 'push rdi', 'xor al, r8b', 'xor rbp, rcx', 'shr r10d, 0x81', 'mov qword ptr [rax + rbx - 0xf583], rcx', 'mov qword ptr [rsp + rax - 0xf583], r9', 'ret 0x18']
UB ID: 36 - ['lea rcx, [r10 + rcx + 0x17d0c5d9]', 'rol rcx, 1', 'lea rcx, [rcx + r10 + 0x7f47f23b]', 'xor rcx, 0xffffffffe31c4620', 'xor rbp, rcx', 'shr sil, 0x63', 'mov qword ptr [rdi + rbx - 0xa801eb5], rcx', 'neg al', 'shr ax, 0x43', 'movzx edx, byte ptr [r11 + rdi - 0xa801ea5]', 'xor dl, bpl', 'call 0x7ffb72c71f52']
UB ID: 37 - ['neg dl', 'mov qword ptr [rsp + rdi - 0xa801ea5], r8', 'add r10d, eax', 'xor dl, 0x2e', 'mov qword ptr [rsp + rdi*2 - 0x15003d5a], 0x2cbd7b21', 'cdqe', 'xor bpl, dl', 'lea rdx, [rsp + rdx + 0x18]', 'sal rsi, 0x2c', 'xor byte ptr [rsp + rdi*2 - 0x15003d4d], 0x95', 'sar esi, 0x3c', 'mov r10, qword ptr [rdi + rdx - 0xa801ead]', 'add rsi, rax', 'push rax', 'mov qword ptr [rdi + rbx - 0xa801ebd], r10', 'xchg qword ptr [rsp + rdi*8 - 0x5400f558], rsi', 'mov r8d, dword ptr [r11 + rdi*4 - 0x2a007aab]', 'xchg word ptr [rsp + rdi*4 - 0x2a007aa3], ax', 'lea r11, [r11 + rdi*2 - 0x15003d4d]', 'neg rax', 'cqo', 'xor r8d, ebp', 'shl byte ptr [rsp + rdi - 0xa801e97], 0xa2', 'and edi, 0xb49881a3', 'movsx r10d, word ptr [rsp + rdi - 0x80008f]', 'neg r8d', 'push rdi', 'ror r8d, 2', 'neg r10b', 'call 0x7ffb72e8304d']
UB ID: 38 - ['mov rdx, qword ptr [rbx + rcx - 0x3fb092b0]', 'lea r10, [rcx + 0x83fa737]', 'not r8', 'mov qword ptr [rsp + rcx*2 - 0x7f612570], -0x275467dd', 'xor qword ptr [rsp + rcx*2 - 0x7f612570], r10', 'sal byte ptr [rsp + rcx*2 - 0x7f612570], 0xe6', 'not rdx', 'and r8, rdx', 'movsx edi, cl', 'mov eax, edi', 'movsx esi, dil', 'mov r10, r8', 'and rsi, 0xffffffffee97de0b', 'jg 0x7ffb7290e32e']
UB ID: 39 - ['jne 0x7ffb72b6fee5']
UB ID: 470 - ['mov rax, qword ptr [rbx + rcx*2 - 0x7f612560]', 'inc byte ptr [rsp + rcx*2 - 0x7f61256e]', 'lea rcx, [rsi + rdi + 0x3f1fd820]', 'shr cl, 0x83', 'adc r10, rax', 'push rcx', 'lea r8, [rdi - 0x27ec5874]', 'mov qword ptr [rbx + 0x10], r10', 'pop rdi', 'rol rsi, 0x2e', 'cqo', 'lea rbx, [rbx + rax*2 + 0x1b6c07b0]', 'jae 0x7ffb72bd0b16']
UB ID: 41 - ['lea r11, [rdi + r11 - 0x37aafffc]', 'mov qword ptr [rsp + rdi - 0x37ab0000], rdi', 'pop rcx', 'movzx r10d, r8w', 'xor edx, ebp', 'neg edx', 'ror r10w, 0xa9', 'lea rax, [r10*2 - 0x4ddc93fe]', 'lea edx, [rdx + rdi*2 - 0x132c924e]', 'and rax, rcx', 'cmove di, r8w', 'btc ecx, 1', 'bswap edx', 'push rax', 'xor cl, 0x85', 'ror edx, 2', 'sbb r8, -0x685c3b75', 'sete r8b', 'lea edx, [rdx + rdi*2 + 0x75445a89]', 'sar r10d, 4', 'sal di, 6', 'mov qword ptr [rsp + rdi - 0x37ab0000], r10', 'mov qword ptr [rsp + rdi*2 - 0x6f560000], rbp', 'bts edi, eax', 'xor dword ptr [rsp + rdi - 0x37ab0001], edx', 'pop rbp', 'sub r8b, cl', 'add cx, r10w', 'movsxd rdx, edx', 'adc r9, rdx', 'lea rsi, [rdi*2 - 0x2f41f757]', 'mov r10, qword ptr [rbx + rdi*2 - 0x6f560002]', 'lea rdx, [r8 + rsi*4 - 0x7de0cded]', 'sal rdx, 0x4c', 'jns 0x7ffb72a1af1a']
UB ID: 42 - ['mov r8, qword ptr [rbx + rdi - 0x37aafff9]', 'rol rcx, 0x48', 'not r10', 'call 0x7ffb728ac7a8']
UB ID: 43 - ['call 0x7ffb72924658']
UB ID: 69 - ['not r8', 'or r10, r8', 'mov rbx, r10', 'mov qword ptr [rsp + rdi*2 - 0x6f55fffa], rax', 'mov qword ptr [rsp + rax*2 - 0x64400000], rcx', 'pop rcx', 'pop rdi', 'jne 0x7ffb72c4500c']
UB ID: 46 - ['mov r8d, 0x818098a8', 'ror al, 1', 'movsx esi, r8w', 'add al, 4', 'not al', 'shr r8d, 0x22', 'sbb al, 0x9b', 'neg al', 'xor bpl, al', 'shl word ptr [rsp + r8 - 0x20602626], 0xeb', 'pop rdi', 'adc rax, rsp', 'mov rcx, qword ptr [r8 + rax - 0x2060262a]', 'movzx eax, si', 'mov qword ptr [rdi + rbx - 0x3695281e], rcx', 'mov r10d, dword ptr [r8 + r11 - 0x20602629]', 'xor rax, 0x4d9cb20a', 'lea r11, [r11 + rdi*2 - 0x6d2a5027]', 'bt r8, rax', 'cdq', 'jb 0x7ffb72e38308']
UB ID: 47 - ['bts r10d, r8d', 'xor dl, bpl', 'movsx eax, sil', 'inc dl', 'ror dl, 1', 'shl si, 0x25', 'neg dl', 'call 0x7ffb72c7caa0']
UB ID: 48 - ['push rdx', 'inc r8w', 'sub cl, 0xa4', 'not r8w', 'movzx r10d, byte ptr [rsp]', 'sar edi, cl', 'xor bp, r8w', 'lea r8, [rsp + r8 + 8]', 'sar r10, cl', 'mov qword ptr [rdi + r8], rax', 'add edi, 0x1908091f', 'seta byte ptr [rsp + rdi - 0x1908091f]', 'mov edx, dword ptr [r11 + rdi - 0x1908091d]', 'xor edx, ebp', 'xor edx, 0xe12e3f2d', 'movsx eax, byte ptr [rsp + rdi - 0x1908091f]', 'ror byte ptr [rsp + rdi*4 - 0x64202477], 0xe1', 'cmovae rcx, rax', 'rol edx, cl', 'and qword ptr [rsp + rdi*2 - 0x3210123e], 0xffffffffe10855ae', 'sal word ptr [rsp + rdi*2 - 0x3210123e], 0xc7', 'call 0x7ffb72dc8bfb']
UB ID: 49 - ['sub dil, 0x9c', 'add rcx, rsp', 'movzx eax, sil', 'xor si, r10w', 'mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]', 'mov qword ptr [rbx + rax - 8], rdx', 'movzx ecx, al', 'mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]', 'xor r10d, ebp', 'lea rdx, [rsi + rcx - 0x57ce3fed]', 'mov r8d, ecx', 'dec r10d', 'ror r10d, 1', 'dec r10d', 'bswap rdx', 'shl ax, 0xa7', 'neg di', 'bswap r10d', 'push rdi', 'ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6', 'push r8', 'mov qword ptr [rsp + rsi - 0x33e70104], rbp', 'mov word ptr [rsp + rsi - 0x33e70106], 0x9b98', 'xor dword ptr [rsp + rsi - 0x33e70104], r10d', 'sar r8d, 0x79', 'sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26', 'rol r8, 0x6e', 'mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]', 'movsxd r10, r10d', 'mov qword ptr [rsp + rdi - 0x9215], rsi', 'adc r9, r10', 'movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]', 'xadd dil, sil', 'sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w', 'adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax', 'lea r11, [rsi + r11 - 0x33e70117]', 'adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh', 'xor r10b, bpl', 'rol r10b, 1', 'dec eax', 'lea rcx, [rax - 0x7050ecf0]', 'add r10b, al', 'not byte ptr [rsp + rsi - 0x33e70118]', 'or qword ptr [rsp + rdi*2 - 0x1244a], rsi', 'xor r10b, 0x91', 'add r10b, cl', 'shr dx, 0x4c', 'dec cl', 'and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f', 'rol r10b, 1', 'sub r8d, dword ptr [rsp + rsi - 0x33e70116]', 'sal edi, cl', 'adc r10b, 0x84', 'call 0x7ffb72c546ab']
UB ID: 50 - ['mov eax, 0xb602e72e', 'lea rdi, [rax - 0x6173404d]', 'movzx ecx, di', 'movzx edi, byte ptr [r11 + rcx*4 - 0x29b84]', 'push rax', 'sar word ptr [rsp + rcx - 0xa6de], cl', 'xor dil, bpl', 'movsx esi, cl', 'inc dil', 'lea r8, [rsi*8 - 0x71ff74e7]', 'ror dil, cl', 'neg dil', 'cwd', 'or edx, dword ptr [rsp + rcx - 0xa6dd]', 'sbb dword ptr [rsp + rcx*8 - 0x53707], ecx', 'xor dil, al', 'neg dx', 'xor bpl, dil', 'sar word ptr [rsp + rdx*2 + 3], 0x26', 'pop rcx', 'adc rdi, rsp', 'xchg eax, edx', 'mov rdx, qword ptr [rdi + rax - 1]', 'push rsi', 'mov qword ptr [rax + rbx - 9], rdx', 'call 0x7ffb72b91b37']
UB ID: 51 - ['mov r10d, dword ptr [r11 + rax*4 - 0xb]', 'xor r10d, ebp', 'mov qword ptr [rsp + rax*2 - 6], rcx', 'cwde', 'push r8', 'dec r10d', 'ror r10d, 1', 'dec r10d', 'push rax', 'ror qword ptr [rsp + rax + 6], 0xb0', 'cqo', 'bswap r10d', 'setae byte ptr [rsp + rax*2 + 0x10]', 'cmovb si, cx', 'mov qword ptr [rsp + rax + 0x15], rbp', 'btc r8w, dx', 'xor dword ptr [rsp + rax + 0x15], r10d', 'and ecx, 0x76179610', 'mov rbp, qword ptr [rsp + rdx + 0x18]', 'shl eax, cl', 'movsxd r10, r10d', 'adc r9, r10', 'shl al, 0x44', 'mov qword ptr [rsp + rax*2 - 0x5ffe8], rdx', 'movzx r10d, word ptr [r11 + rax*4 - 0xbfffb]', 'shr cx, 0xc', 'xchg byte ptr [rsp + rax - 0x2fffb], ah', 'shr dword ptr [rsp + rax*4 - 0xbfff1], 0x7c', 'lea r11, [r11 + rax - 0x2fff9]', 'rol word ptr [rsp + rax*4 - 0xbfffb], 0x6e', 'shl byte ptr [rsp + rax*2 - 0x5fffc], 1', 'xor r10w, bp', 'rol dl, 0x83', 'dec ax', 'sbb r10w, ax', 'pop rax', 'xchg qword ptr [rsp + rax*2 + 5], rsi', 'sar dl, 0x22', 'ror r10w, 1', 'neg word ptr [rsp + rsi - 0x1000052]', 'not r10w', 'neg r10w', 'xor bp, r10w', 'movzx edi, cl', 'lea r10, [rsp + r10 + 0x18]', 'or rdi, qword ptr [r10 + rax - 3]', 'mov qword ptr [rbx + rax - 0x13], rdi', 'sal dx, 0xc4', 'lea rbx, [rbx + rax - 0x13]', 'inc esi', 'or dl, 0xb0', 'pop rcx', 'pop rax', 'pop rcx', 'jl 0x7ffb72eb83a2']
UB ID: 52 - ['mov r8d, 0x1b013f0f', 'lea rdi, [r8*4 - 0x257725d8]', 'mov ecx, edi', 'mov edi, dword ptr [r8 + r11 - 0x1b013f0f]', 'lea r10, [rcx*2 + 0x2d07b710]', 'push r10', 'xor edi, ebp', 'lea rax, [r10*8 - 0x1ad2a974]', 'bswap edi', 'push rax', 'dec byte ptr [rsp + r8 - 0x1b013f0e]', 'inc dword ptr [rsp + r8 - 0x1b013f0e]', 'dec edi', 'rol edi, 1', 'inc dword ptr [rsp + r8*2 - 0x36027e16]', 'dec qword ptr [rsp + r8 - 0x1b013f07]', 'xadd r8b, r10b', 'sbb edi, 0x7f8e038e', 'xchg byte ptr [rsp + r8 - 0x1b013fe4], cl', 'sub eax, dword ptr [rsp + r8 - 0x1b013fe2]', 'rol edi, 2', 'push rcx', 'mov qword ptr [rsp + r8*4 - 0x6c04ff8c], rbp', 'lea rsi, [rcx*2 + 0x52b9be90]', 'adc word ptr [rsp + r8 - 0x1b013fe3], r8w', 'xor dword ptr [rsp + r8*2 - 0x36027fbe], edi', 'rol sil, 1', 'xor bpl, sil', 'mov qword ptr [rsp + r8*4 + 0x28], 0x6f0b60a2', 'neg rdx', 'lea rsi, [rsp + rsi + 0x30]', 'lea rdi, [rdx*4 - 0x22f58f7e]', 'add r8, qword ptr [rsi + r8*2]', 'mov qword ptr [rbx + rdx*8 + 0x68], r8', 'mov cl, byte ptr [r11 + rdx*2 + 0x25]', 'lea r10, [r10 + rax + 0x222ddeaf]', 'xchg qword ptr [rsp + rdx + 0x2e], rdx', 'lea r11, [rax + r11 - 0x5d33a921]', 'cdqe', 'mov r8d, 0x56b9e511', 'xor cl, bpl', 'rol word ptr [rsp + rdi*2 + 0x45eb1f86], 0x6d', 'rol byte ptr [rsp + r8 - 0x56b9e4e3], 0xa5', 'inc cl', 'dec r10w', 'ror cl, 1', 'or r10w, 0x19ab', 'movsx esi, word ptr [rsp + rdi + 0x22f58fda]', 'neg cl', 'sal rax, 0xa', 'add rax, 0x1136f5b0', 'neg al', 'xor cl, 0x2e', 'sar dword ptr [rsp + rdi + 0x22f58fe5], 0xc', 'xchg word ptr [rsp + rdi + 0x22f58fda], si', 'xor bpl, cl', 'mov byte ptr [rsp + rdi + 0x22f58fd5], 0x16', 'xor r8, qword ptr [rsp + rdi + 0x22f58fdb]', 'lea rcx, [rsp + rcx + 0x30]', 'shr rsi, 0x6f', 'sub r10, qword ptr [rsp + rdi*2 + 0x45eb1f79]', 'mov rdx, qword ptr [rcx + rdi*2 + 0x45eb1f74]', 'setae byte ptr [rsp + rdi + 0x22f58fc0]', 'mov qword ptr [rbx + rdi*2 + 0x45eb1f5c], rdx', 'push rdi', 'jbe 0x7ffb729ec224']
UB ID: 53 - ['lea rbx, [rdi + rbx + 0x22f58fa2]', 'sbb si, si', 'pop rax', 'pop rdx', 'pop r8', 'pop rax', 'pop r8', 'pop rax', 'pop rdi', 'jno 0x7ffb72eb83a2']
UB ID: 54 - ['mov rsi, qword ptr [rbx]', 'mov r11d, 0x2b8bf70f', 'movsx edx, r11b', 'lea rbx, [rbx + r11 - 0x2b8bf707]', 'mov r11, rsi', 'sub rbp, rdx', 'mov r10d, 0xda962391', 'lea r8, [r10 + r10*8 + 0x4803c381]', 'lea r9, [rip - 0x15]', 'mov r10d, dword ptr [r11]', 'movzx eax, r8b', 'mov ecx, eax', 'lea r11, [r11 + rax*4 - 0x264]', 'xadd eax, r8d', 'movzx edi, cx', 'xor r10d, ebp', 'push rcx', 'bswap eax', 'dec r10d', 'shr byte ptr [rsp + r8*2 - 0x132], 6', 'bswap r10d', 'shl al, 0xc1', 'shr rax, 0x16', 'mov edx, r8d', 'ror r10d, 3', 'xor al, dil', 'lea r10d, [r10 + r8*2 + 0x3228c97a]', 'xchg qword ptr [rsp + r8*2 - 0x134], rcx', 'lea rsi, [rcx + 0x7a6de21]', 'xor r10d, 0xd7940b1e', 'neg word ptr [rsp + r8*2 - 0x130]', 'mov qword ptr [rsp + r8*2 - 0x134], rbp', 'cmovg rcx, rsi', 'shl r8, 0xb', 'xor dword ptr [rsp + r8 - 0x4d000], r10d', 'pop rbp', 'push rax', 'inc r8d', 'movsxd r10, r10d', 'add r9, r10', 'mov qword ptr [rsp + r8 - 0x4d001], r9', 'ret']
UB ID: 55 - ['bswap rax', 'mov qword ptr [rsp + rcx - 0x1e96abbc], rdi', 'dec rax', 'bts rsi, 1', 'call 0x7ffb72bcf8f8']
UB ID: 56 - ['bts r10d, 0x2c', 'dec cl', 'mov qword ptr [rsp + r10*4 - 0x2eef0], r10', 'shr rsi, cl', 'xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc', 'lea rdx, [r10 + rdx + 0x21a79a4f]', 'pop r8', 'ror rdx, 5', 'rol r10b, 0xe1', 'pop rax', 'xor rbp, rdx', 'sal r10, cl', 'mov qword ptr [rbx + rsi*4 - 0x10], rdx', 'neg r10d', 'neg rcx', 'lea rdx, [rax + r8*2 + 0x3102b03c]', 'or r10d, dword ptr [r10 + r11 + 0x10]', 'cwde', 'rol r10d, 2', 'sub edi, 0x82313a32', 'mov qword ptr [rsp + rdi - 0x7dcec5be], rbp', 'jle 0x7ffb72b20360']
UB ID: 57 - ['xor dword ptr [rsp + rdi - 0x7dcec5be], r10d', 'dec word ptr [rsp + rsi*2 + 3]', 'ror edx, 9', 'mov rbp, qword ptr [rsp + rsi*2 + 0x10]', 'add ecx, 0xd6aede26', 'movsxd r10, r10d', 'add r9, r10', 'sar cx, 0x29', 'lea rax, [rcx*8 - 0x5847164a]', 'mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6', 'movzx r10d, word ptr [r11 + rcx - 0x1aee0026]', 'lea r11, [rcx + r11 - 0x1aee0024]', 'cbw', 'xor r10w, bp', 'mov qword ptr [rsp + rcx - 0x1aee002a], rdx', 'mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx', 'add r10w, 0x5bbe', 'ror r10w, 1', 'inc r10w', 'dec word ptr [rsp + rcx*4 - 0x6bb800df]', 'neg r10w', 'pop rsi', 'ror r10w, 1', 'neg r10w', 'shr word ptr [rsp + rax - 0x7f28ff7b], 0x21', 'rol r10w, 1', 'cdqe', 'push rax', 'add r10w, 0xfba5', 'xor bp, r10w', 'lea r10, [rsp + r10 + 0x18]', 'mov rcx, qword ptr [r10 + rcx - 0x1aee003a]', 'mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx', 'sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce', 'lea r10, [rdi*8 - 0x65c4ffca]', 'cwd', 'lea rbx, [rbx + rdi - 0x7dcec5e6]', 'shr qword ptr [rsp + r8 - 0xbbba], 0xcb', 'and dil, r8b', 'pop r8', 'pop r8', 'pop rsi', 'jno 0x7ffb72eb83a2']
UB ID: 58 - ['jns 0x7ffb72c8632a']
UB ID: 59 - ['mov rdi, qword ptr [rbx + rdx - 0xa5]', 'mov ecx, 0x26214c3c', 'xor edx, esi', 'adc r10, rdi', 'xadd dx, r8w', 'mov qword ptr [rbx + rsi - 0x1cc1], r10', 'lea rbx, [rbx + rdx - 0x22fe]', 'jmp r9']
UB ID: 60 - ['add cx, 0xddb4', 'not cx', 'cqo', 'rol dl, 0xe4', 'movzx esi, r10w', 'ror cx, 1', 'ror rax, 0x23', 'shl r10d, 0xa1', 'shl rsi, 0x51', 'xor cx, 0xe5b6', 'cwde', 'xor bp, cx', 'xchg r8d, edi', 'cdqe', 'dec r10b', 'add rcx, rsp', 'btr edx, edi', 'adc rsi, rdi', 'call 0x7ffb72e1c459']
UB ID: 61 - ['sal dx, 0xaa', 'shl qword ptr [rsp + rdx*8 + 0x10], 0x90', 'lea r8d, [r8 + rdx*2 - 0x7f8e038e]', 'rol r8d, 2', 'movsx edi, sil', 'mov qword ptr [rsp + rdx], -0x714f95ee', 'lea rcx, [rdi*8 + 0x4e0035a4]', 'mov qword ptr [rsp + rdx + 0x10], rbp', 'sub word ptr [rsp + rdx + 0xa], 0x5b8', 'or si, 0x87ae', 'xor dword ptr [rsp + rdx*2 + 0x10], r8d', 'mov rbp, qword ptr [rsp + rdx + 0x10]', 'ror rcx, 9', 'movsxd r8, r8d', 'ror dword ptr [rsp + rdx*2 + 0xa], 0x1f', 'mov qword ptr [rsp + rdx + 0x10], 0x4fa44abb', 'neg rsi', 'add r9, r8', 'sar dword ptr [rsp + rdx*2 + 6], cl', 'mov qword ptr [rsp + rdx*2], r9', 'ret 0x10']
UB ID: 62 - ['mov rax, qword ptr [rbx]', 'mov ecx, 0xb7bf4211', 'mov edx, 0x82a603a6', 'movzx r10d, word ptr [r11]', 'mov edi, edx', 'bts rcx, rdx', 'jae 0x7ffb72c262bc']
UB ID: 63 - ['ror r10, 2', 'neg rdx', 'sub byte ptr [rsp + rcx*2 - 0x4563ffe3], dil', 'sar byte ptr [rsp + rcx*2 - 0x4563fff7], 0xc1', 'not r10', 'xor rbp, r10', 'lea rax, [rdx + rdi*4 + 0x3bd1e2c]', 'mov r8d, ecx', 'shl dl, 0xc3', 'mov qword ptr [rbx + rcx - 0x22b20000], r10', 'jb 0x7ffb72cb5491']
UB ID: 64 - ['movsxd rax, eax', 'add r9, rax', 'shr dl, 0xc5', 'mov di, word ptr [r10 + r11 - 0x1663e]', 'lea r8, [r10*8 + 0x1dac92b4]', 'lea rcx, [rdx + r8*2 + 0x1ca16f26]', 'lea r11, [rdx + r11 - 0x631291f2]', 'mov eax, esi', 'xor di, bp', 'add r10w, si', 'ror di, 1', 'call 0x7ffb72ecba3e']
UB ID: 65 - ['mov edi, 0xef27efaf', 'mov r8, qword ptr [rbx]', 'movsx eax, dil', 'shr eax, 0x66', 'mov rcx, qword ptr [rbx + rax - 0x3fffff6]', 'jne 0x7ffb72d41b53']
UB ID: 66 - ['mov rdx, qword ptr [rbx]', 'mov eax, 0x2e3e62ae', 'dec eax', 'mov r10, qword ptr [rbx + rax - 0x2e3e62a5]', 'add rdx, r10', 'push rax', 'movsx edi, word ptr [rsp + rax - 0x2e3e62ab]', 'add word ptr [rsp + rax*2 - 0x5c7cc556], di', 'mov rsi, rdx', 'jg 0x7ffb72d73526']
UB ID: 67 - ['movsxd r8, r8d', 'mov qword ptr [rsp + rax*2 - 0x5c7cc55a], rdi', 'add eax, 0x3a96efa2', 'pop rsi', 'adc r9, r8', 'btr esi, 0x1b', 'movzx r8d, ax', 'shr r10w, cl', 'adc rdx, r9', 'jmp rdx']
UB ID: 70 - ['jne 0x7ffb72c4500c']
UB ID: 71 - ['rol rsi, 0x2e', 'cqo', 'lea rbx, [rbx + rax*2 + 0x1b6c07b0]', 'jae 0x7ffb72bd0b16']
UB ID: 72 - ['push 0x6cb41c0e', 'sar qword ptr [rsp], 0x46', 'mov rdx, qword ptr [rbx]', 'jnp 0x7ffb72a9cd48']
UB ID: 73 - ['mov r8d, 0x3f34e59d', 'mov rsi, qword ptr [rbx + r8*2 - 0x7e69cb32]', 'push r8', 'or qword ptr [rsp + r8*2 - 0x7e69cb34], r8', 'mov qword ptr ss:[r8 + rdx - 0x3f34e59d], rsi', 'mov esi, r8d', 'lea r10, [r8*8 - 0x5ec25378]', 'movzx edi, byte ptr [r8 + r11 - 0x3f34e59d]', 'neg esi', 'pop rdx', 'cmovno r10w, word ptr [rsp + r8*2 - 0x7e69cb34]', 'xor dil, bpl', 'lea rcx, [r10 + rdx*4 - 0x73c710e8]', 'inc r10d', 'add dil, r10b', 'push r10', 'add qword ptr [rsp + r8*2 - 0x7e69cb34], r8', 'ror dil, 1', 'pop rdx', 'neg dil', 'push r8', 'xor dil, 0x2e', 'xor bpl, dil', 'call 0x7ffb728f4da5']
UB ID: 74 - ['lea rdi, [rsp + rdi + 0x18]', 'mov r8, qword ptr [rdi + r8*2 - 0x7e69cb3a]', 'sub dword ptr [rsp + 0xf], 0xd00fc921', 'mov qword ptr [rbx + 8], r8', 'sbb rbx, -9', 'mov edi, dword ptr [r11 + 1]', 'shr dword ptr [rsp + 0x11], 0xaa', 'sbb r11, -6', 'lea rax, [rdx*4 - 0x22682feb]', 'sub r10b, dl', 'xor edi, ebp', 'inc ax', 'add rax, r10', 'dec edi', 'movsx r8d, r10b', 'cwd', 'ror edi, 1', 'add eax, 0xba15b715', 'sbb edi, r8d', 'mov qword ptr [rsp + r8*8], -0xac2875a', 'sal dword ptr [rsp + r8*2 + 0xc], 0xb2', 'bswap edi', 'cwde', 'xadd dl, ch', 'mov qword ptr [rsp + r8*4 + 0x10], rbp', 'jne 0x7ffb7294eb23']
UB ID: 75 - ['xor dword ptr [rsp + r8*2 + 0x10], edi', 'xchg word ptr [rsp + r8 + 1], r8w', 'mov rbp, qword ptr [rsp + r8 - 0x3d68]', 'movsxd rdi, edi', 'shl byte ptr [rsp + r8*2 - 0x7ae1], 0xc1', 'not dword ptr [rsp + r8 - 0x3d6e]', 'sbb eax, 0x18beef22', 'adc r9, rdi', 'not r10d', 'sar ecx, 0x9d', 'neg rax', 'mov qword ptr [rsp + rcx*4 - 4], r9', 'ret 0x10']
UB ID: 76 - ['lea r11, [r11 + r10*2 - 0x5d25]', 'xor sil, bpl', 'rol dword ptr [rsp + r10*2 - 0x5d28], 0x67', 'mov qword ptr [rsp + r10 - 0x2e8d], -0x5766b050', 'adc sil, al', 'sar qword ptr [rsp + r10*8 - 0x174a4], 0x37', 'or ax, 0x829b', 'rol sil, 1', 'add sil, 0x89', 'not byte ptr [rsp + r10 - 0x2eaf]', 'push rcx', 'not sil', 'mov qword ptr [rsp + r10*8 - 0x175a7], rcx', 'not byte ptr [rsp + r10*4 - 0xbacc]', 'sal word ptr [rsp + r10*2 - 0x5d67], 0xe1', 'ror sil, 1', 'rol byte ptr [rsp + r10*2 - 0x5d65], 0x22', 'ror word ptr [rsp + rax - 0xc28e], 0xaa', 'not sil', 'xor bpl, sil', 'dec word ptr [rsp + r10*2 - 0x5d58]', 'sar byte ptr [rsp + r10 - 0x2ea0], 0xc1', 'lea rsi, [rsp + rsi + 0x18]', 'mov rax, qword ptr [rsi + r10*4 - 0xbad4]', 'mov r10, rax', 'mov rdx, qword ptr [rbx + rcx]', 'or r10, rdx', 'mov edx, r8d', 'and dword ptr [rsp + rcx*2 + 0x13], 0x213e8b94', 'not r10', 'mov qword ptr [rbx + rcx], r10', 'neg byte ptr [rsp + rcx*4 + 0x11]', 'sar qword ptr [rsp + r8 - 0x7db52e8e], 0xb4', 'mov qword ptr [rsp + rcx], r9', 'ret 0x10']
UB ID: 77 - ['mov r8, qword ptr [rbx + rcx]', 'mov r10, qword ptr [rbx + rcx*4 + 8]', 'movsx edx, cl', 'lea rbx, [rbx + rcx + 0x10]', 'mov edi, edx', 'or r8, r10', 'btr rdi, rdx', 'not r8', 'shl cx, 0x2f', 'call 0x7ffb72a4af7b']
UB ID: 78 - ['xor rdi, r8', 'add cl, byte ptr [r11 + rcx*2]', 'xor cl, bpl', 'lea r10, [rdx*8 + 0x292eea03]', 'push r10', 'sar r10b, 0x41', 'ror cl, 1', 'add dl, 0xaf', 'movsx r8d, dx', 'neg cl', 'mov qword ptr [rsp + rdx*4 - 0x2b4], r10', 'bts r8w, 0x20', 'adc cl, 0x90', 'ror cl, 1', 'xor bpl, cl', 'lea rcx, [rsp + rcx + 0x10]', 'or r8b, r10b', 'mov qword ptr [rcx + rdx*2 - 0x15e], rdi', 'neg qword ptr [rsp + rdx - 0xa7]', 'movsx ecx, r10b', 'rol word ptr [rsp + r10 - 0x292ee9fe], 0x85', 'mov eax, dword ptr [rdx + r11 - 0xae]', 'sar dl, cl', 'jp 0x7ffb72d1c765']
UB ID: 79 - ['call 0x7ffb72d50a00']
UB ID: 80 - ['lea esi, [rsi + r10*2 - 0x271e4027]', 'xchg r8w, dx', 'sar qword ptr [rsp + r8*2 + 0x60008], 4', 'adc rdx, 0x26a1c227', 'neg esi', 'mov qword ptr [rsp + rdx*2 - 0x4d44e08e], rdx', 'sal r8d, 0xed', 'lea esi, [rsi + r10 + 0x6113e17]', 'pop rdi', 'push r10', 'ror esi, 1', 'mov qword ptr [rsp + rdi - 0x26a27037], rbp', 'xor dword ptr [rsp + rdi - 0x26a27037], esi', 'shl rdi, 0x3d', 'mov rbp, qword ptr [rsp + rdi*8 + 0x10]', 'mov dword ptr [rbx + rdi*8 + 4], esi', 'mov rdi, qword ptr [rdx + r11 - 0x26a27043]', 'lea rsi, [r8 + r8*8 - 0x54f59d4f]', 'lea rcx, [rax - 0x3be90e7e]', 'and al, dh', 'xor rdi, rbp', 'mov qword ptr [rsp + rdx - 0x26a27037], r8', 'bswap rdi', 'neg r10b', 'call 0x7ffb72cf9af1']
UB ID: 81 - ['mov r8d, esi', 'and cl, dl', 'push rdi', 'push r10', 'btc si, cx', 'dec word ptr [rsp + rdx]', 'xadd r10d, edx', 'inc r10', 'lea eax, [r10 + rax + 0x2940cfcc]', 'push r8', 'sub word ptr [rsp + rsi*4 + 0xe], r8w', 'not eax', 'lea rcx, [rsi + rcx*8 - 0x50c2f3e3]', 'call 0x7ffb72bdd935']
UB ID: 82 - ['mov r10d, 0x743bafb1', 'movsx r8d, r10w', 'mov rsi, qword ptr [rbx + rsi - 0x743bafb1]', 'movzx eax, r10w', 'mov ecx, dword ptr [rax + rsi - 0xafb1]', 'cwde', 'movzx esi, r8w', 'mov dword ptr [rbx + rsi - 0xafad], ecx', 'mov edx, r10d', 'call 0x7ffb72da8477']
UB ID: 491 - ['mov qword ptr [rsp + rax*8 - 0x5f620], 0x7af253a', 'lea rsi, [r10 + r10*2 - 0x586acbe9]', 'neg r8d', 'add eax, dword ptr [rsp + rax - 0xbec0]', 'sbb qword ptr [rsp + rax - 0xbec4], rsi', 'mov qword ptr [rsp + rax - 0xbec4], rbp', 'movzx edi, ax', 'xadd r10w, si', 'xor dword ptr [rsp + rax - 0xbec4], r8d', 'mov ecx, 0xe31fffa4', 'call 0x7ffb72c6bfc3']
UB ID: 84 - ['shl sil, 0x66', 'setne byte ptr [rsp + rdi - 0x35]', 'not eax', 'or r10w, 0xce83', 'mov qword ptr [rsp + rdi*2 - 0x7a], -0x37cebc5b', 'inc word ptr [rsp + rdi*4 - 0xef]', 'lea eax, [rax + rdi + 0x3e117151]', 'bts si, 0x81', 'not eax', 'not qword ptr [rsp + rdi*2 - 0x72]', 'lea eax, [rax + rdx - 0x1c09cd20]', 'mov ecx, 0xedbb31a7', 'jb 0x7ffb72ced128']
UB ID: 85 - ['bswap eax', 'xadd word ptr [rsp + rdi*8 - 0x1e2], cx', 'pop rdi', 'not eax', 'mov qword ptr [rsp], rbp', 'sal cx, 0xe2', 'inc esi', 'not r8b', 'xor dword ptr [rsp], eax', 'xor rdi, rcx', 'pop rbp', 'sub r8d, 0x1b3333ba', 'sub cx, r8w', 'movsxd rax, eax', 'adc r9, rax', 'jmp r9']
UB ID: 86 - ['movzx r10d, byte ptr [r11 + r8 - 0x46afbf4b]', 'xor r10b, bpl', 'rol r10b, 1', 'dec rdi', 'xor r10b, 0xa', 'bswap ecx', 'movsx esi, r8b', 'btr di, ax', 'adc r10b, 0xa1', 'sal r8b, 0x63', 'xor r10b, cl', 'sub r10b, dil', 'not eax', 'xor r10b, 0xb6', 'call 0x7ffb7297216e']
UB ID: 87 - ['push rdx', 'not rax', 'add r10b, dil', 'xor r10b, dil', 'xchg qword ptr [rsp + 8], r8', 'add r8, 0x42fc8e', 'jmp r8']
UB ID: 88 - ['xor bpl, r10b', 'cwde', 'lea r10, [rsp + r10 + 0x18]', 'ror dword ptr [rsp + rsi - 0x3a], 0x2c', 'movzx eax, byte ptr [r11 + rsi - 0x4a]', 'xor al, bpl', 'and byte ptr [rsp + rsi - 0x36], dil', 'sal di, 0xcf', 'sbb al, dil', 'not al', 'ror al, 1', 'not al', 'mov qword ptr [rsp + rsi*8 - 0x258], 0x448b2a03', 'neg qword ptr [rsp + rsi*2 - 0x95]', 'xor al, 0xad', 'xor bpl, al', 'mov edx, 0x1706ce2b', 'movzx r10d, dl', 'mov r8d, dword ptr [r11 + rdx*2 - 0x2e0d9c56]', 'movzx edi, dl', 'xor r8d, ebp', 'movzx ecx, dil', 'shl dx, 0xa5', 'ror r8d, 1', 'lea rsi, [rdx + rcx*8 + 0x719ec1b2]', 'inc r8d', 'lea rsi, [rsi*2 + 0x4e9d55b9]', 'xor r8d, 0x16348688', 'bts si, dx', 'ror dl, 0x67', 'inc r8d', 'btr edx, r10d', 'jae 0x7ffb728f353e']
UB ID: 89 - ['ror r8d, 3', 'sal r10b, 0x26', 'sbb ecx, edi', 'push rbp', 'and cl, 0x3d', 'movzx eax, cl', 'xor dword ptr [rsp + rdx - 0x1706c5c2], r8d', 'lea rcx, [rcx + r10 + 0x5bb14d2a]', 'cwde', 'pop rbp', 'not cl', 'and edi, eax', 'mov dword ptr [rbx + rdx*2 - 0x2e0d8b88], r8d', 'sub r10, rdx', 'mov rdx, qword ptr [r11 + rdx*2 - 0x2e0d8b80]', 'shl di, 0x4e', 'not si', 'add ax, 0x1c05', 'ror r10b, 0xa4', 'lea rdx, [r10 + rdx + 0x456cae70]', 'neg rdx', 'lea r8, [r10*8 - 0x7fe7fbef]', 'rol rdx, 1', 'xor rbp, rdx', 'or r10d, eax', 'mov qword ptr [rbx + rdi*2 - 0x800c], rdx', 'ja 0x7ffb72f0df4f']
UB ID: 90 - ['ror dx, 1', 'mov qword ptr [rsp + rdi - 0x4000], 0x6f0ac19b', 'sub dx, 0xc9ba', 'push r10', 'or edi, 0x7da86d19', 'pop rsi', 'ror dx, 1', 'or dword ptr [rsp + rax*2 - 0x32], 0xbf0b5da2', 'adc dx, 0xee9e', 'push rax', 'ror eax, 0x70', 'xor bp, dx', 'cwde', 'sar r10w, 0xe4', 'lea rdx, [rsp + rdx + 0x10]', 'mov rcx, qword ptr [rax + rdx]', 'jns 0x7ffb72bd5c92']
UB ID: 91 - ['mov esi, 0xd6b5ba3c', 'rol si, 0x4a', 'mov rdi, qword ptr [rbx]', 'sal esi, 0xa7', 'mov r10d, 0x2b2aa382', 'mov rdx, qword ptr [rdi + rsi - 0x5af97400]', 'movsx eax, r10b', 'sub r10d, esi', 'sal r10b, 0x27', 'mov qword ptr [rbx + rsi - 0x5af97400], rdx', 'call 0x7ffb72caac55']
UB ID: 92 - ['xor r8b, bpl', 'mov qword ptr [rsp + rdi*2 - 0x40000a], -0x54d64de5', 'sub dword ptr [rsp + rdi*2 - 0x400003], esi', 'neg r8b', 'lea r10, [rdi + rax*2 + 0x4f36e825]', 'not byte ptr [rsp + rdi*2 - 0x400003]', 'ror byte ptr [rsp + rdi - 0x1ffffd], 0xe2', 'adc r8b, 0x33', 'and word ptr [rsp + rdi*4 - 0x800008], r10w', 'adc r10w, word ptr [rsp + rdi - 0x1ffffe]', 'neg r8b', 'xor r8b, al', 'xor bpl, r8b', 'cdqe', 'lea r8, [rsp + r8 + 0x10]', 'call 0x7ffb72dde1b3']
UB ID: 93 - ['dec r8b', 'push r10', 'xor bpl, r8b', 'neg dword ptr [rsp + rcx - 0x6134a22a]', 'pop rdi', 'xadd ax, r10w', 'adc r8, rsp', 'mov rcx, qword ptr [r8 + rcx - 0x6134a22e]', 'push r10', 'cwd', 'mov qword ptr [r10 + rbx - 0x1f], rcx', 'call 0x7ffb72db4744']
UB ID: 94 - ['mov qword ptr [rbx + r10*2 - 0x40], rax', 'dec byte ptr [rsp + r10*4 - 0x7c]', 'mov esi, dword ptr [r11 + r10*4 - 0x7f]', 'xor esi, ebp', 'mov eax, 0x4c831738', 'xor r10d, 0xb102621e', 'dec esi', 'ror esi, 1', 'cdqe', 'dec esi', 'not cl', 'bswap esi', 'mov qword ptr [rsp + rax - 0x4c831738], rbp', 'or ecx, eax', 'xor dword ptr [rsp + rcx - 0x4c8317ff], esi', 'pop rbp', 'xchg rax, r10', 'and r8, 0xfffffffff195a6b5', 'movsxd rsi, esi', 'add r9, rsi', 'movsx edx, ax', 'movzx edi, byte ptr [r11 + rcx - 0x4c8317fa]', 'dec r8w', 'lea r11, [r11 + rcx - 0x4c8317f9]', 'jne 0x7ffb72bf9868']
UB ID: 95 - ['mov qword ptr [rsp + rsi], 0x73ab5b2', 'neg eax', 'lea eax, [rax + rsi*2 - 0x3f027520]', 'and di, word ptr [rsp + rsi + 5]', 'lea r10, [rcx*4 + 0x7b33f5ab]', 'adc cx, dx', 'mov qword ptr [rsp + rsi], rbp', 'jl 0x7ffb72d12ae1']
UB ID: 509 - ['mov rax, qword ptr [rbx]', 'mov r8d, 0xef2a0e08', 'movzx r10d, r8w', 'mov rdi, qword ptr [rbx + r10 - 0xe00]', 'and r8, 0xffffffff99bbb5be', 'seto r8b', 'movsx edx, r8w', 'adc rax, rdi', 'mov rsi, rax', 'mov ecx, r8d', 'ror rdx, cl', 'mov r10d, ecx', 'lea r8d, [rsi + r8 + 0x44e49b2e]', 'ror r8d, 1', 'sub al, 0x28', 'adc r10w, si', 'or eax, eax', 'not r8d', 'jns 0x7ffb729361b0']
UB ID: 98 - ['xor edx, ebp', 'neg edx', 'not qword ptr [rsp + r8*4 - 0x80f00]', 'xor r8b, 0x37', 'lea edx, [rdx + rdi*2 - 0x310c896c]', 'bswap edx', 'ror edx, 2', 'bswap r8', 'lea rcx, [rdi*2 + 0x729e9c18]', 'lea edx, [rdx + rdi*4 - 0x35d193b3]', 'sal word ptr [rsp + rdi - 0x469afb8a], 0xab', 'mov qword ptr [rsp + rdi - 0x469afb8f], rbp', 'xor dword ptr [rsp + rdi - 0x469afb8f], edx', 'mov esi, 0x50a7d0bb', 'inc dil', 'xor rdi, 0xffffffffee22e83e', 'pop rbp', 'sal r10w, 0x83', 'setnp sil', 'movsxd rdx, edx', 'adc r9, rdx', 'lea rax, [rdi + rbx + 0x5747ec5a]', 'push rcx', 'mov r10, rax', 'mov rdi, qword ptr ss:[r10 + rsi - 0x50a7d000]', 'lea rdx, [r8*2 - 0x10c2d2d7]', 'and dword ptr [rsp + rsi - 0x50a7cfff], edx', 'mov qword ptr [rsi + rbx - 0x50a7d000], rdi', 'mov qword ptr [rsp + rsi - 0x50a7d000], r9', 'ret']
UB ID: 99 - ['mov r10d, 0x40b8f9a2', 'mov rdi, qword ptr [rbx + r10 - 0x40b8f9a2]', 'lea rdx, [r10*4 - 0x79dabbd0]', 'or r10, 0xffffffffa523a11f', 'movzx ecx, byte ptr [r11 + r10*4 + 0x69101904]', 'not r10', 'xor cl, bpl', 'ror cl, 1', 'ror edx, 0x33', 'mov r8d, r10d', 'movzx eax, r8w', 'neg cl', 'bswap rax', 'add r10d, 0xe298ffa4', 'xor cl, 0x28', 'lea r8, [r8 + rdx*2 + 0x42278f03]', 'or dx, 0x308b', 'jge 0x7ffb72d56de2']
UB ID: 100 - ['bswap r10d', 'cdqe', 'btc si, ax', 'not r10d', 'btr dx, 0x85', 'neg r10d', 'btc rdx, 0x3c', 'btc rdx, rsi', 'push rbp', 'rol dx, 0xc7', 'xor dword ptr [rsp + rax], r10d', 'rol dl, 0xc7', 'and rsi, 0xffffffffeb87a49f', 'sal al, 0x86', 'pop rbp', 'movsxd r10, r10d', 'bswap rsi', 'jp 0x7ffb72e71c68']
UB ID: 101 - ['push rbp', 'or cx, di', 'xor dword ptr [rsp + rdi - 0x32bdfaf1], edx', 'ror cx, 0x26', 'pop rbp', 'movsxd rdx, edx', 'lea rdi, [r10 + rdi*2 - 0xae16671]', 'neg r10d', 'add r9, rdx', 'mov rdx, qword ptr [rbx + rcx - 0x32bdffff]', 'xchg r8d, ecx', 'mov cx, word ptr [rdx + r8*2 - 0x657bfffe]', 'mov di, cx', 'movsx esi, r10b', 'sar rsi, 0x8b', 'movsx ecx, r8w', 'mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]', 'add di, r8w', 'movzx r8d, r10w', 'push r10', 'mov word ptr [rsi + rbx - 0x1ffff7], di', 'movsx edi, r10w', 'lea rbx, [rbx + rsi - 0x1ffff7]', 'mov qword ptr [rsp + rsi - 0x1fffff], r9', 'ret']
UB ID: 102 - ['mov qword ptr [rsp], 0x56abfb2c', 'rol r8b, 1', 'call 0x7ffb72972dfd']
UB ID: 103 - ['mov eax, dword ptr [rsp + 0xb]', 'push rax', 'sub r8b, 0xa8', 'not r8b', 'dec r8b', 'movsx esi, al', 'mov qword ptr [rsp + rax - 0x4e], rsi', 'dec esi', 'xor bpl, r8b', 'pop rax', 'lea rcx, [rax + rax*2 - 0x6dd556e7]', 'lea r8, [rsp + r8 + 0x10]', 'mov rdi, qword ptr [rax + r8 - 0x56]', 'mov qword ptr [rbx + rax - 0x5e], rdi', 'pop rax', 'mov r8d, dword ptr [r11 + rax - 0x55]', 'lea r10, [rsi*4 + 0x1629549e]', 'lea r11, [rax + r11 - 0x51]', 'xor r8d, ebp', 'inc byte ptr [rsp + rax*8 - 0x2ab]', 'shl rcx, 0x49', 'sal si, 0x6d', 'dec r8d', 'ror r8d, 1', 'dec r8d', 'cdq', 'bswap r8d', 'mov qword ptr [rsp + rax - 0x56], rbp', 'or eax, edx', 'cdqe', 'xor dword ptr [rsp + rax*2 - 0xac], r8d', 'pop rbp', 'movsx edi, r10w', 'push rdx', 'not rdi', 'movsxd r8, r8d', 'push rax', 'shl byte ptr [rsp + rax - 0x56], 0xa4', 'add r9, r8', 'xchg byte ptr [rsp + rax - 0x48], dl', 'call 0x7ffb72d5ee77']
UB ID: 104 - ['call 0x7ffb72964937']
UB ID: 105 - ['mov rax, qword ptr [rbx]', 'mov qword ptr [rsp], -0x85cb880', 'sal word ptr [rsp + rdx - 0x2213b869], 0x8f', 'lea rbx, [rdx + rbx - 0x2213b866]', 'lea rdi, [r8*2 - 0x1875a862]', 'adc edx, dword ptr [rsp + rdx - 0x2213b86d]', 'mov qword ptr [rsp + rdx - 0x2213b96d], r9', 'ret 0x10']
UB ID: 106 - ['mov r8d, 0x7894e2a1', 'lea rax, [r8 + r8*8 + 0x60018c3a]', 'mov rcx, qword ptr [rbx + r8 - 0x7894e2a1]', 'mov r8, qword ptr [rbx + r8 - 0x7894e299]', 'movzx esi, ax', 'add rcx, r8', 'mov qword ptr [rbx + rsi - 0x83db], rcx', 'mov esi, dword ptr [rsi + r11 - 0x83e3]', 'mov ecx, dword ptr [r11]', 'mov edx, 0x2c29210a', 'mov edi, edx', 'xor ecx, ebp', 'push rdi', 'neg ecx', 'sar dx, 0xca', 'sbb dword ptr [rsp + rdx*2 - 0x5852000e], edx', 'movsx r8d, dx', 'sbb ecx, 0x859d3727', 'not r8w', 'adc dl, 0x31', 'and word ptr [rsp + r10 + 0xc], r10w', 'mov qword ptr [rsp + r10], rsi', 'neg qword ptr [rsp + r10*2 + 9]', 'xor bpl, dl', 'shl qword ptr [rsp + r10 + 5], 0xbf', 'lea rdx, [rsp + rdx + 0x18]', 'mov byte ptr [rsp + r10*8 + 0xc], sil', 'shr r10d, cl', 'jne 0x7ffb72bc1057']
UB ID: 107 - ['sal rdx, 0xe', 'inc r8d', 'movzx eax, r10w', 'not r8d', 'push rax', 'sub r8d, 0xe9243939', 'btc rax, 0x2e', 'pop rdi', 'not r8d', 'call 0x7ffb72c0360d']
UB ID: 108 - ['dec dword ptr [rsp + r8 - 0x462c01fa]', 'setne sil', 'lea rcx, [r8 + rcx + 0x30c33446]', 'neg rcx', 'inc rcx', 'ror r8b, 0xa1', 'cmovno ax, word ptr [rsp + r8 - 0x462c01f2]', 'cwde', 'xor rcx, 0xffffffff95af2610', 'neg rcx', 'sal dil, 0xc3', 'sar dx, 0xc1', 'btr rdi, 0x9b', 'xor rbp, rcx', 'mov qword ptr [rbx + rax*4 - 0x410], rcx', 'bts edx, esi', 'mov eax, dword ptr [rax + r11 - 0xf7]', 'sbb r8, -0x76f0d6d3', 'or dword ptr [rsp + 7], r8d', 'xor eax, ebp', 'lea rcx, [rdx*4 + 0x333a9e34]', 'shl dil, 0x87', 'neg eax', 'xor r8w, 0x3dbd', 'setno dil', 'lea eax, [rax + r8 - 0x23818e3e]', 'call 0x7ffb72c53b73']
UB ID: 109 - ['push r8', 'xor r10, 0xffffffff95af2610', 'dec ax', 'btr si, dx', 'cwd', 'neg r10', 'xor rbp, r10', 'pop rdi', 'mov qword ptr [rbx + rax*8 - 0x380], r10', 'lea rbx, [rbx + rax*4 - 0x1cc]', 'or qword ptr [rsp + rax*4 - 0x19c], rax', 'pop rcx', 'pop rdi', 'pop r10', 'pop rcx', 'jge 0x7ffb72eb83a2']
UB ID: 111 - ['mov edi, 0xb5077482', 'mov r8, qword ptr [rbx]', 'movsx esi, dil', 'mov rax, qword ptr [rbx + 8]', 'push rdi', 'ror word ptr [rsp + 3], 0xac', 'adc r8, rax', 'movsx eax, dil', 'shl eax, 0xc2', 'mov rcx, r8', 'sal rax, 0x9a', 'mov r10, qword ptr [rbx + 0x10]', 'and rcx, r10', 'lea r8, [rsi + rdi*8 - 0x4bc9cd4a]', 'sal word ptr [rsp + 3], 0xe7', 'not rcx', 'lea rsi, [rdi*8 + 0x733da337]', 'or qword ptr [rsp], 0xffffffffa80c4cbf', 'or word ptr [rsp + 6], r8w', 'mov qword ptr [rbx + 0x10], rcx', 'call 0x7ffb72cab9f8']
UB ID: 112 - ['xor edi, ebp', 'shl esi, 0x11', 'neg edi', 'lea edi, [rdi + rsi - 0x3264924e]', 'mov qword ptr [rsp + 8], rax', 'lea rdx, [rsi + 0x6c1853be]', 'btr dx, si', 'bswap edi', 'ror edi, 2', 'cdqe', 'lea edi, [rdi + rax*8 - 0x1b65a577]', 'shl word ptr [rsp + rax - 0x1ffffff6], 0xe1', 'mov qword ptr [rsp + rax*4 - 0x7ffffff8], rbp', 'cmovb eax, esi', 'adc rax, rcx', 'xor dword ptr [rsp + 8], edi', 'ror eax, 0x5f', 'mov rbp, qword ptr [rsp + rax*2 - 0x7ffe9ff8]', 'call 0x7ffb72c5ee93']
UB ID: 114 - ['movzx edx, byte ptr [r11]', 'mov ecx, 0xa636301e', 'xor dl, bpl', 'lea r9, [rcx + rcx*8 - 0x38e81b60]', 'movsx r8d, r9b', 'dec dl', 'sub r9b, 0x2a', 'mov r11d, 0xb2ba3cac', 'rol dl, 1', 'neg dl', 'btr ecx, r11d', 'adc ecx, 0x7a8af914', 'mov esi, r9d', 'not dl', 'call 0x7ffb72d9a9d5']
UB ID: 115 - ['neg byte ptr [rsp + rdx + 3]', 'jge 0x7ffb72b88eab']
UB ID: 116 - ['xor dword ptr [rsp + rdx*2 + 0x18], r9d', 'rol word ptr [rsp + rdx*8 + 0xf], 0xa8', 'mov r10, qword ptr [rsp + rdx + 0x18]', 'movsxd r9, r9d', 'adc dword ptr [rsp + rdx*2 + 0x10], esi', 'adc rbp, r9', 'mov qword ptr [rsp + rdx], rbp', 'ret 0x18']
UB ID: 117 - ['mov esi, 0x7999d01a', 'mov edx, esi', 'mov rcx, qword ptr [rsi + r8 - 0x7999d01a]', 'mov r9b, byte ptr [rbx + rsi - 0x7999d01a]', 'lea r11, [rdx + rsi*8 - 0x1ec425ee]', 'mov edi, edx', 'xor r9b, r10b', 'dec r9b', 'neg r9b', 'xchg rax, rdi', 'xor r9b, 0x9e', 'cdq', 'call 0x7ffb728bd997']
UB ID: 118 - ['dec r9b', 'and rdi, 0x1a373c9a', 'ror edi, 0xb5', 'neg r9b', 'push r11', 'add dword ptr [rsp + rsi - 0x7999d016], esi', 'xor r10b, r9b', 'cwd', 'or rax, rdi', 'mov qword ptr [rsp + rdx*2 - 0x1fff6], rdi', 'lea r9, [rsp + r9 + 0x10]', 'adc rax, 0x2831ca3e', 'mov qword ptr [rsi + r9 - 0x7999d01a], rcx', 'mov edx, dword ptr [rbx + rsi - 0x7999d019]', 'bswap rax', 'xor r11d, dword ptr [rsp + rsi - 0x7999d019]', 'xor edx, r10d', 'inc edx', 'lea rsi, [rax*4 - 0x7c7863f7]', 'not edx', 'or dword ptr [rsp + r11 - 0x39838ed6], eax', 'inc dword ptr [rsp + r11*2 - 0x73071da0]', 'ja 0x7ffb72e0837d']
UB ID: 119 - ['rol r11w, 1', 'shr al, cl', 'adc byte ptr [rsp + 0x1c], 0x1b', 'adc dword ptr [rsp + 0xf], ecx', 'sbb r11w, 0x7c26', 'not r11w', 'or r9, qword ptr [rsp + 2]', 'dec al', 'xor r10w, r11w', 'xor r9, 0xffffffffb9255b97', 'call 0x7ffb72aa787a']
UB ID: 120 - ['lea r11, [rsp + r11 + 0x28]', 'adc eax, ecx', 'neg r9d', 'xor esi, dword ptr [rsp + r9 - 0x7975e905]', 'mov qword ptr [r11 + rsi - 0x1f1db300], rdi', 'lea r11, [rax + rcx*8 - 0x12756bc5]', 'mov edx, dword ptr [rsp + rsi*2 - 0x3e3b65e4]', 'inc byte ptr [rsp + rsi - 0x1f1db2f5]', 'mov qword ptr [rsp + rsi*4 - 0x7c76cc00], rbp', 'ret 0x20']
UB ID: 121 - ['lea rdx, [rsp + rdx + 0x18]', 'mov qword ptr [rsp + 8], rcx', 'mov qword ptr [rdx], rdi', 'mov r9d, dword ptr [rbx + 1]', 'mov esi, ecx', 'cbw', 'bts rcx, 0xa2', 'xor r9d, r10d', 'mov qword ptr [rsp + 8], rax', 'inc r9d', 'cdqe', 'sal al, 0xc3', 'push rax', 'ror r9d, 2', 'or byte ptr [rsp + rax + 0x78260106], 0x27', 'movsx edi, sil', 'dec r9d', 'rol r9d, 3', 'cdqe', 'and ecx, eax', 'mov qword ptr [rsp + rax + 0x78260100], r10', 'sub di, ax', 'push rcx', 'xor dword ptr [rsp + rax + 0x78260108], r9d', 'call 0x7ffb72d6c847']
UB ID: 122 - ['btc eax, 0x85', 'lea rax, [rsp + rax - 0x7d379f42]', 'jae 0x7ffb728bbe12']
UB ID: 123 - ['call 0x7ffb72c9da56']
UB ID: 124 - ['jmp rbp']
UB ID: 125 - ['mov eax, 0xbc205814', 'dec cx', 'mov rcx, qword ptr [r8]', 'mov rdi, qword ptr [rcx]', 'jne 0x7ffb72c476f5']
UB ID: 126 - ['cqo', 'xor r9, qword ptr [rsp + rcx - 0x5814]', 'not r11d', 'mov esi, dword ptr [rsp + rdx + 4]', 'jns 0x7ffb72d84dfb']
UB ID: 127 - ['call 0x7ffb72cc9702']
UB ID: 128 - ['movsx edx, di', 'mov r11d, edx', 'movzx edi, byte ptr [rdi + rbx - 0x78a2de1c]', 'sub r11d, 0xc50b6183', 'lea r9, [r11*4 - 0x5d40cdd8]', 'not edx', 'xor dil, r10b', 'btc r9, rdx', 'not dx', 'sbb dil, 4', 'rol dl, 0xa1', 'push r9', 'xor dil, r9b', 'push r9', 'neg dil', 'add qword ptr [rsp + rdx - 0xde33], r9', 'and word ptr [rsp + rdx - 0xde35], r11w', 'lea rcx, [r11*8 + 0x109e031]', 'inc dil', 'add qword ptr [rsp + rdx*4 - 0x378d8], 0x13a995a7', 'and r11w, 0x312', 'sub dx, 0x6b5', 'xor r10b, dil', 'lea rdi, [rsp + rdi + 0x10]', 'btc r9w, r11w', 'jae 0x7ffb72ca928c']
UB ID: 129 - ['mov dword ptr [r8 + rcx*2 - 0x82], eax', 'mov eax, 0xc48b9f19', 'lea r9, [r8 + rcx*2 - 0x82]', 'cbw', 'mov rdx, r9', 'movsx edi, word ptr [rsp + rcx*2 - 0x7d]', 'movzx r9d, ax', 'dec dword ptr [rsp + rcx*4 - 0x103]', 'mov eax, dword ptr ss:[rdx + rcx - 0x43]', 'mov qword ptr [rsp + rcx - 0x43], 0x7c968f06', 'jge 0x7ffb72e5eb9e']
UB ID: 130 - ['mov r9d, dword ptr [r8]', 'mov esi, 0x53341499', 'movzx edx, si', 'push rsi', 'mov eax, dword ptr [r8 + rsi - 0x53341495]', 'not r9d', 'ror rdx, 0xbf', 'not eax', 'mov r11d, esi', 'lea rcx, [r11 + r11*4 + 0x5e14ada6]', 'or r9d, eax', 'mov dword ptr [r8 + rdx*4 - 0xa4c4], r9d', 'call 0x7ffb72dafb37']
UB ID: 131 - ['xor eax, r10d', 'movzx esi, dl', 'ror rsi, cl', 'mov edi, r9d', 'sbb eax, 0xfc81ef17', 'neg eax', 'dec eax', 'btc rdi, rsi', 'btr rcx, rsi', 'neg eax', 'call 0x7ffb72dff7c1']
UB ID: 132 - ['mov esi, 0xda2ca506', 'not sil', 'mov dil, byte ptr [rbx + rdi - 6]', 'movsx r9d, si', 'xor dil, r10b', 'ror dil, 1', 'movzx r11d, si', 'not dil', 'xchg rsi, r11', 'mov eax, esi', 'bts si, 0x15', 'dec dil', 'sar r11d, 0xd4', 'and sil, r11b', 'xor dil, 0x30', 'sar r11, 0x5f', 'xor r10b, dil', 'bswap esi', 'add rdi, rsp', 'mov ecx, 0x578ee096', 'mov edx, dword ptr [rdi + r11*2 - 2]', 'rol r9, cl', 'shl sil, 0x24', 'sal r9b, 0x26', 'mov dword ptr [r8 + r11*2 - 6], edx', 'mov edi, dword ptr [rbx + r11*2 - 1]', 'btc r11w, 0x22', 'lea rdx, [rsi + r9*2 + 0x5a1bca8d]', 'xor edi, r10d', 'ror edi, 3', 'lea rcx, [rdx*2 + 0xf2bd0ab]', 'shr rax, 0xcf', 'adc edi, eax', 'neg edi', 'xor edi, 0x843f2b8e', 'call 0x7ffb72c8425d']
UB ID: 133 - ['movsxd rcx, ecx', 'adc rbp, rcx', 'mov r11d, dword ptr [rdx + rbx + 4]', 'xor r11d, r10d', 'not r11d', 'rol r11d, 2', 'inc sil', 'xor rdx, qword ptr [rsp + rdx + 4]', 'xor r11d, 0x84bdb4a7', 'push rdi', 'xor di, dx', 'bswap r11d', 'sal r9w, 0x6e', 'lea r11d, [r11 + r9*2 - 0x3dc0d21d]', 'pop rax', 'xor word ptr [rsp + rdi + 0xe], ax', 'mov qword ptr [rsp + rdi + 0x10], r10', 'cwd', 'not di', 'mov dword ptr [rsp + rdi - 0xfff7], edi', 'xor dword ptr [rsp + rdi*2 - 0x1ffee], r11d', 'or rdx, qword ptr [rsp + rdi*2 - 0x1fffa]', 'shl si, 0x84', 'movsx ecx, word ptr [rsp + rdi - 0xfff6]', 'mov r10, qword ptr [rsp + rdi*2 - 0x1ffee]', 'rol qword ptr [rsp + rdi - 0xfffc], 0xa0', 'push rdx', 'mov dword ptr [r8 + rdi*2 - 0x20002], r11d', 'or r9w, ax', 'mov r11, qword ptr [rbx + rdi*2 - 0x1fff6]', 'lea rbx, [rdi + rbx - 0xffef]', 'rol word ptr [rsp + rdi*8 - 0x7fff4], 0xcd', 'cbw', 'cmovb rdi, qword ptr [rsp + rdi - 0xffef]', 'xor r11, r10', 'add word ptr [rsp + rax*2 + 7], cx', 'neg r11', 'btr rsi, rdi', 'lea r11, [r11 + rax*2 + 0x4e3c2026]', 'sbb dl, 0x83', 'sar r9w, 0x2d', 'rol r11, 2', 'xadd qword ptr [rsp + rax + 0x10], r9', 'lea r11, [r11 + rax*2 - 0x10804886]', 'not r11', 'xor r10, r11', 'add dword ptr [rsp + 0x11], edx', 'mov qword ptr [r8 - 0xc], r11', 'sub rcx, rcx', 'mov r11d, dword ptr [rsp + rcx*2 + 0x12]', 'and rsi, qword ptr [rsp + rcx*4]', 'lea r8, [r8 + rcx*4 - 0xc]', 'and dword ptr [rsp + rcx*4], edx', 'sar dword ptr [rsp + rcx + 0x14], 0xdc', 'pop r9', 'pop rax', 'pop rax', 'pop r9', 'jns 0x7ffb72b05b5c']
UB ID: 134 - ['lea rbx, [rbx + rdx + 6]', 'xor sil, r10b', 'lea rcx, [r11*2 - 0x116eba7f]', 'inc dword ptr [rsp + r11 - 0x13a48b17]', 'rol sil, 1', 'lea rax, [r11*8 - 0x606607ec]', 'rol rdi, 0x74', 'neg sil', 'cbw', 'xchg byte ptr [rsp + r11*2 - 0x27491648], al', 'dec sil', 'rol sil, 1', 'or cl, byte ptr [rsp + r11 - 0x13a48b1e]', 'or cl, byte ptr [rsp + r11*2 - 0x27491658]', 'inc sil', 'xor r10b, sil', 'neg r11', 'adc word ptr [rsp + r11 + 0x13a48b41], 0xff99', 'lea rsi, [rsp + rsi + 0x20]', 'shr di, 0xe3', 'sub cl, 0x2a', 'mov r11, qword ptr [rsi + r11*2 + 0x27491666]', 'sub byte ptr [rsp + rdx + 0xc], dil', 'and dword ptr [rsp + rdx*2 + 0x1c], 0x6ea3f432', 'mov qword ptr [rsp + rdx], rcx', 'mov qword ptr [r8 + rdx - 4], r11', 'lea r8, [rdx + r8 - 4]', 'pop rax', 'pop rdi', 'pop r9', 'pop rdx', 'ja 0x7ffb72b05b5c']
UB ID: 135 - ['add esi, eax', 'add rbp, rcx', 'xor r11, qword ptr [r11 + rbx + 5]', 'sub rax, 0x7e84b31a', 'jb 0x7ffb72de4ccb']
UB ID: 136 - ['add rax, -0x2dc14b7a', 'lea rbx, [rbx + rdi + 0x2ed33ca4]', 'movsx ecx, r9b', 'xor cx, 0xe4a3', 'xor r11, r10', 'cwde', 'neg si', 'bswap r11', 'add r9, rcx', 'dec r11', 'call 0x7ffb72cb8221']
UB ID: 137 - ['mov rdx, qword ptr [r8]', 'mov r9d, 0xe32af400', 'mov r11, qword ptr [r8 + 8]', 'lea rsi, [r9 + r9 - 0x6bc79800]', 'add r8, 0x10', 'movsx eax, r9b', 'push rsi', 'push rsi', 'mov qword ptr ss:[rdx + rax*4], r11', 'mov r9d, dword ptr [rax + rbx]', 'movzx ecx, si', 'and dword ptr [rsp + rax + 7], 0x2305bab', 'dec dword ptr [rsp + rax + 2]', 'lea rbx, [rbx + rax*8 + 4]', 'bts esi, ecx', 'xor r9d, r10d', 'bswap rcx', 'not r9d', 'ror r9d, 1', 'sal cl, 0xc6', 'setne sil', 'xor r9d, 0xc59adc0d', 'sar esi, 0x59', 'sbb r9d, 0xbeb4dda3', 'pop rdx', 'not r9d', 'cwde', 'movsx edi, si', 'dec r9d', 'cqo', 'dec dl', 'mov qword ptr [rsp + rsi*2 - 0x5a], r10', 'push rsi', 'mov r11d, edx', 'xor dword ptr [rsp + rsi*4 - 0xac], r9d', 'mov r10, qword ptr [rsp + rsi - 0x25]', 'sal al, 0xe1', 'jno 0x7ffb72c65445']
UB ID: 138 - ['mov qword ptr [rsp + rdi*4 + 0x20], r10', 'call 0x7ffb72eff0f9']
UB ID: 139 - ['mov r10, qword ptr [rsp + rdi + 0x20]', 'sal sil, 0xa1', 'movsxd r9, r9d', 'inc rcx', 'push rdx', 'not dx', 'adc rbp, r9', 'mov qword ptr [rsp + rdi*8], rbp', 'ret 0x28']
UB ID: 140 - ['movsx r9d, si', 'movzx ecx, r9b', 'and r9d, eax', 'not r9b', 'push r9', 'lea r11, [rcx + r11 - 0x7ebc63d6]', 'pop rax', 'xor r10, r11', 'mov qword ptr [r8 + rcx - 0x3b], r11', 'mov esi, dword ptr [rcx + rbx - 0x2b]', 'cdq', 'and r9b, 0x39', 'xor esi, r10d', 'call 0x7ffb72bef813']
UB ID: 141 - ['mov rdi, r8', 'mov edx, 0xdc3ab90e', 'mov r11d, 0x28046523', 'shr r11d, 0xc7', 'mov qword ptr [r8 + r11*2 - 0xa0119c], rdi', 'movzx esi, word ptr [r11 + rbx - 0x5008ca]', 'lea rax, [rdx*2 - 0x4ffc2676]', 'mov ecx, r11d', 'xor si, r10w', 'mov edi, 0x3895853b', 'add si, 0x2b2f', 'mov r9d, ecx', 'ror si, 1', 'add r11, -0x1dfc4eca', 'not r9b', 'sbb si, 0x3c00', 'call 0x7ffb72c6a757']
UB ID: 142 - ['mov qword ptr [rsp + rdi*2 - 0x735c9e54], rax', 'movsxd rdx, edx', 'push rdi', 'xchg byte ptr [rsp + rax*2 - 0x1a6e6], dil', 'add rbp, rdx', 'pop rax', 'movzx esi, al', 'sub r9, qword ptr [rsp + rax*2 - 0x735c9e54]', 'mov edi, dword ptr [rbx + rdi - 0x39ae4f73]', 'lea rbx, [rbx + rax - 0x39ae4f22]', 'call 0x7ffb729dd9dd']
UB ID: 143 - ['mov qword ptr [rsp + rax - 0x39ae4f22], r9', 'adc qword ptr [rsp + rax - 0x39ae4f22], 0x5c25a903', 'xor edi, r10d', 'mov edx, 0xa72c34be', 'sal dword ptr [rsp + rax - 0x39ae4f22], 0x57', 'ror edi, 2', 'bswap edi', 'cwde', 'ror dword ptr [rsp + rax*4 - 0x13c9e], 0x90', 'inc edi', 'sub cx, r9w', 'xadd qword ptr [rsp + rax - 0x4f22], rdx', 'rol edi, 2', 'neg edi', 'and dx, 0xc68b', 'xchg byte ptr [rsp + rax*4 - 0x13c9f], r9b', 'mov qword ptr [rsp + rax*2 - 0x9e4c], r10', 'bswap rdx', 'mov qword ptr [rsp + rsi - 0x2a], rdx', 'xor dword ptr [rsp + rax*4 - 0x13ca0], edi', 'and byte ptr [rsp + rsi - 0x24], 0x32', 'mov r10, qword ptr [rsp + rax - 0x4f22]', 'mov dword ptr [r8 + rax*4 - 0x13ca8], edi', 'jb 0x7ffb72b533be']
UB ID: 144 - ['mov qword ptr [rsp + rax - 0x4f2a], rbp', 'ret 8']
UB ID: 145 - ['mov ecx, dword ptr [rbx]', 'mov esi, 0xf3b40e3a', 'xor ecx, r10d', 'rol esi, 0x25', 'jae 0x7ffb72900871']
UB ID: 146 - ['bswap esi', 'ror ecx, 1', 'mov edi, 0xf40b6f93', 'movzx r11d, dil', 'xor ecx, 0xfaef885', 'lea rax, [r11*4 - 0x63db297e]', 'cbw', 'inc ecx', 'bswap ecx', 'ror sil, 0x83', 'sar sil, 0x84', 'lea ecx, [rcx + rax*2 - 0x56b1db4]', 'mov edx, eax', 'xchg edi, esi', 'push r10', 'cmovae rax, rdx', 'xor dword ptr [rsp + r11*2 - 0x126], ecx', 'pop r10', 'mov r9d, 0x7ea7ad17', 'add si, r9w', 'shl r9d, 0x2a', 'movsxd rcx, ecx', 'push rdx', 'adc rbp, rcx', 'call 0x7ffb72a71121']
UB ID: 147 - ['mov eax, dword ptr [r8 + r11*2 - 0x126]', 'xchg edi, esi', 'mov esi, dword ptr [r8 + rsi - 0x4ec781f8]', 'or eax, esi', 'shr r11d, 0xb', 'not r11b', 'not eax', 'sar qword ptr [rsp + r11*4 - 0x3f4], 0xa3', 'movzx ecx, r9w', 'mov dword ptr [r8 + r11*2 - 0x1fa], eax', 'dec dil', 'not r11b', 'jp 0x7ffb729bf974']
UB ID: 148 - ['mov eax, dword ptr [r11 + rbx + 4]', 'push r9', 'lea rbx, [r11 + rbx + 8]', 'btr r9w, 0xaa', 'sal r11w, 0x22', 'xor eax, r10d', 'mov qword ptr [rsp + r11 + 8], r9', 'call 0x7ffb729d2d09']
UB ID: 149 - ['shl r11w, 0x62', 'sbb edx, r9d', 'pop rsi', 'not word ptr [rsp + r11 + 0xd]', 'btc eax, 0x85', 'lea rax, [rsp + rax - 0x7d379f42]', 'jae 0x7ffb728bbe12']
UB ID: 170 - ['mov edx, 0x10003f89', 'mov eax, edx', 'mov r9d, dword ptr [rbx + rdx*2 - 0x20007f12]', 'movsx r11d, ax', 'lea rbx, [rbx + rdx*4 - 0x4000fe20]', 'not r11w', 'lea rsi, [r11 + r11 - 0x4bf67c5e]', 'xor r9d, r10d', 'neg r9d', 'shr rsi, 0xcc', 'sbb rdx, rdx', 'movsx ecx, al', 'dec r9d', 'bswap r9d', 'lea r9d, [r9 + rdx + 0xdb9523b]', 'ror rsi, cl', 'push r10', 'lea r10, [rdx + rsi + 0x491b9297]', 'bts rdx, rsi', 'xor dword ptr [rsp + rax - 0x10003f89], r9d', 'add dil, r9b', 'mov qword ptr [rsp + 0x18], r10', 'bts r11w, cx', 'xadd ecx, edx', 'xor dword ptr [rsp + 0x18], eax', 'movzx esi, cl', 'mov r10, qword ptr [rsp + rsi - 0xe7]', 'movsxd rax, eax', 'sub si, di', 'add rbp, rax', 'mov qword ptr [rsp + rsi*4 - 0x39ed0], rcx', 'or sil, 0xb1', 'pop rax', 'shl ecx, 0x78', 'lea rbx, [rbx + rsi*2 - 0x1cf68]', 'shl edi, 0x50', 'mov eax, r11d', 'shl rax, 0x3c', 'cwde', 'xchg word ptr [rsp + rdi*4 - 0x6513fff0], r11w', 'push rsi', 'xor byte ptr [rsp + rdi - 0x1944ffff], 1', 'lea r9, [rdi + r9 + 0xbd3e1ad]', 'xchg esi, edx', 'shr rax, 0x3d', 'rol r9, 7', 'xor r10, r9', 'sar dx, 0xa8', 'dec r11b', 'mov qword ptr [r8 + rdx*4 - 0x3ffa4], r9', 'lea r8, [r8 + rdx - 0xffef]', 'mov rdi, qword ptr [rsp + 8]', 'add rdi, 0x11d958', 'jmp rdi']
UB ID: 151 - ['mov r11, qword ptr [r8]', 'call 0x7ffb72e7a898']
UB ID: 152 - ['xchg ax, r9w', 'ror r11d, 3', 'mov qword ptr [rsp + rdi*2], rcx', 'sal byte ptr [rsp + rdi + 7], 0x81', 'adc r11d, edx', 'inc dx', 'shr r9, 0xb6', 'sar qword ptr [rsp + r9], cl', 'rol r11d, 3', 'neg qword ptr [rsp + r9]', 'sub r9w, word ptr [rsp + r9*2 + 5]', 'not r11d', 'mov qword ptr [rsp + r9*8 - 8], r10', 'movsx esi, cx', 'xor dword ptr [rsp + r9 - 1], r11d', 'or eax, esi', 'xchg rsi, rdx', 'pop r10', 'movsxd r11, r11d', 'cdqe', 'add rbp, r11', 'mov r9, qword ptr [rbx + r9*8 - 2]', 'movsx r11d, cx', 'sar dil, 0x66', 'dec cx', 'xor r9, r10', 'call 0x7ffb72cbd11c']
UB ID: 153 - ['lea rdi, [rsp + rdi + 0x18]', 'mov rcx, qword ptr [rcx + rdi - 0x107405]', 'xchg rax, rsi', 'shl word ptr [rsp + rsi*2 + 0x1c002], 6', 'mov qword ptr [r8 + rsi + 0xdfe4], rcx', 'lea r8, [rsi + r8 + 0xdfe4]', 'cqo', 'mov qword ptr [rsp + rsi + 0xdff6], rax', 'pop rax', 'pop rax', 'pop rax', 'js 0x7ffb72b05b5c']
UB ID: 154 - ['add rbp, rax', 'lea rax, [r11 + rsi*4 - 0x5ccb1bdd]', 'mov qword ptr [rsp + rdi], rbp', 'ret']
UB ID: 155 - ['xor al, 0x8f', 'neg al', 'xchg di, r9w', 'neg rdi', 'ror r9w, 0xab', 'dec al', 'add r11d, esi', 'xor al, 0x25', 'neg edi', 'setge cl', 'rol al, 1', 'shl sil, 0x22', 'or sil, cl', 'xor r10b, al', 'btc cx, si', 'bswap rdi', 'jae 0x7ffb72c85aec']
UB ID: 156 - ['xchg r11, rdi', 'pop r10', 'mov ecx, 0x1faa9a97', 'lea rdx, [rsp + rdx + 0x18]', 'mov qword ptr [rsp + 8], rcx', 'mov qword ptr [rdx], rdi', 'mov r9d, dword ptr [rbx + 1]', 'mov esi, ecx', 'cbw', 'bts rcx, 0xa2', 'xor r9d, r10d', 'mov qword ptr [rsp + 8], rax', 'inc r9d', 'cdqe', 'sal al, 0xc3', 'push rax', 'ror r9d, 2', 'or byte ptr [rsp + rax + 0x78260106], 0x27', 'movsx edi, sil', 'dec r9d', 'rol r9d, 3', 'cdqe', 'and ecx, eax', 'mov qword ptr [rsp + rax + 0x78260100], r10', 'sub di, ax', 'push rcx', 'xor dword ptr [rsp + rax + 0x78260108], r9d', 'call 0x7ffb72d6c847']
UB ID: 157 - ['mov edi, dword ptr [rbx]', 'xor edi, r10d', 'mov r11d, 0x8b0da487', 'movsx ecx, r11b', 'inc edi', 'movzx r9d, cl', 'ror edi, 2', 'call 0x7ffb72927726']
UB ID: 158 - ['dec edi', 'ror r11d, 0x93', 'rol edi, 3', 'mov edx, r11d', 'mov qword ptr [rsp + r9*2 - 0x10e], r10', 'mov esi, 0x5498099d', 'xor dword ptr [rsp + r9*2 - 0x10e], edi', 'btr r9w, si', 'pop r10', 'movsxd rdi, edi', 'adc rbp, rdi', 'dec dl', 'movsx edi, cx', 'mov rcx, qword ptr [r9 + r8 - 0x87]', 'movzx r11d, byte ptr [rbx + r9 - 0x83]', 'sal rsi, 0x16', 'sub dx, r9w', 'btc esi, 0xba', 'xor r11b, r10b', 'inc r11b', 'call 0x7ffb72dd1f89']
UB ID: 159 - ['mov r11d, 0xe09c309', 'ror r11d, 0xcc', 'call 0x7ffb72deba0f']
UB ID: 160 - ['xor dil, r10b', 'dec dil', 'push r9', 'xor dil, 0xad', 'movzx r11d, sil', 'pop rcx', 'movsx eax, word ptr [rsp + rdx*8 - 0x7ffdc]', 'add dil, 0x28', 'xor dil, al', 'sal qword ptr [rsp + rdx - 0xfff8], cl', 'inc r9d', 'xchg dword ptr [rsp + rdx*8 - 0x7ffbf], eax', 'xor r10b, dil', 'sub qword ptr [rsp + rsi*4 - 0x34d04f9c], rdx', 'jno 0x7ffb72cf6e71']
UB ID: 161 - ['not edx', 'mov byte ptr [rsp + rsi*2 - 0xa1fe1c], cl', 'push rax', 'and r11w, si', 'dec edx', 'movzx r9d, si', 'call 0x7ffb72a208a3']
UB ID: 162 - ['mov qword ptr [rsp + rsi*2 - 0xa1fe12], r10', 'mov qword ptr [rsp + rsi*8 - 0x287f8a8], rax', 'xor dword ptr [rsp + rsi*8 - 0x287f890], edx', 'shl r11b, 0xc2', 'mov r10, qword ptr [rsp + rsi - 0x50fefd]', 'movsxd rdx, edx', 'push r9', 'call 0x7ffb72c1acca']
UB ID: 163 - ['mov qword ptr [rsp + r11*2 - 0x2270e272], -0x2951d0f6', 'cbw', 'lea rsi, [rsp + rsi + 0x10]', 'sal rcx, cl', 'mov rcx, qword ptr [rdi + rsi - 0x1bb]', 'jne 0x7ffb72c1bde9']
UB ID: 164 - ['mov qword ptr [rsp + rdx*2], 0x240e0e1d', 'mov r9, qword ptr [rsi + rcx - 0x70ab8ba2]', 'mov qword ptr [rdx + r8 - 0x10], r9', 'pop rdi', 'movsx r9d, word ptr [rsp + rsi - 0x70ab8ba0]', 'lea r8, [rsi + r8 - 0x70ab8bb2]', 'xchg byte ptr [rsp + rsi - 0x70ab8b9b], ah', 'mov ecx, dword ptr [rdi + rbx - 0x240e0e1c]', 'sal dil, 0x44', 'lea rbx, [rbx + rdi*2 - 0x481c1d9b]', 'xor ecx, r10d', 'sar rdx, 0x3e', 'lea ecx, [rcx + rdx*2 - 0x3c195d0c]', 'neg ecx', 'rol sil, 0x65', 'and dil, dl', 'ror dword ptr [rsp + rdi - 0x240e0dfc], 0xd8', 'lea ecx, [rcx + rdx*8 - 0x64801e2b]', 'bswap ecx', 'sbb word ptr [rsp + rsi - 0x70ab8b53], 0xe30b', 'sbb di, dx', 'inc ecx', 'sal dil, 0x45', 'and r9d, 0xfd0f29bd', 'not ecx', 'push rsi', 'cdqe', 'dec ecx', 'xadd dword ptr [rsp + rdi*2 - 0x481c1bb8], esi', 'sete byte ptr [rsp + rsi - 0x77dbc50c]', 'mov qword ptr [rsp + rdi - 0x240e0dd8], r10', 'dec dword ptr [rsp + rdi - 0x240e0ddf]', 'xor dword ptr [rsp + rsi - 0x77dbc510], ecx', 'mov r10, qword ptr [rsp + rsi - 0x77dbc510]', 'push r9', 'sub dword ptr [rsp + rsi - 0x77dbc50f], 0x13aaa31a', 'movsxd rcx, ecx', 'add rbp, rcx', 'pop r9', 'pop r9', 'pop r9', 'btc eax, 0x85', 'lea rax, [rsp + rax - 0x7d379f42]', 'jae 0x7ffb728bbe12']
UB ID: 165 - ['movzx r9d, word ptr [rbx]', 'mov r11d, 0x1d3c53b5', 'movsx edi, r11w', 'xor r9w, r10w', 'ror r9w, 1', 'push rdi', 'xor r9w, 0x289b', 'ror r9w, 1', 'sal word ptr [rsp + r11 - 0x1d1c53b3], 0xc2', 'inc r9w', 'movsx eax, dil', 'neg r9w', 'shr r11, 0x55', 'mov edx, 0x27140bb2', 'xor r10w, r9w', 'lea rdi, [rdx*8 - 0x166b7743]', 'lea r9, [rsp + r9 + 8]', 'mov r11, qword ptr [r11 + r9 - 0xe8]', 'btr eax, edi', 'rol dil, 0xa2', 'sal rdx, 0x31', 'mov qword ptr [r8 - 8], r11', 'bts ax, 0x3c', 'xor qword ptr [rsp], 0x75021d29', 'mov r11d, dword ptr [rbx + 2]', 'setnp byte ptr [rsp + 1]', 'mov ecx, edx', 'xor word ptr [rsp + rcx*2 + 6], dx', 'xor r11d, r10d', 'call 0x7ffb72d84612']
UB ID: 166 - ['mov qword ptr [rsp + rdi*8 - 0x200], -0x63fbfb49', 'not ax', 'add ax, 0x7616', 'sub byte ptr [rsp + rdi*2 - 0x7e], sil', 'not ax', 'rol byte ptr [rsp + rdi - 0x3c], 0x22', 'xadd qword ptr [rsp + rdi - 0x40], rdi', 'neg ax', 'xor r10w, ax', 'xor rdi, rsi', 'lea rax, [rsp + rax + 8]', 'shr qword ptr [rsp], 0xc7', 'mov r9, qword ptr [rax]', 'mov qword ptr [r8 - 8], r9', 'setbe dil', 'push rdi', 'movzx r9d, word ptr [rbx + 2]', 'shr rdi, 0x88', 'xor r9w, r10w', 'add dword ptr [rsp + 8], 0xee16b905', 'pop rcx', 'not r9w', 'call 0x7ffb72a88e54']
UB ID: 167 - ['adc word ptr [rsp + 8], 0x28b3', 'adc r9w, 0x2e2a', 'rol r9w, cl', 'movzx edx, dil', 'dec r9w', 'not dword ptr [rsp + rdx*2 - 0x12f]', 'pop rsi', 'neg rdi', 'xor r10w, r9w', 'sal dword ptr [rsp + rdx - 0x9c], 0xbc', 'mov word ptr [rdx + r8 - 0xa6], r9w', 'movzx esi, cl', 'mov ecx, dword ptr [rbx + rdx*8 - 0x4dc]', 'pop r9', 'xor ecx, r10d', 'sar edx, 0x6b', 'neg ecx', 'inc dl', 'xadd rdx, rdi', 'ror ecx, 1', 'lea rax, [rdx + rdx*2 + 0x222550c]', 'not ecx', 'sub ecx, 0xa6857537', 'bswap r9d', 'push r10', 'xor dword ptr [rsp + rsi*2 - 2], ecx', 'pop r10', 'movsxd rcx, ecx', 'sar eax, 0xd3', 'setnp al', 'adc rbp, rcx', 'cdq', 'neg rdx', 'cwde', 'mov rdi, qword ptr [rbx + rdx*2 + 8]', 'lea r11, [rsi + r9*4 - 0x184546fc]', 'and dx, 0xcb0a', 'push rax', 'lea rbx, [rbx + rdx*2 + 0x10]', 'xor rdi, r10', 'pop rdx', 'neg rdi', 'add rdi, rdx', 'btc eax, 0x33', 'sub dx, r11w', 'movsx ecx, ax', 'ror rdi, 4', 'add rdi, rsi', 'shr al, 0xc3', 'neg rdi', 'sar ax, cl', 'push rsi', 'xor r10, rdi', 'mov qword ptr [r8 + rdx*2 - 0x8d0a], rdi', 'inc dword ptr [rsp + rdx*2 - 0x8cf7]', 'lea r8, [r8 + rdx*4 - 0x11a02]', 'or al, 0x36', 'pop rsi', 'jns 0x7ffb72b05b5c']
UB ID: 168 - ['mov rsp, rdx', 'pushfq', 'mov rsi, r9', 'push 0x5d811808', 'ror qword ptr [rsp], 0x44', 'cld', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'call 0x7ffb72afe760']
UB ID: 169 - ['mov qword ptr [rsp], -0xfcb1aee', 'push -0x37eeb8fa', 'push qword ptr [rsp + 0x18]', 'popfq', 'lea rsp, [rsp + 0x20]', 'jmp rbp']
UB ID: 171 - ['xadd ecx, edi', 'dec sil', 'xor sil, 0x30', 'xadd dil, r11b', 'sbb al, dil', 'xor r10b, sil', 'xchg dx, r9w', 'add rsi, rsp', 'push rdx', 'ror qword ptr [rsp + r11 - 0xf5f6], cl', 'mov edi, dword ptr [r11 + rsi - 0xf5f6]', 'neg dx', 'mov dword ptr [r11 + r8 - 0xf5fa], edi', 'xadd qword ptr [rsp + r11 - 0xf5f6], r11', 'mov r9d, dword ptr [rbx + 1]', 'pop r11', 'adc rbx, 5', 'xor r9d, r10d', 'xor r11d, eax', 'ror r9d, 3', 'movsx edi, al', 'lea rsi, [rdx*2 + 0x7c8d3833]', 'inc r9d', 'and eax, 0xfa907d30', 'neg r9d', 'xor r9d, 0x843f2b8e', 'sar r11w, 0x4f', 'shr esi, cl', 'sal ax, 0x8d', 'push r10', 'bswap r11d', 'xor dword ptr [rsp + rdi - 0x6a], r9d', 'or r11w, 0x263a', 'push rax', 'mov r10, qword ptr [rsp + rdi*2 - 0xcc]', 'jnp 0x7ffb72c845d5']
UB ID: 172 - ['mov qword ptr [rsp + rcx + 0xf9fc], rbp', 'ret 8']
UB ID: 173 - ['inc edx', 'rol di, 0x81', 'shl r9d, cl', 'not edx', 'not r11w', 'xadd r9w, r11w', 'ror edx, 1', 'xor edx, 0xd12ac05', 'rol edi, cl', 'call 0x7ffb72c184d6']
UB ID: 174 - ['mov r11d, 0xd5a83fb7', 'mov eax, r11d', 'mov r9, qword ptr [r8]', 'call 0x7ffb72ac6231']
UB ID: 175 - ['add r8, 8', 'mov rbx, r9', 'pop rsi', 'neg byte ptr [rsp + rdx + 3]', 'jge 0x7ffb72b88eab']
UB ID: 176 - ['lea rax, [rcx + rax*2 - 0x237b3d00]', 'lea rcx, [rcx - 0x40ffaf73]', 'dec r11b', 'xor r10b, r11b', 'push rax', 'ror dword ptr [rsp + rdi*2], cl', 'sub byte ptr [rsp + rdi + 7], al', 'lea r11, [rsp + r11 + 8]', 'xchg cl, sil', 'movzx edx, byte ptr [rsp + rdi + 2]', 'btc rcx, rdi', 'mov qword ptr [r11 + rdi*4], r9', 'sar rsi, 0x26', 'add edi, dword ptr [rdi + rbx + 1]', 'btc ecx, 0xa0', 'cwde', 'lea rbx, [rbx + rsi*8 + 0xd]', 'sal dword ptr [rsp + rsi*2 + 0x204], cl', 'adc esi, 0x9aa91b0f', 'xor edi, r10d', 'ror dx, cl', 'inc edi', 'ror byte ptr [rsp + rdx - 0x87a], 0x23', 'inc byte ptr [rsp + rdx*8 - 0x43fb]', 'sal qword ptr [rsp + rdx - 0x880], cl', 'ror edi, 2', 'xadd qword ptr [rsp + rdx - 0x880], rcx', 'movzx r9d, byte ptr [rsp + rdx*2 - 0x10ff]', 'jge 0x7ffb72c09547']
UB ID: 177 - ['mov qword ptr [rsp + rdx - 0x880], r10', 'xor dword ptr [rsp + rdx - 0x880], edi', 'and rsi, rdx', 'setb dl', 'rol rsi, 0x55', 'pop r10', 'movsxd rdi, edi', 'add rbp, rdi', 'ror edx, 0x85', 'jmp rbp']
UB ID: 178 - ['not eax', 'adc rdx, rcx', 'sbb eax, 0x9f277b80', 'ror eax, 1', 'bswap eax', 'bswap rcx', 'dec eax', 'or r9w, r11w', 'or r11, rdx', 'dec dx', 'push r10', 'xor dword ptr [rsp + rdx - 0x52962491], eax', 'lea r9, [r9 + 0x69943113]', 'pop r10', 'inc r9', 'btr rcx, r11', 'mov edi, r11d', 'movsxd rax, eax', 'call 0x7ffb72e6154e']
UB ID: 179 - ['adc rbp, rax', 'mov qword ptr [rsp + rdx - 0x52962491], r9', 'mov rax, qword ptr [r11 + r8 - 0x5adf2cbb]', 'movzx edx, word ptr [r11 + rbx - 0x5adf2cb7]', 'call 0x7ffb72dda795']
UB ID: 180 - ['pop rsi', 'inc dx', 'xor dx, 0xb795', 'inc dx', 'inc dil', 'neg rdi', 'neg dx', 'neg qword ptr [rsp + r11 - 0x5adf2cb3]', 'xor r10w, dx', 'dec r11w', 'call 0x7ffb72aae57f']
UB ID: 181 - ['lea rdx, [rsp + rdx + 0x18]', 'movzx esi, byte ptr [rsp + r11 - 0x5adf2ca6]', 'mov qword ptr [rsp + r11 - 0x5adf2cb2], rsi', 'or sil, dil', 'mov qword ptr [rdx + r11 - 0x5adf2cba], rax', 'sal dword ptr [rsp + rsi - 0xeb], 0x70', 'mov r11, qword ptr [r8 + rsi - 0xf7]', 'setns byte ptr [rsp + rsi - 0xef]', 'movzx eax, di', 'lea r8, [r8 + rsi*2 - 0x1ee]', 'xchg dword ptr [rsp + rsi*2 - 0x1ef], esi', 'inc r9w', 'movzx ecx, word ptr [rax + rbx - 0x3ee0]', 'not r9d', 'lea rbx, [rbx + r9 - 0x70e76f35]', 'xor cx, r10w', 'cdq', 'neg byte ptr [rsp + r9 - 0x70e7de6f]', 'rol cx, 1', 'neg cx', 'mov qword ptr [rsp + r9 - 0x70e7de7a], -0x55d358c9', 'inc cx', 'xchg byte ptr [rsp + r9 - 0x70e7de65], dl', 'call 0x7ffb72d17f30']
UB ID: 182 - ['mov esi, dword ptr [r11 + rbx - 0x18d]', 'and r11, 0xffffffff9b302c25', 'xor esi, r10d', 'ror dword ptr [rsp + r11 - 3], 0x9c', 'lea esi, [rsi + r11*2 - 0x54a32794]', 'jae 0x7ffb72c03357']
UB ID: 261 - ['mov eax, 0xcc98c118', 'mov rbx, r8', 'movabs r10, 0x7ff9e7130000', 'sub rbx, r10', 'lea rdi, [rip - 7]', 'mov edx, 0x1c94e937', 'movsx r9d, dx', 'mov edx, dword ptr [r8 + rdx - 0x1c94e937]', 'add r8, 4', 'movzx r10d, r9w', 'xor edx, ebx', 'neg edx', 'not edx', 'not r9b', 'xor bl, r9b', 'mov ecx, r10d', 'lea r9, [rsp + r9 + 8]', 'mov qword ptr [r9 + rax*4 - 0x484150d0], rdx', 'mov qword ptr [rsp + rax*2 - 0x2420a868], r10', 'mov r11d, dword ptr [rax + r8 - 0x12105433]', 'sal cl, 0x64', 'xor r11d, ebx', 'xor rax, 0xffffffffec3e78b1', 'movsx ebp, byte ptr [rsp + rax + 0x1d1d37c]', 'movzx r9d, bp', 'neg r11d', 'inc r11d', 'cqo', 'xor qword ptr [rsp + rax*2 + 0x3a3a6f6], rcx', 'jge 0x7ffb729cc9ba']
UB ID: 184 - ['or dword ptr [rsp + r11 - 0xdf0d], r9d', 'neg bp', 'push rdx', 'sub bp, 0x1b15', 'lea r9, [r11 + rcx*8 + 0x540c0baf]', 'call 0x7ffb72d7a452']
UB ID: 185 - ['neg bpl', 'inc dword ptr [rsp + r11*4 - 0x282d]', 'pop rcx', 'xor bl, bpl', 'lea rbp, [rsp + rbp + 0x18]', 'shr dword ptr [rsp + r11*2 - 0x141d], 0xa1', 'shr r11d, 0xe9', 'mov qword ptr [r11 + rbp - 5], r10', 'xadd cl, al', 'pop r11', 'mov r11, qword ptr [rsi + 0x10]', 'call 0x7ffb72ce7c92']
UB ID: 186 - ['xor al, bl', 'or dl, 0x22', 'or word ptr [rsp + 0xd], 0xce95', 'not al', 'mov r10d, edx', 'xor r10d, edx', 'sbb r9, qword ptr [rsp + r10 + 0x10]', 'xor al, 0x91', 'neg al', 'add al, 0x20', 'xor cl, byte ptr [rsp + r10 + 0xd]', 'xor bl, al', 'pop rbp', 'add rbp, -0xb968e', 'jmp rbp']
UB ID: 187 - ['call 0x7ffb72bd1c7f']
UB ID: 188 - ['mov r11d, dword ptr [r8]', 'mov ebp, 0x1c286c1a', 'xor r11d, ebx', 'mov edx, ebp', 'neg r11d', 'lea rcx, [rbp + rdx + 0x5889aca7]', 'lea r9, [rbp*2 - 0x6bdd6af9]', 'ror r9w, 0x23', 'inc r11d', 'neg rbp', 'movzx r10d, dx', 'neg r11d', 'sub cx, r10w', 'btc ecx, 0x24', 'xor r11d, 0x3fbfdd22', 'push rbx', 'xor dword ptr [rsp + rbp*2 + 0x3850d834], r11d', 'pop rbx', 'movsxd r11, r11d', 'add rdi, r11', 'mov r10, qword ptr [rsi + rbp + 0x1c286c1a]', 'add bp, r9w', 'movzx edx, byte ptr [r8 + rbp + 0x1c28fe77]', 'lea rax, [r9 + r9*4 - 0x58422a5b]', 'xor dl, bl', 'or r9b, cl', 'inc ebp', 'not dl', 'or r9, rbp', 'adc dl, r9b', 'neg dl', 'cwde', 'ror dl, 1', 'neg r9d', 'lea r11, [r9*8 - 0x466b7978]', 'shl r9, cl', 'sbb dl, 0x38', 'lea r9, [r9 + rcx*8 + 0x629f4a1c]', 'or r9d, r11d', 'or r9w, cx', 'not dl', 'btc ecx, 5', 'xor bl, dl', 'sar r9w, 0x6f', 'push rax', 'lea rdx, [rsp + rdx + 8]', 'inc byte ptr [rsp + r9*2 - 0x7bf1fffc]', 'mov qword ptr [rdx + r9*2 - 0x7bf20000], r10', 'dec cl', 'mov rbp, qword ptr [rsi + r9 - 0x3df8fff8]', 'bswap r11', 'lea rsi, [rsi + r9 - 0x3df8fff0]', 'movsx edx, r9w', 'sar qword ptr [rsp + r9*2 - 0x7bf20000], cl', 'movzx ecx, byte ptr [r9 + r8 - 0x3df8fffb]', 'lea r8, [r8 + r9 - 0x3df8fffa]', 'xor cl, bl', 'neg cl', 'sub rdx, 0x27211a2a', 'setle byte ptr [rsp + r9 - 0x3df90000]', 'adc cl, r9b', 'pop rax', 'call 0x7ffb72c13988']
UB ID: 189 - ['not r9b', 'xor bl, r9b', 'mov ecx, r10d', 'lea r9, [rsp + r9 + 8]', 'mov qword ptr [r9 + rax*4 - 0x484150d0], rdx', 'mov qword ptr [rsp + rax*2 - 0x2420a868], r10', 'mov r11d, dword ptr [rax + r8 - 0x12105433]', 'sal cl, 0x64', 'xor r11d, ebx', 'xor rax, 0xffffffffec3e78b1', 'movsx ebp, byte ptr [rsp + rax + 0x1d1d37c]', 'movzx r9d, bp', 'neg r11d', 'inc r11d', 'cqo', 'xor qword ptr [rsp + rax*2 + 0x3a3a6f6], rcx', 'jge 0x7ffb729cc9ba']
UB ID: 190 - ['neg r11d', 'xchg byte ptr [rsp + rax*4 + 0x7474df0], r10b', 'bswap rcx', 'xor r11d, 0x3fbfdd22', 'push rax', 'mov qword ptr [rsp + rax*2 + 0x3a3a6fe], rbx', 'shl ebp, 0x1d', 'xor dword ptr [rsp + rax*4 + 0x7474df4], r11d', 'mov rbx, qword ptr [rsp + rax*2 + 0x3a3a6fe]', 'mov qword ptr [rsp + rdx*4 + 0xc], rcx', 'or ax, bp', 'movsxd r11, r11d', 'sub dword ptr [rsp + rax + 0x1d1d380], eax', 'add rdi, r11', 'mov rdx, qword ptr [rsi + rax + 0x1d1d383]', 'movzx ecx, word ptr [r8 + rax + 0x1d1d380]', 'movsx r11d, r9b', 'inc r10d', 'xor cx, bx', 'sar r10, 0x8f', 'adc cx, 0xe384', 'and r9b, r9b', 'sets r11b', 'xor cx, 0x3aa4', 'or r11b, 0x15', 'adc cx, 0x3e06', 'cbw', 'neg bp', 'and dword ptr [rsp + rax*2 + 0x3a20101], r9d', 'neg cx', 'add r9b, 0xaf', 'inc cx', 'rol cx, 1', 'cdqe', 'xor bx, cx', 'btc r10, r11', 'jb 0x7ffb72bcf292']
UB ID: 191 - ['jae 0x7ffb72c7a0cd']
UB ID: 192 - ['movsxd rax, eax', 'and r10w, 0xe732', 'xor r11, r9', 'adc rdi, rax', 'shl ecx, 0xa5', 'jae 0x7ffb72dc8bc8']
UB ID: 193 - ['mov ecx, 0x8028af23', 'xor dword ptr [rsp + r10 - 0x6aad0174], eax', 'or dword ptr [rsp + r10 - 0x6aad017d], ebp', 'xchg word ptr [rsp + r10 - 0x6aad0177], dx', 'sub r11w, cx', 'mov rbx, qword ptr [rsp + r10 - 0x6aad0174]', 'shl rbp, cl', 'bswap r10', 'xadd dword ptr [rsp + 8], r11d', 'movsxd rax, eax', 'jbe 0x7ffb72df9656']
UB ID: 194 - ['cmp rsi, r9', 'ja 0x7ffb72ac6561']
UB ID: 195 - ['push -0x4d5b8a56', 'call 0x7ffb72bc03d2']
UB ID: 263 - ['mov r10d, 0x493ed594', 'mov r11d, dword ptr [r8 + r10 - 0x493ed594]', 'movsx eax, r10b', 'push rax', 'xor r11d, ebx', 'dec r11d', 'cqo', 'movsx ecx, dx', 'neg r11d', 'dec qword ptr [rsp + r10 - 0x493ed594]', 'lea r9, [rcx*8 - 0x5bc03067]', 'cdq', 'sub r11d, edx', 'or r11b, cl', 'not bpl', 'bts rcx, r10', 'xor r9b, r11b', 'rol bpl, 1', 'call 0x7ffb72dc1c24']
UB ID: 197 - ['not eax', 'push r10', 'mov qword ptr [rsp + 8], rbx', 'xor dword ptr [rsp + 8], eax', 'xadd qword ptr [rsp], rbp', 'xadd dx, r9w', 'mov rbx, qword ptr [rsp + 8]', 'movsxd rax, eax', 'add rdi, rax', 'call 0x7ffb72d6d107']
UB ID: 198 - ['movzx edx, byte ptr [r8]', 'mov r11d, 0x7e145f96', 'movsx ecx, r11w', 'xor dl, bl', 'not dl', 'push rcx', 'movzx eax, cx', 'push rcx', 'neg dl', 'not rax', 'xchg dword ptr [rsp + rcx - 0x5f91], eax', 'inc dl', 'rol dl, 1', 'add dl, 0xd', 'not dword ptr [rsp + rcx - 0x5f96]', 'push rax', 'cwde', 'neg dl', 'xor bl, dl', 'lea rdx, [rsp + rdx + 0x18]', 'mov ebp, 0xb01123b7', 'push rax', 'shl r11b, 0xe5', 'mov r9, qword ptr [r11 + rdx - 0x7e145fc0]', 'movsx r10d, word ptr [rsp + r11 - 0x7e145fb5]', 'jne 0x7ffb729f10ab']
UB ID: 199 - ['mov r11, r9', 'mov rbp, qword ptr [rcx + rsi - 0x5f96]', 'lea rsi, [rsi + rcx*2 - 0xbf24]', 'add r10, qword ptr [rsp + rcx - 0x5f7e]', 'neg eax', 'sar r10d, 0xff', 'adc r11, rbp', 'mov rbp, r11', 'push rcx', 'dec rcx', 'not word ptr [rsp + rcx*2 - 0xbf04]', 'add ax, word ptr [r8 + rcx - 0x5f94]', 'rol cx, 0x63', 'xor ax, bx', 'xor ax, 0x3c92', 'inc ax', 'movzx edx, byte ptr [rsp + rcx - 0x3f2a7e8]', 'ror ax, 1', 'neg ax', 'ror ax, 1', 'mov r9d, edx', 'rol dl, 0x83', 'sbb ax, r10w', 'ror dl, 0x22', 'shr word ptr [rsp + rcx*2 - 0x7e54ff0], 0x81', 'je 0x7ffb72ba2296']
UB ID: 200 - ['xor bx, ax', 'shr cl, 0x41', 'bt r10d, 0x24', 'not rdx', 'lea rax, [rsp + rax + 0x28]', 'jae 0x7ffb729f8fb9']
UB ID: 201 - ['mov qword ptr [rcx + rax - 0x3f2a800], rbp', 'mov ecx, dword ptr [rcx + r8 - 0x3f2a7fd]', 'movsx eax, r10b', 'lea r8, [r10 + r8 + 7]', 'shr dword ptr [rsp + r10 + 0x16], 0xd2', 'and dword ptr [rsp + r10*8 + 0x23], edx', 'neg word ptr [rsp + rdx + 0xd9]', 'xor ecx, ebx', 'lea rdx, [rdx + rdx*8 + 0x3929371b]', 'movsx ebp, al', 'or byte ptr [rsp + r10*4 + 0x19], r10b', 'not ecx', 'bswap ecx', 'cqo', 'lea ecx, [rcx + r10*4 - 0x640b2a1c]', 'rol ecx, 1', 'call 0x7ffb72e81a09']
UB ID: 202 - ['mov edx, 0x87363633', 'movzx r10d, dl', 'mov r9d, dword ptr [r8 + r10*8 - 0x198]', 'xor r9d, ebx', 'mov eax, edx', 'xadd r10, rax', 'ror r9d, 1', 'movzx ebp, al', 'not r9d', 'mov ecx, r10d', 'lea r11, [rdx*2 + 0x3e934839]', 'and r10, rdx', 'neg r9d', 'sub rbp, r11', 'xor cl, r10b', 'shr edx, cl', 'rol r9d, 1', 'xor r10w, cx', 'push rbx', 'btc rbp, 0x89', 'xor dword ptr [rsp + rdx*2 - 0x10e6c6c6], r9d', 'not al', 'btr r10d, 0x29', 'pop rbx', 'bswap eax', 'sbb r10w, ax', 'mov dword ptr [rsi + rdx - 0x8736367], r9d', 'shl r11w, 0x49', 'movzx r9d, dl', 'sar r9w, 0xe1', 'mov ecx, dword ptr [r8 + rdx*2 - 0x10e6c6c2]', 'xadd r11b, al', 'xor ecx, ebx', 'not r10w', 'push r10', 'btc r11, r9', 'lea ecx, [rcx + r10 + 0x16f5023]', 'call 0x7ffb72dba9bb']
UB ID: 203 - ['neg r11', 'ror r11, 1', 'inc r9b', 'lea r11, [r11 + rdx*2 - 0x5c91986f]', 'dec ax', 'rol r11, 5', 'cbw', 'ror byte ptr [rsp + rdx - 0x8736355], 0xc5', 'cdq', 'xor rbx, r11', 'and edx, 0x3237e912', 'mov qword ptr [rdx + rsi - 0xc], r11', 'lea rsi, [rdx + rsi - 0xc]', 'movzx r11d, word ptr [rsp + rdx + 6]', 'pop rdx', 'pop rbp', 'jae 0x7ffb72be239f']
UB ID: 205 - ['sub r11b, 0x92', 'xor bl, r11b', 'push rdx', 'lea r11, [rsp + r11 + 0x10]', 'cdqe', 'pop r9', 'mov dword ptr [r11 + rax - 0x37b30005], r10d', 'lea r11, [r9 + rbp*8 + 0x281c322]', 'cdq', 'lea ecx, [r9 + rcx - 0x478e75c2]', 'mov qword ptr [rsp + rax - 0x37b30005], r11', 'xor bp, ax', 'xor ecx, 0xe5246936', 'inc ecx', 'xor ecx, 0xfcb3462f', 'xor bpl, dl', 'mov qword ptr [rsp + rax - 0x37b30005], rbx', 'sbb r10, r10', 'push r11', 'cbw', 'xor dword ptr [rsp + rax*2 - 0x6f660002], ecx', 'dec r9b', 'or ebp, r11d', 'mov rbx, qword ptr [rsp + r9 - 0x4104ffb5]', 'cdq', 'or r9, 0xffffffffe6999a0f', 'mov dword ptr [r9 + rsi + 0x18620041], ecx', 'mov qword ptr [rsp + r9 + 0x18620049], r10', 'rol rax, 0xb5', 'xor rdx, qword ptr [r8 + r9 + 0x1862004a]', 'push r11', 'lea r8, [r8 + r9 + 0x18620052]', 'ror al, 0x86', 'btr ax, 0xb9', 'xchg dword ptr [rsp + rbp - 0x4386c7d8], r9d', 'xor rdx, rbx', 'sub word ptr [rsp + r9*8 - 0x213], r9w', 'neg rdx', 'not rdx', 'push r10', 'ror rdx, 1', 'bts rax, 0x31', 'ror r11d, 0x28', 'neg rdx', 'dec ebp', 'btc r9w, bp', 'xchg rcx, rbp', 'xor rbx, rdx', 'cmp rsi, r9', 'ja 0x7ffb72ac6561']
UB ID: 207 - ['mov edx, 0xf437be08', 'mov r9d, dword ptr [r8]', 'push rdx', 'xor r9d, ebx', 'shl dword ptr [rsp + 1], 0x83', 'lea rbp, [rdx - 0x25c6a1cf]', 'rol r9d, 3', 'neg r9d', 'bswap r9d', 'mov qword ptr [rsp + r10 - 0x2001c39], rbp', 'sub r9d, 0xe603452a', 'xor r9d, 0x128ad583', 'mov qword ptr [rsp + r10*2 - 0x4003814], rbx', 'cdqe', 'xor al, r10b', 'lea rbx, [rax + rax*2 - 0x25c4574a]', 'xor dword ptr [rsp + rax*2 - 0x3866], r9d', 'movzx r11d, bx', 'pop rbx', 'movsxd r9, r9d', 'neg r10b', 'adc rdi, r9', 'movzx edx, byte ptr [r10 + r8 - 0x2001cee]', 'lea r8, [r8 + rax*4 - 0x70c3]', 'movsx r9d, al', 'ror rax, 0x25', 'lea rbp, [rax*8 + 0x18a0f3a5]', 'xor dl, bl', 'xor bp, ax', 'adc dl, 0x95', 'add r11w, ax', 'lea rcx, [rax*8 - 0x1bde0fde]', 'cbw', 'not dl', 'ror dl, 1', 'call 0x7ffb729b5ec0']
UB ID: 208 - ['dec dl', 'rol dl, 1', 'xor bl, dl', 'pop r9', 'add r9, 0x3d54bf', 'jmp r9']
UB ID: 209 - ['mov dword ptr [r11 + rsi - 0xfd57], r10d', 'pop rdx', 'lea rsi, [rsi + r11*2 - 0x1faa6]', 'movzx r10d, r11b', 'cmp rsi, r9', 'ja 0x7ffb72ac6561']
UB ID: 210 - ['mov r9d, 0xbb21e688', 'call 0x7ffb72d4e2a6']
UB ID: 211 - ['sbb al, 0x93', 'xor al, 0x89', 'and r11w, bp', 'jae 0x7ffb72904421']
UB ID: 214 - ['ror al, 1', 'mov r9d, r11d', 'xor bl, al', 'add rax, rsp', 'bswap ebp', 'bts cx, 0x13', 'mov r11d, dword ptr [rcx + rax - 0xb9d]', 'ror r9b, 0x27', 'bswap r9', 'or r9d, r11d', 'btc ecx, 0xb0', 'ror eax, 1', 'push rbx', 'movsx ebx, r9w', 'push rbx', 'neg bp', 'xor dword ptr [rsp + rbx*2 - 0x1b88], eax', 'dec byte ptr [rsp + r9 - 0xdc2]', 'inc word ptr [rsp + r9 - 0xdc8]', 'mov rbx, qword ptr [rsp + r9 - 0xdc0]', 'add cx, 0xdaa8', 'sbb bpl, bpl', 'lea rdx, [r11 + rbp*4 - 0x7d55b079]', 'movsxd rax, eax', 'setge bpl', 'btc r10d, 0xad', 'mov qword ptr [rsp + r9*8 - 0x6e38], -0x77cd8eec', 'add rdi, rax', 'sub qword ptr [rsp + r9*8 - 0x6e38], -0x387cf2ec', 'inc byte ptr [rsp + r9 - 0xdb9]', 'mov qword ptr [rsp + r9*2 - 0x1b90], rdi', 'ret 8']
UB ID: 213 - ['rol r10b, 1', 'mov qword ptr [rsp + rbp - 0xb5e6], r9', 'and qword ptr [rsp + rbp*8 - 0x5af30], rdx', 'inc qword ptr [rsp + rbp - 0xb5e6]', 'neg r10b', 'sub r10b, 0x94', 'neg r10b', 'adc r10b, 0xb7', 'xor r10b, 0xa5', 'mov r11d, dword ptr [rsp + rbp*2 - 0x16bcc]', 'xchg dword ptr [rsp + rbp - 0xb5e4], edx', 'xor bl, r10b', 'lea r10, [rsp + r10 + 8]', 'mov r9d, dword ptr [r10 + rbp*2 - 0x16bcc]', 'and dword ptr [rsp + rbp - 0xb5e3], 0x66a393ad', 'mov dword ptr [rsi + rbp - 0xb5ea], r9d', 'and r11b, cl', 'movzx ebp, byte ptr [r8 + rbp - 0xb5e5]', 'mov r9d, ecx', 'sal r9w, 0x82', 'shr byte ptr [rsp + rdx - 0xeffa], 0x26', 'xor bpl, bl', 'inc ecx', 'xor dx, ax', 'xor ecx, 0xf1911ba', 'push rdx', 'not r9d', 'mov qword ptr [rsp + rdx*2 + 0x18], rbx', 'sar dx, 0xaa', 'xor dword ptr [rsp + rdx + 0x18], ecx', 'shl dword ptr [rsp + rdx + 0x13], 0x12', 'mov rbx, qword ptr [rsp + rdx*2 + 0x18]', 'mov qword ptr [rsp + rdx*2 + 0x18], r9', 'movsxd rcx, ecx', 'adc rdi, rcx', 'or eax, dword ptr [rsp + rbp + 0x18]', 'pop r9', 'pop rdx', 'pop r10', 'pop r9', 'jae 0x7ffb72be239f']
UB ID: 215 - ['movzx ecx, word ptr [r8 + r10]', 'xor r9w, word ptr [rsp + r10 + 0x23]', 'call 0x7ffb72c1657e']
UB ID: 216 - ['sar word ptr [rsp + r10*8 + 0x21], 0xc8', 'sbb cx, 0x7810', 'xchg qword ptr [rsp + 0x20], r11', 'add r11, -0x40a67d', 'jmp r11']
UB ID: 217 - ['or r10w, 0xb12b', 'xor bx, cx', 'call 0x7ffb728e0ee7']
UB ID: 218 - ['lea rcx, [rsp + rcx + 0x40]', 'mov r9, qword ptr [rcx + r10 - 0xb12b]', 'lea r11, [rbp + rbp*2 + 0x2ebe2cb1]', 'movzx ecx, r11b', 'inc r11', 'mov qword ptr [rsi + r10 - 0xb13b], r9', 'lea r9, [rbp + rbp*4 - 0x36f3c573]', 'mov r11d, dword ptr [r8 + r10*2 - 0x16252]', 'mov qword ptr [rsp + r10 - 0xb12b], -0x6d73ccc3', 'call 0x7ffb72c6119f']
UB ID: 219 - ['mov r10d, 0x5d360f9a', 'movzx ecx, r10w', 'movzx eax, word ptr [r8 + rcx - 0xf9a]', 'xor ax, bx', 'movzx r11d, r10w', 'rol cx, 6', 'not ax', 'movsx r9d, r10b', 'xor r10b, r9b', 'sbb ax, 0x573d', 'movzx edx, r11w', 'xadd r10d, r11d', 'rol ax, 1', 'add rcx, r11', 'adc cx, r11w', 'adc ax, 0x9c3f', 'xor bx, ax', 'not cx', 'add rax, rsp', 'adc ecx, r11d', 'mov rbp, qword ptr [rax + rbp*2 - 0x600d4da4]', 'mov qword ptr [rsi + rdx*2 - 0x3e70], rbp', 'movzx ebp, word ptr [r8 + rdx*8 - 0xf99e]', 'sub r11, 0x78ad0f16', 'xor bp, bx', 'mov eax, r10d', 'cdqe', 'sar r11b, cl', 'neg bp', 'xor bp, 0x8d90', 'and r11b, 0x98', 'cqo', 'rol bp, cl', 'sub bp, 0x57ad', 'not bp', 'neg bp', 'ror r9d, 0xb4', 'shl r9w, 0xc1', 'xor bx, bp', 'adc rbp, rsp', 'lea r10, [r9*2 - 0x37e74768]', 'mov rax, qword ptr [rbp + r11*2 + 0x36ee00e0]', 'sal r11w, 0xa3', 'mov qword ptr [rsi + r11 + 0x1b770370], rax', 'sar dl, cl', 'xchg r11w, dx', 'mov r9d, dword ptr [r8 + r11 + 0x1b780004]', 'movsx ebp, r11w', 'btc ebp, ecx', 'lea r8, [r8 + r11*2 + 0x36f00008]', 'xor r9d, ebx', 'shl r10, 0x66', 'neg r11d', 'sbb r9d, r10d', 'lea rax, [r11*8 - 0x136601eb]', 'dec r10', 'xor r9d, 0xf18cc296', 'cdq', 'xchg rax, r11', 'lea r9d, [r9 + rbp*2 - 0x73ade3d]', 'btr rbp, 0x30', 'rol r9d, 1', 'shr rdx, cl', 'push rcx', 'rol r10, 0x2b', 'inc r9d', 'call 0x7ffb72962875']
UB ID: 220 - ['neg word ptr [rsp + rbp*4 + 3]', 'sal dx, cl', 'mov qword ptr [rsp + rdx - 0x3ffffff4], rbx', 'xor dword ptr [rsp + rbp*4], r9d', 'mov qword ptr [rsp + rcx - 0x74d91e02], rbp', 'shr dx, cl', 'mov rbx, qword ptr [rsp + rbp*8 - 8]', 'adc ebp, r10d', 'not qword ptr [rsp + rax - 0x1b780000]', 'movsxd r9, r9d', 'call 0x7ffb72d6183f']
UB ID: 221 - ['mov qword ptr [rsp + r11 - 0xcd20], 0x7bc3390', 'mov ebp, dword ptr [r11 + r8 - 0xcd20]', 'call 0x7ffb72a428e1']
UB ID: 222 - ['mov qword ptr [rsp + r11 - 0xcd20], 0x210b8a0', 'dec r11b', 'cwde', 'lea rdx, [r9 + r11*4 + 0x58b333b8]', 'movsx ecx, dl', 'mov r10d, ecx', 'lea ebp, [r11 + rbp - 0x6608ce9f]', 'xadd byte ptr [rsp + r11*8 - 0x668f0], r11b', 'or r10w, r9w', 'not ebp', 'dec ebp', 'and r11, qword ptr [rsp + r11*8 - 0x66c7d]', 'xadd r9b, r10b', 'cdq', 'mov qword ptr [rsp + r11 + 0x10], rbx', 'movzx ebx, r10w', 'call 0x7ffb72dbb197']
UB ID: 223 - ['xor r11b, byte ptr [r11 + r8 + 4]', 'not word ptr [rsp + rcx*8 - 0x7b]', 'sub r10, 0x3b30ac21', 'lea rbp, [rax*4 - 0x6e6937cf]', 'lea r8, [r8 + rcx*8 - 0x93]', 'xor rbp, rcx', 'btc rax, 3', 'xor r11b, bl', 'bts r10, 0xae', 'jae 0x7ffb72c1f4a6']
UB ID: 224 - ['sbb r11b, 0x7f', 'ror r11b, 1', 'sub al, bpl', 'cdqe', 'adc r11b, 0x8a', 'sal ebp, cl', 'rol r11b, 1', 'not byte ptr [rsp + rax*8 + 0x10580]', 'or word ptr [rsp + rcx*2 - 0x12], 0x1d27', 'xadd ax, r10w', 'xor bl, r11b', 'shl word ptr [rsp + rax + 0x99f3], 0xea', 'lea r11, [rsp + r11 + 0x20]', 'pop r10', 'or rbp, r10', 'ror byte ptr [rsp + rax*4 + 0x267da], 0x42', 'mov qword ptr [rax + r11 + 0x99f2], rdx', 'movsx r9d, word ptr [rsp + rax*2 + 0x133f8]', 'adc rbp, -0x66f6a1d3', 'mov qword ptr [rsp + rax + 0x99f2], rdi', 'ret 0x10']
UB ID: 225 - ['mov rbx, qword ptr [rsp + rdx + 0x10]', 'mov qword ptr [rsp + r9 - 0x46210599], r10', 'movsxd rax, eax', 'add rdi, rax', 'mov byte ptr [rsp + rdx + 0xc], 2', 'mov ecx, dword ptr [rdx + rsi + 4]', 'sub word ptr [rsp + r9 - 0x4621059a], 0xa887', 'sal r9d, 0x85', 'lea rsi, [rsi + rdx*2 + 8]', 'mov qword ptr [rsp + rdx*4], r11', 'movzx ebp, byte ptr [r8 + rdx*2 + 4]', 'and r11w, r9w', 'sal word ptr [rsp + rdx + 0xc], 0xaa', 'lea rdx, [r9*2 + 0xd3d3980]', 'lea r8, [r8 + r10 + 5]', 'movsx eax, word ptr [rsp + r10*4 + 0xe]', 'xor bpl, bl', 'xchg qword ptr [rsp + r11*2 + 0x1e010], rdx', 'cwd', 'xor bpl, al', 'sub bpl, 0x9a', 'neg bpl', 'shl r11w, 0xcd', 'btc eax, edx', 'call 0x7ffb729635a1']
UB ID: 226 - ['not bpl', 'rol bpl, 1', 'dec r11b', 'cwd', 'shl rax, 0x4c', 'sbb bpl, 0xa', 'xchg word ptr [rsp + rdx + 0x16], dx', 'ror bpl, 1', 'btc eax, edx', 'not byte ptr [rsp + r10*4 + 0x19]', 'lea r9, [rax + rax*8 + 0x1f2fce8d]', 'xor bl, bpl', 'cwd', 'lea rbp, [rsp + rbp + 0x20]', 'mov dword ptr [rbp + rdx - 0xffff], ecx', 'mov qword ptr [rsp + rdx - 0xffff], rdi', 'ret 0x18']
UB ID: 228 - ['lea rsi, [rsi + rcx*4 - 4]', 'dec r9', 'pop r10', 'pop r9', 'pop rbp', 'pop r11', 'jns 0x7ffb72be239f']
UB ID: 230 - ['bts r11d, 0xb8', 'adc dl, r10b', 'mov ebp, dword ptr [rsp + r11*8 - 0x8071e27]', 'ror dl, 1', 'call 0x7ffb72daf092']
UB ID: 231 - ['btc r10, 0x85', 'shl r10w, 0xa3', 'rol r11b, 1', 'push rdx', 'xor bl, r11b', 'lea r11, [rsp + r11 + 0x18]', 'pop rdx', 'rol r10d, 0xf6', 'sbb rax, 0x1691ddb2', 'add rdx, qword ptr [r11 + rbp*2]', 'ror al, 0x81', 'ror word ptr [rsp + rbp + 0xb], 0x8c', 'movsx r11d, cx', 'mov qword ptr [r10 + rsi - 0x6a0e09c1], rdx', 'lea rsi, [r9 + rsi - 0x7821cfd0]', 'push r11', 'add bp, 0x4384', 'pop rbp', 'pop r10', 'pop r9', 'jge 0x7ffb72be239f']
UB ID: 233 - ['lea r11, [rcx*2 - 0xf5430d3]', 'movzx ebp, word ptr [rsp + rax*4 + 2]', 'mov r10, qword ptr [r8 + rax*4 + 5]', 'mov qword ptr [rsp + rax*8 + 8], rbp', 'cdq', 'lea r8, [rax + r8 + 0xd]', 'rol ebp, 0xec', 'sbb dl, dl', 'cmovb r11d, ecx', 'xor r10, rbx', 'shl word ptr [rsp + rax + 0xa], 0x61', 'ror r10, 1', 'pop r9', 'pop rcx', 'lea r10, [r10 + rcx*2 - 0x4d6ca35c]', 'lea rcx, [rbp + r11*4 + 0x772280ab]', 'ror r10, 2', 'rol r11w, 0x27', 'add ecx, 0x73a713b5', 'dec r10', 'xor r9b, al', 'add bpl, al', 'xor r10, 0xffffffffa1941012', 'xor r9w, bp', 'call 0x7ffb72cf3096']
UB ID: 234 - ['mov qword ptr [r11 + rsi - 0x8b], rcx', 'and r11, rdx', 'mov r10d, dword ptr [r8 + r11*4 + 8]', 'cdq', 'push r9', 'xor r10d, ebx', 'add word ptr [rsp + rdx + 1], dx', 'btc bp, r9w', 'sbb r10d, edx', 'shr eax, 0x23', 'mov ecx, eax', 'shr byte ptr [rsp + rdx], 0x21', 'neg r10d', 'xadd ebp, edx', 'inc r10d', 'rol r10d, 1', 'mov qword ptr [rsp + r11*2], rbx', 'xor dword ptr [rsp + r9 - 0x5e29949b], r10d', 'lea rdx, [rdx*4 + 0x578b9f38]', 'inc r9w', 'pop rbx', 'movsxd r10, r10d', 'add rdi, r10', 'cmp rsi, r9', 'ja 0x7ffb72ac6561']
UB ID: 235 - ['mov ecx, 0x269b8db6', 'movsx r9d, cx', 'mov eax, r9d', 'mov rcx, qword ptr [rsi + rcx - 0x269b8db6]', 'mov r9, qword ptr [rcx]', 'movsx ecx, al', 'movzx ebp, cl', 'mov qword ptr [rsi + rbp*2 - 0x16c], r9', 'movsx r9d, bpl', 'not r9', 'btr ecx, ecx', 'mov eax, dword ptr [rbp + r8 - 0xb6]', 'cmovb rbp, rcx', 'add cx, bp', 'sbb r8, -5', 'xor eax, ebx', 'movsx r10d, bpl', 'btr r10w, r9w', 'ror eax, 2', 'sal rcx, cl', 'seta r9b', 'adc eax, ecx', 'bswap eax', 'inc eax', 'ror r9, 0x18', 'not eax', 'push r9', 'shl word ptr [rsp + 3], 0x22', 'sbb eax, 0x391a119f', 'movsx edx, cl', 'xchg bp, r9w', 'sar r10w, 0x63', 'ror eax, 1', 'lea eax, [rax + rdx*4 - 0x3b0b64a3]', 'pop rdx', 'and r10, r9', 'call 0x7ffb728e2e70']
UB ID: 236 - ['mov r10d, 0x8022e524', 'mov r11, qword ptr [rsi]', 'mov qword ptr [rsp + r10], rcx', 'cdqe', 'mov qword ptr [rsp + r10], rdi', 'ret']
UB ID: 237 - ['dec ecx', 'or r10d, 0x73828e2b', 'not ecx', 'lea rbp, [rdx*4 - 0x14c92cc3]', 'inc ecx', 'cdqe', 'push rbx', 'inc bp', 'xor dword ptr [rsp + rax + 0x46f64048], ecx', 'movzx ebx, bpl', 'or r10b, bl', 'pop rbx', 'sar al, 0x27', 'lea r9, [rax*4 - 0x7cf14d58]', 'movsxd rcx, ecx', 'btr eax, edx', 'xchg rbp, rdx', 'btc eax, 0xbb', 'add rdi, rcx', 'btr eax, ebp', 'mov r11d, dword ptr [rsi + r11*2 - 0xf97300]', 'call 0x7ffb72cdfff4']
UB ID: 238 - ['mov qword ptr [rsp + rax - 0x7b], -0x3972fd6d', 'movsxd rdx, edx', 'neg r10d', 'sar byte ptr [rsp + rax*2 - 0xf6], cl', 'sal rcx, 0xf3', 'adc rdi, rdx', 'not eax', 'mov qword ptr [rsp + rax - 0x661], rdx', 'pop rdx', 'jp 0x7ffb72be239f']
UB ID: 240 - ['jne 0x7ffb72ce9340']
UB ID: 241 - ['mov edx, 0x3b054aaa', 'mov r11d, 0x5584dab6', 'mov r9, qword ptr [rdx + rsi - 0x3b054aaa]', 'movzx ecx, r11w', 'mov eax, 0x7e925694', 'ror cx, 0xc8', 'mov r10, qword ptr [r11 + rsi - 0x5584daae]', 'mov ebp, 0xce3c9eb8', 'btc ecx, 0xb3', 'and r9, r10', 'not r9', 'mov qword ptr [rdx + rsi - 0x3b054aa2], r9', 'lea r9, [rdx + rsi - 0x3b054aa2]', 'and edx, ecx', 'movsx r10d, cx', 'mov qword ptr [rsi + rdx - 0x28a], r9', 'sal al, 0x86', 'call 0x7ffb72c2176d']
UB ID: 242 - ['mov eax, r11d', 'dec r11d', 'dec edx', 'bswap eax', 'dec bp', 'bswap edx', 'inc edx', 'not edx', 'xchg r10d, r9d', 'ror cx, 0xe1', 'push rbx', 'and r9d, r10d', 'cmovns r11, r9', 'xor dword ptr [rsp + r11 - 0x55852efc], edx', 'pop rbx', 'push r9', 'xchg byte ptr [rsp + r11 - 0x55852ef8], r10b', 'movsxd rdx, edx', 'bts rax, rbp', 'adc r9w, 0x2221', 'shr r9w, 0xe8', 'add rdi, rdx', 'sal rbp, 0xdf', 'or qword ptr [rsp + r11 - 0x55852efc], r9', 'bt r10d, ebp', 'mov qword ptr [rsp + r11 - 0x55852efc], rdi', 'ret']
UB ID: 243 - ['mov qword ptr [rsp + r9], 0x1fa61591', 'rol qword ptr [rsp + r9], 0x88', 'mov qword ptr [rsp + r9*4], rbx', 'jae 0x7ffb72cf2be2']
UB ID: 244 - ['not dl', 'xor rax, r11', 'setp bpl', 'xor bl, dl', 'neg ax', 'add rdx, rsp', 'and eax, ecx', 'mov qword ptr [rcx + rdx - 0x20080800], r9', 'push rcx', 'mov qword ptr [rsp + rax*2], rdi', 'ret']
UB ID: 245 - ['sub r9d, 0x63114488', 'sbb rcx, r10', 'sal al, 0x27', 'rol rcx, 6', 'dec r10b', 'lea rcx, [rcx + r10*8 - 0x7521fea3]', 'bswap rcx', 'cbw', 'xor rbx, rcx', 'sal r11, 0xf5', 'mov qword ptr [rdx + rsi - 0x3da4b10a], rcx', 'lea rsi, [rdx + rsi - 0x3da4b10a]', 'not r11', 'mov edx, dword ptr [r8 + r10*2 - 0x1f4]', 'bts rax, r10', 'lea r8, [r8 + r10 - 0xf1]', 'and al, r11b', 'xor edx, ebx', 'lea rbp, [r10*8 + 0x4ba28922]', 'btr bp, r10w', 'lea edx, [rdx + r9 - 0x14486bbc]', 'rol edx, 2', 'shl r11, 0xc4', 'jae 0x7ffb72c34f31']
UB ID: 248 - ['mov r9d, dword ptr [r8 + r10*4 - 0x38b080ce]', 'xor r9d, ebx', 'sar ax, cl', 'xchg dl, bpl', 'dec r9d', 'movzx r11d, al', 'neg r9d', 'mov qword ptr [rsp + r10 - 0xe2c2034], 0xe2d5326', 'lea r10, [r11 + rax*8 - 0x2af826f2]', 'sub r10b, byte ptr [rsp + rdx - 0x3628065c]', 'inc r9d', 'rol r9d, 1', 'mov qword ptr [rsp + rdx - 0x36280663], rbx', 'cwd', 'xor dword ptr [rsp + rdx*2 - 0x6c500000], r9d', 'pop rbx', 'sub r11d, ecx', 'movsxd r9, r9d', 'add rdi, r9', 'cbw', 'movzx edx, byte ptr [r8 + rdx - 0x3627fffa]', 'sub rbp, 0x290efb9a', 'lea r8, [r8 + r11 - 0x2c618b41]', 'sal al, cl', 'xor dl, bl', 'movsx r9d, bp', 'not dl', 'call 0x7ffb72e0260c']
UB ID: 249 - ['lea rdx, [rsp + rdx + 8]', 'bts ebp, 0xa3', 'mov qword ptr [rsp + rbp*2 - 0x10], r9', 'mov rcx, qword ptr [rdx + rbp*2 - 0x10]', 'setae r11b', 'adc byte ptr [rsp + rbp - 3], bpl', 'mov qword ptr [rsi + rbp*2 - 0x20], rcx', 'lea rsi, [rsi + rbp*4 - 0x30]', 'ror r11d, 0x89', 'pop rdx', 'jbe 0x7ffb72be239f']
UB ID: 251 - ['mov ebp, 0xe30440b9', 'mov edx, dword ptr [r8]', 'movzx r11d, bp', 'lea r9, [r11 + rbp*8 - 0x40f3f7e8]', 'not r11w', 'lea r8, [r8 + r11 - 0xbf42]', 'btr bp, r9w', 'xor edx, ebx', 'sar rbp, 0x24', 'push r9', 'not edx', 'rol dword ptr [rsp + rbp*8 + 3], 0xbb', 'inc r11d', 'or dword ptr [rsp + rbp + 2], 0x7983da3', 'bswap edx', 'xor edx, 0x631288ab', 'lea rcx, [r11 + rbp*4 - 0x186aaf70]', 'not dword ptr [rsp + rbp*4 + 3]', 'push rbp', 'ror edx, 1', 'inc dword ptr [rsp + rbp + 8]', 'dec edx', 'movzx r10d, bpl', 'shr r11d, cl', 'neg r11w', 'xor edx, 0x76206f3a', 'neg r9b', 'btr r9, r11', 'mov qword ptr [rsp + rbp + 8], rbx', 'xor dword ptr [rsp + rbp + 8], edx', 'mov rbx, qword ptr [rsp + rbp + 8]', 'shl r9w, 0xad', 'movsxd rdx, edx', 'shl byte ptr [rsp + rbp], 0x62', 'adc rdi, rdx', 'xor qword ptr [rsp + rcx + 0x1869f029], 0xffffffff841f989a', 'shr rcx, 0xe7', 'mov rax, qword ptr [rsi + rbp*8]', 'neg r11', 'rol r9d, cl', 'shr bp, 0x6a', 'add rbp, qword ptr ss:[rax + rbp*4]', 'rol dword ptr [rsp + r11 + 2], cl', 'mov rdx, rbp', 'mov rbp, qword ptr [r11 + rsi + 8]', 'and rdx, rbp', 'mov qword ptr [rsp + r11*4 + 8], r10', 'shl r10, cl', 'not rdx', 'je 0x7ffb72d35ddb']
UB ID: 252 - ['mov ecx, 0x41aed209', 'mov ebp, dword ptr [r8 + rcx - 0x41aed209]', 'movzx eax, cx', 'rol ebp, 1', 'push rbx', 'cbw', 'not r9', 'dec rax', 'xor dword ptr [rsp + r11 - 0xffb6], ebp', 'pop rbx', 'movsxd rbp, ebp', 'add rdi, rbp', 'bswap edx', 'cdqe', 'movzx ebp, byte ptr [rax + r8 + 0xf]', 'shl r9w, 0x6a', 'ror rax, cl', 'setnp dl', 'xor bpl, bl', 'dec dx', 'sub bpl, 0x17', 'xor bpl, al', 'inc eax', 'sub r9d, r11d', 'rol bpl, 1', 'movzx r10d, dl', 'bswap r11', 'xor bpl, dl', 'sal edx, 0x3e', 'sbb bpl, 0x89', 'call 0x7ffb72d17c3f']
UB ID: 253 - ['push -0x2a6d0dce', 'mov eax, 0xea0a2f99', 'btc rax, 0x32', 'mov rdx, qword ptr [rsi]', 'neg word ptr [rsp + 2]', 'call 0x7ffb72d23f22']
UB ID: 254 - ['adc rdi, rcx', 'mov qword ptr [rsp + rax - 0x5ff31fe8], -0x34ce65d5', 'mov rax, qword ptr [rsi + rax - 0x5ff31ffe]', 'ror word ptr [rsp + rbp + 0x646d8c32], 0x27', 'mov rcx, qword ptr [rsi + rbp + 0x646d8c29]', 'and qword ptr [rsp + r9*2 - 0xe91a], r11', 'jle 0x7ffb72ec8c9c']
UB ID: 255 - ['bts edx, ebp', 'adc rax, rcx', 'inc r11', 'mov qword ptr [rbp + rsi + 0x646d8c29], rax', 'btr r11w, dx', 'lea rsi, [rsi + r9 - 0x748f]', 'movzx eax, r11b', 'adc eax, ebp', 'dec al', 'mov qword ptr [rsp + rbp + 0x646d8c1f], rdi', 'ret 0x18']
UB ID: 256 - ['or r11b, cl', 'not bpl', 'bts rcx, r10', 'xor r9b, r11b', 'rol bpl, 1', 'call 0x7ffb72dc1c24']
UB ID: 257 - ['sbb bpl, 0x8a', 'not bpl', 'sub bpl, 0x94', 'rol bpl, 1', 'ror r10, cl', 'not r10b', 'xor bl, bpl', 'mov byte ptr [rsp + r11 - 0x68a991f0], r10b', 'sar rdx, cl', 'lea rbp, [rsp + rbp + 0x10]', 'cdq', 'jns 0x7ffb72c3c452']
UB ID: 258 - ['btr r11d, 0xb9', 'sbb r10w, 0x1933', 'ror r10w, 1', 'call 0x7ffb72e2aa44']
UB ID: 259 - ['jb 0x7ffb72e6d2f9']
UB ID: 260 - ['not byte ptr [rsp + rax + 0x6e]', 'pop r11', 'pop r11', 'pop r11', 'js 0x7ffb72be239f']
UB ID: 262 - ['shl eax, 0x66', 'xor r11d, ebx', 'not cl', 'cqo', 'lea r11d, [r11 + r10*2 - 0x4359b042]', 'push r10', 'rol r11d, 2', 'neg r11d', 'inc r11d', 'mov qword ptr [rsp + rcx*2 - 0x7ff2], rbx', 'lea rbp, [rax + rdx*8 + 0x4841314]', 'lea r9, [rdx + rax + 0x3b261aa9]', 'rol cx, 0x2f', 'xor dword ptr [rsp + rcx*8 - 0x4fff0], r11d', 'lea rdx, [r10 + r9*8 - 0x73ed8cc8]', 'sal r9w, 0xe4', 'mov rbx, qword ptr [rsp + rcx*2 - 0x13ff0]', 'movsxd r11, r11d', 'jp 0x7ffb72cb503a']
UB ID: 264 - ['call 0x7ffb72ec07c8']
UB ID: 265 - ['mov r9, r11', 'mov r8d, 0x6205a28', 'rol r8, 0x94', 'movabs rbx, 0x7ff9e7130000', 'sbb r9, rbx', 'lea rdi, [rip - 7]', 'mov ebx, 0xfa1b7d12', 'bswap ebx', 'lea r11, [r11 + rbx*2 - 0x24fa37f8]', 'and bx, 0xa629', 'mov r8d, dword ptr [r11 + rbx - 0x127d0228]', 'xchg rbp, rbx', 'shl ebp, 0x10', 'xor r8d, r9d', 'lea r10, [rbx*2 + 0x670db818]', 'lea r8d, [r8 + rbx*2 - 0x4f884355]', 'mov eax, ebx', 'sub ebx, ebp', 'neg r8d', 'add al, 0x1a', 'sub rbx, -0x227052cb', 'movsx ecx, ax', 'xor r8d, 0xc80e8daa', 'btr ax, 0x22', 'sal r10d, 0x5c', 'inc r8d', 'movzx edx, bpl', 'shr al, 0x83', 'ror dx, 0x49', 'not r8d', 'push r9', 'shr bl, 0xc1', 'inc dx', 'xor dword ptr [rsp + rbx*2 - 0x658aa8f2], r8d', 'rol al, 0x81', 'jno 0x7ffb72ad8509']
UB ID: 266 - ['sbb al, bh', 'pop r9', 'xchg rax, rcx', 'movsxd r8, r8d', 'call 0x7ffb72922c46']
UB ID: 267 - ['add rdi, r8', 'mov qword ptr [rsp + rbx - 0x32c55479], r10', 'mov qword ptr [rsp + rbx - 0x32c55479], rdi', 'ret']
UB ID: 268 - ['rol ebp, 3', 'sub r10d, edx', 'call 0x7ffb728f626d']
UB ID: 269 - ['neg ebp', 'mov qword ptr [rsp + rbx - 0x4ba31c8], 0x1b0d303', 'mov qword ptr [rsp + rbx*2 - 0x9746390], r9', 'bts r10d, edx', 'setae r10b', 'xor cx, r10w', 'xor dword ptr [rsp + rbx*2 - 0x9746390], ebp', 'ror rbx, cl', 'pop r9', 'call 0x7ffb72cb6307']
UB ID: 270 - ['ror bl, 1', 'dec bl', 'or rax, 0x2e1eb223', 'pop rcx', 'adc rcx, -0xc84a8', 'jmp rcx']
UB ID: 271 - ['rol bl, 1', 'neg bl', 'push rax', 'not dl', 'xor r9b, bl', 'lea rbx, [rsp + rbx + 0x18]', 'pop rax', 'sub qword ptr [rsp + rdx*2 - 0x1fa], rax', 'mov qword ptr [rbx + rdx - 0xff], r10', 'cwde', 'movsx ecx, dl', 'mov qword ptr [rsp + rbp*2 - 0xd392], rdi', 'ret 8']
UB ID: 272 - ['mov eax, dword ptr [r10 + r11 - 8]', 'xor eax, r9d', 'lea eax, [rax + r8 + 0x163c649f]', 'lea rdx, [r10 + rbx*4 + 0x7f1fac84]', 'mov qword ptr [rsp + rcx - 0x43881e58], rcx', 'bswap eax', 'lea rbp, [r10*2 + 0x1d096c3e]', 'xadd dx, bp', 'sbb eax, r10d', 'neg eax', 'rol eax, 3', 'add eax, r10d', 'ror ebp, cl', 'mov qword ptr [rsp + rcx - 0x43881e40], r9', 'ror r8b, 0x63', 'call 0x7ffb72c83b03']
UB ID: 273 - ['movsxd rax, eax', 'not r10', 'dec r10', 'lea rdx, [r8 + rbx*4 - 0x50c28459]', 'add rdi, rax', 'add cx, r8w', 'adc bl, r10b', 'mov rax, qword ptr [rcx + rsi - 0x4388bc18]', 'mov qword ptr [rsp + rcx - 0x4388bc28], 0x50a0b70e', 'sub byte ptr [rsp + r10 + 3], cl', 'xchg qword ptr [rsp + 8], r10', 'add r10, 0x2210e7', 'jmp r10']
UB ID: 274 - ['not rdx', 'ror r10b, 1', 'inc r8b', 'xor r9b, r10b', 'sub qword ptr [rsp + rbx*2 - 0x12453ae6], rdx', 'lea r10, [rsp + r10 + 0x28]', 'call 0x7ffb72bd3fa7']
UB ID: 275 - ['bts r10, 1', 'add r10w, dx', 'xor r8w, 0x3c05', 'xor r9w, r8w', 'lea rcx, [rdx*4 - 0x5e52b7d5]', 'not cl', 'add ebp, edx', 'lea r8, [rsp + r8 + 8]', 'bts bp, 0x38', 'movzx ebx, dl', 'mov qword ptr [r8 + rbx*8 - 0x370], rax', 'mov qword ptr [rsp + rbp - 0x723adb5], rdx', 'mov edx, dword ptr [r11 + rbp*4 - 0x1c8eb6da]', 'cmovae rcx, qword ptr [rsp + rbp*4 - 0x1c8eb6d4]', 'xor edx, r9d', 'mov qword ptr [rsp + rbp*4 - 0x1c0eb6d4], 0x5000e68a', 'lea edx, [rdx + r10*2 - 0x6b62e4bb]', 'bswap edx', 'dec edx', 'inc byte ptr [rsp + rbx - 0x67]', 'jnp 0x7ffb72d24068']
UB ID: 276 - ['mov edx, 0x200f6b0d', 'lea r8, [rdx + rdx*8 + 0x77257aa0]', 'movzx ecx, dx', 'lea rax, [rcx + rcx*2 - 0x25c4edc]', 'and cx, 0x1730', 'lea r10, [rdx + r10 + 0x353d58b6]', 'sal r8d, 0x6a', 'xor r9, r10', 'sar dl, 4', 'lea rbp, [r8 + rax*4 + 0x5a92ba5]', 'mov qword ptr [rsi + rdx*2 - 0x401ed608], r10', 'mov r10d, dword ptr [r11 + rdx*2 - 0x401ed60c]', 'xor eax, eax', 'shr bp, 0x43', 'dec rdx', 'xor r10d, r9d', 'ror r10d, 3', 'xadd al, dl', 'sal rax, 0xa1', 'bswap r10d', 'movzx ebx, ax', 'sal rbp, 0x28', 'jb 0x7ffb72ce03ed']
UB ID: 277 - ['rol rbx, 0x34', 'add rdi, r10', 'mov qword ptr [rsp + rdx], rdx', 'inc bl', 'je 0x7ffb72b801d7']
UB ID: 278 - ['mov rax, qword ptr [r11 + rdx - 0x14]', 'lea r11, [r11 + rdx*2 - 0x14]', 'dec cl', 'or word ptr [rsp + rdx + 2], bx', 'xor rax, r9', 'inc rax', 'and ecx, 0x3a926d18', 'pop rdx', 'movsx r10d, dx', 'not rax', 'not r10', 'rol rax, 1', 'xchg r8d, r10d', 'lea rax, [rax + rcx*2 - 0x73a60719]', 'rol r8w, 0xee', 'xor r9, rax', 'lea r10, [rdx + 0x51a68029]', 'lea rbx, [rbp + r10 - 0x3c4779ea]', 'mov qword ptr [rcx + rsi - 0x4010], rax', 'call 0x7ffb72e14c8d']
UB ID: 279 - ['lea rax, [rsp + 0x1f8]', 'call 0x7ffb72cf3ab7']
UB ID: 280 - ['call 0x7ffb72cf7430']
UB ID: 281 - ['mov edx, dword ptr [r11 - 4]', 'mov r8d, 0x1602999f', 'xor edx, r9d', 'lea rbx, [r8*2 - 0x7cd41e6e]', 'movzx eax, bl', 'rol edx, 1', 'inc bx', 'xor eax, 0x4c1a5a8b', 'sub al, 0xb', 'inc edx', 'mov r10d, 0x9c2fcb86', 'bts r10d, eax', 'ror edx, 1', 'sal r10w, 9', 'or r8w, bx', 'xchg rbp, rbx', 'dec edx', 'shl r8, 0x76', 'sal eax, 0xec', 'neg edx', 'cwde', 'lea rbx, [r10 + rbx - 0xdef94d3]', 'push r9', 'movsx ecx, dx', 'mov r10, r8', 'sub ebx, 0x8182d5bf', 'bts eax, 0xa9', 'mov rdx, qword ptr [rsi + rcx*2]', 'ror cx, 0xc2', 'push rax', 'adc r10, rdx', 'mov qword ptr [rsp + rcx + 8], 0x6fa95096', 'mov qword ptr [rsi + rcx], r10', 'mov qword ptr [rsp + rcx*2], rdi', 'ret 8']
UB ID: 282 - ['mov ebp, 0x638b56ae', 'lea rdx, [rbp + rbp*4 + 0x24035c1a]', 'lea r8, [rdx*4 - 0x4fde93f1]', 'mov rcx, qword ptr [rsi + rbp - 0x638b56ae]', 'shr dl, 0xa6', 'lea rbx, [r8*8 - 0x6dc37fea]', 'jnp 0x7ffb72c85968']
UB ID: 283 - ['neg edx', 'lea edx, [rdx + rbp*2 + 0x4be269c6]', 'bswap edx', 'pop rcx', 'inc r8w', 'push r9', 'xor dword ptr [rsp + rbp + 0x638b56ae], edx', 'pop r9', 'xor rcx, 0x4a8ee4af', 'lea r10, [rbp + r8*8 - 0x7fcb6f73]', 'movsxd rdx, edx', 'xchg rbx, r10', 'adc rdi, rdx', 'sub ebp, 0xc09ee0a3', 'mov rax, qword ptr [rsi + rax - 0x42357f8e]', 'inc ebp', 'mov rdx, qword ptr [rsi + rdx - 0x1ca939df]', 'sal cx, 0x4d', 'js 0x7ffb72b9c70a']
UB ID: 284 - ['add rax, rdx', 'neg r8', 'sar r10b, 0x47', 'mov qword ptr [rsi + 8], rax', 'adc rsi, 8', 'call 0x7ffb72c0f627']
UB ID: 285 - ['not eax', 'shr bpl, 0xe4', 'movsx ebx, r10w', 'push rcx', 'bswap eax', 'mov qword ptr [rsp + rdx + 8], r10', 'dec eax', 'add cx, 0x220f', 'call 0x7ffb72f0a2a3']
UB ID: 286 - ['add qword ptr [rsp + rdx + 0x18], r9', 'add bx, cx', 'xor dword ptr [rsp + rdx + 0x18], eax', 'xchg r10w, r8w', 'mov qword ptr [rsp + rdx], r10', 'mov r9, qword ptr [rsp + rdx*4 + 0x18]', 'and r8w, r10w', 'mov dword ptr [rsp + rdx*8 + 0x11], r10d', 'or cx, word ptr [rsp + rdx*8 + 3]', 'movsxd rax, eax', 'rol r8d, 0xea', 'btc r10, 0xa7', 'btr r8, r10', 'adc rdi, rax', 'xadd bpl, dl', 'mov qword ptr [rsp + rdx + 8], rcx', 'push rcx', 'add rdx, qword ptr [r11 + rdx*2 - 0xc]', 'bts ecx, 6', 'mov qword ptr [rsp + rcx - 0xffdf], rcx', 'lea r11, [r11 + rcx - 0x1000b]', 'xor rdx, r9', 'not rdx', 'sal byte ptr [rsp + rcx*2 - 0x1fff2], 0xe3', 'bswap rdx', 'not rdx', 'call 0x7ffb72c5f999']
UB ID: 287 - ['mov qword ptr [rsp + rax*2 - 0xe9f0], rbp', 'mov qword ptr [rsi + rax*4 - 0x1d3e8], rbx', 'shl dl, 0x25', 'pop rbx', 'movzx r10d, byte ptr [rax + r11 - 0x7505]', 'lea r11, [rax + r11 - 0x7505]', 'xor r10b, r9b', 'call 0x7ffb72bf7fe6']
UB ID: 288 - ['lea r10, [rsp + r10 + 0x28]', 'cwde', 'rol r8b, 0x86', 'mov qword ptr [rsp + rax - 0x74f8], rax', 'add r8, qword ptr [r10 + rax*2 - 0xe9f0]', 'mov qword ptr [rax + rsi - 0x7508], r8', 'cqo', 'neg byte ptr [rsp + rax - 0x74ea]', 'sar qword ptr [rsp + rax - 0x74ee], cl', 'lea rsi, [rsi + rax - 0x7508]', 'push rax', 'pop rax', 'pop rcx', 'pop rbp', 'pop r10', 'pop r8', 'pop r8', 'jae 0x7ffb72a83ef6']
UB ID: 289 - ['and cx, 0x6eae', 'sets bpl', 'movsxd rdx, edx', 'adc rdi, rdx', 'xchg eax, ecx', 'mov ebx, dword ptr [r11 - 4]', 'mov r8d, 0x593a3e09', 'movzx r10d, r8w', 'xor ebx, r9d', 'push r8', 'rol word ptr [rsp + r10*2 - 0x7c0d], 0x29', 'xor ebx, 0xe510688e', 'inc ebx', 'lea rdx, [r8 + r8*8 - 0x124729db]', 'call 0x7ffb72c12ee4']
UB ID: 290 - ['ror eax, 1', 'shl ebp, 0x1a', 'dec eax', 'pop r8', 'add r8, 0x43503', 'jmp r8']
UB ID: 291 - ['xadd ax, bx', 'xor bpl, r9b', 'rol bpl, 1', 'lea r10, [r8 + r8 - 0x7a65ac77]', 'shr ebx, 0xab', 'xor r10, rax', 'neg bpl', 'movsx edx, r8w', 'xadd dl, r8b', 'xor bpl, 0x28', 'add bpl, 0x2a', 'shr bx, 0x2e', 'lea rcx, [rdx + r10*2 + 0x98c26ab]', 'xor r9b, bpl', 'lea rax, [rcx + rdx*8 - 0x19c5e8cc]', 'add rbp, rsp', 'cqo', 'sub edx, 0x8825fa2f', 'sub r10, r10', 'adc rbx, qword ptr [rbp + rbx]', 'sub r10b, 2', 'mov qword ptr [rsi + r8*2 - 0x513e2ec4], rbx', 'add eax, 0x8493bf92', 'bswap r8', 'movzx ebx, dl', 'lea rsi, [rsi + r10 - 0x10e]', 'dec dl', 'bts r10w, r10w', 'jae 0x7ffb72a83ef6']
UB ID: 292 - ['mov ecx, 0xe10e46ac', 'movzx r8d, cl', 'movzx ebp, word ptr [r8 + r11 - 0xae]', 'call 0x7ffb72d0f014']
UB ID: 293 - ['mov qword ptr [rsp + rbx - 0x1d4ded], r8', 'add bpl, 0x31', 'sal ax, 8', 'xadd dword ptr [rsp + rbx*4 - 0x7537b4], eax', 'call 0x7ffb72bf3ace']
UB ID: 294 - ['bswap ebp', 'mov qword ptr [rsp + rdx*2 - 0x1ff06], r10', 'ror bl, 1', 'xchg dword ptr [rsp + rbp*2 - 0x59030688], ebp', 'dec bl', 'inc ecx', 'shr dword ptr [rsp + rdx - 0xff82], cl', 'not bl', 'xor bl, 0xaa', 'ror qword ptr [rsp + rdx - 0xff83], cl', 'adc qword ptr [rsp + rdx*2 - 0x1ff06], -0x21faa27b', 'pop rax', 'not bl', 'xor r9b, bl', 'add rbx, rsp', 'not bpl', 'btr rdx, rbp', 'mov r10, qword ptr [rbx + rdx*4 - 0x3fe0c]', 'mov qword ptr [rsi + rdx*4 - 0x3fe14], r10', 'xadd r8b, bpl', 'movzx r10d, byte ptr [rdx + r11 - 0xff85]', 'lea rax, [rbp + r8 + 0x2aa4f31]', 'xor r10b, r9b', 'neg r10b', 'neg r8w', 'cwde', 'xor r10b, 0xa2', 'xor ax, 0x73a0', 'inc r10b', 'ror cl, 0x27', 'rol r10b, 1', 'not r10b', 'shl al, 0x85', 'or rcx, rax', 'cmovbe rbp, rdx', 'xor r9b, r10b', 'shl eax, cl', 'add r8b, bpl', 'adc r10, rsp', 'sub r8d, 0x3fb4e99e', 'jl 0x7ffb72e555da']
UB ID: 295 - ['mov qword ptr [rsp + rdx*2 - 0x1fe00], 0x611cbc8a', 'inc r8d', 'xadd rax, rbp', 'ror r8d, 1', 'dec ebp', 'ror dword ptr [rsp + rdx*2 - 0x3fbff], 0x65', 'dec r8d', 'neg r8d', 'push rdx', 'lea rbx, [rax - 0x62d921d8]', 'mov qword ptr [rsp + rdx - 0x1fdf8], r9', 'dec qword ptr [rsp + rdx - 0x1fe00]', 'and rbx, qword ptr [rsp + rdx - 0x1fe00]', 'xor dword ptr [rsp + rdx - 0x1fdf8], r8d', 'bswap r10', 'rol ax, 0xae', 'mov r9, qword ptr [rsp + rdx*4 - 0x7f7f8]', 'setae byte ptr [rsp + rdx - 0x1fdfb]', 'jb 0x7ffb72ea2b64']
UB ID: 296 - ['lea rdi, [rip - 7]', 'mov ebx, 0xfa1b7d12', 'bswap ebx', 'lea r11, [r11 + rbx*2 - 0x24fa37f8]', 'and bx, 0xa629', 'mov r8d, dword ptr [r11 + rbx - 0x127d0228]', 'xchg rbp, rbx', 'shl ebp, 0x10', 'xor r8d, r9d', 'lea r10, [rbx*2 + 0x670db818]', 'lea r8d, [r8 + rbx*2 - 0x4f884355]', 'mov eax, ebx', 'sub ebx, ebp', 'neg r8d', 'add al, 0x1a', 'sub rbx, -0x227052cb', 'movsx ecx, ax', 'xor r8d, 0xc80e8daa', 'btr ax, 0x22', 'sal r10d, 0x5c', 'inc r8d', 'movzx edx, bpl', 'shr al, 0x83', 'ror dx, 0x49', 'not r8d', 'push r9', 'shr bl, 0xc1', 'inc dx', 'xor dword ptr [rsp + rbx*2 - 0x658aa8f2], r8d', 'rol al, 0x81', 'jno 0x7ffb72ad8509']
UB ID: 297 - ['jnp 0x7ffb72c80403']
UB ID: 298 - ['rol r8d, 0xb3', 'lea r11, [r11 + rdx*8 - 6]', 'sal r8b, 0x41', 'call 0x7ffb728fa81a']
UB ID: 299 - ['cdq', 'lea r10d, [rdx + r10 - 0x175dfdda]', 'bswap r10d', 'movzx ecx, word ptr [rsp + 0x12]', 'add r10d, edx', 'rol ebx, cl', 'mov qword ptr [rsp + rcx*4 - 0x3bef0], rcx', 'neg r10d', 'rol r10d, 3', 'sar ax, 0x47', 'sub r10d, edx', 'mov qword ptr [rsp + rcx*4 - 0x3bee8], r9', 'sal al, 0x66', 'shr word ptr [rsp + rcx*8 - 0x77de8], 0xc9', 'xor dword ptr [rsp + rcx*2 - 0x1df6c], r10d', 'movzx ebp, r8b', 'dec ecx', 'mov r9, qword ptr [rsp + rcx*4 - 0x3bee4]', 'pop r8', 'movsxd r10, r10d', 'movsx r8d, bl', 'rol bx, 0x24', 'add rdi, r10', 'and eax, 0x2584b827', 'mov qword ptr [rsp + rax - 0x25840000], rdi', 'ret 8']
UB ID: 300 - ['mov r8, qword ptr [rbp]', 'dec rcx', 'xadd dword ptr [rsp + 0x25], r10d', 'mov qword ptr [rsi], r8', 'add r10, rdx', 'pop rdx', 'pop rbp', 'pop r10', 'pop rax', 'pop r10', 'pop rbx', 'jmp rdi']
UB ID: 301 - ['sub qword ptr [rsp + rbx*2 - 0x6415796a], rbx', 'movzx r10d, byte ptr [rbx + r11 - 0x320abcba]', 'not word ptr [rsp + rbx - 0x320abcb3]', 'call 0x7ffb72ceb5c9']
UB ID: 302 - ['lea r10, [rsp + r10 + 0x18]', 'rol rbp, cl', 'mov dword ptr [r10 + rbx*2 - 0x641596b6], eax', 'movzx eax, cl', 'xchg qword ptr [rsp + 8], rax', 'add rax, 0x2ad44', 'jmp rax']
UB ID: 303 - ['mov qword ptr [rsp + rbx*2 - 0x641596b6], rdi', 'ret 0x10']
UB ID: 304 - ['mov ebp, 0x7fa16588', 'mov ecx, ebp', 'movzx r10d, byte ptr [r11 + rbp - 0x7fa16589]', 'xor rcx, 0xffffffffcda1c336', 'xor r10b, r9b', 'neg r10b', 'mov edx, 0x793ab593', 'sub r10b, 0xb9', 'lea rax, [rcx + rdx*4 - 0x12c25963]', 'neg ax', 'rol r10b, 1', 'cdqe', 'pop rbx', 'add rbx, -0x4b79ec', 'jmp rbx']
UB ID: 305 - ['movzx r8d, dl', 'inc ebp', 'call 0x7ffb72e10cdf']
UB ID: 306 - ['not dx', 'add rdi, rbp', 'movzx eax, byte ptr [r11 + r8 - 0xc3]', 'movzx ebp, r10w', 'sar r8b, 0x26', 'lea r11, [rdx + r11 + 0x7bd43eb8]', 'dec r10b', 'adc r10, -0xa5d8c5c', 'dec r10', 'xor al, r9b', 'xadd rbx, r8', 'xor dx, 0xb0bd', 'ror al, 1', 'add bp, bx', 'xadd r10d, ebx', 'sbb al, 0xaf', 'rol al, 1', 'sbb al, 0xff', 'lea rcx, [r8*2 + 0x98a7f82]', 'dec ecx', 'btr r10, rcx', 'xor r9b, al', 'bts bx, r10w', 'setae cl', 'push r10', 'mov word ptr [rsi + r8 - 0xc7], ax', 'call 0x7ffb72ac3eb4']
UB ID: 307 - ['mov qword ptr [rsp + r8 - 0xbd], rbx', 'lea rsi, [rsi + rdx + 0x7bd48df7]', 'pop r8', 'pop r8', 'jb 0x7ffb72a83ef6']
UB ID: 308 - ['xchg dword ptr [rsp + rax - 0x40b31500], eax', 'inc ax', 'neg bpl', 'sub rdx, -0x4914f3', 'xor r9b, bpl', 'pop r8', 'add rbp, rsp', 'sal r10b, 0xe4', 'je 0x7ffb72a5292e']
UB ID: 309 - ['mov rdx, qword ptr [rbp + r10]', 'inc ebx', 'mov qword ptr [rsi + r10 - 6], rdx', 'call 0x7ffb72e9ab9b']
UB ID: 310 - ['mov ebx, dword ptr [r11 - 4]', 'mov r8d, 0x593a3e09', 'movzx r10d, r8w', 'xor ebx, r9d', 'push r8', 'rol word ptr [rsp + r10*2 - 0x7c0d], 0x29', 'xor ebx, 0xe510688e', 'inc ebx', 'lea rdx, [r8 + r8*8 - 0x124729db]', 'call 0x7ffb72c12ee4']
UB ID: 311 - ['mov edx, dword ptr [r11 - 4]', 'mov ebp, 0x34997e3b', 'mov ecx, 0x160090a2', 'movsx r10d, bp', 'xor edx, r9d', 'rol edx, 1', 'add rbp, -0x615681cb', 'jb 0x7ffb72c1302b']
UB ID: 312 - ['movzx eax, bp', 'inc edx', 'ror edx, 1', 'add bp, 0x4821', 'sete al', 'dec edx', 'neg r10w', 'not ebp', 'neg edx', 'push r9', 'xor dword ptr [rsp + rbp - 0x2cbdbb6e], edx', 'movzx ebx, bpl', 'sal ebx, 0x12', 'pop r9', 'movsxd rdx, edx', 'sar bp, cl', 'adc rdi, rdx', 'btr ax, cx', 'btc ecx, eax', 'cmovae bp, bx', 'movzx ecx, byte ptr [r11 + rbp*2 - 0x597a0005]', 'jae 0x7ffb72cedc30']
UB ID: 313 - ['rol cl, 1', 'xor cl, bl', 'xor r9b, cl', 'add rcx, rsp', 'cwde', 'mov r8, qword ptr [rcx + rbp*2 - 0x597a018a]', 'mov rbx, r8', 'dec eax', 'movzx r10d, byte ptr [r11 + rbp - 0x2cbd00cb]', 'cqo', 'rol dx, 0xce', 'movzx r8d, dl', 'lea r11, [r11 + rbp*2 - 0x597a0190]', 'xor r10b, r9b', 'sub r10b, 0x90', 'sar eax, 7', 'add rdx, -0x1cc6b3f5', 'rol r10b, 1', 'lea rcx, [r8*4 - 0x28661b77]', 'call 0x7ffb72b99623']
UB ID: 314 - ['xor r10b, 0xa4', 'mov qword ptr [rsp + rbp - 0x2cbd00c5], rcx', 'or qword ptr [rsp + rbp*2 - 0x597a018a], rcx', 'sal r8, 0xc7', 'ror r10b, 1', 'xor r9b, r10b', 'call 0x7ffb72bec884']
UB ID: 315 - ['cqo', 'mov rbx, rsi', 'mov qword ptr [rsp + rdx*8], rdx', 'mov r10d, 0xf9b3ba4', 'mov qword ptr [rsi + rdx*2 - 8], rbx', 'mov eax, dword ptr [r11 + rdx*4 - 4]', 'lea r8, [rdx + rdx - 0x475f36b]', 'xor eax, r9d', 'dec eax', 'xadd byte ptr [rsp + rdx + 2], dh', 'jp 0x7ffb72ea68b7']
UB ID: 316 - ['call 0x7ffb72d55a5d']
UB ID: 317 - ['xor rbp, rbx', 'mov eax, edx', 'sub rax, -0x6bd150', 'mov qword ptr [rsp + rbx - 0x56168001], rbp', 'lea rcx, [rsp + rcx + 0x10]', 'add rax, qword ptr [rsp + rbp - 0x1a]', 'add byte ptr [rsp + rbx - 0x56167ffa], ah', 'or eax, dword ptr [rsp + rbp*4 - 0x67]', 'mov rbx, qword ptr [rbx + rcx - 0x56168001]', 'mov qword ptr [rsp + rbp - 0x12], rax', 'mov r11, rbx', 'sal word ptr [rsp + rbp - 0x18], 0xe1', 'xadd r9d, ebp', 'mov r9, rsi', 'setnp al', 'pop rcx', 'pop rdi', 'jle 0x7ffb72ad1e3f']
UB ID: 318 - ['push -0x6b5645d1', 'mov ebp, dword ptr [rsp + 2]', 'mov edi, 0x37064a29', 'mov r10, r11', 'inc byte ptr [rsp + rdi*2 - 0x6e0c9452]', 'push rdi', 'mov ecx, 0x7da1230d', 'movabs rdi, 0x7ff9e7130000', 'shl dword ptr [rsp + rcx - 0x7da1230d], 0xb8', 'call 0x7ffb72bc5400']
UB ID: 319 - ['mov r8d, 0xa005a437', 'mov rcx, qword ptr [r9]', 'lea rsi, [r8*4 + 0x618344a4]', 'movsx edi, r8w', 'movzx edx, byte ptr [r11]', 'neg rdi', 'xor dl, r10b', 'movsx eax, sil', 'sub eax, 0x433a0c1f', 'rol dl, 1', 'dec esi', 'movzx ebp, di', 'inc dl', 'xor dl, 0x1a', 'sub r8w, di', 'sbb dl, 0x91', 'call 0x7ffb72c2c311']
UB ID: 320 - ['rol dword ptr [rsp + rbp - 0x5bc0], 0x85', 'cdqe', 'mov qword ptr [rdx + rax + 0x433a0c9f], rcx', 'mov qword ptr [rsp + rax + 0x433a0c9f], rax', 'bts eax, ebp', 'mov rdx, qword ptr [rbp + r9 - 0x5bc1]', 'xor byte ptr [rsp + rbp - 0x5bbd], al', 'bts esi, 1', 'push rdi', 'movzx r8d, byte ptr [r11 + rbp - 0x5bc8]', 'sub rax, rax', 'xor r8b, r10b', 'dec eax', 'sbb r8b, al', 'rol r8b, 1', 'xor r8b, al', 'neg r8b', 'add bp, 0x8a2', 'xor r10b, r8b', 'lea r8, [rsp + r8 + 0x18]', 'dec esi', 'dec dword ptr [rsp + rbp - 0x645e]', 'mov qword ptr [r8 + rbp - 0x646b], rdx', 'sal rax, 0xd2', 'lea r8, [rdi + rsi*8 + 0x1f94548b]', 'sar r8b, 0xe4', 'mov rsi, qword ptr [r9 + rbp*2 - 0xc8c6]', 'movsx edx, word ptr [rsp + rbp*2 - 0xc8d0]', 'lea r9, [rbp + r9 - 0x6453]', 'xchg ecx, edi', 'call 0x7ffb72bda643']
UB ID: 321 - ['xor dword ptr [rsp + rdx*2 + 0x10], r8d', 'mov r10, qword ptr [rsp + rdx*2 + 0x10]', 'call 0x7ffb72d48e47']
UB ID: 322 - ['sbb cx, dx', 'call 0x7ffb72ecd8d1']
UB ID: 323 - ['sal r8b, 0x87', 'xor r10, rbp', 'mov qword ptr [rsp + r8*2 - 0x1a400], 0x2396a3b1', 'mov qword ptr [r9 + rdi*2 + 0x4f5d8062], rbp', 'xchg esi, edi', 'shl byte ptr [rsp + r8*2 - 0x1a400], 2', 'not di', 'lea r9, [r9 + r8 - 0xd1f8]', 'adc word ptr [rsp + r8*2 - 0x1a3fb], 0xb69b', 'mov ebp, r8d', 'mov ecx, dword ptr [r8 + r11 - 0xd1f6]', 'pop rax', 'lea r11, [r11 + r8*2 - 0x1a3f2]', 'xor di, 0x4803', 'xor ecx, r10d', 'neg ecx', 'ror si, 0xc1', 'adc edx, 0xe528b814', 'xchg eax, ebp', 'dec ecx', 'bswap ecx', 'xchg bpl, al', 'xor di, 0x1b28', 'btc dx, bp', 'ror ecx, 1', 'push rdi', 'push r8', 'inc ecx', 'add word ptr [rsp + rax*2 - 0x1a445], si', 'btc r8w, 0x1e', 'mov qword ptr [rsp + r8*2 - 0x123f8], r10', 'sbb dword ptr [rsp + r8*2 - 0x123ff], eax', 'xor dword ptr [rsp + r8 - 0x91f8], ecx', 'cdqe', 'mov r10, qword ptr [rsp + r8*2 - 0x123f8]', 'mov qword ptr [rsp + r8 - 0x91f8], rsi', 'or r8w, dx', 'movsxd rcx, ecx', 'adc rbx, rcx', 'mov qword ptr [rsp + rax - 0xd223], rbx', 'ret 8']
UB ID: 324 - ['lea rdi, [rsi + rsi - 0x267283c4]', 'rol rdx, 3', 'ror sil, 1', 'inc byte ptr [rsp + rsi - 0x3f87610e]', 'jno 0x7ffb72c71a8b']
UB ID: 325 - ['movsxd rdi, edi', 'add rbx, rdi', 'mov qword ptr [rsp + rax + 0x4c69], rbp', 'movzx esi, byte ptr [r11 + rdx*2 - 0x1fff2]', 'inc al', 'lea r11, [rbp + r11 - 0x589c1ff3]', 'xor sil, r10b', 'add sil, dl', 'dec byte ptr [rsp + rax*2 + 0x98cf]', 'rol sil, 1', 'and dl, 5', 'cdqe', 'mov edi, dword ptr [rsp + rbp - 0x589c1ffb]', 'inc sil', 'lea r8, [rbp*2 - 0x3bc483fa]', 'and dword ptr [rsp + rax + 0x4c6a], r8d', 'not sil', 'push r8', 'dec word ptr [rsp + rax*2 + 0x98c0]', 'shr qword ptr [rsp + rax + 0x4c65], cl', 'ror sil, 1', 'ror byte ptr [rsp + rax*2 + 0x98d4], 4', 'ror r8, cl', 'xor sil, 0x94', 'xadd r8d, eax', 'inc rbp', 'rol bp, 0x62', 'xor r10b, sil', 'lea rsi, [rsp + rsi + 0x18]', 'shl bpl, 0xc3', 'xadd dword ptr [rsp + rax*4 - 0x756e], edx', 'mov rax, qword ptr [rbp + rsi - 0x589c8020]', 'dec rcx', 'mov qword ptr [r9 + rcx - 0x6121], rax', 'sal edx, cl', 'lea r9, [rcx + r9 - 0x6121]', 'jp 0x7ffb72ac5884']
UB ID: 326 - ['adc ebp, ecx', 'pop rax', 'pop rax', 'pop rsi', 'jns 0x7ffb72acc73a']
UB ID: 327 - ['dec rdx', 'lea rdx, [rsp + rdx - 0x2021fab8]', 'call 0x7ffb72bb57d1']
UB ID: 328 - ['lea rsp, [rsp + 0x10]', 'ja 0x7ffb728bcf88']
UB ID: 329 - ['jmp rbx']
UB ID: 330 - ['mov r8, qword ptr [r9]', 'mov edi, 0x5a36a639', 'mov rax, qword ptr [rdi + r9 - 0x5a36a631]', 'add r8, rax', 'mov qword ptr [r9 + rdi - 0x5a36a631], r8', 'mov r8d, dword ptr [rdi + r11 - 0x5a36a639]', 'lea r11, [rdi + r11 - 0x5a36a635]', 'push rdi', 'lea rax, [rdi + rdi + 0x5313b7a5]', 'xor r8d, r10d', 'dec word ptr [rsp + rdi - 0x5a36a638]', 'jle 0x7ffb72955210']
UB ID: 401 - ['lea r8d, [r8 + rdi - 0x62f26b46]', 'rol r8d, 3', 'cdqe', 'neg dil', 'neg r8d', 'sar word ptr [rsp + rdi - 0x5a36a6c6], 0xc', 'not r8d', 'mov qword ptr [rsp + rax - 0x7810417], r10', 'xor dword ptr [rsp + rdi - 0x5a36a6c7], r8d', 'pop r10', 'movsxd r8, r8d', 'add rbx, r8', 'mov eax, 0x529dcf2f', 'mov rax, qword ptr [rax + r9 - 0x529dcf2f]', 'mov rdx, qword ptr [r9 + 8]', 'mov r8d, 0x7927a78a', 'add rax, rdx', 'mov qword ptr [r9 + r8 - 0x7927a782], rax', 'movsx esi, r8b', 'lea rcx, [rsi*4 + 0x6a3dcfab]', 'mov esi, dword ptr [r8 + r11 - 0x7927a78a]', 'ror r8b, 0x65', 'lea rbp, [rcx - 0x40cd14ff]', 'not r8w', 'lea r11, [r11 + r8 - 0x792758a7]', 'xor esi, r10d', 'sub esi, 0x8bbc50d', 'sal ebp, cl', 'sal cl, 0x61', 'rol esi, 3', 'btr ebp, r8d', 'movzx edx, cl', 'mov eax, 0xd1bb53b3', 'neg esi', 'bts eax, r8d', 'ror eax, 0xab', 'push rax', 'not esi', 'movsx edi, cl', 'and qword ptr [rsp + rdx - 0xa6], rcx', 'mov qword ptr [rsp + r8 - 0x792758ab], r10', 'xor dword ptr [rsp + r8 - 0x792758ab], esi', 'pop r10', 'movsxd rsi, esi', 'lea rcx, [rsi + rsi*8 + 0x509170b5]', 'xor ebp, r10d', 'pop rsi', 'add rsi, -0x124b87', 'jmp rsi']
UB ID: 332 - ['and ecx, 0x7830933', 'sbb r8b, 0x8f', 'and bp, 0x7b5', 'cmovo edi, esi', 'neg r8b', 'adc r8b, 0x2d', 'sar si, 2', 'shr rdi, 0x8f', 'sbb si, 0xe938', 'ror r8b, 1', 'shr rsi, cl', 'xor r10b, r8b', 'sub di, 0x38a6', 'add r8, rsp', 'mov rbp, qword ptr [r8 + rdi - 0xc75a]', 'btr edi, 0x94', 'xchg ax, si', 'mov qword ptr [r9 + rdi*2 - 0x18eb4], rbp', 'xchg di, cx', 'xor rsi, rdi', 'shl ecx, 0xba', 'xor rdi, rbx', 'jmp rdi']
UB ID: 333 - ['xor r10w, si', 'xor rdx, rdi', 'lea rsi, [rsp + rsi + 8]', 'mov qword ptr [rsi + rdi*2 - 0x298ca0d8], rax', 'call 0x7ffb729840d1']
UB ID: 334 - ['sbb byte ptr [rsp + rdi - 0x14c65064], r8b', 'mov ebp, dword ptr [r11 + rdi - 0x14c6506a]', 'sub word ptr [rsp + rdi - 0x14c6505f], 0xfb6', 'movsx eax, cx', 'lea r11, [r11 + rdi*2 - 0x298ca0d2]', 'inc al', 'ror r8d, cl', 'mov qword ptr [rsp + rdi*4 - 0x531941b0], r8', 'xor ebp, r10d', 'not ebp', 'shr r8b, 0x47', 'lea ebp, [rbp + rdi + 0x5150c997]', 'ror cl, 0xc7', 'or byte ptr [rsp + rdi*2 - 0x298ca0c9], dh', 'bswap ebp', 'xor dl, r8b', 'not ebp', 'sbb r8d, ecx', 'shl dil, 0x65', 'adc ecx, 0x1da6610b', 'bswap ebp', 'xor ebp, 0x95b4bb9e', 'push r8', 'or rdi, rax', 'push r8', 'rol ebp, 1', 'movzx esi, cl', 'not ebp', 'mov qword ptr [rsp + rdi - 0x14c67f92], r10', 'xor dword ptr [rsp + rdi*2 - 0x298cff3c], ebp', 'mov r10, qword ptr [rsp + rdi*2 - 0x298cff3c]', 'mov qword ptr [rsp + rdi - 0x14c67f92], rdx', 'xor rcx, 0x7f386c81', 'movsxd rbp, ebp', 'rol sil, 0x46', 'sub byte ptr [rsp + rdi*4 - 0x5319fe99], 0x99', 'add rbx, rbp', 'mov qword ptr [rsp + rdi*2 - 0x298cff54], rbx', 'ret 0x18']
UB ID: 335 - ['lea r9, [rsi + r9 - 0x80449b]', 'sar si, 0xa6', 'mov qword ptr [r9 + rsi*2 - 0x1000224], rbp', 'mov qword ptr [rsp + rcx - 0x2597e9ef], rsi', 'jns 0x7ffb72c08dff']
UB ID: 336 - ['inc sil', 'lea rdi, [rbp + r8*2 - 0x5f63b048]', 'shr rbp, 0xb1', 'xor sil, 0x1a', 'xor bpl, r8b', 'sal rbp, 0x22', 'sbb sil, 0x91', 'push rbp', 'xor r10b, sil', 'and edi, dword ptr [rsp + 1]', 'inc di', 'add r8, -0x4566276a', 'lea rsi, [rsp + rsi + 8]', 'lea rdx, [r8*8 - 0x63c6a27b]', 'mov qword ptr [rsi], rax', 'mov eax, dword ptr [r11 + 1]', 'xor eax, r10d', 'neg eax', 'or dl, 0xac', 'dec eax', 'bswap eax', 'ror eax, 1', 'bts dx, di', 'xadd dword ptr [rsp + 3], r8d', 'inc eax', 'mov qword ptr [rsp + r8*2 - 0x30800], r10', 'inc rbp', 'push r8', 'sub bp, 0xca7', 'xor dword ptr [rsp + r8 - 0x183f8], eax', 'mov r10, qword ptr [rsp + r8 - 0x183f8]', 'movsxd rax, eax', 'push rdx', 'add rbx, rax', 'pop rcx', 'mov qword ptr [rsp + r8*4 - 0x60ff8], r8', 'mov rdi, qword ptr [r11 + r8*2 - 0x307fb]', 'lea r11, [r11 + r8*2 - 0x307f3]', 'movzx esi, word ptr [rsp + r8 - 0x183f8]', 'xor rdi, r10', 'btc rcx, rsi', 'lea rdi, [rdi + r8*4 - 0x5a934783]', 'setb dl', 'btr ecx, r8d', 'not rdi', 'push rdx', 'shr dword ptr [rsp + r8 - 0x183fe], 0xd8', 'xor rdi, 0xffffffffb52dfabc', 'neg rdi', 'sal dx, 0x6c', 'and rcx, 0xffffffffef21d6a6', 'pop r8', 'xor rdi, 0x594c00b', 'neg byte ptr [rsp + r8 - 0x6cff]', 'lea rdi, [rdi + r8*8 - 0x63d122f8]', 'setl byte ptr [rsp + r8 - 0x6cf3]', 'rol bp, cl', 'btr rbp, rcx', 'xor r10, rdi', 'mov qword ptr [r9 + r8*2 - 0xda02], rdi', 'not qword ptr [rsp + r8 - 0x6cfe]', 'mov qword ptr [rsp + r8 - 0x6d01], rbx', 'ret 8']
UB ID: 337 - ['mov esi, 0xe23a8007', 'mov ecx, esi', 'mov edi, ecx', 'mov ebp, dword ptr [r11]', 'lea rdx, [rcx - 0x276cba61]', 'xor ebp, r10d', 'mov eax, 0x42891739', 'call 0x7ffb72b980c4']
UB ID: 338 - ['sub ebp, 0xa388371a', 'ror ebp, 1', 'btr rax, rdi', 'neg ebp', 'sub ebp, 0x4aa05d04', 'mov qword ptr [rsp + rax - 0x42891739], -0x71580247', 'dec word ptr [rsp + rax - 0x42891734]', 'bswap ebp', 'sal word ptr [rsp + rax - 0x42891735], 0x68', 'and dword ptr [rsp + rax - 0x42891736], ecx', 'mov qword ptr [rsp + rax - 0x42891739], r10', 'sal al, cl', 'not rax', 'adc ecx, edi', 'xor dword ptr [rsp + rax + 0x42891781], ebp', 'pop r10', 'cdq', 'add cx, 0x5925', 'movsxd rbp, ebp', 'add rbx, rbp', 'neg eax', 'inc ecx', 'movzx r8d, byte ptr [rax + r11 - 0x4289177d]', 'xor r8b, r10b', 'sbb r8b, 0xb4', 'sal ax, 0x8a', 'xor r8b, dl', 'sub r8b, 0x97', 'xor r8b, dl', 'movzx ebp, cl', 'neg r8b', 'inc rdx', 'add r8b, 0x94', 'xor r10b, r8b', 'add r8, rsp', 'mov rdi, qword ptr [rbp + r8 - 0x34]', 'mov qword ptr [r9 + rbp*4 - 0xd8], rdi', 'lea rbp, [rcx*4 - 0xeccd278]', 'movzx esi, byte ptr [rax + r11 - 0x428903fb]', 'call 0x7ffb72bf98c9']
UB ID: 339 - ['xor sil, r10b', 'inc dil', 'setl dl', 'sal rdi, cl', 'sbb sil, 2', 'sar ax, 0x61', 'mov qword ptr [rsp + r8 - 0x1d], rcx', 'not sil', 'xor dl, 0xb5', 'inc qword ptr [rsp + rax - 0x4289007d]', 'setno byte ptr [rsp + r8 - 0x11]', 'neg sil', 'btr edi, eax', 'lea rcx, [rax*4 - 0x174ebb43]', 'dec sil', 'or qword ptr [rsp + rax - 0x4289007d], rdx', 'shl word ptr [rsp + r8*2 - 0x30], 0x25', 'xor r10b, sil', 'lea rsi, [rsp + rsi + 0x10]', 'mov rdx, qword ptr [rax + rsi - 0x42890080]', 'inc dword ptr [rsp + r8 - 0x13]', 'xadd r8, rbp', 'mov qword ptr [rax + r9 - 0x42890090], rdx', 'lea rsi, [rdi*2 - 0x1dfee179]', 'lea r9, [rbp + r9 - 0x2d]', 'pop rax', 'pop r8', 'jne 0x7ffb72acc73a']
UB ID: 340 - ['movzx edi, byte ptr [r11]', 'xor dil, r10b', 'mov edx, 0xa990bf83', 'call 0x7ffb72e642b5']
UB ID: 341 - ['mov r8, qword ptr [r9 + 0x10]', 'lea rdi, [rbp + 0x33a7b522]', 'sbb rcx, rbp', 'jne 0x7ffb72e452b1']
UB ID: 342 - ['mov edx, 0xeb278a02', 'movsx ebp, dl', 'sal bp, 0xc', 'mov ebp, dword ptr [rbp + r11 - 0x2000]', 'mov esi, edx', 'xor ebp, r10d', 'mov eax, esi', 'neg sil', 'mov ecx, 0xa3bc680b', 'xor ebp, 0x42131d35', 'movzx r8d, dx', 'btr dx, r8w', 'neg ebp', 'or dl, sil', 'seta r8b', 'bswap eax', 'ror ebp, 1', 'call 0x7ffb72975471']
UB ID: 343 - ['inc ebp', 'mov qword ptr [rsp + rax*8 - 0x14513f58], r10', 'xor dword ptr [rsp + r8 - 0x8a01], ebp', 'cwde', 'pop r10', 'ror rsi, cl', 'inc rsi', 'movsxd rbp, ebp', 'sar rax, cl', 'cqo', 'add rbx, rbp', 'mov rbp, qword ptr [rdx + r9]', 'lea rdi, [rsi + rsi - 0x267283c4]', 'rol rdx, 3', 'ror sil, 1', 'inc byte ptr [rsp + rsi - 0x3f87610e]', 'jno 0x7ffb72c71a8b']
UB ID: 344 - ['mov edx, dword ptr [r11]', 'mov esi, 0x9c2c0598', 'mov ebp, 0xd0b1cf31', 'xor edx, r10d', 'call 0x7ffb72e16115']
UB ID: 345 - ['xor r8, r10', 'and ebp, 0xbba4f58f', 'dec r8', 'xadd word ptr [rsp + rdx + 6], dx', 'add cx, di', 'xchg word ptr [rsp + rdx + 3], di', 'bswap r8', 'bts bp, 0x82', 'pop rdx', 'sal rcx, cl', 'lea r8, [r8 + rdx*2 - 0x211e3693]', 'jb 0x7ffb72b59755']
UB ID: 346 - ['ror r8, 3', 'dec rdx', 'lea rdx, [rsp + rdx - 0x2021fab8]', 'call 0x7ffb72bb57d1']
UB ID: 347 - ['mov ecx, 0xe40ad73b', 'mov r8d, dword ptr [r11]', 'movsx edi, cl', 'xor r8d, r10d', 'lea r8d, [r8 + rdi - 0x8bbc548]', 'lea rdx, [rdi*8 + 0x77050505]', 'rol r8d, 3', 'xadd rdx, rcx', 'sal dx, 0x2e', 'neg r8d', 'mov eax, edi', 'lea rsi, [rdx*2 + 0x289ba4ab]', 'not r8d', 'push r10', 'sal rsi, 0x68', 'xor dword ptr [rsp + rcx - 0x770506dd], r8d', 'pop r10', 'call 0x7ffb72c1e6e7']
UB ID: 348 - ['mov ecx, 0xe1b9143d', 'movzx edi, cx', 'lea rdx, [rdi + rcx - 0x3ac2e376]', 'mov eax, dword ptr [rdi + r11 - 0x143d]', 'lea r11, [rdi + r11 - 0x1439]', 'mov r8d, 0x8a2a3c16', 'ror r8, cl', 'ror rdx, cl', 'xor eax, r10d', 'lea eax, [rax + rdi*2 - 0x8bbed87]', 'rol eax, 3', 'not ecx', 'bts edx, edi', 'jb 0x7ffb72b9f3a3']
UB ID: 349 - ['neg eax', 'sar edx, 0x36', 'movzx esi, r8b', 'not eax', 'jb 0x7ffb72dfed18']
UB ID: 350 - ['push -0x849a358', 'mov r8, r9', 'inc dword ptr [rsp + 4]', 'mov qword ptr [r9 - 8], r8', 'mov rsi, qword ptr [r11]', 'shl dword ptr [rsp + 4], 0x6d', 'xor rsi, r10', 'mov edi, 0x56200cae', 'pop r8', 'dec rsi', 'shr edi, 0xb7', 'not r8w', 'ja 0x7ffb72b9ec73']
UB ID: 351 - ['not rsi', 'call 0x7ffb72bd7e0b']
UB ID: 352 - ['sar word ptr [rsp + rax - 0xb1], 0x4f', 'sub dl, dil', 'rol ecx, 1', 'sal dword ptr [rsp + rax - 0xb6], 0x2d', 'and byte ptr [rsp + rdx*2 - 0x71599e52], 0x80', 'not ecx', 'mov qword ptr [rsp + rdx - 0x38accf25], r10', 'xor dword ptr [rsp + rdx - 0x38accf25], ecx', 'lea rbp, [rsi + rdx*2 + 0x238cd51f]', 'mov r10, qword ptr [rsp + rax - 0xb6]', 'lea r8, [rdx + rax*2 - 0x3e535742]', 'movsxd rcx, ecx', 'rol dl, 0xe4', 'mov qword ptr [rsp + rdx - 0x38accfd2], -0x3a45c268', 'adc rbx, rcx', 'mov rdi, r9', 'shr sil, 0x43', 'jae 0x7ffb72bd2332']
UB ID: 353 - ['mov rcx, rdi', 'sub r8b, al', 'pop rbp', 'mov rdi, qword ptr ss:[rcx + rdx*2 - 0x71599fa4]', 'mov qword ptr [rax + r9 - 0xc6], rdi', 'push rbp', 'lea r9, [rdx + r9 - 0x38accfda]', 'mov qword ptr [rsp + rdx*2 - 0x71599f9c], 0x19a37212', 'and bpl, 0x2b', 'pop rcx', 'pop rdx', 'ja 0x7ffb72acc73a']
UB ID: 354 - ['mov edx, 0xac38f594', 'lea rdi, [rdx + 0x2c3b29b4]', 'movzx ebp, dil', 'mov rbp, qword ptr [rbp + r9 - 0x48]', 'call 0x7ffb728b8833']
UB ID: 355 - ['mov qword ptr [rsp], rdi', 'rol word ptr [rsp + 3], 0x88', 'mov rdx, qword ptr [r9 + 8]', 'jb 0x7ffb72bce792']
UB ID: 356 - ['setae dil', 'and rbp, rdx', 'sub qword ptr [rsp], 0x12b4b7bc', 'not rbp', 'sub dword ptr [rsp + 3], 0x2eb78e1d', 'lea rsi, [rdi + rdi + 0x4d913039]', 'jp 0x7ffb72c607b6']
UB ID: 357 - ['mov qword ptr [r9 + 8], rbp', 'mov eax, dword ptr [r11 + rax*2 - 0x7c04]', 'push rdi', 'add si, 0xf281', 'sbb r11, -5', 'mov edx, esi', 'dec byte ptr [rsp + 1]', 'setg byte ptr [rsp + 4]', 'inc byte ptr [rsp + 0xc]', 'movzx r8d, byte ptr [rsp + 0xc]', 'xor byte ptr [rsp + r8*2 - 0x91], 0x29', 'movzx ecx, di', 'lea eax, [r8 + rax + 0x1a30afcf]', 'rol eax, cl', 'sar rdi, 0x9a', 'mov qword ptr [rsp + rdi - 0x2e], r10', 'pop r8', 'xor dword ptr [rsp + rdi*8 - 0x1b0], eax', 'shr r8w, 0x62', 'pop r10', 'inc sil', 'movsxd rax, eax', 'add rbx, rax', 'xchg rbp, rcx', 'mov eax, edx', 'neg ecx', 'mov r9, qword ptr [r9 + rdi*8 - 0x1a8]', 'jne 0x7ffb72acc73a']
UB ID: 358 - ['mov edi, 0x26a3f7b3', 'mov rax, rsp', 'lea rsi, [rdi + rdi + 0x2194f7b5]', 'lea ecx, [rsi - 0x6edce5a3]', 'sub edi, 0x3f31a631', 'lea rdx, [r9 + rsi - 0x6edce79b]', 'dec si', 'and rdx, 0xfffffffffffffff0', 'sub rdx, rcx', 'bswap rsi', 'mov rsp, rdx', 'push 0x6632cf04', 'push qword ptr [rsp + 8]', 'popfq', 'lea rsp, [rsp + 0x10]', 'jmp rbx']
UB ID: 359 - ['xor edx, r10d', 'bswap r8d', 'movzx eax, bp', 'xor edx, 0xbca3de00', 'sar r8b, 0xe6', 'mov edi, esi', 'and rsi, r8', 'inc edx', 'shl eax, 0x5a', 'rol edx, 1', 'rol eax, 0x4c', 'sal r8d, 0x61', 'not edx', 'xor rdi, rcx', 'push rbp', 'mov qword ptr [rsp + rsi - 4], r10', 'xor dword ptr [rsp + rsi - 4], edx', 'sub dil, cl', 'pop r10', 'shr eax, 0xcf', 'movsxd rdx, edx', 'rol rdi, 0xde', 'adc rbx, rdx', 'or rax, r9', 'movzx edx, di', 'mov rsi, rax', 'lea rbp, [rsp + rcx*2 - 0x2abfc0]', 'mov qword ptr [rbp + rcx*2 - 0x2ac100], rsi', 'add rdx, rbx', 'jmp rdx']
UB ID: 360 - ['mov ebp, 0x8a21c3ad', 'lea rbp, [rbp*2 - 0x24ff625f]', 'movzx eax, byte ptr [r11]', 'movsx esi, bp', 'ror sil, 0xa4', 'lea rdi, [rbp + 0x133f12b3]', 'lea r11, [r11 + rsi*4 - 0x92fb]', 'jae 0x7ffb729119e3']
UB ID: 361 - ['movsx r8d, si', 'add bpl, r8b', 'xor al, r10b', 'xor al, 0x22', 'mov ecx, edi', 'sub al, 0x38', 'push rsi', 'pop rsi', 'not sil', 'xor al, 0x15', 'xor ebp, r8d', 'jae 0x7ffb72c2c22e']
UB ID: 362 - ['xor ecx, r10d', 'xadd bp, r8w', 'btr di, si', 'lea ecx, [rcx + rax - 0x2b104328]', 'cdq', 'jb 0x7ffb72aefb2c']
UB ID: 363 - ['bswap ecx', 'neg ecx', 'neg rax', 'neg rdx', 'sub bp, 0xa12b', 'adc ecx, edx', 'add ax, r8w', 'bts di, dx', 'cmovb edx, r8d', 'push r10', 'call 0x7ffb72d38732']
UB ID: 364 - ['and r8d, eax', 'xor r8, rdx', 'rol eax, 0xb2', 'btr eax, edi', 'call 0x7ffb7299b2fd']
UB ID: 365 - ['movzx eax, byte ptr [r11 + rcx*2 - 0x400005]', 'mov qword ptr [rsp + rdi + 0x1fc8ea6b], rcx', 'mov edx, ecx', 'cmovb edx, edi', 'xor al, r10b', 'xor rdx, rdi', 'call 0x7ffb72ac31ec']
UB ID: 366 - ['rol al, 1', 'inc al', 'mov qword ptr [rsp + rcx*2 - 0x3ffffe], -0x6ac4d86e', 'movzx esi, byte ptr [rsp + rdi + 0x1fc8ea77]', 'xadd esi, edx', 'xor al, 0x1a', 'bts rdx, rcx', 'sbb al, 0x91', 'shl di, 0xc5', 'rol di, cl', 'xor r10b, al', 'push rdx', 'lea rax, [rsp + rax + 0x20]', 'bts edi, 0x8b', 'mov qword ptr [rsp + rcx*4 - 0x800004], 0x11a5b60f', 'adc sil, byte ptr [rsp + rcx*2 - 0x3fffed]', 'mov qword ptr [rax + rcx*2 - 0x400006], r8', 'mov eax, dword ptr [rcx + r11 - 0x200001]', 'lea r11, [r11 + rcx - 0x1ffffd]', 'shr rcx, 0xed', 'and rsi, 0xb2af484', 'xor eax, r10d', 'movzx r8d, byte ptr [rsp + rcx + 0x18]', 'neg eax', 'dec eax', 'neg eax', 'btc rdi, rsi', 'ror di, 0xe1', 'rol word ptr [rsp + rcx + 0x1e], 0xe4', 'bswap eax', 'or edx, 0x3d06921e', 'or di, 0x4e8f', 'lea eax, [rax + rcx*8 + 0x57301ebc]', 'call 0x7ffb72d07de2']
UB ID: 367 - ['mov esi, eax', 'xor dl, r10b', 'mov ebp, eax', 'inc ebp', 'not dl', 'add dl, 0x2e', 'rol dl, 1', 'call 0x7ffb72d80223']
UB ID: 368 - ['mov ecx, 0x27a7a481', 'movsx esi, cx', 'shr esi, 0xd9', 'movsx edi, cx', 'lea r8, [rcx - 0x6bd804c8]', 'xor esi, 0x8b86f29', 'adc cl, r8b', 'inc edi', 'lea edx, [rcx + rdx + 0x2a8c504c]', 'or edi, esi', 'ja 0x7ffb72c4d2fe']
UB ID: 369 - ['and rdx, 0xffffffffcd36bfb6', 'mov esi, dword ptr [rdx + r9 - 0x10a2]', 'not r8d', 'shl ecx, cl', 'push rcx', 'not esi', 'cwd', 'setbe dl', 'or r8d, esi', 'mov eax, r8d', 'mov edx, dword ptr [rdx + r9 - 0xfef9]', 'neg edi', 'lea rsi, [rdi*4 + 0x193e6280]', 'not eax', 'pop r8', 'sal rdi, 0xf3', 'mov qword ptr [rsp + rbp - 0x10ee], rbp', 'not edx', 'or eax, edx', 'neg bpl', 'mov dword ptr [r9 + rbp - 0x100a], eax', 'setnp r8b', 'lea r9, [rbp + r9 - 0x100a]', 'bts rbp, 0x28', 'movsx edx, word ptr [rsp + rsi - 0x193e63b9]', 'shl dword ptr [rsp + rsi - 0x193e63bb], 0x30', 'mov qword ptr [rsp + rsi*4 - 0x64f98ef0], rbx', 'ret']
UB ID: 370 - ['adc byte ptr [rsp + rsi - 0x38], al', 'and dl, cl', 'mov word ptr [r9 + rsi*8 - 0x1e6], dx', 'cbw', 'not rbp', 'mov edi, dword ptr [r11 + rsi*2 - 0x7a]', 'xor edi, r10d', 'lea rcx, [rsi + rsi*2 - 0x5664d6ee]', 'lea edi, [rdi + rcx - 0x3bcf2b56]', 'push rbp', 'mov qword ptr [rsp + rsi*2 - 0x72], r8', 'rol edi, 3', 'inc edi', 'movzx edx, byte ptr [rsp + rsi - 0x37]', 'xchg byte ptr [rsp + rsi*2 - 0x77], ah', 'rol edi, 1', 'xadd byte ptr [rsp + rsi*4 - 0xf0], ah', 'not dx', 'mov qword ptr [rsp + rsi - 0x35], r10', 'xor dword ptr [rsp + rsi*2 - 0x72], edi', 'mov r10, qword ptr [rsp + rsi*2 - 0x72]', 'pop r8', 'mov qword ptr [rsp + rsi*2 - 0x7a], rsi', 'push rcx', 'movsxd rdi, edi', 'ror qword ptr [rsp + rsi - 0x38], cl', 'add rbx, rdi', 'sal qword ptr [rsp + rsi - 0x35], cl', 'dec qword ptr [rsp + rsi - 0x39]', 'mov r8w, word ptr [rsi + r9 - 0x3b]', 'lea r9, [r9 + rbp + 0x42]', 'sal dx, 0x42', 'movsx edi, bpl', 'movzx eax, byte ptr [r11 + rsi*2 - 0x76]', 'push rsi', 'push rdi', 'shr rdi, 0x58', 'lea r11, [rsi + r11 - 0x38]', 'shl dil, 0xe1', 'adc rbp, rsi', 'xor al, r10b', 'dec al', 'btr di, 0x99', 'rol al, 1', 'sub al, 0x30', 'neg al', 'sub dword ptr [rsp + rbp], ebp', 'jle 0x7ffb728b12c1']
UB ID: 371 - ['push rsi', 'xor r10b, al', 'lea rax, [rsp + rax + 0x28]', 'mov byte ptr [rax + rsi*2 - 0x7a], r8b', 'add rbp, qword ptr [rsp + rsi - 0x1d]', 'shl edx, 0xeb', 'mov qword ptr [rsp + rsi - 0x3d], rbx', 'ret 0x20']
UB ID: 372 - ['xor r10b, al', 'mov qword ptr [rsp + r8 - 1], rsi', 'xor rdi, qword ptr [rsp + r8*8 - 8]', 'ror word ptr [rsp + r8], 0x6b', 'lea rax, [rsp + rax + 8]', 'and rbp, rbp', 'jnp 0x7ffb72c4718d']
UB ID: 373 - ['mov dword ptr [rax + r8 - 1], edx', 'ja 0x7ffb729a33c6']
UB ID: 374 - ['xchg qword ptr [rsp + r8 - 1], rbp', 'ja 0x7ffb72b84fca']
UB ID: 375 - ['mov eax, dword ptr [r11 + r8*8 - 7]', 'rol r8w, 0x88', 'lea rdx, [rsi*2 - 0xc5a6174]', 'or bpl, sil', 'xor eax, r10d', 'dec dword ptr [rsp + r8 - 0xfc]', 'lea eax, [rax + rdi*2 - 0x20dd378]', 'btc r8, rdx', 'push rbp', 'bswap eax', 'neg eax', 'xor sil, sil', 'bswap eax', 'inc eax', 'mov qword ptr [rsp + r8*2 - 0x20001f8], r10', 'xor dword ptr [rsp + r8 - 0x10000f8], eax', 'dec bp', 'mov r10, qword ptr [rsp + r8*8 - 0x80007f8]', 'jge 0x7ffb729b29d0']
UB ID: 376 - ['mov qword ptr [rsp + r8*8 - 0x80007f8], rsi', 'mov dword ptr [r9 + r8 - 0x1000100], eax', 'ror qword ptr [rsp + r8*2 - 0x20001f8], 0x4b', 'shl si, 0x87', 'mov rax, qword ptr [r11 + r8 - 0x10000fb]', 'xor rax, r10', 'xadd cx, bp', 'call 0x7ffb72c1a846']
UB ID: 377 - ['ror esi, 1', 'mov qword ptr [rsp + r8*8 - 0x2000000], 0x13001993', 'pop rbp', 'inc esi', 'shl qword ptr [rsp + r8*4 - 0x1000000], 0xa4', 'rol r8b, cl', 'mov qword ptr [rsp + r8*4 - 0x1000000], r10', 'movsx r10d, dil', 'mov eax, 0x13843815', 'not edi', 'xor dword ptr [rsp + r8*4 - 0x1000000], esi', 'or rbp, rcx', 'jge 0x7ffb72bb9bb0']
UB ID: 378 - ['neg esi', 'sar word ptr [rsp + rbp - 0x14f3], 0x44', 'lea esi, [rsi + rbp*4 - 0x4aa0b124]', 'lea r8, [rcx - 0xd499871]', 'bswap esi', 'neg cl', 'mov qword ptr [rsp + r8*2 + 0x1a921612], r10', 'xor dword ptr [rsp + r8 + 0xd490b11], esi', 'shl dword ptr [rsp + r8*4 + 0x35242c10], cl', 'mov r10, qword ptr [rsp + r8*4 + 0x35242c14]', 'pop rbp', 'adc rbp, 0x18e6d', 'jmp rbp']
UB ID: 379 - ['call 0x7ffb72d1b0cd']
UB ID: 380 - ['xor eax, r10d', 'mov r8d, 0x5183adb8', 'movsx ebp, r8w', 'lea eax, [rax + r8 - 0x39757184]', 'mov qword ptr [rsp + r8 - 0x5183adb8], 0x480f5ba9', 'rol word ptr [rsp + r8 - 0x5183adb7], 0x4e', 'pop rcx', 'neg eax', 'lea rsi, [rbp + rcx*8 - 0x436f074c]', 'dec eax', 'sub rbp, 0x18af0730', 'mov qword ptr [rsp + r8 - 0x5183adb8], rsi', 'lea rdx, [rsi + rbp*4 - 0x74d6f6da]', 'not eax', 'btc rbp, rdx', 'call 0x7ffb72c4e259']
UB ID: 381 - ['mov r8d, dword ptr [r11]', 'mov edi, 0xf2093502', 'mov esi, edi', 'lea rcx, [rdi + rsi*8 + 0x6091f12c]', 'xor r8d, r10d', 'bswap r8d', 'xchg al, dil', 'lea r8d, [r8 + rax - 0x335012d5]', 'add ecx, eax', 'ror r8d, 1', 'mov ebp, 0x1b836710', 'or rdi, rsi', 'call 0x7ffb72d889e2']
UB ID: 382 - ['mov r10, qword ptr [rsp + rcx - 0xd4edfc]', 'movsxd r8, r8d', 'cdqe', 'pop rdx', 'add rbx, r8', 'cdq', 'mov edi, dword ptr [r9 + rcx - 0xd4ee04]', 'movzx r8d, byte ptr [r11 + rax*2 + 0x1bed9600]', 'neg cx', 'dec sil', 'xor r8b, r10b', 'ror r8b, 1', 'xor r8b, dl', 'mov qword ptr [rsp + rcx*2 - 0x1a823f8], rax', 'add r8b, sil', 'ror r8b, 1', 'inc dx', 'cwde', 'xor r8b, 0xac', 'rol rcx, 0x10', 'rol r8b, 1', 'call 0x7ffb72e82dab']
UB ID: 383 - ['lea rcx, [rax + rdx + 0x3f8a6c3f]', 'mov qword ptr [rsp + rax*2], rcx', 'pop rax', 'pop rsi', 'dec rdx', 'lea rdx, [rsp + rdx - 0x2021fab8]', 'call 0x7ffb72bb57d1']
UB ID: 384 - ['mov rsi, qword ptr [r9]', 'mov ecx, 0x4b05383f', 'movzx eax, cl', 'mov rcx, qword ptr [r9 + rax - 0x37]', 'mov r8d, 0x6b61b93', 'call 0x7ffb72bf81de']
UB ID: 385 - ['sub sil, r8b', 'xor dword ptr [rsp + rax - 0x3f], edx', 'inc al', 'movsx ebp, ax', 'pop r10', 'movsxd rdx, edx', 'lea rcx, [rbp + rdi + 0x3b45f88]', 'add rbx, rdx', 'mov rdi, qword ptr [rax + r11 - 0x3c]', 'lea r11, [r11 + rax - 0x34]', 'xor rdi, r10', 'cdqe', 'shl al, 6', 'inc rbp', 'xor rdi, 0x1195460c', 'lea rdi, [rdi + rax*4 - 0x547c2dd7]', 'call 0x7ffb72da24c0']
UB ID: 387 - ['neg r8w', 'call 0x7ffb72db6ff2']
UB ID: 388 - ['sbb eax, 0xa388371a', 'ror eax, 1', 'neg eax', 'xor edx, ebp', 'lea eax, [rax + rdi - 0x72c6fb58]', 'call 0x7ffb72bf1157']
UB ID: 389 - ['mov edx, dword ptr [r11]', 'add r11, 4', 'mov edi, 0x9f27e08c', 'call 0x7ffb72c164d7']
UB ID: 390 - ['sal cx, 0x61', 'mov r8d, edi', 'mov word ptr [r9 + rcx - 0x64e46342], dx', 'btr rcx, r8', 'mov qword ptr [rsp + rcx - 0x64e46350], rcx', 'lea r9, [rcx + r9 - 0x64e46342]', 'mov ebp, edi', 'mov qword ptr [rsp + rcx - 0x64e46350], rbx', 'ret']
UB ID: 391 - ['mov ecx, 0xd8859106', 'mov r8d, 0x6ea670bf', 'mov rdi, qword ptr [r9 + r8 - 0x6ea670bf]', 'movsx ebp, cl', 'lea rsi, [r8 + rcx*4 + 0x2d001a91]', 'mov ax, word ptr [rdi + rbp*4 - 0x18]', 'xadd r8w, bp', 'shr sil, 0xa7', 'push rbp', 'mov di, ax', 'call 0x7ffb72d0156c']
UB ID: 392 - ['inc bpl', 'btc rax, r8', 'xor bpl, 0x19', 'btc rcx, r8', 'sub cx, r8w', 'adc bpl, 0xbd', 'push rsi', 'neg bpl', 'sal dil, 0xc3', 'call 0x7ffb72ede580']
UB ID: 393 - ['xor dword ptr [rsp + rdi - 0xffb1], edx', 'xchg eax, r8d', 'sal edi, cl', 'pop r10', 'sbb dil, 0xa7', 'btr si, r8w', 'mov ebp, edi', 'movsxd rdx, edx', 'adc r8d, eax', 'jbe 0x7ffb72c6e981']
UB ID: 394 - ['mov dl, byte ptr [r9 + 2]', 'adc dil, dl', 'xadd r8w, bp', 'mov edx, 0xcc233791', 'ja 0x7ffb72cfa182']
UB ID: 395 - ['dec dword ptr [rsp + r8*2 - 0x8289]', 'ror word ptr [rsp + r8 - 0x4143], 0x6d', 'mov qword ptr [rsp + r8 - 0x4152], rbx', 'ret 0x18']
UB ID: 396 - ['movsxd rsi, esi', 'adc rbx, rsi', 'mov dl, byte ptr [r11 + rdi + 4]', 'lea r11, [r11 + rdi*8 + 5]', 'push rcx', 'mov esi, ecx', 'dec byte ptr [rsp + rdi + 9]', 'xor dl, r10b', 'xor dl, 0x3f', 'sar qword ptr [rsp + rdi + 8], cl', 'xadd dword ptr [rsp + rdi + 6], ebp', 'adc dl, 0xaf', 'mov qword ptr [rsp + rdi + 0x10], rcx', 'dec word ptr [rsp + rdi*2 + 0xa]', 'not dl', 'or dil, 0xa2', 'ror dl, 1', 'xor dl, 0x2e', 'add dl, 0xb2', 'call 0x7ffb72c72e52']
UB ID: 419 - ['mov eax, 0xd2eba93', 'dec rdx', 'lea rdx, [rsp + rdx - 0x2021fab8]', 'call 0x7ffb72bb57d1']
UB ID: 398 - ['xor dword ptr [rsp + rax - 4], ecx', 'pop r10', 'sub dx, ax', 'movsxd rcx, ecx', 'bts edx, esi', 'adc rbx, rcx', 'sub rax, rbp', 'sar si, 0x41', 'mov r8d, 0xa3a9c738', 'mov di, word ptr [rax + r9 - 4]', 'jnp 0x7ffb72c21323']
UB ID: 399 - ['mov r8d, 0x5fa9ac99', 'mov rax, qword ptr [r9 + r8 - 0x5fa9ac99]', 'dec r8d', 'mov cl, byte ptr [r8 + r9 - 0x5fa9ac90]', 'mov edi, r8d', 'shr rax, cl', 'call 0x7ffb72e81f1a']
UB ID: 400 - ['bswap r8', 'xor r10, r8', 'cdq', 'mov qword ptr [rsp + rcx - 0x57], 0x34aa7612', 'mov qword ptr [rcx + r9 - 0x5d], r8', 'lea rsi, [rdx + rdi*4 + 0x5519d6a6]', 'lea r9, [r9 + rcx - 0x5d]', 'mov r8d, dword ptr [rcx + r11 - 0x4f]', 'bts bp, si', 'sbb byte ptr [rsp + rcx*8 - 0x2ad], ah', 'lea r11, [rcx + r11 - 0x4b]', 'sal eax, 0x8b', 'xor r8d, r10d', 'neg qword ptr [rsp + rcx - 0x51]', 'call 0x7ffb72da5903']
UB ID: 402 - ['ror r8w, 0xc6', 'btr r8, rdx', 'sbb ebp, edx', 'xor ebp, 0xb337be9f', 'ror ecx, 3', 'push rcx', 'mov eax, 0x997d818', 'not ebp', 'ror eax, 0xe4', 'inc r8', 'shl dword ptr [rsp + r8 - 0x5071daff], 0x8e', 'xor ebp, 0x71ae42aa', 'or dword ptr [rsp + rdi*2 + 4], edx', 'sbb ax, di', 'jp 0x7ffb7298c8ee']
UB ID: 403 - ['bswap ebp', 'movsx esi, di', 'add dword ptr [rsp + r8 - 0x5071dafe], edi', 'rol ebp, 2', 'lea ebp, [rbp + r8*2 + 0x2cdb5598]', 'rol ebp, 1', 'bswap ebp', 'and edi, ecx', 'shl word ptr [rsp + r8 - 0x5071dafb], 0x6a', 'ror ebp, 3', 'lea r8, [rcx*8 - 0x1ccdd0f1]', 'dec ebp', 'not qword ptr [rsp + rdi]', 'btc r8d, esi', 'xor esi, ecx', 'mov qword ptr [rsp + r8 - 0x7c363e6], r10', 'bts si, cx', 'xor dword ptr [rsp + r8*2 - 0xf86c7cc], ebp', 'pop r10', 'not si', 'sar edx, cl', 'movsxd rbp, ebp', 'adc rbx, rbp', 'neg edx', 'mov rcx, qword ptr [rdx + r9]', 'lea rbp, [rsi*4 - 0x556f884e]', 'shl r8b, 0xc3', 'mov rax, qword ptr [r9 + rdx*2 + 8]', 'inc dx', 'ror r8, 0xd8', 'not rcx', 'sar r8w, 0xcc', 'sub dil, bpl', 'jb 0x7ffb72c48310']
UB ID: 404 - ['not rax', 'btr bp, 0xa4', 'inc dl', 'adc r8d, 0xe30e882', 'or rcx, rax', 'mov qword ptr [r9 + rdx*8 - 8], rcx', 'lea r9, [rdx + r9 + 6]', 'neg rdx', 'jmp rbx']
UB ID: 405 - ['xor dword ptr [rsp + rdx*2], esi', 'add di, bp', 'pop r10', 'xadd bp, cx', 'cqo', 'lea rax, [rbp + rbp*4 + 0x549317a4]', 'movsxd rsi, esi', 'btr ebp, edi', 'sar rax, cl', 'jns 0x7ffb7292013b']
UB ID: 406 - ['adc rbx, rsi', 'mov rdi, qword ptr [rdx + r9 + 8]', 'push rax', 'call 0x7ffb72c61146']
UB ID: 407 - ['mov ecx, 0x1eb81b2c', 'lea rdi, [rcx + rcx - 0x14d5b7d3]', 'mov ecx, dword ptr [r11 + rcx - 0x1eb81b2c]', 'movsx eax, di', 'xor ecx, r10d', 'bts edi, eax', 'movsx r8d, di', 'neg ecx', 'mov qword ptr [rsp + rdi*2 - 0x5134fd4a], 0x9b64316', 'sub r8, qword ptr [rsp + rdi - 0x289a7ea5]', 'dec ecx', 'neg ecx', 'mov edx, dword ptr [rsp + rdi*2 - 0x5134fd47]', 'not dword ptr [rsp + rdi*2 - 0x5134fd48]', 'bswap ecx', 'add ax, word ptr [rsp + rax*4 - 0x1fa10]', 'mov ebp, 0x23bd19a8', 'shl di, 0x84', 'lea ecx, [rcx + rdi*2 + 0x5fa4a1c]', 'mov qword ptr [rsp + rdi - 0x289aea50], r10', 'inc r8b', 'movsx esi, di', 'xor dword ptr [rsp + rax - 0x7e84], ecx', 'pop r10', 'bts eax, r8d', 'neg bpl', 'bswap esi', 'movsxd rcx, ecx', 'add rbx, rcx', 'mov rdi, qword ptr [r9 + rdi - 0x289aea50]', 'cwde', 'mov ecx, 0xc6318c2f', 'not eax', 'movzx r8d, byte ptr [r11 + rdx*2 - 0xe]', 'push rdx', 'sub dx, 0xc027', 'xor r8b, r10b', 'xor r8b, 0x2a', 'ror r8b, 1', 'sub r8b, sil', 'and bp, dx', 'rol r8b, 1', 'ror dword ptr [rsp + rdx - 0x3fe0], 0xc1', 'adc r8b, 0x93', 'xor r10b, r8b', 'neg rax', 'setno byte ptr [rsp + rdx*4 - 0xff88]', 'lea r8, [rsp + r8 + 8]', 'add word ptr [rsp + rdx*4 - 0xff86], 0x49b9', 'call 0x7ffb72c31e65']
UB ID: 408 - ['setnp byte ptr [rsp + rdx*2 - 0x7fc4]', 'push rsi', 'lea r11, [r11 + rdx*2 - 0x7fbd]', 'not byte ptr [rsp + rdx - 0x3fdc]', 'not eax', 'mov edi, esi', 'xor r8w, r10w', 'btc edx, ebp', 'xchg sil, dil', 'neg si', 'rol r8w, 1', 'and bpl, dil', 'bswap rdi', 'not r8w', 'xor r8w, 0xb1a4', 'dec dx', 'shl word ptr [rsp + rdx - 0x3fe1], 0x25', 'xchg dword ptr [rsp + rdx - 0x3fd6], eax', 'sub r8w, si', 'cbw', 'xor r8w, 0x7b88', 'xor r10w, r8w', 'push rdx', 'lea r8, [rsp + r8 + 0x18]', 'mov qword ptr [r8 + rdx*8 - 0x1ff10], rcx', 'inc dword ptr [rsp + rdx*4 - 0xff83]', 'mov qword ptr [rsp + rdx*2 - 0x7fc4], rbx', 'ret 0x10']
UB ID: 409 - ['mov rcx, qword ptr [rdi + rbp - 0x3fad]', 'mov qword ptr [r9 + r8*4 - 0x3ffd4], rcx', 'lea r9, [r9 + rdi - 0x3fbd]', 'xor rax, rsi', 'xor r8w, 0xe202', 'jae 0x7ffb72acc73a']
UB ID: 410 - ['movzx ecx, byte ptr [r11]', 'xor cl, r10b', 'mov ebp, 0x259de697', 'lea rax, [rbp + rbp*2 + 0x6c880239]', 'neg cl', 'lea rsi, [rax + rax*8 + 0x70a83434]', 'lea rax, [rbp + rbp*2 - 0x4cca4341]', 'rol ax, 0xc6', 'sbb cl, 0xaa', 'push rax', 'neg cl', 'movsx r8d, bpl', 'shl byte ptr [rsp + rbp*2 - 0x4b3bcd29], 0x25', 'inc cl', 'xor r10b, cl', 'lea rcx, [rsp + rcx + 8]', 'xor bpl, sil', 'mov rbp, qword ptr [rcx + rbp - 0x259de6b5]', 'cqo', 'cbw', 'call 0x7ffb72c885ee']
UB ID: 411 - ['and qword ptr [rsp + rax - 0x240f001c], 0xffffffffe0884ca0', 'xor ebp, r10d', 'neg ebp', 'mov r8d, 0x4b053cbd', 'push rsi', 'dec ebp', 'ror ebp, 1', 'dec ebp', 'not eax', 'xchg cx, di', 'mov qword ptr [rsp + rdx - 0xffffff0], r10', 'xor dword ptr [rsp + rdx - 0xffffff0], ebp', 'mov r10, qword ptr [rsp + rdx*4 - 0x3ffffff0]', 'add ecx, edx', 'jne 0x7ffb72de7ed5']
UB ID: 412 - ['mov ecx, 0x942daa32', 'mov edx, dword ptr [r11]', 'movsx ebp, cx', 'movsx eax, bpl', 'xor edx, r10d', 'push rbp', 'inc edx', 'call 0x7ffb72973ea0']
UB ID: 413 - ['neg edx', 'lea rsi, [rcx*4 + 0x6a999ea0]', 'inc edx', 'sub word ptr [rsp + rax - 0x24], si', 'mov qword ptr [rsp + rax*2 - 0x64], rcx', 'xor edx, 0x9321c286', 'movsx r8d, byte ptr [rsp + rax - 0x30]', 'mov qword ptr [rsp + rax*4 - 0xc0], r10', 'sal rax, 0x93', 'shr qword ptr [rsp + rax*8 - 0xc800000], 0x4b', 'and r8d, dword ptr [rsp + rax - 0x18fffff]', 'xor dword ptr [rsp + rax*2 - 0x31ffff8], edx', 'mov r10, qword ptr [rsp + rax*2 - 0x31ffff8]', 'movsxd rdx, edx', 'dec bp', 'mov qword ptr [rsp + rax - 0x18ffff8], rbp', 'add rbx, rdx', 'xchg dword ptr [rsp + rax*2 - 0x31ffff7], r8d', 'movzx ebp, byte ptr [r11 + rax - 0x18ffffc]', 'lea rdi, [rax*8 + 0x503ecd0c]', 'xor bpl, r10b', 'adc bpl, al', 'ror bpl, 1', 'neg bpl', 'rol bpl, 1', 'xor r10b, bpl', 'xor qword ptr [rsp + rax*2 - 0x3200000], rcx', 'rol word ptr [rsp + rax - 0x18ffff2], 0xa5', 'lea rbp, [rsp + rbp + 0x10]', 'cdq', 'lea rsi, [rdx + rdi*8 + 0xaad6f89]', 'and rdi, 0x88fed1c', 'add dl, byte ptr [rax + rbp - 0x1900000]', 'btc rax, rdi', 'pop rbp', 'pop rbp', 'mov ax, dx', 'cmovae edi, esi', 'movzx ax, al', 'mov r8b, byte ptr [r9 + rbp - 0x531]', 'inc rbp', 'not al', 'movsx edx, di', 'not r8b', 'and al, r8b', 'sal sil, 0xc3', 'call 0x7ffb72a9c4e2']
UB ID: 414 - ['mov qword ptr [rsp + rbp - 0x532], rsi', 'mov word ptr [r9 + rbp - 0x532], ax', 'lea rax, [rdi - 0x2ee1b7f7]', 'movzx edx, byte ptr [rbp + r11 - 0x52d]', 'lea r11, [r11 + rbp*4 - 0x14c2]', 'xor dl, r10b', 'rol dl, 1', 'neg dl', 'neg ebp', 'setae byte ptr [rsp + 5]', 'xor dl, 0x37', 'sub sil, cl', 'sbb dl, 0xbb', 'or word ptr [rsp + 5], bp', 'push rsi', 'xor dl, 0x37', 'push rbp', 'call 0x7ffb72de7cbe']
UB ID: 415 - ['movzx bp, byte ptr [r9]', 'mov edi, 0x1c213b84', 'mov dl, byte ptr [r9 + rdi*4 - 0x7084ee0e]', 'or bpl, dl', 'not bpl', 'btr di, 0x1e', 'xor rax, 0xffffffff981cb304', 'mov word ptr [r9 + rdi - 0x1c213b82], bp', 'lea r8, [rdi + rdi*2 - 0x49454f80]', 'movzx eax, word ptr [r11 + rdi - 0x1c213b84]', 'jae 0x7ffb7290c733']
UB ID: 416 - ['xor ax, r10w', 'ror ax, 1', 'lea rsi, [r8*8 + 0x10aa3e38]', 'push rsi', 'movsx ebp, r8w', 'inc ax', 'not ax', 'rol ax, 1', 'inc byte ptr [rsp + rdi*2 - 0x38427708]', 'shl word ptr [rsp + rdi - 0x1c213b7e], 0xa', 'xor r10w, ax', 'xadd qword ptr [rsp + r8 - 0xb1e630c], rbp', 'inc r8d', 'mov word ptr [r9 + rdi*4 - 0x7084ee10], ax', 'mov eax, dword ptr [r11 + rdi - 0x1c213b82]', 'add dword ptr [rsp + rdi - 0x1c213b83], 0x53ad349c', 'xor eax, r10d', 'shl rbp, 0x3c', 'btr di, 0xb0', 'neg eax', 'not bp', 'pop rdx', 'xor edx, 0x7422b91a', 'dec eax', 'xadd r8w, di', 'movsx ecx, di', 'ror eax, 1', 'dec eax', 'call 0x7ffb72e821ad']
UB ID: 417 - ['inc r8d', 'add sil, r8b', 'movsxd rax, eax', 'neg rdi', 'xchg dl, dil', 'add edi, 0xe708d0b6', 'add rbx, rax', 'mov r8, qword ptr [r11 + r8*4 - 0x2c79fffe]', 'mov eax, edi', 'sub sil, bpl', 'lea r11, [r11 + rsi - 0x699d41fc]', 'ror bpl, 0xa1', 'ror si, cl', 'rol cx, 0xd', 'sub bp, 0x2abf', 'lea r8, [rdx + r8 - 0x7dff4d8f]', 'rol rdi, 0x74', 'not r8', 'setb bpl', 'xor r10, r8', 'mov qword ptr [rsi + r9 - 0x699d105a], r8', 'lea r9, [rsi + r9 - 0x699d105a]', 'neg cx', 'jne 0x7ffb72acc73a']
UB ID: 418 - ['pop r8', 'pop rcx', 'jne 0x7ffb72acc73a']
UB ID: 420 - ['mov eax, 0x529dcf2f', 'mov rax, qword ptr [rax + r9 - 0x529dcf2f]', 'mov rdx, qword ptr [r9 + 8]', 'mov r8d, 0x7927a78a', 'add rax, rdx', 'mov qword ptr [r9 + r8 - 0x7927a782], rax', 'movsx esi, r8b', 'lea rcx, [rsi*4 + 0x6a3dcfab]', 'mov esi, dword ptr [r8 + r11 - 0x7927a78a]', 'ror r8b, 0x65', 'not r8w', 'lea r11, [r11 + r8 - 0x792758a7]', 'xor esi, r10d', 'sub esi, 0x8bbc50d', 'sal cl, 0x61', 'rol esi, 3', 'movzx edx, cl', 'mov eax, 0xd1bb53b3', 'neg esi', 'bts eax, r8d', 'ror eax, 0xab', 'push rax', 'not esi', 'and qword ptr [rsp + rdx - 0xa6], rcx', 'mov qword ptr [rsp + r8 - 0x792758ab], r10', 'xor dword ptr [rsp + r8 - 0x792758ab], esi', 'pop r10', 'mov ebp, 0x3706d088', 'mov rax, qword ptr [rbp + r9 - 0x3706d088]', 'lea rdx, [rbp*8 + 0x48261f37]', 'mov rbp, qword ptr ss:[rax + rbp*2 - 0x6e0da110]', 'mov edi, edx', 'mov qword ptr [r9 + rdi*8 - 0x2e51bb8], rbp', 'mov ebp, dword ptr [rdi + r11 - 0x5ca377]', 'lea rax, [rdx + rdx*4 - 0x1ae173ed]', 'lea r11, [r11 + rdi*2 - 0xb946ea]', 'mov r8d, edx', 'or di, r8w', 'lea rsi, [rax*2 + 0x2ba2e831]', 'xor ebp, r10d', 'sal rsi, 0x3b', 'ror ebp, 3', 'and si, dx', 'lea ebp, [rbp + rdi*4 + 0x633297e0]', 'ror ebp, 1', 'shl ax, 7', 'bswap ebp', 'push r10', 'xor dword ptr [rsp + rdi*4 - 0x1728ddc], ebp', 'pop r10', 'xor rsi, 0x21927399', 'movsxd rbp, ebp', 'adc rbx, rbp', 'shr edi, 0x94', 'mov rcx, qword ptr [r9 + rdi - 5]', 'shr eax, 0x45', 'mov r8, qword ptr [r9 + rdi*4 - 0xc]', 'adc dil, 0x1f', 'shr rsi, 0x9f', 'movzx ebp, al', 'or rcx, r8', 'rol ax, 0xe', 'cwd', 'not rcx', 'cmovb rdi, rdx', 'bswap esi', 'mov qword ptr [rdi + r9 - 0x1c], rcx', 'xor rdx, 0x4d16bfbb', 'mov ecx, esi', 'lea r9, [r9 + rdi*8 - 0x118]', 'lea r8, [rcx*2 + 0x7407cc9c]', 'jg 0x7ffb72bb866f']
UB ID: 421 - ['mov rdx, qword ptr [r9]', 'mov esi, 0xcc956dbf', 'and rsi, rsi', 'mov rbp, qword ptr [r9 + 8]', 'call 0x7ffb729d2e63']
UB ID: 422 - ['mov qword ptr [rsp], 0x750496b2', 'movzx eax, sil', 'lea r9, [r9 + rax - 0xaf]', 'adc rdx, rbp', 'mov ecx, dword ptr [rsp + rax*8 - 0x5f6]', 'shr qword ptr [rsp + rax - 0xbf], cl', 'mov rax, rdx', 'movzx edx, byte ptr [r11 + rcx - 0x7504]', 'not byte ptr [rsp + rcx - 0x7504]', 'movzx edi, cx', 'pop r8', 'xor dl, r10b', 'sub ecx, esi', 'btr rcx, rdi', 'rol dl, 1', 'lea rsi, [r8 + rsi*2 + 0x538bcc17]', 'lea rbp, [rdi + rdi - 0x77c6adc7]', 'neg dl', 'xadd dil, cl', 'not edi', 'ror dl, 1', 'neg dl', 'inc rdi', 'setge dil', 'xor r10b, dl', 'ror rdi, 0xbd', 'adc rdx, rsp', 'sar rbp, cl', 'mov qword ptr [rdx + rcx - 0x336b0704], rax', 'not ecx', 'movsx edx, bp', 'lea r11, [rbp + r11 + 0x77c5c41]', 'sbb esi, ebp', 'xchg bp, si', 'bts edx, 0x9e', 'sar edx, 0x8a', 'movsx eax, bpl', 'bts rdx, 0x30', 'bts rdi, 0x15', 'btr rdi, 0x38', 'lea r8d, [rcx + r8 - 0x7564da3f]', 'adc esi, 0xc3265c34', 'push r10', 'call 0x7ffb72bbd739']
UB ID: 423 - ['xor dil, 0x1a', 'neg bp', 'lea r8, [rax + rbp*2 + 0x771d288f]', 'push rsi', 'sbb dil, 0x90', 'push rbp', 'xor r10b, dil', 'lea rdi, [rsp + rdi + 0x38]', 'mov qword ptr [rdi + rdx], rcx', 'mov qword ptr [rsp + rdx], rbx', 'ret 0x30']
UB ID: 424 - ['mov ecx, 0xc631d99a', 'movsx edi, cx', 'mov rsi, qword ptr [r9]', 'movzx ecx, word ptr [r11]', 'xor cx, r10w', 'mov ebp, edi', 'movzx eax, bp', 'movsx r8d, di', 'rol cx, 1', 'call 0x7ffb72dbcfd7']
UB ID: 425 - ['mov r8, qword ptr [r11]', 'mov edi, 0xa41e0b28', 'mov esi, edi', 'and edi, esi', 'xor r8, r10', 'xor r8, 0xffffffffc8bc4ab1', 'xchg rcx, rdi', 'mov edx, ecx', 'rol r8, 7', 'neg r8', 'movsx eax, cx', 'movsx ebp, dx', 'xor r8, 0xfffffffff821cbaa', 'neg esi', 'call 0x7ffb72d7919f']
UB ID: 426 - ['shl esi, 0x8a', 'adc rdx, rbp', 'shr cl, 4', 'movsx ebp, word ptr [rsp + rdi*2 + 2]', 'cmovp bp, di', 'mov qword ptr [r9 + rdi - 8], rdx', 'rol qword ptr [rsp + rdi], 0x4b', 'adc si, cx', 'lea r9, [r9 + rdi - 8]', 'pop rax', 'not rbp', 'add edi, dword ptr [rdi + r11 + 8]', 'btc cx, r8w', 'lea rdx, [rcx + r8*2 - 0x7ed63ce3]', 'lea r11, [r8 + r11 - 0x4f]', 'xor edi, r10d', 'btc rcx, r8', 'lea edi, [rdi + r8 - 0x8bbc568]', 'call 0x7ffb72d2f54a']
UB ID: 427 - ['mov eax, 0x3aac6396', 'mov rsi, qword ptr [r9 + rax*2 - 0x7558c72c]', 'ror eax, 0xef', 'call 0x7ffb72cd13e1']
UB ID: 428 - ['lea ebp, [rdx + rbp - 0x8bbc582]', 'rol ebp, 3', 'neg ebp', 'pop rax', 'neg dil', 'ror sil, 0x63', 'not ebp', 'mov qword ptr [rsp + rdx - 0x75], rsi', 'mov qword ptr [rsp + rdx*4 - 0x1d4], r10', 'dec r8b', 'shl esi, 0x4d', 'xor dword ptr [rsp + rdx*8 - 0x3a8], ebp', 'pop r10', 'lea rdx, [rsi*4 + 0xe1bf3be]', 'movsxd rbp, ebp', 'sub r8b, 0x9d', 'add rbx, rbp', 'xchg ax, dx', 'jmp rbx']
UB ID: 429 - ['mov esi, r8d', 'add rbp, qword ptr [rsp + rdx - 0xf1ea]', 'ror al, 1', 'pop rdi', 'neg al', 'inc ecx', 'add al, cl', 'and dword ptr [rsp + rcx*2 + 0xb], 0xfe81ffa7', 'rol al, cl', 'xor byte ptr [rsp + rcx*2 + 7], sil', 'neg qword ptr [rsp + rcx + 0xd]', 'not al', 'sar rsi, 0xaf', 'xor al, 0x13', 'add edx, 0xa8abc80', 'xor r10b, al', 'lea rax, [rsp + rax + 0x18]', 'dec sil', 'sar byte ptr [rsp + rcx + 4], cl', 'add dword ptr [rsp + rcx*4 + 4], r8d', 'mov r8, qword ptr [rax + rcx*2 - 2]', 'sar ecx, 2', 'mov qword ptr [r9 + rcx], r8', 'btr cx, si', 'shl byte ptr [rsp + rcx*8 + 7], 0x87', 'mov qword ptr [rsp + rcx], rbx', 'ret 0x10']
UB ID: 430 - ['pop r8', 'xor ax, r10w', 'call 0x7ffb72df65d0']
UB ID: 431 - ['inc rsi', 'lea rax, [rdx*4 - 0x466242c5]', 'not bp', 'dec sil', 'xor byte ptr [rsp + rdi - 0xe725], dil', 'dec bp', 'xchg dil, sil', 'sar word ptr [rsp + rdi - 0xe722], 0x41', 'shl r8w, 0x85', 'xor r10w, bp', 'call 0x7ffb72c8de16']
UB ID: 432 - ['lea rbp, [r8*8 - 0x1687a79]', 'rol cx, 1', 'and sil, 0x35', 'mov qword ptr [rsp + rsi - 0x51a3925], rbp', 'xor cx, 0xe222', 'pop rdi', 'lea rbp, [r8 + rsi*4 + 0x7b2b434]', 'ror cx, 1', 'shr r8d, 0x1c', 'sal rsi, 0x7b', 'sar di, 0x87', 'not cx', 'ror rsi, 0xbd', 'movzx eax, si', 'xor r10w, cx', 'neg di', 'btr rdi, rbp', 'adc rcx, rsp', 'bts bp, r8w', 'dec r8b', 'mov rsi, qword ptr [rcx + rsi*8 - 8]', 'lea rcx, [rdi - 0x4a61564d]', 'bswap r8d', 'mov qword ptr [r9 + rbp*2 - 0x4fa6eb3a], rsi', 'sub r8w, 0x3a95', 'cwde', 'movzx ebp, byte ptr [r11 + rbp*2 - 0x4fa6eb30]', 'xor bpl, r10b', 'add bpl, al', 'movsx esi, cx', 'rol bpl, 1', 'sub eax, ecx', 'cwd', 'sbb bpl, 1', 'rol bpl, 1', 'ror r8b, 0x81', 'dec si', 'shl r8w, 0x48', 'xor bpl, 0x85', 'not r8', 'xor r10b, bpl', 'sal dl, 0xc7', 'not eax', 'je 0x7ffb72c2bd4f']
UB ID: 433 - ['xor dword ptr [rsp + r8 - 0x5aff4ba7], eax', 'sar cl, 0x81', 'mov r10, qword ptr [rsp + r8 - 0x5aff4ba7]', 'movsxd rax, eax', 'add rbx, rax', 'pop rax', 'add rax, 0x312cc', 'jmp rax']
UB ID: 434 - ['mov qword ptr [rsp + rdi - 0x5c56ff27], rdx', 'xor r10b, sil', 'sar r8w, 0x64', 'lea rsi, [rsp + rsi + 0x18]', 'xor dword ptr [rsp + rdx*2 - 0x1ffec], eax', 'add rbp, qword ptr [rsi + rdx*2 - 0x1fffe]', 'xchg dx, di', 'neg r8w', 'mov qword ptr [rdi + r9 - 0x5c570017], rbp', 'jl 0x7ffb72cf22dc']
UB ID: 435 - ['mov ecx, 0x3931f136', 'push rcx', 'mov rdx, qword ptr [r9 + rcx*2 - 0x7263e26c]', 'sub rbp, rdx', 'mov r10d, 0xda962391', 'lea r8, [r10 + r10*8 + 0x4803c381]', 'lea r9, [rip - 0x15]', 'mov r10d, dword ptr [r11]', 'movzx eax, r8b', 'mov ecx, eax', 'lea r11, [r11 + rax*4 - 0x264]', 'xadd eax, r8d', 'movzx edi, cx', 'xor r10d, ebp', 'push rcx', 'bswap eax', 'dec r10d', 'shr byte ptr [rsp + r8*2 - 0x132], 6', 'bswap r10d', 'shl al, 0xc1', 'shr rax, 0x16', 'mov edx, r8d', 'ror r10d, 3', 'xor al, dil', 'lea r10d, [r10 + r8*2 + 0x3228c97a]', 'xchg qword ptr [rsp + r8*2 - 0x134], rcx', 'lea rsi, [rcx + 0x7a6de21]', 'xor r10d, 0xd7940b1e', 'neg word ptr [rsp + r8*2 - 0x130]', 'mov qword ptr [rsp + r8*2 - 0x134], rbp', 'cmovg rcx, rsi', 'shl r8, 0xb', 'xor dword ptr [rsp + r8 - 0x4d000], r10d', 'pop rbp', 'push rax', 'inc r8d', 'movsxd r10, r10d', 'add r9, r10', 'mov qword ptr [rsp + r8 - 0x4d001], r9', 'ret']
UB ID: 437 - ['mov rdi, qword ptr [rbx]', 'mov rdx, qword ptr [rbx + 8]', 'call 0x7ffb72c76055']
UB ID: 438 - ['mov r10d, 0xa587bb20', 'mov edx, dword ptr [r11]', 'movsx esi, r10b', 'lea rdi, [rsi*4 - 0x4afb744b]', 'lea rcx, [r10*2 - 0x5a4bd6c1]', 'xor edx, ebp', 'mov eax, r10d', 'xor word ptr [rsp + rsi*4 - 0x70], 0xefbf', 'mov qword ptr [rsp + rsi - 0x10], rbp', 'pop r10', 'adc ecx, eax', 'mov qword ptr [rsp + rsi*8 - 0x100], rsi', 'xor dword ptr [rsp + rsi - 0x18], edx', 'inc byte ptr [rsp + rsi - 0x1d]', 'mov word ptr [rsp + rsi*4 - 0x7d], si', 'sub si, word ptr [rsp + rsi - 0x1c]', 'mov rbp, qword ptr [rsp + rdi*2 + 8]', 'movsxd rdx, edx', 'inc al', 'mov r10d, 0x3b944b9a', 'adc r9, rdx', 'or di, word ptr [r11 + rdi + 4]', 'cqo', 'neg rcx', 'jbe 0x7ffb72d07207']
UB ID: 439 - ['lea rdi, [rsp + rdi + 0x18]', 'mov rax, qword ptr [rax + rdi - 0x1b287b4]', 'add dword ptr [rsp + rdx*4 - 0x76], 0x4597891b', 'mov qword ptr [rbx + rdx*2 - 0x48], rax', 'rol word ptr [rsp + rdx - 0xc], 0x63', 'mov qword ptr [rsp + rdx - 0x20], 0x2d317236', 'jnp 0x7ffb72d2d188']
UB ID: 440 - ['mov dl, byte ptr [r11 + rdx*2 - 0x3a]', 'dec r8w', 'mov eax, 0x88b65c05', 'lea r11, [r11 + r8 - 0xfff8]', 'sub r10d, 0xf4017e9c', 'lea r8, [rsi + r8*4 - 0x1cec797d]', 'mov edi, dword ptr [rsp + r10 - 0xbfe832e]', 'xor dl, bpl', 'call 0x7ffb72eeae63']
UB ID: 441 - ['mov r10d, 0x6291040f', 'lea r11, [r10 + r11 - 0x6291040b]', 'movzx ecx, r10w', 'movsx r8d, cl', 'lea rdi, [r10 + r10*4 - 0x43c41f46]', 'rol r10, 0x34', 'lea esi, [rcx + rsi + 0x7ea02780]', 'push r8', 'neg qword ptr [rsp + rcx*4 - 0x103c]', 'movsx eax, cl', 'ror esi, 1', 'bswap esi', 'cqo', 'push r10', 'call 0x7ffb72b70412']
UB ID: 442 - ['rol esi, 3', 'xor r10d, ecx', 'push rdi', 'mov qword ptr [rsp + r10 - 0x62d07], rbp', 'mov qword ptr [rsp + r10*2 - 0xc5a36], rax', 'inc byte ptr [rsp + r10*4 - 0x18b475]', 'xor dword ptr [rsp + r10*2 - 0xc5a26], esi', 'not byte ptr [rsp + r10 - 0x62d1c]', 'mov rbp, qword ptr [rsp + r10*2 - 0xc5a26]', 'movsxd rsi, esi', 'dec qword ptr [rsp + r10 - 0x62d0f]', 'add r9, rsi', 'xchg dword ptr [rsp + r10 - 0x62d18], edi', 'or rdx, qword ptr [rsp + r10 - 0x62d0f]', 'shr cl, 0x61', 'mov r10, qword ptr [rbx + r10 - 0x62d1f]', 'xor di, 0xb9bb', 'lea rbx, [rbx + rcx - 0x3ff]', 'dec cl', 'or eax, dword ptr [rsp + rcx - 0x400]', 'mov qword ptr [rsp + rcx*2 - 0x7f4], rax', 'mov r8w, word ptr [r11 + r8*2 - 0x1e]', 'movsx esi, dil', 'bts edi, 0xa9', 'ror sil, 0x21', 'lea r11, [rcx + r11 - 0x404]', 'xor r8w, bp', 'dec byte ptr [rsp + rcx*2 - 0x7fe]', 'or al, cl', 'ror r8w, 1', 'neg r8w', 'push rax', 'not r8w', 'inc esi', 'inc r8w', 'xchg qword ptr [rsp + rcx*4 - 0x104a], rdx', 'ror cl, 0xe4', 'xor bp, r8w', 'shr edx, cl', 'inc dword ptr [rsp + rdi*2 - 0x16d5c]', 'lea r8, [rsp + r8 + 0x28]', 'shl rax, cl', 'xchg eax, edi', 'mov qword ptr [r8 + rcx*2 - 0x1204], r10', 'jae 0x7ffb72d744b2']
UB ID: 443 - ['push rax', 'xor ecx, 0x689d25ab', 'bswap ecx', 'not ecx', 'neg ecx', 'pop rdi', 'mov qword ptr [rsp + r8*4 - 0x1c1f4], rbp', 'cbw', 'xor dword ptr [rsp + r8 - 0x706b], ecx', 'push rax', 'mov rbp, qword ptr [rsp + r8*2 - 0xe0e6]', 'movsxd rcx, ecx', 'mov qword ptr [rsp + r8*2 - 0xe0f6], r8', 'sar dword ptr [rsp + r8 - 0x7081], 0x6e', 'adc r9, rcx', 'push r8', 'rol qword ptr [rsp + r8*2 - 0xe0fe], 0xd7', 'push r10', 'mov rsi, qword ptr [rbx + r8 - 0x708b]', 'movzx edi, byte ptr [r11 + r8 - 0x707e]', 'lea r11, [r11 + r8*8 - 0x38412]', 'call 0x7ffb72a9aa4b']
UB ID: 444 - ['xadd r10, rax', 'cmove rdx, rax', 'xor dil, bpl', 'xor dil, 0x80', 'inc word ptr [rsp + r8 - 0x7066]', 'lea rax, [r10 + 0x7a087083]', 'rol dil, 1', 'mov ecx, dword ptr [rsp + r8 - 0x7052]', 'xchg r10, rcx', 'not dil', 'add dil, 0xa4', 'inc rax', 'rol ax, 6', 'mov qword ptr [rsp + r8 - 0x7083], rcx', 'xor bpl, dil', 'mov qword ptr [rsp + r8*4 - 0x1c1ec], rdx', 'sub r8, -0x157683ef', 'lea rdi, [rsp + rdi + 0x40]', 'mov qword ptr [rsp + r8*2 - 0x2aede8ac], rax', 'mov qword ptr [rdi + r8*4 - 0x55dbd1c8], rsi', 'mov esi, ecx', 'mov qword ptr [rsp + r8*2 - 0x2aede8e4], r9', 'ret 0x38']
UB ID: 445 - ['movzx r8d, byte ptr [r11]', 'mov ecx, 0x391268a6', 'lea rdx, [rcx*8 - 0xa403771]', 'lea rdi, [rcx + rdx*8 - 0x56dca8f2]', 'xor r8b, bpl', 'ror r8b, 1', 'movsx esi, cl', 'inc r8b', 'mov eax, 0x54ac3cb9', 'neg r8b', 'ror r8b, 1', 'xor r8b, 0x2c', 'dec r8b', 'lea rcx, [r10 + rcx + 0x17d0c5d9]', 'rol rcx, 1', 'lea rcx, [rcx + r10 + 0x7f47f23b]', 'xor rcx, 0xffffffffe31c4620', 'xor rbp, rcx', 'shr sil, 0x63', 'mov qword ptr [rdi + rbx - 0xa801eb5], rcx', 'neg al', 'shr ax, 0x43', 'movzx edx, byte ptr [r11 + rdi - 0xa801ea5]', 'xor dl, bpl', 'call 0x7ffb72c71f52']
UB ID: 446 - ['mov rdi, qword ptr [rbx]', 'mov rcx, qword ptr [rbx + 8]', 'mov r8d, 0x6fa7a31f', 'mov esi, r8d', 'lea r10, [r8*4 + 0x671d0402]', 'add rdi, rcx', 'mov qword ptr [r8 + rbx - 0x6fa7a317], rdi', 'movzx edi, word ptr [r8 + r11 - 0x6fa7a31f]', 'xor di, bp', 'and r10b, 0xb8', 'rol di, 1', 'not di', 'not r8w', 'push r8', 'add di, 0xf4af', 'movzx ecx, word ptr [rsp + r8 - 0x6fa75cde]', 'not di', 'shl rsi, 0xe5', 'xor word ptr [rsp + r8 - 0x6fa75cda], r8w', 'mov eax, 0x2414098a', 'sbb di, 0xa234', 'xor di, 0xb437', 'dec di', 'or dword ptr [rsp + rcx - 0x6fa7], eax', 'cqo', 'ror di, 1', 'ror r8d, 0x62', 'pop rax', 'call 0x7ffb729d998b']
UB ID: 447 - ['xor bp, di', 'bswap rdx', 'lea rdi, [rsp + rdi + 8]', 'mov qword ptr [rsp + r8*2 - 0x37d3ae70], rdx', 'mov r10, qword ptr [rdi + rdx*2]', 'sar eax, 0x27', 'xchg qword ptr [rsp + r8*2 - 0x37d3ae70], rsi', 'mov qword ptr [rbx + rsi*8], r10', 'neg r8', 'push rcx', 'mov dword ptr [rsp + rsi + 8], esi', 'sub word ptr [rsp + r8 + 0x1be9d73d], cx', 'mov r10d, dword ptr [rsp + r8 + 0x1be9d73a]', 'add r10w, dx', 'inc word ptr [rsp + r8 + 0x1be9d73b]', 'lea edi, [r8 + rdi - 0x63a42c56]', 'dec ecx', 'rol edi, 2', 'ror edx, 0x91', 'call 0x7ffb72c59ec8']
UB ID: 448 - ['mov word ptr [rsi + rbx - 0x1325], r8w', 'mov edi, dword ptr [r11 + rsi*2 - 0x2645]', 'inc si', 'lea r11, [r11 + rsi - 0x131f]', 'xor edi, ebp', 'mov eax, r10d', 'or rsi, 0x682b4f33', 'rol cl, 0x67', 'xor edi, 0x9036b897', 'xadd rsi, r10', 'call 0x7ffb72c80895']
UB ID: 449 - ['shl eax, 0x1d', 'sbb dl, al', 'not dl', 'sbb dl, 0x1d', 'mov edi, r8d', 'xor bpl, dl', 'xadd di, cx', 'xadd dil, r8b', 'adc rdx, rsp', 'or r8w, di', 'dec cx', 'mov byte ptr [rax + rdx - 0x20000000], sil', 'cdq', 'xor dil, dl', 'mov r10d, dword ptr [r11 + rax*2 - 0x3fffffff]', 'dec eax', 'sal edi, cl', 'xor r10d, ebp', 'not r10d', 'inc edi', 'xor r8w, 0xb53d', 'rol r10d, 1', 'rol rdx, cl', 'lea rsi, [r8 + rdx*8 + 0x5a84db2e]', 'inc r10d', 'push r8', 'shl al, 0xc3', 'xadd edx, eax', 'not r10d', 'not r8b', 'inc qword ptr [rsp + rax]', 'lea rax, [rdx + rsi*2 - 0x4f59397e]', 'sbb r10d, 0xe9243939', 'dec rcx', 'not r10d', 'bswap r10d', 'xor r10d, 0x6a81ef09', 'xadd dword ptr [rsp + rcx - 0x2800510f], esi', 'inc r10d', 'dec ecx', 'not r10d', 'lea r10d, [r10 + r8 - 0x64e0b7ab]', 'push rsi', 'xchg byte ptr [rsp + rdi - 0x10a6f7f6], sil', 'bswap r10d', 'sub dword ptr [rsp + rdi - 0x10a6f7fc], 0x4b1b5102', 'sal word ptr [rsp + rcx - 0x28005107], 0x87', 'mov qword ptr [rsp + rcx - 0x28005108], rbp', 'xor dword ptr [rsp + rcx - 0x28005108], r10d', 'mov rbp, qword ptr [rsp + rcx*2 - 0x5000a218]', 'sbb dil, 0xb2', 'movsxd r10, r10d', 'add r9, r10', 'movzx r8d, word ptr [rcx + r11 - 0x2800510b]', 'pop rsi', 'mov r10d, esi', 'neg sil', 'xor r8w, bp', 'xchg rcx, r10', 'dec rax', 'not r8w', 'neg si', 'mov qword ptr [rsp + rcx - 0x830800], rcx', 'btr rsi, rax', 'neg r8w', 'lea rdx, [rsi*2 + 0x8118faf]', 'neg rsi', 'sar ax, 0x48', 'xor r8w, 0x5da4', 'sub r8w, 0xd53e', 'xor r8w, 0xe018', 'shl ax, 1', 'xor bp, r8w', 'cdqe', 'call 0x7ffb72b9954d']
UB ID: 450 - ['mov word ptr [rbx + rax + 0x743dff6e], r8w', 'mov rcx, qword ptr [r11 + rcx*4 - 0x20c1ff9]', 'call 0x7ffb72b91996']
UB ID: 451 - ['pop r10', 'add r10, 0x24387', 'jmp r10']
UB ID: 452 - ['xor r10b, 0xbf', 'shr dil, 0xa3', 'movsx r8d, sil', 'not r10b', 'xor bpl, r10b', 'mov qword ptr [rsp + rdi - 0x1ed06], rsi', 'shl edi, 0x17', 'lea r10, [rsp + r10 + 0x10]', 'jbe 0x7ffb72cc44d6']
UB ID: 453 - ['shl dil, 0x23', 'js 0x7ffb72b14d3a']
UB ID: 454 - ['xor cl, byte ptr [r10 + rax]', 'cwde', 'push rsi', 'mov word ptr [rbx + rax], cx', 'neg dx', 'mov r10d, 0x348c7420', 'cwd', 'mov qword ptr [rsp + rax], r9', 'ret 0x10']
UB ID: 455 - ['mov dil, byte ptr [rbx + 2]', 'or dword ptr [rsp + 0xa], 0xb7343727', 'je 0x7ffb72e0ea0f']
UB ID: 493 - ['and sil, dil', 'not sil', 'mov word ptr [rbx + 2], si', 'mov esi, dword ptr [r11]', 'xor esi, ebp', 'pop rcx', 'not qword ptr [rsp]', 'push -0x2dea5664', 'dec esi', 'mov ecx, dword ptr [rsp + 7]', 'neg esi', 'movzx edi, byte ptr [rsp + rcx - 0x48095cfa]', 'cmove rdx, qword ptr [rsp + r8 - 0xa]', 'dec eax', 'neg eax', 'add esi, 0xf915612c', 'inc eax', 'xadd cx, r8w', 'xadd qword ptr [rsp + r8 - 0xae], rsi', 'not eax', 'dec r8w', 'inc byte ptr [rsp + r8*2 - 0x15a]', 'and r10, r8', 'mov qword ptr [rsp + r8*8 - 0x568], rbp', 'xor dword ptr [rsp + r8 - 0xad], eax', 'sub cl, r8b', 'ror r8w, 0x21', 'pop rbp', 'inc rcx', 'bts r8w, cx', 'lea rcx, [r10 + rsi*4 - 0x7cd2e9e6]', 'movsxd rax, eax', 'xor esi, 0x8ba57b8d', 'push rcx', 'adc r9, rax', 'rol word ptr [rsp + r8*8 - 0x482ac], 0xab', 'mov qword ptr [rsp + r8 - 0x9056], r9', 'ret']
UB ID: 458 - ['shr qword ptr [rsp + rdx*2 - 0x5975f9a4], 0x7c', 'rol dil, 1', 'dec dil', 'movzx ecx, r8w', 'rol dil, 1', 'dec dil', 'bswap r10', 'cqo', 'neg dil', 'sal r10w, 0xab', 'xor bpl, dil', 'lea rdi, [rsp + rdi + 0x18]', 'and dl, ah', 'setle byte ptr [rsp + rdx + 3]', 'movzx si, byte ptr [rdi + rdx*4]', 'mov word ptr [rbx + rdx - 4], si', 'lea rbx, [rbx + rdx - 4]', 'mov edi, dword ptr [r11 + rdx + 2]', 'mov esi, r10d', 'xadd word ptr [rsp + rdx + 5], cx', 'lea r11, [rdx + r11 + 6]', 'call 0x7ffb72b930df']
UB ID: 459 - ['sub r8, 0x2b806807', 'xor edi, ebp', 'xor r8w, word ptr [rsp + rdx*2 + 0x14]', 'sar dl, 0x45', 'dec edi', 'pop rcx', 'ror qword ptr [rsp + rdx + 2], 0xe7', 'neg edi', 'push r10', 'push rsi', 'xor edi, 0x44afaea1', 'mov rax, qword ptr [rsp + 0x20]', 'add rax, 0xf7e25', 'jmp rax']
UB ID: 495 - ['mov rbp, qword ptr [rsp + rax - 0x6b536a]', 'mov esi, dword ptr [r11 + rsi - 0x13ff8953]', 'mov edx, r10d', 'lea r11, [r11 + rdi*4 - 0xfa486f]', 'xadd edx, r10d', 'sar cx, 0x61', 'movzx r8d, dx', 'xor esi, ebp', 'dec cx', 'lea esi, [rsi + r10 - 0x2bdf27cf]', 'ror esi, 2', 'dec esi', 'rol esi, 3', 'not r10b', 'dec esi', 'cdq', 'inc dl', 'sub r10w, 0xf25', 'not esi', 'and dl, cl', 'push rbp', 'jge 0x7ffb72a182f8']
UB ID: 461 - ['mov r10d, 0xa3b13c9c', 'movzx eax, r10b', 'cqo', 'shl r10w, 0x29', 'lea r11, [r11 + rdx*2 + 4]', 'movsx r8d, dx', 'movsx edi, r8b', 'dec edi', 'not ax', 'lea esi, [r10 + rsi - 0x77820b7a]', 'ror esi, 1', 'movzx ecx, al', 'dec r10', 'neg r8d', 'sbb esi, 0x90ada59c', 'neg esi', 'shr r8w, cl', 'cbw', 'sbb esi, edi', 'cqo', 'sal edx, 0x3b', 'push rbp', 'setp cl', 'xor dword ptr [rsp + rdx], esi', 'pop rbp', 'and di, cx', 'push rdi', 'movsxd rsi, esi', 'shr qword ptr [rsp + rdx*4], cl', 'add r9, rsi', 'add r10d, edx', 'mov ax, word ptr [rbx + rdx]', 'dec edx', 'xor r8w, word ptr [rbx + r8 + 2]', 'xor ax, dx', 'xor r8w, dx', 'xor dword ptr [rsp + rcx*8 - 5], r10d', 'or ax, r8w', 'dec edx', 'pop rdi', 'mov word ptr [rcx + rbx + 1], ax', 'lea rdi, [rcx + rbx + 1]', 'mov r8d, 0x6f0cff90', 'mov r10, rdi', 'mov si, word ptr ss:[r10 + rcx*2 - 2]', 'jle 0x7ffb72c990b3']
UB ID: 462 - ['movzx ecx, ax', 'mov cx, word ptr [rcx + rbx - 0x5093]', 'call 0x7ffb72be3ad2']
UB ID: 463 - ['xchg byte ptr [rsp + rax - 0x2b6fff5], dl', 'not edx', 'sub esi, edx', 'sal r8b, 0x45', 'inc dil', 'add r10w, r8w', 'xor esi, edx', 'lea rax, [r8 + r10*2 + 0x1d0f190c]', 'lea esi, [rsi + r8*2 + 0x18ba2e52]', 'cwd', 'mov qword ptr [rsp + r8*2 - 0x56e00c0], rdi', 'sub qword ptr [rsp + r8*2 - 0x56e0098], 0x2589b527', 'bswap esi', 'mov ecx, 0x898f8c07', 'xor edi, edi', 'mov qword ptr [rsp + r8*2 - 0x56e0098], rbp', 'xor dword ptr [rsp + r8 - 0x2b70038], esi', 'shr byte ptr [rsp + r8*2 - 0x56e00a0], cl', 'ror edi, 0xb1', 'mov rbp, qword ptr [rsp + r8 - 0x2b70038]', 'movsxd rsi, esi', 'adc r9, rsi', 'and word ptr [rsp + r8 - 0x2b7003f], di', 'mov qword ptr [rsp + r8 - 0x2b70038], r8', 'pop rax', 'add di, word ptr [rax + r11 - 1]', 'xor di, bp', 'shl r8d, cl', 'xor di, 0xb821', 'cbw', 'add qword ptr [rsp + rax*2 + 0x14], rax', 'sub byte ptr [rsp + rax], r10b', 'sbb di, dx', 'pop rax', 'xor word ptr [rsp + r8 - 0x5b802fed], r8w', 'call 0x7ffb72cc9d2e']
UB ID: 464 - ['ror di, 1', 'push rdx', 'mov qword ptr [rsp + r8 - 0x5b802ff2], rdx', 'xadd byte ptr [rsp + r8 - 0x5b802fee], al', 'sbb di, 0x1306', 'xor bp, di', 'call 0x7ffb72c38518']
UB ID: 465 - ['btr rdi, 0x19', 'xor bp, ax', 'rol dil, 0xc4', 'setb cl', 'mov word ptr [rdi + rbx - 0x58943a1e], ax', 'push rdi', 'shl cl, 0x46', 'mov qword ptr [rsp + rdi - 0x58943a1e], r9', 'ret']
UB ID: 466 - ['mov rsi, qword ptr [rbx + r8 - 0x7ffffefc]', 'pop rcx', 'adc rcx, -0xeeb7b', 'jmp rcx']
UB ID: 467 - ['ror eax, 0xc7', 'mov rcx, qword ptr [r8 + rbx - 0x7ffffef4]', 'call 0x7ffb72d17a0c']
UB ID: 468 - ['mov rax, qword ptr [r8 + rcx - 0x5c1c4290]', 'movzx r8d, cx', 'neg r8b', 'mov qword ptr [rbx + rcx - 0x5c1c4298], rax', 'mov dx, word ptr [r11 + rcx - 0x5c1c428e]', 'mov edi, 0x1599d183', 'jb 0x7ffb72bb7146']
UB ID: 469 - ['mov qword ptr [rsp], 0x1ea57f1e', 'mov r10, qword ptr [rbx + 8]', 'not rax', 'mov ecx, 0xf80846b9', 'movsx edx, cl', 'not r10', 'lea r8, [rdi + rdi - 0x675966e2]', 'inc r8', 'and rax, r10', 'not cx', 'mov qword ptr [rbx + 8], rax', 'rol word ptr [rsp + 6], cl', 'mov r10d, edi', 'not edx', 'mov ecx, dword ptr [r11 + rdx - 0x46]', 'xchg qword ptr [rsp + rdx*2 - 0x8c], r8', 'xor ecx, ebp', 'neg ecx', 'shl word ptr [rsp + r8 - 0x1ea57f19], 0xa6', 'neg qword ptr [rsp + rdx - 0x46]', 'add r10b, byte ptr [rsp + rdx*4 - 0x111]', 'lea ecx, [rcx + r8*4 + 0x1f055ab8]', 'ror ecx, 1', 'movsx esi, r8w', 'not ecx', 'jnp 0x7ffb72dd5462']
UB ID: 471 - ['mov r10d, 0xda962391', 'lea r8, [r10 + r10*8 + 0x4803c381]', 'lea r9, [rip - 0x15]', 'mov r10d, dword ptr [r11]', 'movzx eax, r8b', 'mov ecx, eax', 'lea r11, [r11 + rax*4 - 0x264]', 'xadd eax, r8d', 'movzx edi, cx', 'xor r10d, ebp', 'push rcx', 'bswap eax', 'dec r10d', 'shr byte ptr [rsp + r8*2 - 0x132], 6', 'bswap r10d', 'shl al, 0xc1', 'shr rax, 0x16', 'mov edx, r8d', 'ror r10d, 3', 'xor al, dil', 'lea r10d, [r10 + r8*2 + 0x3228c97a]', 'xchg qword ptr [rsp + r8*2 - 0x134], rcx', 'lea rsi, [rcx + 0x7a6de21]', 'xor r10d, 0xd7940b1e', 'neg word ptr [rsp + r8*2 - 0x130]', 'mov qword ptr [rsp + r8*2 - 0x134], rbp', 'cmovg rcx, rsi', 'shl r8, 0xb', 'xor dword ptr [rsp + r8 - 0x4d000], r10d', 'pop rbp', 'push rax', 'inc r8d', 'movsxd r10, r10d', 'add r9, r10', 'mov qword ptr [rsp + r8 - 0x4d001], r9', 'ret']
UB ID: 472 - ['mov ecx, 0x27357e26', 'movsx eax, cl', 'mov r10, qword ptr [rbx + rcx*2 - 0x4e6afc4c]', 'ror al, 0x46', 'movsx edx, cl', 'add edx, 0x39ba4b1c', 'movzx edi, word ptr [rcx + r11 - 0x27357e26]', 'xor di, bp', 'call 0x7ffb72be78c2']
UB ID: 473 - ['mov edx, 0xa819427', 'movzx r8d, byte ptr [r11 + rdx*2 - 0x1503284e]', 'bts dx, 0xa7', 'xor r8b, bpl', 'movsx r10d, dl', 'or rdx, 0x8999606', 'xor r8b, 0xb6', 'lea rsi, [r10 + rdx*2 - 0x34c0314c]', 'lea rdi, [r10*4 - 0xd4f9fc2]', 'add si, 0x54a9', 'not r8b', 'shr r10, 0xcb', 'ror r8b, 1', 'call 0x7ffb72b90681']
UB ID: 474 - ['add r8b, r10b', 'movzx eax, dl', 'rol rax, 0x6a', 'mov qword ptr [rsp + rdx - 0xa9996a7], rdx', 'xor r8b, r10b', 'xor bpl, r8b', 'lea r8, [rsp + r8 + 8]', 'mov edx, 0x1706ce2b', 'movzx r10d, dl', 'mov r8d, dword ptr [r11 + rdx*2 - 0x2e0d9c56]', 'movzx edi, dl', 'xor r8d, ebp', 'movzx ecx, dil', 'shl dx, 0xa5', 'ror r8d, 1', 'lea rsi, [rdx + rcx*8 + 0x719ec1b2]', 'inc r8d', 'lea rsi, [rsi*2 + 0x4e9d55b9]', 'xor r8d, 0x16348688', 'bts si, dx', 'ror dl, 0x67', 'inc r8d', 'btr edx, r10d', 'jae 0x7ffb728f353e']
UB ID: 475 - ['mov edx, 0x1706ce2b', 'movzx r10d, dl', 'mov r8d, dword ptr [r11 + rdx*2 - 0x2e0d9c56]', 'movzx edi, dl', 'xor r8d, ebp', 'movzx ecx, dil', 'shl dx, 0xa5', 'ror r8d, 1', 'lea rsi, [rdx + rcx*8 + 0x719ec1b2]', 'inc r8d', 'lea rsi, [rsi*2 + 0x4e9d55b9]', 'xor r8d, 0x16348688', 'bts si, dx', 'ror dl, 0x67', 'inc r8d', 'btr edx, r10d', 'jae 0x7ffb728f353e']
UB ID: 476 - ['mov ecx, 0xa43b3020', 'lea rsi, [rcx*4 + 0x74064384]', 'movzx r10d, byte ptr [r11]', 'xor r10b, bpl', 'movsx r8d, cx', 'sbb r10b, 0x9c', 'movsx eax, sil', 'shr si, 0xab', 'rol r10b, 1', 'dec r10b', 'neg r10b', 'xor bpl, r10b', 'cqo', 'add r10, rsp', 'call 0x7ffb728ae0d0']
UB ID: 477 - ['mov qword ptr [rsp + r8 - 0x3020], rcx', 'movzx r8w, byte ptr [r10 + r8 - 0x3020]', 'mov edi, eax', 'bswap eax', 'rol dword ptr [rsp + rax*2 - 0x8000000], 0xd5', 'mov word ptr [rax + rbx - 0x4000002], r8w', 'adc edx, dword ptr [rax + r11 - 0x3ffffff]', 'sub dword ptr [rsp + rax - 0x3ffffff], eax', 'cdqe', 'mov r10d, esi', 'xor edx, ebp', 'dec edx', 'btr ecx, r10d', 'neg edx', 'sal word ptr [rsp + rax*4 - 0xffffffb], 0x2d', 'dec si', 'call 0x7ffb729fe09d']
UB ID: 478 - ['xor edx, 0x44afaea1', 'shr r10b, 0xa3', 'sbb cx, cx', 'and cl, r10b', 'bswap edx', 'mov qword ptr [rsp + rax - 0x3fffff8], rbp', 'mov qword ptr [rsp + rax*4 - 0x10000000], rcx', 'xor dword ptr [rsp + rax*4 - 0xffffff8], edx', 'mov rbp, qword ptr [rsp + rax - 0x3fffff8]', 'lea rax, [rax - 0x7c7fc0f7]', 'movsxd rdx, edx', 'add r9, rdx', 'movsx r8d, byte ptr [rsp + rax + 0x787fc0f9]', 'movzx ecx, byte ptr [rax + r11 + 0x787fc0fc]', 'mov qword ptr [rsp + rax + 0x787fc0ff], rax', 'lea r11, [r11 + rdi*4 - 0xa]', 'movsx edx, byte ptr [rsp + rdi*2 - 3]', 'xor cl, bpl', 'xor cl, 0xb6', 'rol qword ptr [rsp + rdi + 4], 0xde', 'inc dil', 'call 0x7ffb72a180c9']
UB ID: 479 - ['not cl', 'mov qword ptr [rsp + rax + 0x787fc0f7], 0x2a9ae70f', 'ror cl, 1', 'pop rdx', 'push r8', 'sar dx, 0x6c', 'dec cl', 'add dword ptr [rsp + rdi*4 - 0x10], edx', 'lea rsi, [r8*2 + 0x57bb1d1b]', 'sbb word ptr [rsp + rsi - 0x57bb1d7f], 0x1b81', 'not cl', 'inc rsi', 'add al, dl', 'xor bpl, cl', 'lea rcx, [rsp + rcx + 0x18]', 'mov edi, dword ptr [rcx + rax + 0x787fc0f9]', 'inc rax', 'mov dword ptr [rsi + rbx - 0x57bb1d98], edi', 'lea rax, [rbx + r10*2 - 0x9e60006]', 'ja 0x7ffb72aa7653']
UB ID: 480 - ['mov qword ptr [rbx + r10*8 - 0x2798000e], rax', 'ror r8, 0x38', 'pop r10', 'xadd dword ptr [rsp + rsi - 0x57bb1d90], r8d', 'lea rbx, [rdx + rbx - 0x2a9b000c]', 'pop r8', 'pop rax', 'jg 0x7ffb72eb83a2']
UB ID: 481 - ['mov rcx, qword ptr [rbx]', 'mov edi, 0x6929aa32', 'mov edx, 0xf5aa7009', 'movzx esi, dil', 'mov edi, dword ptr ss:[rcx + rdi - 0x6929aa32]', 'movzx ecx, sil', 'lea rbx, [rbx + rsi*4 - 0xc4]', 'mov dword ptr [rsi + rbx - 0x32], edi', 'mov edi, edx', 'mov eax, ecx', 'mov r8d, dword ptr [rsi + r11 - 0x32]', 'sar si, 0xa5', 'lea r11, [r11 + rax - 0x2e]', 'sal dl, 0x61', 'xor r8d, ebp', 'neg r8d', 'ror r8d, 2', 'btc eax, edx', 'call 0x7ffb72b62e80']
UB ID: 482 - ['lea r8d, [r8 + rdi - 0x161aece7]', 'mov qword ptr [rsp + rsi*2 - 6], -0x3f5c70f0', 'dec dx', 'movzx r10d, word ptr [rsp + rsi - 2]', 'bswap r8d', 'xor r8d, 0xc5acd3b3', 'mov qword ptr [rsp + rsi*2 - 6], rbp', 'call 0x7ffb72a3c30d']
UB ID: 483 - ['mov edx, 0xa214a84', 'xchg dh, dl', 'mov ecx, dword ptr [r11 + rdx*8 - 0x510c2250]', 'xor ecx, ebp', 'lea ecx, [rcx + rdx + 0x2909b60]', 'mov qword ptr [rsp + rdx - 0xa21844a], rdx', 'not ecx', 'inc ecx', 'sar qword ptr [rsp + rdx - 0xa21844a], 0xba', 'bswap ecx', 'dec ecx', 'neg byte ptr [rsp + rdx - 0xa218446]', 'movzx r8d, dl', 'or qword ptr [rsp + rdx - 0xa21844a], rbp', 'movsx esi, r8w', 'xor dword ptr [rsp + rdx*8 - 0x510c2250], ecx', 'movsx edi, sil', 'pop rbp', 'mov eax, edi', 'movsxd rcx, ecx', 'add r9, rcx', 'lea r8, [rax - 0x7e4e0ad9]', 'mov edi, dword ptr [rdx + rbx - 0xa21844a]', 'and si, dx', 'mov eax, dword ptr [rbx + rdx*4 - 0x28861124]', 'bts r8, rsi', 'lea rcx, [rsi + r8*2 + 0x5e23d23b]', 'call 0x7ffb729644e4']
UB ID: 484 - ['inc r8', 'inc edx', 'mov r10d, edi', 'or sil, 0x9d', 'movzx eax, byte ptr [r11 + rdx*2 - 0x14430892]', 'xor al, bpl', 'mov qword ptr [rsp + rdx - 0xa21844b], 0x3517e30a', 'movsx edi, r8b', 'push rdi', 'dec al', 'shr dl, 0x43', 'rol al, 1', 'shr word ptr [rsp + rdx*2 - 0x1443080e], 0xc2', 'sbb al, 0x18', 'shr byte ptr [rsp + rdx - 0xa2183fe], 0x65', 'not al', 'mov ecx, dword ptr [rsp + rdx*4 - 0x28861019]', 'pop r8', 'add al, cl', 'inc dx', 'xor bpl, al', 'shr r8b, cl', 'ror si, 9', 'or rdi, rcx', 'lea rax, [rsp + rax + 8]', 'mov dword ptr [rax + rdx - 0xa21840a], r10d', 'mov eax, dword ptr [r11 + rdx - 0xa218405]', 'lea r10, [rsi*8 + 0x4199570e]', 'lea r11, [rdx + r11 - 0xa218401]', 'xor eax, ebp', 'rol cx, 0xaa', 'sar qword ptr [rsp + rdx*8 - 0x510c2050], 0x4c', 'adc word ptr [rsp + rdx - 0xa21840a], si', 'bswap eax', 'ror cl, 0x65', 'xchg qword ptr [rsp + r8*2 - 0x72], rcx', 'inc rdi', 'xor eax, 0x39ae4229', 'sub eax, 0x9d290498', 'ror eax, 3', 'xadd si, di', 'or dword ptr [rsp + rdx*4 - 0x28861028], r8d', 'seto sil', 'inc eax', 'lea rcx, [r8 + 0x708b380]', 'xchg qword ptr [rsp + rdx - 0xa21840a], rsi', 'neg eax', 'not r8b', 'add dword ptr [rsp + rdx*4 - 0x28861025], r8d', 'bswap eax', 'or word ptr [rsp + rdx*2 - 0x1443080f], r8w', 'sal qword ptr [rsp + rdx - 0xa21840a], 0x3a', 'ror eax, 3', 'xor eax, 0x1f0f9da6', 'or qword ptr [rsp + rdx - 0xa21840a], rbp', 'xadd di, cx', 'shr dil, 0xa1', 'xor dword ptr [rsp + rdx - 0xa21840a], eax', 'bts si, cx', 'sal edx, 0x2d', 'pop rbp', 'ror r8b, 0x45', 'mov dword ptr [rbx + rdx - 0x30813ffa], eax', 'setns sil', 'lea rbx, [rbx + r8*2 - 0x66]', 'add r8b, cl', 'xadd edi, ecx', 'jmp r9']
UB ID: 485 - ['mov ecx, 0x8313f523', 'movzx edi, byte ptr [r11]', 'movsx esi, cl', 'call 0x7ffb72c60391']
UB ID: 486 - ['movzx di, byte ptr [rdx + rbx - 0xe]', 'mov ecx, 0xa6989184', 'mov al, byte ptr [rbx + rdx*4 - 0x36]', 'lea rbx, [rdx + rbx - 0xc]', 'movzx r10d, dl', 'add dil, al', 'shr edx, cl', 'movsx esi, cx', 'mov word ptr [rbx + rdx*4], di', 'jb 0x7ffb72e49dc7']
UB ID: 487 - ['bts r8d, 0x39', 'lea r10d, [rcx + r10 + 0x4a7182b8]', 'push rdx', 'xor r10d, 0xf4b4fd06', 'xadd dx, di', 'xchg word ptr [rsp + rdx*4 + 4], cx', 'adc di, r8w', 'dec r10d', 'neg r10d', 'cdq', 'inc rcx', 'cwde', 'xor r10d, 0x223c1d1d', 'shl qword ptr [rsp + rdx], 0xcb', 'not dil', 'mov qword ptr [rsp + rdx], rbp', 'xor dword ptr [rsp + rdi - 0xff], r10d', 'cdq', 'xadd esi, r8d', 'push rcx', 'mov rbp, qword ptr [rsp + rsi - 0x1ff917c]', 'or rax, rdi', 'xor edi, 0x2c8e96a2', 'movsxd r10, r10d', 'adc r9, r10', 'mov qword ptr [rsp + rsi - 0x1ff9184], r9', 'ret 8']
UB ID: 488 - ['dec eax', 'sub r10, 0x6aaca5ac', 'add dx, si', 'not eax', 'dec rdi', 'push rbp', 'xor dword ptr [rsp + rsi - 0x6f], eax', 'pop rbp', 'push rcx', 'movsxd rax, eax', 'add r9, rax', 'or sil, 0x99', 'shr ecx, 0x86', 'mov r8w, word ptr [rsi + rbx - 0xff]', 'sar byte ptr [rsp + rsi - 0xfd], cl', 'call 0x7ffb72ccc49c']
UB ID: 489 - ['sal word ptr [rsp + rsi*2 - 0x1eb], 0x6e', 'dec dx', 'adc r10b, 0x2c', 'ror r10b, 1', 'pop rsi', 'neg r10b', 'rol dl, 0xa4', 'ror r10b, 1', 'xor bpl, r10b', 'ror dword ptr [rsp + rcx*2 - 0x6fdc7e5], cl', 'lea r10, [rsp + r10 + 0x20]', 'push rdi', 'mov byte ptr [rcx + r10 - 0x37ee3ff], r8b', 'mov rcx, qword ptr [rcx + r11 - 0x37ee3fa]', 'mov eax, edi', 'pop rsi', 'movsx r8d, dl', 'sbb r11, -0xd', 'lea rsi, [rdx + rsi*8 - 0x69c54e7b]', 'sal esi, 0x61', 'pop r10', 'add r10, -0x3bc0cd', 'jmp r10']
UB ID: 490 - ['xor rcx, rbp', 'inc rcx', 'xor r8b, r8b', 'adc dl, byte ptr [rsp + rsi - 0x7720933d]', 'neg r8b', 'xor rcx, 0x3ca8de17', 'xchg dword ptr [rsp + rsi - 0x77209336], edi', 'call 0x7ffb72d3fe08']
UB ID: 492 - ['ror edi, 2', 'neg al', 'mov qword ptr [rsp + r8 - 0xcb7e], rcx', 'call 0x7ffb72ed6f0c']
UB ID: 494 - ['lea rdi, [r8*8 - 0x7b5a6867]', 'movzx si, byte ptr [r10 + r8 - 0x5d9d]', 'mov qword ptr [rsp + rdi + 0x7b577b7f], r8', 'lea rbx, [rbx + rdi + 0x7b577b85]', 'mov word ptr [rbx + r8*2 - 0xbb3a], si', 'mov esi, dword ptr [r11 + r8*2 - 0xbb3a]', 'cbw', 'and r8d, dword ptr [rsp + r8*2 - 0xbb38]', 'lea r11, [rdi + r11 + 0x7b577b83]', 'and word ptr [rsp + r8 + 1], di', 'xor esi, ebp', 'xor esi, 0xa61191bb', 'ror esi, 1', 'movzx r10d, dil', 'inc esi', 'sar qword ptr [rsp + rdi + 0x7b577b7f], 0xc3', 'bswap esi', 'adc r8b, 0x3e', 'mov qword ptr [rsp + rdi + 0x7b577b7f], rbp', 'xor dword ptr [rsp + r8 - 0x3f], esi', 'pop rbp', 'movsxd rsi, esi', 'cqo', 'add r9, rsi', 'sar r8w, 0xea', 'or r8, r9', 'jmp r8']
UB ID: 496 - ['xor dword ptr [rsp + rdi - 0x3e921d], esi', 'sbb dl, r8b', 'pop rbp', 'movsxd rsi, esi', 'xor r8, rdi', 'push rcx', 'neg rdi', 'add r9, rsi', 'lea r10, [rdi - 0xef70c75]', 'not edx', 'mov qword ptr [rsp + r10 + 0xf359e92], r9', 'ret']
UB ID: 497 - ['movzx r10d, byte ptr [r11]', 'xor r10b, bpl', 'mov ecx, 0x50a413a', 'ror r10b, 1', 'mov r8d, ecx', 'xor r10b, 8', 'movsx edx, r8w', 'call 0x7ffb72e28299']
UB ID: 498 - ['mov qword ptr [rsp + r8*2 - 0x11d4a202], 0x6a86d11c', 'not dword ptr [rsp + rdx*8 - 0x47528808]', 'movzx r8d, byte ptr [r11 + r8 - 0x8ea50fc]', 'cdqe', 'lea r11, [rax + r11 - 0x607d4134]', 'push rsi', 'cwde', 'dec rax', 'xor r8b, bpl', 'cdq', 'xor eax, esi', 'sbb eax, esi', 'adc r8b, 0x2f', 'rol al, 5', 'add r10b, 0x88', 'jb 0x7ffb72c0460e']
UB ID: 499 - ['neg r8b', 'inc r8b', 'xor r10, qword ptr [rsp + rsi + 0x603e961b]', 'rol edx, 0x22', 'xor r8b, 0xa0', 'xor bpl, r8b', 'lea rdi, [rsi + rax*4 - 0x4cc15954]', 'lea r8, [rsp + r8 + 0x10]', 'sub word ptr [rsp + rdx + 5], di', 'adc byte ptr [rsp + rsi + 0x603e961f], dh', 'rol rdi, 0x73', 'mov byte ptr [r8 + rdx], cl', 'lea r8, [rsi*2 - 0x65703146]', 'mov qword ptr [rsp + rdx*2], r9', 'ret 8']
UB ID: 500 - ['mov eax, 0xc9a46715', 'movzx r10d, al', 'movzx esi, byte ptr [r11 + r10*8 - 0xa8]', 'lea r11, [r11 + r10 - 0x14]', 'xor sil, bpl', 'sub sil, 5', 'neg sil', 'dec sil', 'neg r10w', 'mov r8d, 0x751d5caf', 'sub eax, eax', 'xor sil, 0xbf', 'not sil', 'lea rcx, [r10 + r8*8 - 0x23fa6b7b]', 'sar cx, 0x6b', 'xor bpl, sil', 'lea rdi, [r8 + r10*8 - 0x6a44ba7c]', 'call 0x7ffb729336db']
UB ID: 501 - ['cbw', 'lea rsi, [rsp + rsi + 8]', 'pop r8', 'movzx r10w, byte ptr [rax + rsi]', 'sal edi, cl', 'lea r8, [rax + rdi*4 - 0x35f649ea]', 'btc eax, 0xaf', 'lea rbx, [rax + rbx - 0x8002]', 'call 0x7ffb72ba512b']
UB ID: 502 - ['mov word ptr [rdi + rbx - 0x50718000], r10w', 'movzx esi, di', 'mov edx, dword ptr [r11 + rax - 0x8000]', 'mov qword ptr [rsp + rax - 0x8000], rcx', 'lea r11, [r11 + rax*2 - 0xfffc]', 'sub cl, byte ptr [rsp + rax*4 - 0x1ffff]', 'shr cl, 7', 'xor edx, ebp', 'sal byte ptr [rsp + rax*4 - 0x1fffe], 0xe2', 'and di, r8w', 'dec edx', 'pop r10', 'ror edi, 0xa1', 'cwde', 'neg edx', 'shl rdi, 0x50', 'sbb cx, di', 'bswap edx', 'push rbp', 'jae 0x7ffb72b27ced']
UB ID: 503 - ['rol r10, 9', 'xor dword ptr [rsp + rsi*8 - 0x407f8], edx', 'add cl, al', 'sub sil, dil', 'pop rbp', 'xadd rcx, r10', 'sal si, cl', 'movsxd rdx, edx', 'add r9, rdx', 'xor cx, r8w', 'movsx edx, cl', 'ja 0x7ffb72eb83a2']
UB ID: 504 - ['dec eax', 'rol eax, 1', 'lea eax, [rax + rdx*8 - 0x57e54e56]', 'bswap edx', 'mov qword ptr [rsp + r8 - 0xf81598c], r8', 'pop rdi', 'rol eax, 2', 'add rdx, rdi', 'push rbp', 'js 0x7ffb72af3f42']
UB ID: 505 - ['sbb dx, r10w', 'xor dword ptr [rsp + r8*4 - 0x3e056630], eax', 'pop rbp', 'inc r10d', 'bts rdx, r10', 'shr dil, 0xc6', 'movsxd rax, eax', 'sal r10d, 0xb7', 'add di, 0x2cb9', 'call 0x7ffb72ac4d8d']
UB ID: 506 - ['adc r9, rax', 'sub r10b, dil', 'movzx edi, word ptr [r8 + r11 - 0xf81598c]', 'mov qword ptr [rsp + r8 - 0xf81598c], r10', 'jae 0x7ffb72936264']
UB ID: 507 - ['xor dword ptr [rsp + r8*2 - 0x1f02b317], 0x5a27dc04', 'lea r11, [r11 + r8*2 - 0x1f02b316]', 'xchg qword ptr [rsp + r8 - 0xf81598c], rcx', 'pop rdx', 'mov esi, 0x6ad3312', 'lea r10, [rsi*2 - 0x5cfa8c4]', 'movsx edx, sil', 'mov rdi, qword ptr [rsi + rbx - 0x6ad3312]', 'neg dl', 'mov r8b, byte ptr [rbx + rsi - 0x6ad330a]', 'not si', 'lea rbx, [rbx + rsi - 0x6adcce3]', 'movsx ecx, r10w', 'xadd r10d, esi', 'or cx, 0x541b', 'mov byte ptr [rdi + rsi - 0x78abd60], r8b', 'mov r8d, edx', 'shl r10b, 0xc3', 'mov edi, dword ptr [r11 + r10 - 0xe388a68]', 'inc dx', 'bts ecx, r10d', 'call 0x7ffb72bcb071']
UB ID: 508 - ['xchg rdx, rsi', 'mov qword ptr [rsp + rdx - 0x38a99038], -0xf5d08df', 'add r10, rcx', 'pop r8', 'mov qword ptr [rbx + rdx*2 - 0x71532068], r10', 'xchg dword ptr [rsp + r8*8 + 0x7ae846fb], edx', 'push rdx', 'mov rdi, qword ptr [r11 + rdx*2 - 0xd6]', 'xchg byte ptr [rsp + rdx*2 - 0xcc], sil', 'not byte ptr [rsp + rdx - 0x66]', 'xor rdi, rbp', 'rol rdi, 6', 'neg rdi', 'inc r8w', 'shl dl, 0x21', 'shr dword ptr [rsp + rdx - 0xd6], 0x5c', 'xor rdi, 0xffffffffc88d0731', 'mov r10d, 0x15a92286', 'shl edx, 0xe6', 'shr word ptr [rsp + rdx - 0x357f], 0x61', 'not rdi', 'lea rcx, [rdx*8 + 0x3d36fc97]', 'push r8', 'movsx eax, byte ptr [rsp + rdx - 0x3572]', 'xor rbp, rdi', 'mov qword ptr [rbx + rdx - 0x3580], rdi', 'call 0x7ffb72be08e6']
UB ID: 510 - ['add r10w, cx', 'btc rcx, 0x84', 'push rbp', 'xor dword ptr [rsp + rdi - 0x57b1], r8d', 'pop rbp', 'cdq', 'movsxd r8, r8d', 'sal rdi, 0xdf', 'shr rsi, 0xd2', 'call 0x7ffb72934d41']
UB ID: 511 - ['add r9, r8', 'mov r10, qword ptr [r11 + rdx*2 + 6]', 'mov qword ptr [rsp + rdx*2], rdi', 'and ax, di', 'neg byte ptr [rsp + rdx + 4]', 'lea r11, [r11 + rdx*4 + 0xe]', 'movzx r8d, si', 'rol si, 0xe1', 'xor r10, rbp', 'shr byte ptr [rsp + rdx*4 + 2], 0x66', 'bswap r10', 'sub qword ptr [rsp + rdx*2], rcx', 'cmovp ecx, r8d', 'lea r10, [r10 + rsi + 0x12df62d]', 'not r10', 'inc word ptr [rsp + rsi - 0x2a5a]', 'adc byte ptr [rsp + rdx*4 + 3], al', 'inc r10', 'neg r10', 'bswap rax', 'xor rbp, r10', 'mov qword ptr [rdx + rbx - 8], r10', 'mov r10d, dword ptr [rsp + rdx + 4]', 'lea rbx, [rbx + rdx*4 - 8]', 'cbw', 'neg dil', 'pop rdi', 'jns 0x7ffb72eb83a2']
UB ID: 512 - ['mov rbp, qword ptr [rsp + rdi*2 - 0x4822]', 'btr di, 0xb2', 'call 0x7ffb72d67800']
UB ID: 513 - ['lea r11, [r11 + rdi*2 - 0x481d]', 'xor rdx, qword ptr [rsp + rdi - 0x23fb]', 'push r8', 'inc rdi', 'xor r10b, bpl', 'rol r10b, 1', 'xor r10b, 0xbb', 'add r10b, 0x98', 'xadd cx, dx', 'cbw', 'jbe 0x7ffb72b3cd60']
UB ID: 514 - ['xor r10b, 0x88', 'sar dword ptr [rsp + rdi - 0x2410], cl', 'push rcx', 'sbb r10b, 0x91', 'not al', 'dec al', 'xor esi, dword ptr [rsp + rdi*2 - 0x47fa]', 'xor r10b, 0x2c', 'xor bpl, r10b', 'add dl, 0x24', 'mov word ptr [rbx + rdi - 0x2410], r10w', 'sub ax, di', 'lea rbx, [rbx + rdi*4 - 0x9046]', 'mov qword ptr [rsp + rdi - 0x2412], r9', 'ret 0x28']
UB ID: 515 - ['mov edi, 0x3f90b89d', 'movzx r8d, di', 'movzx ecx, byte ptr [rdi + r11 - 0x3f90b89d]', 'not r8', 'movsx r10d, r8b', 'xor cl, bpl', 'sub cl, 5', 'sub r8w, 0x3694', 'jns 0x7ffb7291cfc7']
UB ID: 516 - ['neg cl', 'sar di, 0x2d', 'dec cl', 'xor cl, 0xbf', 'mov edx, r8d', 'not cl', 'xor bpl, cl', 'add rcx, rsp', 'neg dil', 'mov r10b, byte ptr [rcx + rdi - 0x3f90ff03]', 'mov word ptr [rbx + rdi - 0x3f90ff05], r10w', 'movsx r10d, dl', 'rol edi, 0xf7', 'lea edx, [rdi + rdx + 0x6f6a4bbd]', 'xor edx, 0xf4b4fd06', 'dec edx', 'btr di, r10w', 'neg edx', 'xor edx, 0x223c1d1d', 'ror r8w, 0xc4', 'push rbp', 'xor dword ptr [rsp + r8 + 0x1ef4], edx', 'pop rbp', 'lea rax, [rcx + rdx*4 + 0x709e09a6]', 'not r10b', 'movzx esi, dl', 'mov word ptr [rdx + rbx - 0x6d1ee5ad], r10w', 'movsx r8d, cl', 'movsx r10d, ax', 'mov eax, dword ptr [r11 + rsi*4 - 0x2bc]', 'mov qword ptr [rsp + rsi*2 - 0x15e], rdx', 'dec byte ptr [rsp + rsi - 0xad]', 'lea rcx, [rdx*2 - 0x1ce6716b]', 'xor eax, ebp', 'shl dword ptr [rsp + rdx - 0x6d1ee5ac], cl', 'jbe 0x7ffb72b58b6a']
UB ID: 517 - ['jp 0x7ffb7292ee41']
UB ID: 518 - ['bswap eax', 'jae 0x7ffb72e58272']
UB ID: 519 - ['not r10d', 'call 0x7ffb72d4e379']
UB ID: 520 - ['movsxd r10, r10d', 'adc r9, r10', 'sbb al, dil', 'movzx si, byte ptr [rbx + r8*4 - 0x72354abc]', 'jb 0x7ffb72d9ae5f']
UB ID: 521 - ['mov esi, 0xc5a2e18e', 'movsx r10d, si', 'sal r10d, 7', 'lea rdi, [rsp + 0x18]', 'sar si, 0xe6', 'inc r10b', 'lea rdx, [r10 + rsi*4 + 0x5881ac08]', 'mov rcx, qword ptr [rdi]', 'lea rdi, [rdx + rdx*2 - 0xc53d662]', 'mov r8, rcx', 'mov cl, byte ptr [rbx]', 'shr r8, cl', 'movzx eax, si', 'btr r10, 0xba', 'mov qword ptr [rbx + rax - 0xff8c], r8', 'lea rbx, [rax + rbx - 0xff8c]', 'dec si', 'mov edx, dword ptr [rax + r11 - 0xff86]', 'ror rdi, 0x3f', 'movsx r8d, al', 'lea r11, [r11 + rax*4 - 0x3fe14]', 'setne r10b', 'xadd r10w, si', 'sub al, r8b', 'xor edx, ebp', 'not edx', 'not r10d', 'or si, di', 'sbb edx, 0xdd98f1a7', 'call 0x7ffb72d22c5a']
UB ID: 522 - ['bswap edx', 'inc dil', 'xadd rdi, r10', 'btc r8, 0x33', 'not edx', 'rol r10d, 0xdf', 'rol edx, 3', 'push rbp', 'xor dword ptr [rsp + rax - 0xff00], edx', 'add ax, r8w', 'pop rbp', 'movsxd rdx, edx', 'sub r8d, r10d', 'or rax, rdi', 'adc r9, rdx', 'bswap rax', 'mov qword ptr [rsp + rcx - 0x1e96abbc], rdi', 'dec rax', 'bts rsi, 1', 'call 0x7ffb72bcf8f8']
UB ID: 523 - ['mov ecx, dword ptr [r11]', 'mov edx, 0x2c29210a', 'mov edi, edx', 'xor ecx, ebp', 'push rdi', 'neg ecx', 'sar dx, 0xca', 'sbb dword ptr [rsp + rdx*2 - 0x5852000e], edx', 'movsx r8d, dx', 'sbb ecx, 0x859d3727', 'not r8w', 'adc dl, 0x31', 'and word ptr [rsp + r10 + 0xc], r10w', 'mov qword ptr [rsp + r10], rsi', 'neg qword ptr [rsp + r10*2 + 9]', 'xor bpl, dl', 'shl qword ptr [rsp + r10 + 5], 0xbf', 'lea rdx, [rsp + rdx + 0x18]', 'mov byte ptr [rsp + r10*8 + 0xc], sil', 'shr r10d, cl', 'jne 0x7ffb72bc1057']
UB ID: 524 - ['xor r8d, ebp', 'shl ecx, 0x5c', 'call 0x7ffb72dc6b47']
UB ID: 525 - ['xor sil, 1', 'inc sil', 'neg sil', 'dec sil', 'xadd qword ptr [rsp + r8 - 0xe520], rcx', 'push rdi', 'xor bpl, sil', 'movzx si, sil', 'mov al, byte ptr [rbx + rax - 0x20]', 'inc r8w', 'sub ecx, 0x3bb81408', 'and sil, al', 'neg dword ptr [rsp + r8*4 - 0x39483]', 'sar dword ptr [rsp + rcx - 0x5450d113], 0xab', 'push r8', 'not sil', 'xchg qword ptr [rsp + rcx - 0x5450d110], rcx', 'mov word ptr [rbx + rdi - 8], si', 'mov esi, 0xbdb9573a', 'lea rax, [rsi*4 + 0x4f3c8708]', 'mov r8, qword ptr [rbx]', 'lea rdi, [rsi + 0x6e80c9a6]', 'movzx r10w, byte ptr ss:[r8]', 'mov edx, 0x5216a99b', 'neg edx', 'add edi, esi', 'mov word ptr [rbx + 6], r10w', 'lea rcx, [rsi + rsi*2 - 0x18da4a7f]', 'jnp 0x7ffb72d3158e']
UB ID: 526 - ['push rbp', 'call 0x7ffb72d77306']
UB ID: 528 - ['mov qword ptr [rbx + r10*2 - 0xcf94], rsi', 'mov edi, dword ptr [r10 + r11 - 0x67c5]', 'adc word ptr [rsp + r10*2 - 0xcf84], 0x4ea0', 'xor cx, ax', 'jno 0x7ffb72d0e3b0']
0: UB addr = 7ffb6d1e4221 with ID: 0 yields:
		call 0x7ffb6cfa48bf
1: UB addr = 7ffb72a64706 with ID: 1 yields:
		push r14
		push r10
		call 0x7ffb72ba8acd
2: UB addr = 7ffb72ba8acd with ID: 2 yields:
		mov qword ptr [rsp], r9
		push r12
		mov r10d, 0x3ca0119a
		push rax
		call 0x7ffb72ac85fb
3: UB addr = 7ffb72ac85fb with ID: 3 yields:
		mov eax, 0xbb885e17
		mov qword ptr [rsp + r10 - 0x3ca0119a], rbx
		call 0x7ffb72c5aa4c
4: UB addr = 7ffb72b1b404 with ID: 4 yields:
		sub rbp, rdx
		mov r10d, 0xda962391
		lea r8, [r10 + r10*8 + 0x4803c381]
		lea r9, [rip - 0x15]
		mov r10d, dword ptr [r11]
		movzx eax, r8b
		mov ecx, eax
		lea r11, [r11 + rax*4 - 0x264]
		xadd eax, r8d
		movzx edi, cx
		xor r10d, ebp
		push rcx
		bswap eax
		dec r10d
		shr byte ptr [rsp + r8*2 - 0x132], 6
		bswap r10d
		shl al, 0xc1
		shr rax, 0x16
		mov edx, r8d
		ror r10d, 3
		xor al, dil
		lea r10d, [r10 + r8*2 + 0x3228c97a]
		xchg qword ptr [rsp + r8*2 - 0x134], rcx
		lea rsi, [rcx + 0x7a6de21]
		xor r10d, 0xd7940b1e
		neg word ptr [rsp + r8*2 - 0x130]
		mov qword ptr [rsp + r8*2 - 0x134], rbp
		cmovg rcx, rsi
		shl r8, 0xb
		xor dword ptr [rsp + r8 - 0x4d000], r10d
		pop rbp
		push rax
		inc r8d
		movsxd r10, r10d
		add r9, r10
		mov qword ptr [rsp + r8 - 0x4d001], r9
		ret
5: UB addr = 7ffb72b47d9c with ID: 5 yields:
		movzx r8d, cx
		xor dl, bpl
		xor dword ptr [rsp + rsi*4 + 0xc], r8d
		pop r10
		not dl
		bts r10, 0x98
		lea rcx, [r10*4 - 0x6c5b2e6c]
		rol r8w, 0x2c
		inc dl
		mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]
		ror dl, 1
		xor word ptr [rsp + r10 - 0x4f1da1c1], r8w
		neg qword ptr [rsp + rsi]
		adc dl, sil
		sar r10d, 0x6b
		xadd qword ptr [rsp + r10 - 0x9e3b4], rdi
		neg dl
		inc r8d
		sub dl, 0xc
		neg rsi
		setl byte ptr [rsp + r10*4 - 0x278ecb]
		rol dl, 1
		xor bpl, dl
		lea rdx, [rsp + rdx + 8]
		mov qword ptr [rdx + r10*8 - 0x4f1da0], rax
		mov edi, dword ptr [r11 + r10 - 0x9e3b2]
		neg qword ptr [rsp + r10*2 - 0x13c768]
		xor edi, ebp
		xor edi, 0xe12e3f2d
		btc r8d, ecx
		rol edi, 1
		sub r8w, 0x64a7
		sal rcx, 0x87
		xor edi, 0x689d25ab
		neg edi
		sal r8w, 0xec
		mov qword ptr [rsp + r10 - 0x9e3b4], rbp
		movsx eax, cl
		btr esi, 0xa1
		xor dword ptr [rsp + r10 - 0x9e3b4], edi
		pop rbp
		xor r10, rax
		movsxd rdi, edi
		adc r9, rdi
		mov rdx, qword ptr [rbx + rsi*2 + 0x10]
		lea rbx, [r10 + rbx - 0x9e39c]
		dec si
		movzx edi, byte ptr [rsi + r11 - 0xfff9]
		lea r11, [r11 + r10 - 0x9e3ad]
		jno 0x7ffb72b7d536
6: UB addr = 7ffb72b7d536 with ID: 6 yields:
		ror si, 0xf
		rol si, 0xc7
		xor dil, bpl
		lea rcx, [rax*8 + 0x3d3d7905]
		ror dil, 1
		sub rsi, -0x577b11cf
		xor dil, 0xa1
		xor r8d, r8d
		rol r10w, cl
		adc dil, 0x94
		sub cx, cx
		xor dil, 0x9c
		not r8d
		btr si, cx
		xor bpl, dil
		sar r10w, 0xc6
		add rdi, rsp
		xchg ax, r8w
		mov qword ptr [r10 + rdi - 0x9fed3], rdx
		dec si
		add ax, r10w
		sub sil, al
		jmp r9
7: UB addr = 7ffb72b47d9c with ID: 5 yields:
		movzx r8d, cx
		xor dl, bpl
		xor dword ptr [rsp + rsi*4 + 0xc], r8d
		pop r10
		not dl
		bts r10, 0x98
		lea rcx, [r10*4 - 0x6c5b2e6c]
		rol r8w, 0x2c
		inc dl
		mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]
		ror dl, 1
		xor word ptr [rsp + r10 - 0x4f1da1c1], r8w
		neg qword ptr [rsp + rsi]
		adc dl, sil
		sar r10d, 0x6b
		xadd qword ptr [rsp + r10 - 0x9e3b4], rdi
		neg dl
		inc r8d
		sub dl, 0xc
		neg rsi
		setl byte ptr [rsp + r10*4 - 0x278ecb]
		rol dl, 1
		xor bpl, dl
		lea rdx, [rsp + rdx + 8]
		mov qword ptr [rdx + r10*8 - 0x4f1da0], rax
		mov edi, dword ptr [r11 + r10 - 0x9e3b2]
		neg qword ptr [rsp + r10*2 - 0x13c768]
		xor edi, ebp
		xor edi, 0xe12e3f2d
		btc r8d, ecx
		rol edi, 1
		sub r8w, 0x64a7
		sal rcx, 0x87
		xor edi, 0x689d25ab
		neg edi
		sal r8w, 0xec
		mov qword ptr [rsp + r10 - 0x9e3b4], rbp
		movsx eax, cl
		btr esi, 0xa1
		xor dword ptr [rsp + r10 - 0x9e3b4], edi
		pop rbp
		xor r10, rax
		movsxd rdi, edi
		adc r9, rdi
		mov rdx, qword ptr [rbx + rsi*2 + 0x10]
		lea rbx, [r10 + rbx - 0x9e39c]
		dec si
		movzx edi, byte ptr [rsi + r11 - 0xfff9]
		lea r11, [r11 + r10 - 0x9e3ad]
		jno 0x7ffb72b7d536
8: UB addr = 7ffb72b7d536 with ID: 6 yields:
		ror si, 0xf
		rol si, 0xc7
		xor dil, bpl
		lea rcx, [rax*8 + 0x3d3d7905]
		ror dil, 1
		sub rsi, -0x577b11cf
		xor dil, 0xa1
		xor r8d, r8d
		rol r10w, cl
		adc dil, 0x94
		sub cx, cx
		xor dil, 0x9c
		not r8d
		btr si, cx
		xor bpl, dil
		sar r10w, 0xc6
		add rdi, rsp
		xchg ax, r8w
		mov qword ptr [r10 + rdi - 0x9fed3], rdx
		dec si
		add ax, r10w
		sub sil, al
		jmp r9
9: UB addr = 7ffb72b76087 with ID: 7 yields:
		adc dl, 0x31
		and word ptr [rsp + r10 + 0xc], r10w
		mov qword ptr [rsp + r10], rsi
		neg qword ptr [rsp + r10*2 + 9]
		xor bpl, dl
		shl qword ptr [rsp + r10 + 5], 0xbf
		lea rdx, [rsp + rdx + 0x18]
		mov byte ptr [rsp + r10*8 + 0xc], sil
		shr r10d, cl
		jne 0x7ffb72bc1057
10: UB addr = 7ffb72b760b5 with ID: 8 yields:
		mov qword ptr [r10 + rdx], rax
		mov rdx, qword ptr [r10 + rbx + 8]
		lea rbx, [rbx + r10*4 + 0x10]
		setns sil
		or r10b, byte ptr [rsp + r10 + 0x16]
		movzx ecx, word ptr [r11 + r10 + 1]
		movzx eax, word ptr [rsp + r10 + 7]
		xor cx, bp
		shr dil, 0x87
		adc cx, 0xe297
		movsx r8d, byte ptr [rsp + rsi*2 + 0x11]
		not cx
		sub byte ptr [rsp + r10 + 0xd], 0x11
		sal r8d, 0xfc
		sbb cx, 0x4b88
		ror cx, 1
		xor bp, cx
		sal r8d, 0x7b
		call 0x7ffb72be9f6b
11: UB addr = 7ffb72b47d9c with ID: 5 yields:
		movzx r8d, cx
		xor dl, bpl
		xor dword ptr [rsp + rsi*4 + 0xc], r8d
		pop r10
		not dl
		bts r10, 0x98
		lea rcx, [r10*4 - 0x6c5b2e6c]
		rol r8w, 0x2c
		inc dl
		mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]
		ror dl, 1
		xor word ptr [rsp + r10 - 0x4f1da1c1], r8w
		neg qword ptr [rsp + rsi]
		adc dl, sil
		sar r10d, 0x6b
		xadd qword ptr [rsp + r10 - 0x9e3b4], rdi
		neg dl
		inc r8d
		sub dl, 0xc
		neg rsi
		setl byte ptr [rsp + r10*4 - 0x278ecb]
		rol dl, 1
		xor bpl, dl
		lea rdx, [rsp + rdx + 8]
		mov qword ptr [rdx + r10*8 - 0x4f1da0], rax
		mov edi, dword ptr [r11 + r10 - 0x9e3b2]
		neg qword ptr [rsp + r10*2 - 0x13c768]
		xor edi, ebp
		xor edi, 0xe12e3f2d
		btc r8d, ecx
		rol edi, 1
		sub r8w, 0x64a7
		sal rcx, 0x87
		xor edi, 0x689d25ab
		neg edi
		sal r8w, 0xec
		mov qword ptr [rsp + r10 - 0x9e3b4], rbp
		movsx eax, cl
		btr esi, 0xa1
		xor dword ptr [rsp + r10 - 0x9e3b4], edi
		pop rbp
		xor r10, rax
		movsxd rdi, edi
		adc r9, rdi
		mov rdx, qword ptr [rbx + rsi*2 + 0x10]
		lea rbx, [r10 + rbx - 0x9e39c]
		dec si
		movzx edi, byte ptr [rsi + r11 - 0xfff9]
		lea r11, [r11 + r10 - 0x9e3ad]
		jno 0x7ffb72b7d536
12: UB addr = 7ffb72b7d536 with ID: 6 yields:
		ror si, 0xf
		rol si, 0xc7
		xor dil, bpl
		lea rcx, [rax*8 + 0x3d3d7905]
		ror dil, 1
		sub rsi, -0x577b11cf
		xor dil, 0xa1
		xor r8d, r8d
		rol r10w, cl
		adc dil, 0x94
		sub cx, cx
		xor dil, 0x9c
		not r8d
		btr si, cx
		xor bpl, dil
		sar r10w, 0xc6
		add rdi, rsp
		xchg ax, r8w
		mov qword ptr [r10 + rdi - 0x9fed3], rdx
		dec si
		add ax, r10w
		sub sil, al
		jmp r9
13: UB addr = 7ffb72a6dc74 with ID: 9 yields:
		mov qword ptr [rsp + rax*4 + 0x860000c], rbp
		shl r10, 0xf5
		sbb rsi, rdx
		xor dword ptr [rsp + rax*2 + 0x430000a], ecx
		add word ptr [rsp + rax*2 + 0x4300004], ax
		sal edx, 0xca
		btr edi, eax
		mov rbp, qword ptr [rsp + rdx*8 + 8]
		dec di
		mov qword ptr [rsp + rdx], rdx
		movsxd rcx, ecx
		mov r8d, 0x869b6ea2
		sbb r10, rdi
		add word ptr [rsp + rdx], di
		adc r9, rcx
		sal sil, 0x46
		mov rdi, qword ptr [rbx + rdx + 0x10]
		mov qword ptr [rsp + rdx*2 + 8], -0x6dd6a777
		jb 0x7ffb72dadbd6
14: UB addr = 7ffb72a6dcd2 with ID: 10 yields:
		lea rbx, [rdx + rbx + 0x18]
		neg qword ptr [rsp + rdx*8 + 8]
		setb r8b
		movzx esi, word ptr [r11 + rax + 0x2180007]
		lea r11, [r11 + rdx + 8]
		push rdx
		xor si, bp
		call 0x7ffb72c3e2f2
15: UB addr = 7ffb72a6dc74 with ID: 9 yields:
		mov qword ptr [rsp + rax*4 + 0x860000c], rbp
		shl r10, 0xf5
		sbb rsi, rdx
		xor dword ptr [rsp + rax*2 + 0x430000a], ecx
		add word ptr [rsp + rax*2 + 0x4300004], ax
		sal edx, 0xca
		btr edi, eax
		mov rbp, qword ptr [rsp + rdx*8 + 8]
		dec di
		mov qword ptr [rsp + rdx], rdx
		movsxd rcx, ecx
		mov r8d, 0x869b6ea2
		sbb r10, rdi
		add word ptr [rsp + rdx], di
		adc r9, rcx
		sal sil, 0x46
		mov rdi, qword ptr [rbx + rdx + 0x10]
		mov qword ptr [rsp + rdx*2 + 8], -0x6dd6a777
		jb 0x7ffb72dadbd6
16: UB addr = 7ffb72a6dcd2 with ID: 10 yields:
		lea rbx, [rdx + rbx + 0x18]
		neg qword ptr [rsp + rdx*8 + 8]
		setb r8b
		movzx esi, word ptr [r11 + rax + 0x2180007]
		lea r11, [r11 + rdx + 8]
		push rdx
		xor si, bp
		call 0x7ffb72c3e2f2
17: UB addr = 7ffb72b9db35 with ID: 11 yields:
		xor rbp, r10
		mov qword ptr [rsp + rsi - 0xffae], rdx
		xor r8, rax
		btc esi, ecx
		mov qword ptr [rsi + rbx - 0xffb6], r10
		push rsi
		neg ecx
		xadd eax, esi
		movzx eax, byte ptr [rax + r11 - 0x2000ff91]
		shr di, 0xed
		or dx, 0xec87
		lea r11, [r11 + rdx*4 - 0x3f607]
		call 0x7ffb72c67c09
18: UB addr = 7ffb728df27b with ID: 12 yields:
		mov rdi, qword ptr [rax + rdi + 0x5519fffd]
		pop rsi
		adc rsi, 0x18852e
		jmp rsi
19: UB addr = 7ffb72b7261d with ID: 527 yields:
		mov r10d, 0x6980f73e
		movzx eax, r10b
		btc ax, 0xae
		mov rsi, qword ptr [rax + rbx - 0x403e]
		movsx ecx, al
		mov edi, ecx
		mov rcx, qword ptr [rbx + r10 - 0x6980f736]
		adc rsi, rcx
		btr di, 0xa7
		xor rax, rax
		mov qword ptr [rbx + r10 - 0x6980f736], rsi
		adc eax, dword ptr [r11 + rax*2]
		xor eax, ebp
		neg eax
		sal di, 0x84
		lea rcx, [r10 + rdi*4 - 0x4ef4cfdc]
		ror eax, 2
		btc di, 0x87
		sar r10, cl
		lea eax, [rax + rcx*8 + 0x1bdd2f38]
		push rcx
		not eax
		mov qword ptr [rsp + r10*4], rbp
		xchg r10, rdi
		xor dword ptr [rsp + r10*2 - 0x6c0], eax
		pop rbp
		push rcx
		movsxd rax, eax
		add r9, rax
		movzx edi, byte ptr [r11]
		mov edx, 0x8a286702
		lea rsi, [rdx + 0x219ed34]
		xor dil, bpl
		movzx r8d, sil
		or r8w, dx
		push rdx
		not dil
		mov r10d, r8d
		push r10
		dec dil
		rol dil, 1
		movsx eax, si
		rol r10b, 0xe5
		neg dil
		rol dx, 0x2e
		shr esi, 0x42
		movsx ecx, sil
		xor bpl, dil
		neg r8d
		shl word ptr [rsp + rsi - 0x231094ff], 1
		not cx
		lea rdi, [rsp + rdi + 0x10]
		cwde
		jbe 0x7ffb72efdfcf
20: UB addr = 7ffb72a56edd with ID: 14 yields:
		btc r8w, 0xb3
		xor dword ptr [rsp + r10 - 0x73b0b997], ecx
		bts r10d, eax
		call 0x7ffb728ad73b
21: UB addr = 7ffb728ad73b with ID: 15 yields:
		mov rbp, qword ptr [rsp + r8 - 0x5134888e]
		movsx esi, r8w
		movsxd rcx, ecx
		dec al
		adc r9, rcx
		mov rdx, qword ptr [r8 + rbx - 0x5134889e]
		mov qword ptr [rsp + r8 - 0x5134888e], r10
		lea rdi, [rsp + rax*8 + 0x158]
		mov qword ptr [rdi + r10 - 0x73b0b997], rdx
		mov qword ptr [rsp + r8 - 0x51348896], -0x5bd3dafc
		mov qword ptr [rsp + r10 - 0x73b0b997], r9
		ret 8
22: UB addr = 7ffb72946613 with ID: 16 yields:
		mov edi, dword ptr [rsi + r11 - 0x7a02ec14]
		xor edi, ebp
		lea rdx, [rsi*2 + 0x5d2a8181]
		dec edi
		movsx r10d, si
		ror edi, 1
		xor ecx, ecx
		inc rdx
		dec edi
		bts rsi, r10
		bswap edi
		movzx r8d, dl
		mov eax, 0xcc270637
		push rbp
		or rsi, rax
		xor dword ptr [rsp + rcx], edi
		sar dl, 0xe4
		ror si, 1
		call 0x7ffb72a2308f
23: UB addr = 7ffb72a2308f with ID: 17 yields:
		neg si
		rol si, 1
		pop r8
		sub rcx, rcx
		sbb si, 0x680
		shl qword ptr [rsp + rcx + 8], 0xc
		mov qword ptr [rsp + rcx], 0x6f8c9e25
		xchg qword ptr [rsp + rcx + 5], rcx
		xor bp, si
		lea r8, [rdx*8 - 0x57731477]
		mov r10d, 0x331896
		lea rsi, [rsp + rsi + 0x10]
		mov qword ptr [r10 + rsi - 0x331896], rax
		shr di, 0xcd
		sub cl, dl
		movzx eax, r8w
		mov edx, dword ptr [r11 + r10*4 - 0xcc6254]
		sub eax, 0x3d374215
		xor edx, ebp
		ror r10w, 0xac
		jb 0x7ffb72987d6b
24: UB addr = 7ffb72987d6b with ID: 18 yields:
		xchg qword ptr [rsp + r10*4 - 0xce257c], rax
		xor byte ptr [rsp + r10*2 - 0x6712be], r8b
		lea edx, [rdi + rdx - 0x5ac0d471]
		jbe 0x7ffb72d0df06
25: UB addr = 7ffb72987d8a with ID: 19 yields:
		ror edx, 1
		ror qword ptr [rsp + r10*8 - 0x19c4b00], 0xfa
		jb 0x7ffb72b072ba
26: UB addr = 7ffb72987d9b with ID: 20 yields:
		bswap edx
		sbb r8w, 0xbf2e
		rol edx, 3
		mov qword ptr [rsp + r10 - 0x338959], rbp
		inc r10w
		xor dword ptr [rsp + r10*2 - 0x6712bc], edx
		push r8
		pop r10
		mov rbp, qword ptr [rsp + 8]
		movsxd rdx, edx
		not rcx
		mov qword ptr [rsp + 8], -0x59fae262
		add r9, rdx
		and r8d, 0x1e9ba438
		movzx eax, word ptr [r11 + r8 - 0xc032428]
		movzx edx, di
		add word ptr [rsp + r8*8 - 0x60192175], di
		lea r11, [r11 + r8 - 0xc032426]
		movsx esi, cl
		xor ax, bp
		call 0x7ffb72de2b95
27: UB addr = 7ffb729f9491 with ID: 21 yields:
		not ax
		lea rdx, [r8 + rdi - 0x47c423fa]
		neg ax
		xor rcx, 0x453bcd94
		ror ax, 1
		not r10b
		add ax, 0x5e8f
		call 0x7ffb72de74ae
28: UB addr = 7ffb72b8da15 with ID: 22 yields:
		push 0x643f3989
		mov ecx, 0xe3a653b
		mov edx, dword ptr [rcx + r11 - 0xe3a653b]
		xor edx, ebp
		mov edi, ecx
		movsx r8d, word ptr [rsp + rcx - 0xe3a6538]
		not edx
		rol ecx, 0xb
		lea edx, [rdx + rdi + 0x7065c654]
		ror edx, 1
		not byte ptr [rsp + rdi*2 - 0x1c74ca71]
		bswap edx
		sub edi, 0x1931938f
		xor r8b, 0xa6
		rol edx, 3
		mov qword ptr [rsp + r8*2 - 0x184], rbp
		not r10w
		movzx esi, cx
		xor bp, r10w
		sub rcx, rsi
		lea r10, [rsp + r10 + 8]
		mov qword ptr [rsp + r8 - 0x80c2], rcx
		btc dx, 0x19
		cwde
		mov qword ptr [rcx + r10 - 0x67a40000], rdi
		jb 0x7ffb72c16290
29: UB addr = 7ffb7295ce41 with ID: 23 yields:
		movzx esi, byte ptr [r8 + r11 - 0x80bc]
		call 0x7ffb72c0b213
30: UB addr = 7ffb728f7da3 with ID: 24 yields:
		xor dl, ah
		xor sil, 0x2e
		xor bpl, sil
		lea rsi, [rsp + rsi + 0x18]
		inc cl
		shl cx, 3
		mov rax, qword ptr [rcx + rsi - 0x67a40008]
		push r10
		lea rsi, [rcx - 0x277439d4]
		mov qword ptr [rbx + r8*8 - 0x40610], rax
		adc si, word ptr [rsp + rcx - 0x67a3ffef]
		call 0x7ffb72932bc2
31: UB addr = 7ffb72932bc2 with ID: 25 yields:
		push r8
		mov qword ptr [rsp + r8*2 - 0x10184], r9
		ret 0x28
32: UB addr = 7ffb72b91340 with ID: 26 yields:
		mov r8d, dword ptr [r11 + r8*2 - 0x4e0a7558]
		mov edi, 0x8834e7a7
		mov esi, edi
		movzx ecx, di
		push rsi
		lea r10, [rcx*8 - 0x67d484cc]
		lea r8d, [rcx + r8 - 0x410c0608]
		movsx edx, byte ptr [rsp + rcx - 0xd37e]
		movzx eax, di
		bswap r8d
		sbb rcx, 0x480c4e9f
		xchg dword ptr [rsp + rdx*2 - 0x65], r10d
		neg ax
		xor r8d, 0x3aabe31c
		xchg byte ptr [rsp + rcx + 0x480b7b27], al
		push rsi
		mov qword ptr [rsp + rsi - 0x80], rbp
		xor eax, 0x2fbddc91
		xor dword ptr [rsp + rsi*2 - 0x108], r8d
		mov rbp, qword ptr [rsp + rsi - 0x80]
		inc dil
		cqo
		movsxd r8, r8d
		inc byte ptr [rsp + rsi - 0x85]
		add r9, r8
		and ecx, 0x6532cb33
		mov r10, rbx
		je 0x7ffb72b7e82b
33: UB addr = 7ffb72b913e6 with ID: 27 yields:
		neg di
		mov qword ptr [rsi + rbx - 0x90], r10
		mov qword ptr [rsp + rsi - 0x80], rax
		bts rdx, rax
		mov r8, qword ptr [rsi + r11 - 0x84]
		ror word ptr [rsp + rsi*2 - 0x10f], 8
		push rdi
		call 0x7ffb729acebf
34: UB addr = 7ffb729acebf with ID: 28 yields:
		movsx r10d, word ptr [rsp + rsi - 0x7f]
		neg al
		shr ax, 1
		shl rdi, 0xd5
		lea r8, [rsi + r8 + 0x933b51f]
		or r10b, 0x91
		ror r8, 6
		cdqe
		xor rbp, r8
		cqo
		btc di, 0x1d
		shl dil, 0x22
		mov qword ptr [rsi + rbx - 0x98], r8
		rol byte ptr [rsp + rsi - 0x6d], 0x42
		lea r8, [rdi*4 + 0x76918820]
		mov rcx, qword ptr [r11 + rsi*4 - 0x214]
		rol dl, 0x61
		shr word ptr [rsp + rsi*4 - 0x206], 0x6e
		xchg byte ptr [rsp + rsi - 0x6f], dh
		lea r11, [r11 + rsi - 0x74]
		pop rax
		mov eax, r8d
		xor rcx, rbp
		lea rcx, [rcx + rsi*4 - 0x1b9fe73d]
		or word ptr [rsp + rdx - 0xc3fd], dx
		bswap rcx
		ror r8, 0xc3
		neg eax
		inc byte ptr [rsp + rsi - 0x88]
		rol rcx, 7
		xor rcx, 0xffffffffaf9b582f
		inc rcx
		not qword ptr [rsp + rsi*4 - 0x212]
		xor rbp, rcx
		rol dword ptr [rsp + rsi*2 - 0x110], 0xe5
		mov qword ptr [rsi + rbx - 0xa0], rcx
		cwde
		call 0x7ffb72b6006b
35: UB addr = 7ffb72b6006b with ID: 29 yields:
		push r8
		lea rbx, [rsi + rbx - 0xa0]
		xchg qword ptr [rsp + 8], rdi
		adc rdi, 0x10edc7
		jmp rdi
36: UB addr = 7ffb72abbd49 with ID: 68 yields:
		pop r8
		pop rdx
		pop rdx
		pop rax
		pop rdi
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
37: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
38: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
39: UB addr = 7ffb7298f853 with ID: 33 yields:
		mov r8d, dword ptr [r11]
		xor edi, edi
		lea r11, [rdi + r11 + 4]
		mov esi, 0x529e369e
		movsx ecx, di
		xor r8d, ebp
		add ecx, esi
		sbb r8d, 0xd9bf8d9b
		call 0x7ffb72c0da85
40: UB addr = 7ffb72b71663 with ID: 34 yields:
		mov edx, 0xb4a57380
		mov r10, qword ptr [rbx]
		movsx edi, dx
		sal edi, 0x6f
		xor dl, dil
		movzx eax, byte ptr [r11 + rdi*2 - 0x73800000]
		not dx
		xor al, bpl
		movzx r8d, dx
		btc si, 0x39
		xor dword ptr [rsp + rax*2 - 0xf520], ecx
		inc di
		mov rbp, qword ptr [rsp + rax*4 - 0x1ea48]
		ror r8b, 0xe1
		movsxd rcx, ecx
		add r9, rcx
		mov rcx, qword ptr [rax + r11 - 0xf523]
		lea r11, [r11 + rax - 0xf51b]
		xor rcx, rbp
		shl rsi, 0x4b
		ror dil, 0x46
		not rcx
		jae 0x7ffb72f12ace
41: UB addr = 7ffb72aa2acd with ID: 35 yields:
		lea rcx, [rax + rcx - 0x42a3fed1]
		cwd
		push rdi
		xor al, r8b
		xor rbp, rcx
		shr r10d, 0x81
		mov qword ptr [rax + rbx - 0xf583], rcx
		mov qword ptr [rsp + rax - 0xf583], r9
		ret 0x18
42: UB addr = 7ffb72b6e2b2 with ID: 36 yields:
		lea rcx, [r10 + rcx + 0x17d0c5d9]
		rol rcx, 1
		lea rcx, [rcx + r10 + 0x7f47f23b]
		xor rcx, 0xffffffffe31c4620
		xor rbp, rcx
		shr sil, 0x63
		mov qword ptr [rdi + rbx - 0xa801eb5], rcx
		neg al
		shr ax, 0x43
		movzx edx, byte ptr [r11 + rdi - 0xa801ea5]
		xor dl, bpl
		call 0x7ffb72c71f52
43: UB addr = 7ffb729f9e35 with ID: 37 yields:
		neg dl
		mov qword ptr [rsp + rdi - 0xa801ea5], r8
		add r10d, eax
		xor dl, 0x2e
		mov qword ptr [rsp + rdi*2 - 0x15003d5a], 0x2cbd7b21
		cdqe
		xor bpl, dl
		lea rdx, [rsp + rdx + 0x18]
		sal rsi, 0x2c
		xor byte ptr [rsp + rdi*2 - 0x15003d4d], 0x95
		sar esi, 0x3c
		mov r10, qword ptr [rdi + rdx - 0xa801ead]
		add rsi, rax
		push rax
		mov qword ptr [rdi + rbx - 0xa801ebd], r10
		xchg qword ptr [rsp + rdi*8 - 0x5400f558], rsi
		mov r8d, dword ptr [r11 + rdi*4 - 0x2a007aab]
		xchg word ptr [rsp + rdi*4 - 0x2a007aa3], ax
		lea r11, [r11 + rdi*2 - 0x15003d4d]
		neg rax
		cqo
		xor r8d, ebp
		shl byte ptr [rsp + rdi - 0xa801e97], 0xa2
		and edi, 0xb49881a3
		movsx r10d, word ptr [rsp + rdi - 0x80008f]
		neg r8d
		push rdi
		ror r8d, 2
		neg r10b
		call 0x7ffb72e8304d
44: UB addr = 7ffb72b91340 with ID: 26 yields:
		mov r8d, dword ptr [r11 + r8*2 - 0x4e0a7558]
		mov edi, 0x8834e7a7
		mov esi, edi
		movzx ecx, di
		push rsi
		lea r10, [rcx*8 - 0x67d484cc]
		lea r8d, [rcx + r8 - 0x410c0608]
		movsx edx, byte ptr [rsp + rcx - 0xd37e]
		movzx eax, di
		bswap r8d
		sbb rcx, 0x480c4e9f
		xchg dword ptr [rsp + rdx*2 - 0x65], r10d
		neg ax
		xor r8d, 0x3aabe31c
		xchg byte ptr [rsp + rcx + 0x480b7b27], al
		push rsi
		mov qword ptr [rsp + rsi - 0x80], rbp
		xor eax, 0x2fbddc91
		xor dword ptr [rsp + rsi*2 - 0x108], r8d
		mov rbp, qword ptr [rsp + rsi - 0x80]
		inc dil
		cqo
		movsxd r8, r8d
		inc byte ptr [rsp + rsi - 0x85]
		add r9, r8
		and ecx, 0x6532cb33
		mov r10, rbx
		je 0x7ffb72b7e82b
45: UB addr = 7ffb72b913e6 with ID: 27 yields:
		neg di
		mov qword ptr [rsi + rbx - 0x90], r10
		mov qword ptr [rsp + rsi - 0x80], rax
		bts rdx, rax
		mov r8, qword ptr [rsi + r11 - 0x84]
		ror word ptr [rsp + rsi*2 - 0x10f], 8
		push rdi
		call 0x7ffb729acebf
46: UB addr = 7ffb729acebf with ID: 28 yields:
		movsx r10d, word ptr [rsp + rsi - 0x7f]
		neg al
		shr ax, 1
		shl rdi, 0xd5
		lea r8, [rsi + r8 + 0x933b51f]
		or r10b, 0x91
		ror r8, 6
		cdqe
		xor rbp, r8
		cqo
		btc di, 0x1d
		shl dil, 0x22
		mov qword ptr [rsi + rbx - 0x98], r8
		rol byte ptr [rsp + rsi - 0x6d], 0x42
		lea r8, [rdi*4 + 0x76918820]
		mov rcx, qword ptr [r11 + rsi*4 - 0x214]
		rol dl, 0x61
		shr word ptr [rsp + rsi*4 - 0x206], 0x6e
		xchg byte ptr [rsp + rsi - 0x6f], dh
		lea r11, [r11 + rsi - 0x74]
		pop rax
		mov eax, r8d
		xor rcx, rbp
		lea rcx, [rcx + rsi*4 - 0x1b9fe73d]
		or word ptr [rsp + rdx - 0xc3fd], dx
		bswap rcx
		ror r8, 0xc3
		neg eax
		inc byte ptr [rsp + rsi - 0x88]
		rol rcx, 7
		xor rcx, 0xffffffffaf9b582f
		inc rcx
		not qword ptr [rsp + rsi*4 - 0x212]
		xor rbp, rcx
		rol dword ptr [rsp + rsi*2 - 0x110], 0xe5
		mov qword ptr [rsi + rbx - 0xa0], rcx
		cwde
		call 0x7ffb72b6006b
47: UB addr = 7ffb72b6006b with ID: 29 yields:
		push r8
		lea rbx, [rsi + rbx - 0xa0]
		xchg qword ptr [rsp + 8], rdi
		adc rdi, 0x10edc7
		jmp rdi
48: UB addr = 7ffb72abbd49 with ID: 68 yields:
		pop r8
		pop rdx
		pop rdx
		pop rax
		pop rdi
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
49: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
50: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
51: UB addr = 7ffb7298f853 with ID: 33 yields:
		mov r8d, dword ptr [r11]
		xor edi, edi
		lea r11, [rdi + r11 + 4]
		mov esi, 0x529e369e
		movsx ecx, di
		xor r8d, ebp
		add ecx, esi
		sbb r8d, 0xd9bf8d9b
		call 0x7ffb72c0da85
52: UB addr = 7ffb72b91340 with ID: 26 yields:
		mov r8d, dword ptr [r11 + r8*2 - 0x4e0a7558]
		mov edi, 0x8834e7a7
		mov esi, edi
		movzx ecx, di
		push rsi
		lea r10, [rcx*8 - 0x67d484cc]
		lea r8d, [rcx + r8 - 0x410c0608]
		movsx edx, byte ptr [rsp + rcx - 0xd37e]
		movzx eax, di
		bswap r8d
		sbb rcx, 0x480c4e9f
		xchg dword ptr [rsp + rdx*2 - 0x65], r10d
		neg ax
		xor r8d, 0x3aabe31c
		xchg byte ptr [rsp + rcx + 0x480b7b27], al
		push rsi
		mov qword ptr [rsp + rsi - 0x80], rbp
		xor eax, 0x2fbddc91
		xor dword ptr [rsp + rsi*2 - 0x108], r8d
		mov rbp, qword ptr [rsp + rsi - 0x80]
		inc dil
		cqo
		movsxd r8, r8d
		inc byte ptr [rsp + rsi - 0x85]
		add r9, r8
		and ecx, 0x6532cb33
		mov r10, rbx
		je 0x7ffb72b7e82b
53: UB addr = 7ffb72b913e6 with ID: 27 yields:
		neg di
		mov qword ptr [rsi + rbx - 0x90], r10
		mov qword ptr [rsp + rsi - 0x80], rax
		bts rdx, rax
		mov r8, qword ptr [rsi + r11 - 0x84]
		ror word ptr [rsp + rsi*2 - 0x10f], 8
		push rdi
		call 0x7ffb729acebf
54: UB addr = 7ffb729acebf with ID: 28 yields:
		movsx r10d, word ptr [rsp + rsi - 0x7f]
		neg al
		shr ax, 1
		shl rdi, 0xd5
		lea r8, [rsi + r8 + 0x933b51f]
		or r10b, 0x91
		ror r8, 6
		cdqe
		xor rbp, r8
		cqo
		btc di, 0x1d
		shl dil, 0x22
		mov qword ptr [rsi + rbx - 0x98], r8
		rol byte ptr [rsp + rsi - 0x6d], 0x42
		lea r8, [rdi*4 + 0x76918820]
		mov rcx, qword ptr [r11 + rsi*4 - 0x214]
		rol dl, 0x61
		shr word ptr [rsp + rsi*4 - 0x206], 0x6e
		xchg byte ptr [rsp + rsi - 0x6f], dh
		lea r11, [r11 + rsi - 0x74]
		pop rax
		mov eax, r8d
		xor rcx, rbp
		lea rcx, [rcx + rsi*4 - 0x1b9fe73d]
		or word ptr [rsp + rdx - 0xc3fd], dx
		bswap rcx
		ror r8, 0xc3
		neg eax
		inc byte ptr [rsp + rsi - 0x88]
		rol rcx, 7
		xor rcx, 0xffffffffaf9b582f
		inc rcx
		not qword ptr [rsp + rsi*4 - 0x212]
		xor rbp, rcx
		rol dword ptr [rsp + rsi*2 - 0x110], 0xe5
		mov qword ptr [rsi + rbx - 0xa0], rcx
		cwde
		call 0x7ffb72b6006b
55: UB addr = 7ffb72b6006b with ID: 29 yields:
		push r8
		lea rbx, [rsi + rbx - 0xa0]
		xchg qword ptr [rsp + 8], rdi
		adc rdi, 0x10edc7
		jmp rdi
56: UB addr = 7ffb72abbd49 with ID: 68 yields:
		pop r8
		pop rdx
		pop rdx
		pop rax
		pop rdi
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
57: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
58: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
59: UB addr = 7ffb7298f853 with ID: 33 yields:
		mov r8d, dword ptr [r11]
		xor edi, edi
		lea r11, [rdi + r11 + 4]
		mov esi, 0x529e369e
		movsx ecx, di
		xor r8d, ebp
		add ecx, esi
		sbb r8d, 0xd9bf8d9b
		call 0x7ffb72c0da85
60: UB addr = 7ffb72ba64af with ID: 38 yields:
		mov rdx, qword ptr [rbx + rcx - 0x3fb092b0]
		lea r10, [rcx + 0x83fa737]
		not r8
		mov qword ptr [rsp + rcx*2 - 0x7f612570], -0x275467dd
		xor qword ptr [rsp + rcx*2 - 0x7f612570], r10
		sal byte ptr [rsp + rcx*2 - 0x7f612570], 0xe6
		not rdx
		and r8, rdx
		movsx edi, cl
		mov eax, edi
		movsx esi, dil
		mov r10, r8
		and rsi, 0xffffffffee97de0b
		jg 0x7ffb7290e32e
61: UB addr = 7ffb7290e32e with ID: 39 yields:
		jne 0x7ffb72b6fee5
62: UB addr = 7ffb72b6fee5 with ID: 470 yields:
		mov rax, qword ptr [rbx + rcx*2 - 0x7f612560]
		inc byte ptr [rsp + rcx*2 - 0x7f61256e]
		lea rcx, [rsi + rdi + 0x3f1fd820]
		shr cl, 0x83
		adc r10, rax
		push rcx
		lea r8, [rdi - 0x27ec5874]
		mov qword ptr [rbx + 0x10], r10
		pop rdi
		rol rsi, 0x2e
		cqo
		lea rbx, [rbx + rax*2 + 0x1b6c07b0]
		jae 0x7ffb72bd0b16
63: UB addr = 7ffb72a4e514 with ID: 41 yields:
		lea r11, [rdi + r11 - 0x37aafffc]
		mov qword ptr [rsp + rdi - 0x37ab0000], rdi
		pop rcx
		movzx r10d, r8w
		xor edx, ebp
		neg edx
		ror r10w, 0xa9
		lea rax, [r10*2 - 0x4ddc93fe]
		lea edx, [rdx + rdi*2 - 0x132c924e]
		and rax, rcx
		cmove di, r8w
		btc ecx, 1
		bswap edx
		push rax
		xor cl, 0x85
		ror edx, 2
		sbb r8, -0x685c3b75
		sete r8b
		lea edx, [rdx + rdi*2 + 0x75445a89]
		sar r10d, 4
		sal di, 6
		mov qword ptr [rsp + rdi - 0x37ab0000], r10
		mov qword ptr [rsp + rdi*2 - 0x6f560000], rbp
		bts edi, eax
		xor dword ptr [rsp + rdi - 0x37ab0001], edx
		pop rbp
		sub r8b, cl
		add cx, r10w
		movsxd rdx, edx
		adc r9, rdx
		lea rsi, [rdi*2 - 0x2f41f757]
		mov r10, qword ptr [rbx + rdi*2 - 0x6f560002]
		lea rdx, [r8 + rsi*4 - 0x7de0cded]
		sal rdx, 0x4c
		jns 0x7ffb72a1af1a
64: UB addr = 7ffb72a1af1a with ID: 42 yields:
		mov r8, qword ptr [rbx + rdi - 0x37aafff9]
		rol rcx, 0x48
		not r10
		call 0x7ffb728ac7a8
65: UB addr = 7ffb728ac7a8 with ID: 43 yields:
		call 0x7ffb72924658
66: UB addr = 7ffb72924658 with ID: 69 yields:
		not r8
		or r10, r8
		mov rbx, r10
		mov qword ptr [rsp + rdi*2 - 0x6f55fffa], rax
		mov qword ptr [rsp + rax*2 - 0x64400000], rcx
		pop rcx
		pop rdi
		jne 0x7ffb72c4500c
67: UB addr = 7ffb728df27b with ID: 12 yields:
		mov rdi, qword ptr [rax + rdi + 0x5519fffd]
		pop rsi
		adc rsi, 0x18852e
		jmp rsi
68: UB addr = 7ffb72b7261d with ID: 527 yields:
		mov r10d, 0x6980f73e
		movzx eax, r10b
		btc ax, 0xae
		mov rsi, qword ptr [rax + rbx - 0x403e]
		movsx ecx, al
		mov edi, ecx
		mov rcx, qword ptr [rbx + r10 - 0x6980f736]
		adc rsi, rcx
		btr di, 0xa7
		xor rax, rax
		mov qword ptr [rbx + r10 - 0x6980f736], rsi
		adc eax, dword ptr [r11 + rax*2]
		xor eax, ebp
		neg eax
		sal di, 0x84
		lea rcx, [r10 + rdi*4 - 0x4ef4cfdc]
		ror eax, 2
		btc di, 0x87
		sar r10, cl
		lea eax, [rax + rcx*8 + 0x1bdd2f38]
		push rcx
		not eax
		mov qword ptr [rsp + r10*4], rbp
		xchg r10, rdi
		xor dword ptr [rsp + r10*2 - 0x6c0], eax
		pop rbp
		push rcx
		movsxd rax, eax
		add r9, rax
		movzx edi, byte ptr [r11]
		mov edx, 0x8a286702
		lea rsi, [rdx + 0x219ed34]
		xor dil, bpl
		movzx r8d, sil
		or r8w, dx
		push rdx
		not dil
		mov r10d, r8d
		push r10
		dec dil
		rol dil, 1
		movsx eax, si
		rol r10b, 0xe5
		neg dil
		rol dx, 0x2e
		shr esi, 0x42
		movsx ecx, sil
		xor bpl, dil
		neg r8d
		shl word ptr [rsp + rsi - 0x231094ff], 1
		not cx
		lea rdi, [rsp + rdi + 0x10]
		cwde
		jbe 0x7ffb72efdfcf
69: UB addr = 7ffb72b59447 with ID: 46 yields:
		mov r8d, 0x818098a8
		ror al, 1
		movsx esi, r8w
		add al, 4
		not al
		shr r8d, 0x22
		sbb al, 0x9b
		neg al
		xor bpl, al
		shl word ptr [rsp + r8 - 0x20602626], 0xeb
		pop rdi
		adc rax, rsp
		mov rcx, qword ptr [r8 + rax - 0x2060262a]
		movzx eax, si
		mov qword ptr [rdi + rbx - 0x3695281e], rcx
		mov r10d, dword ptr [r8 + r11 - 0x20602629]
		xor rax, 0x4d9cb20a
		lea r11, [r11 + rdi*2 - 0x6d2a5027]
		bt r8, rax
		cdq
		jb 0x7ffb72e38308
70: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
71: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
72: UB addr = 7ffb72b59447 with ID: 46 yields:
		mov r8d, 0x818098a8
		ror al, 1
		movsx esi, r8w
		add al, 4
		not al
		shr r8d, 0x22
		sbb al, 0x9b
		neg al
		xor bpl, al
		shl word ptr [rsp + r8 - 0x20602626], 0xeb
		pop rdi
		adc rax, rsp
		mov rcx, qword ptr [r8 + rax - 0x2060262a]
		movzx eax, si
		mov qword ptr [rdi + rbx - 0x3695281e], rcx
		mov r10d, dword ptr [r8 + r11 - 0x20602629]
		xor rax, 0x4d9cb20a
		lea r11, [r11 + rdi*2 - 0x6d2a5027]
		bt r8, rax
		cdq
		jb 0x7ffb72e38308
73: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
74: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
75: UB addr = 7ffb72a96042 with ID: 47 yields:
		bts r10d, r8d
		xor dl, bpl
		movsx eax, sil
		inc dl
		ror dl, 1
		shl si, 0x25
		neg dl
		call 0x7ffb72c7caa0
76: UB addr = 7ffb72a56edd with ID: 14 yields:
		btc r8w, 0xb3
		xor dword ptr [rsp + r10 - 0x73b0b997], ecx
		bts r10d, eax
		call 0x7ffb728ad73b
77: UB addr = 7ffb728ad73b with ID: 15 yields:
		mov rbp, qword ptr [rsp + r8 - 0x5134888e]
		movsx esi, r8w
		movsxd rcx, ecx
		dec al
		adc r9, rcx
		mov rdx, qword ptr [r8 + rbx - 0x5134889e]
		mov qword ptr [rsp + r8 - 0x5134888e], r10
		lea rdi, [rsp + rax*8 + 0x158]
		mov qword ptr [rdi + r10 - 0x73b0b997], rdx
		mov qword ptr [rsp + r8 - 0x51348896], -0x5bd3dafc
		mov qword ptr [rsp + r10 - 0x73b0b997], r9
		ret 8
78: UB addr = 7ffb72946613 with ID: 16 yields:
		mov edi, dword ptr [rsi + r11 - 0x7a02ec14]
		xor edi, ebp
		lea rdx, [rsi*2 + 0x5d2a8181]
		dec edi
		movsx r10d, si
		ror edi, 1
		xor ecx, ecx
		inc rdx
		dec edi
		bts rsi, r10
		bswap edi
		movzx r8d, dl
		mov eax, 0xcc270637
		push rbp
		or rsi, rax
		xor dword ptr [rsp + rcx], edi
		sar dl, 0xe4
		ror si, 1
		call 0x7ffb72a2308f
79: UB addr = 7ffb72a2308f with ID: 17 yields:
		neg si
		rol si, 1
		pop r8
		sub rcx, rcx
		sbb si, 0x680
		shl qword ptr [rsp + rcx + 8], 0xc
		mov qword ptr [rsp + rcx], 0x6f8c9e25
		xchg qword ptr [rsp + rcx + 5], rcx
		xor bp, si
		lea r8, [rdx*8 - 0x57731477]
		mov r10d, 0x331896
		lea rsi, [rsp + rsi + 0x10]
		mov qword ptr [r10 + rsi - 0x331896], rax
		shr di, 0xcd
		sub cl, dl
		movzx eax, r8w
		mov edx, dword ptr [r11 + r10*4 - 0xcc6254]
		sub eax, 0x3d374215
		xor edx, ebp
		ror r10w, 0xac
		jb 0x7ffb72987d6b
80: UB addr = 7ffb72987d6b with ID: 18 yields:
		xchg qword ptr [rsp + r10*4 - 0xce257c], rax
		xor byte ptr [rsp + r10*2 - 0x6712be], r8b
		lea edx, [rdi + rdx - 0x5ac0d471]
		jbe 0x7ffb72d0df06
81: UB addr = 7ffb72987d8a with ID: 19 yields:
		ror edx, 1
		ror qword ptr [rsp + r10*8 - 0x19c4b00], 0xfa
		jb 0x7ffb72b072ba
82: UB addr = 7ffb72987d9b with ID: 20 yields:
		bswap edx
		sbb r8w, 0xbf2e
		rol edx, 3
		mov qword ptr [rsp + r10 - 0x338959], rbp
		inc r10w
		xor dword ptr [rsp + r10*2 - 0x6712bc], edx
		push r8
		pop r10
		mov rbp, qword ptr [rsp + 8]
		movsxd rdx, edx
		not rcx
		mov qword ptr [rsp + 8], -0x59fae262
		add r9, rdx
		and r8d, 0x1e9ba438
		movzx eax, word ptr [r11 + r8 - 0xc032428]
		movzx edx, di
		add word ptr [rsp + r8*8 - 0x60192175], di
		lea r11, [r11 + r8 - 0xc032426]
		movsx esi, cl
		xor ax, bp
		call 0x7ffb72de2b95
83: UB addr = 7ffb729f9491 with ID: 21 yields:
		not ax
		lea rdx, [r8 + rdi - 0x47c423fa]
		neg ax
		xor rcx, 0x453bcd94
		ror ax, 1
		not r10b
		add ax, 0x5e8f
		call 0x7ffb72de74ae
84: UB addr = 7ffb72a47342 with ID: 48 yields:
		push rdx
		inc r8w
		sub cl, 0xa4
		not r8w
		movzx r10d, byte ptr [rsp]
		sar edi, cl
		xor bp, r8w
		lea r8, [rsp + r8 + 8]
		sar r10, cl
		mov qword ptr [rdi + r8], rax
		add edi, 0x1908091f
		seta byte ptr [rsp + rdi - 0x1908091f]
		mov edx, dword ptr [r11 + rdi - 0x1908091d]
		xor edx, ebp
		xor edx, 0xe12e3f2d
		movsx eax, byte ptr [rsp + rdi - 0x1908091f]
		ror byte ptr [rsp + rdi*4 - 0x64202477], 0xe1
		cmovae rcx, rax
		rol edx, cl
		and qword ptr [rsp + rdi*2 - 0x3210123e], 0xffffffffe10855ae
		sal word ptr [rsp + rdi*2 - 0x3210123e], 0xc7
		call 0x7ffb72dc8bfb
85: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
86: UB addr = 7ffb72b69522 with ID: 50 yields:
		mov eax, 0xb602e72e
		lea rdi, [rax - 0x6173404d]
		movzx ecx, di
		movzx edi, byte ptr [r11 + rcx*4 - 0x29b84]
		push rax
		sar word ptr [rsp + rcx - 0xa6de], cl
		xor dil, bpl
		movsx esi, cl
		inc dil
		lea r8, [rsi*8 - 0x71ff74e7]
		ror dil, cl
		neg dil
		cwd
		or edx, dword ptr [rsp + rcx - 0xa6dd]
		sbb dword ptr [rsp + rcx*8 - 0x53707], ecx
		xor dil, al
		neg dx
		xor bpl, dil
		sar word ptr [rsp + rdx*2 + 3], 0x26
		pop rcx
		adc rdi, rsp
		xchg eax, edx
		mov rdx, qword ptr [rdi + rax - 1]
		push rsi
		mov qword ptr [rax + rbx - 9], rdx
		call 0x7ffb72b91b37
87: UB addr = 7ffb72b91b37 with ID: 51 yields:
		mov r10d, dword ptr [r11 + rax*4 - 0xb]
		xor r10d, ebp
		mov qword ptr [rsp + rax*2 - 6], rcx
		cwde
		push r8
		dec r10d
		ror r10d, 1
		dec r10d
		push rax
		ror qword ptr [rsp + rax + 6], 0xb0
		cqo
		bswap r10d
		setae byte ptr [rsp + rax*2 + 0x10]
		cmovb si, cx
		mov qword ptr [rsp + rax + 0x15], rbp
		btc r8w, dx
		xor dword ptr [rsp + rax + 0x15], r10d
		and ecx, 0x76179610
		mov rbp, qword ptr [rsp + rdx + 0x18]
		shl eax, cl
		movsxd r10, r10d
		adc r9, r10
		shl al, 0x44
		mov qword ptr [rsp + rax*2 - 0x5ffe8], rdx
		movzx r10d, word ptr [r11 + rax*4 - 0xbfffb]
		shr cx, 0xc
		xchg byte ptr [rsp + rax - 0x2fffb], ah
		shr dword ptr [rsp + rax*4 - 0xbfff1], 0x7c
		lea r11, [r11 + rax - 0x2fff9]
		rol word ptr [rsp + rax*4 - 0xbfffb], 0x6e
		shl byte ptr [rsp + rax*2 - 0x5fffc], 1
		xor r10w, bp
		rol dl, 0x83
		dec ax
		sbb r10w, ax
		pop rax
		xchg qword ptr [rsp + rax*2 + 5], rsi
		sar dl, 0x22
		ror r10w, 1
		neg word ptr [rsp + rsi - 0x1000052]
		not r10w
		neg r10w
		xor bp, r10w
		movzx edi, cl
		lea r10, [rsp + r10 + 0x18]
		or rdi, qword ptr [r10 + rax - 3]
		mov qword ptr [rbx + rax - 0x13], rdi
		sal dx, 0xc4
		lea rbx, [rbx + rax - 0x13]
		inc esi
		or dl, 0xb0
		pop rcx
		pop rax
		pop rcx
		jl 0x7ffb72eb83a2
88: UB addr = 7ffb72b7a8a9 with ID: 52 yields:
		mov r8d, 0x1b013f0f
		lea rdi, [r8*4 - 0x257725d8]
		mov ecx, edi
		mov edi, dword ptr [r8 + r11 - 0x1b013f0f]
		lea r10, [rcx*2 + 0x2d07b710]
		push r10
		xor edi, ebp
		lea rax, [r10*8 - 0x1ad2a974]
		bswap edi
		push rax
		dec byte ptr [rsp + r8 - 0x1b013f0e]
		inc dword ptr [rsp + r8 - 0x1b013f0e]
		dec edi
		rol edi, 1
		inc dword ptr [rsp + r8*2 - 0x36027e16]
		dec qword ptr [rsp + r8 - 0x1b013f07]
		xadd r8b, r10b
		sbb edi, 0x7f8e038e
		xchg byte ptr [rsp + r8 - 0x1b013fe4], cl
		sub eax, dword ptr [rsp + r8 - 0x1b013fe2]
		rol edi, 2
		push rcx
		mov qword ptr [rsp + r8*4 - 0x6c04ff8c], rbp
		lea rsi, [rcx*2 + 0x52b9be90]
		adc word ptr [rsp + r8 - 0x1b013fe3], r8w
		xor dword ptr [rsp + r8*2 - 0x36027fbe], edi
		rol sil, 1
		xor bpl, sil
		mov qword ptr [rsp + r8*4 + 0x28], 0x6f0b60a2
		neg rdx
		lea rsi, [rsp + rsi + 0x30]
		lea rdi, [rdx*4 - 0x22f58f7e]
		add r8, qword ptr [rsi + r8*2]
		mov qword ptr [rbx + rdx*8 + 0x68], r8
		mov cl, byte ptr [r11 + rdx*2 + 0x25]
		lea r10, [r10 + rax + 0x222ddeaf]
		xchg qword ptr [rsp + rdx + 0x2e], rdx
		lea r11, [rax + r11 - 0x5d33a921]
		cdqe
		mov r8d, 0x56b9e511
		xor cl, bpl
		rol word ptr [rsp + rdi*2 + 0x45eb1f86], 0x6d
		rol byte ptr [rsp + r8 - 0x56b9e4e3], 0xa5
		inc cl
		dec r10w
		ror cl, 1
		or r10w, 0x19ab
		movsx esi, word ptr [rsp + rdi + 0x22f58fda]
		neg cl
		sal rax, 0xa
		add rax, 0x1136f5b0
		neg al
		xor cl, 0x2e
		sar dword ptr [rsp + rdi + 0x22f58fe5], 0xc
		xchg word ptr [rsp + rdi + 0x22f58fda], si
		xor bpl, cl
		mov byte ptr [rsp + rdi + 0x22f58fd5], 0x16
		xor r8, qword ptr [rsp + rdi + 0x22f58fdb]
		lea rcx, [rsp + rcx + 0x30]
		shr rsi, 0x6f
		sub r10, qword ptr [rsp + rdi*2 + 0x45eb1f79]
		mov rdx, qword ptr [rcx + rdi*2 + 0x45eb1f74]
		setae byte ptr [rsp + rdi + 0x22f58fc0]
		mov qword ptr [rbx + rdi*2 + 0x45eb1f5c], rdx
		push rdi
		jbe 0x7ffb729ec224
89: UB addr = 7ffb729ec224 with ID: 53 yields:
		lea rbx, [rdi + rbx + 0x22f58fa2]
		sbb si, si
		pop rax
		pop rdx
		pop r8
		pop rax
		pop r8
		pop rax
		pop rdi
		jno 0x7ffb72eb83a2
90: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
91: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
92: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
93: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
94: UB addr = 7ffb72b7a8a9 with ID: 52 yields:
		mov r8d, 0x1b013f0f
		lea rdi, [r8*4 - 0x257725d8]
		mov ecx, edi
		mov edi, dword ptr [r8 + r11 - 0x1b013f0f]
		lea r10, [rcx*2 + 0x2d07b710]
		push r10
		xor edi, ebp
		lea rax, [r10*8 - 0x1ad2a974]
		bswap edi
		push rax
		dec byte ptr [rsp + r8 - 0x1b013f0e]
		inc dword ptr [rsp + r8 - 0x1b013f0e]
		dec edi
		rol edi, 1
		inc dword ptr [rsp + r8*2 - 0x36027e16]
		dec qword ptr [rsp + r8 - 0x1b013f07]
		xadd r8b, r10b
		sbb edi, 0x7f8e038e
		xchg byte ptr [rsp + r8 - 0x1b013fe4], cl
		sub eax, dword ptr [rsp + r8 - 0x1b013fe2]
		rol edi, 2
		push rcx
		mov qword ptr [rsp + r8*4 - 0x6c04ff8c], rbp
		lea rsi, [rcx*2 + 0x52b9be90]
		adc word ptr [rsp + r8 - 0x1b013fe3], r8w
		xor dword ptr [rsp + r8*2 - 0x36027fbe], edi
		rol sil, 1
		xor bpl, sil
		mov qword ptr [rsp + r8*4 + 0x28], 0x6f0b60a2
		neg rdx
		lea rsi, [rsp + rsi + 0x30]
		lea rdi, [rdx*4 - 0x22f58f7e]
		add r8, qword ptr [rsi + r8*2]
		mov qword ptr [rbx + rdx*8 + 0x68], r8
		mov cl, byte ptr [r11 + rdx*2 + 0x25]
		lea r10, [r10 + rax + 0x222ddeaf]
		xchg qword ptr [rsp + rdx + 0x2e], rdx
		lea r11, [rax + r11 - 0x5d33a921]
		cdqe
		mov r8d, 0x56b9e511
		xor cl, bpl
		rol word ptr [rsp + rdi*2 + 0x45eb1f86], 0x6d
		rol byte ptr [rsp + r8 - 0x56b9e4e3], 0xa5
		inc cl
		dec r10w
		ror cl, 1
		or r10w, 0x19ab
		movsx esi, word ptr [rsp + rdi + 0x22f58fda]
		neg cl
		sal rax, 0xa
		add rax, 0x1136f5b0
		neg al
		xor cl, 0x2e
		sar dword ptr [rsp + rdi + 0x22f58fe5], 0xc
		xchg word ptr [rsp + rdi + 0x22f58fda], si
		xor bpl, cl
		mov byte ptr [rsp + rdi + 0x22f58fd5], 0x16
		xor r8, qword ptr [rsp + rdi + 0x22f58fdb]
		lea rcx, [rsp + rcx + 0x30]
		shr rsi, 0x6f
		sub r10, qword ptr [rsp + rdi*2 + 0x45eb1f79]
		mov rdx, qword ptr [rcx + rdi*2 + 0x45eb1f74]
		setae byte ptr [rsp + rdi + 0x22f58fc0]
		mov qword ptr [rbx + rdi*2 + 0x45eb1f5c], rdx
		push rdi
		jbe 0x7ffb729ec224
95: UB addr = 7ffb729ec224 with ID: 53 yields:
		lea rbx, [rdi + rbx + 0x22f58fa2]
		sbb si, si
		pop rax
		pop rdx
		pop r8
		pop rax
		pop r8
		pop rax
		pop rdi
		jno 0x7ffb72eb83a2
96: UB addr = 7ffb72b3bbd8 with ID: 54 yields:
		mov rsi, qword ptr [rbx]
		mov r11d, 0x2b8bf70f
		movsx edx, r11b
		lea rbx, [rbx + r11 - 0x2b8bf707]
		mov r11, rsi
		sub rbp, rdx
		mov r10d, 0xda962391
		lea r8, [r10 + r10*8 + 0x4803c381]
		lea r9, [rip - 0x15]
		mov r10d, dword ptr [r11]
		movzx eax, r8b
		mov ecx, eax
		lea r11, [r11 + rax*4 - 0x264]
		xadd eax, r8d
		movzx edi, cx
		xor r10d, ebp
		push rcx
		bswap eax
		dec r10d
		shr byte ptr [rsp + r8*2 - 0x132], 6
		bswap r10d
		shl al, 0xc1
		shr rax, 0x16
		mov edx, r8d
		ror r10d, 3
		xor al, dil
		lea r10d, [r10 + r8*2 + 0x3228c97a]
		xchg qword ptr [rsp + r8*2 - 0x134], rcx
		lea rsi, [rcx + 0x7a6de21]
		xor r10d, 0xd7940b1e
		neg word ptr [rsp + r8*2 - 0x130]
		mov qword ptr [rsp + r8*2 - 0x134], rbp
		cmovg rcx, rsi
		shl r8, 0xb
		xor dword ptr [rsp + r8 - 0x4d000], r10d
		pop rbp
		push rax
		inc r8d
		movsxd r10, r10d
		add r9, r10
		mov qword ptr [rsp + r8 - 0x4d001], r9
		ret
97: UB addr = 7ffb72b47d9c with ID: 5 yields:
		movzx r8d, cx
		xor dl, bpl
		xor dword ptr [rsp + rsi*4 + 0xc], r8d
		pop r10
		not dl
		bts r10, 0x98
		lea rcx, [r10*4 - 0x6c5b2e6c]
		rol r8w, 0x2c
		inc dl
		mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]
		ror dl, 1
		xor word ptr [rsp + r10 - 0x4f1da1c1], r8w
		neg qword ptr [rsp + rsi]
		adc dl, sil
		sar r10d, 0x6b
		xadd qword ptr [rsp + r10 - 0x9e3b4], rdi
		neg dl
		inc r8d
		sub dl, 0xc
		neg rsi
		setl byte ptr [rsp + r10*4 - 0x278ecb]
		rol dl, 1
		xor bpl, dl
		lea rdx, [rsp + rdx + 8]
		mov qword ptr [rdx + r10*8 - 0x4f1da0], rax
		mov edi, dword ptr [r11 + r10 - 0x9e3b2]
		neg qword ptr [rsp + r10*2 - 0x13c768]
		xor edi, ebp
		xor edi, 0xe12e3f2d
		btc r8d, ecx
		rol edi, 1
		sub r8w, 0x64a7
		sal rcx, 0x87
		xor edi, 0x689d25ab
		neg edi
		sal r8w, 0xec
		mov qword ptr [rsp + r10 - 0x9e3b4], rbp
		movsx eax, cl
		btr esi, 0xa1
		xor dword ptr [rsp + r10 - 0x9e3b4], edi
		pop rbp
		xor r10, rax
		movsxd rdi, edi
		adc r9, rdi
		mov rdx, qword ptr [rbx + rsi*2 + 0x10]
		lea rbx, [r10 + rbx - 0x9e39c]
		dec si
		movzx edi, byte ptr [rsi + r11 - 0xfff9]
		lea r11, [r11 + r10 - 0x9e3ad]
		jno 0x7ffb72b7d536
98: UB addr = 7ffb72b7d536 with ID: 6 yields:
		ror si, 0xf
		rol si, 0xc7
		xor dil, bpl
		lea rcx, [rax*8 + 0x3d3d7905]
		ror dil, 1
		sub rsi, -0x577b11cf
		xor dil, 0xa1
		xor r8d, r8d
		rol r10w, cl
		adc dil, 0x94
		sub cx, cx
		xor dil, 0x9c
		not r8d
		btr si, cx
		xor bpl, dil
		sar r10w, 0xc6
		add rdi, rsp
		xchg ax, r8w
		mov qword ptr [r10 + rdi - 0x9fed3], rdx
		dec si
		add ax, r10w
		sub sil, al
		jmp r9
99: UB addr = 7ffb72b47d9c with ID: 5 yields:
		movzx r8d, cx
		xor dl, bpl
		xor dword ptr [rsp + rsi*4 + 0xc], r8d
		pop r10
		not dl
		bts r10, 0x98
		lea rcx, [r10*4 - 0x6c5b2e6c]
		rol r8w, 0x2c
		inc dl
		mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]
		ror dl, 1
		xor word ptr [rsp + r10 - 0x4f1da1c1], r8w
		neg qword ptr [rsp + rsi]
		adc dl, sil
		sar r10d, 0x6b
		xadd qword ptr [rsp + r10 - 0x9e3b4], rdi
		neg dl
		inc r8d
		sub dl, 0xc
		neg rsi
		setl byte ptr [rsp + r10*4 - 0x278ecb]
		rol dl, 1
		xor bpl, dl
		lea rdx, [rsp + rdx + 8]
		mov qword ptr [rdx + r10*8 - 0x4f1da0], rax
		mov edi, dword ptr [r11 + r10 - 0x9e3b2]
		neg qword ptr [rsp + r10*2 - 0x13c768]
		xor edi, ebp
		xor edi, 0xe12e3f2d
		btc r8d, ecx
		rol edi, 1
		sub r8w, 0x64a7
		sal rcx, 0x87
		xor edi, 0x689d25ab
		neg edi
		sal r8w, 0xec
		mov qword ptr [rsp + r10 - 0x9e3b4], rbp
		movsx eax, cl
		btr esi, 0xa1
		xor dword ptr [rsp + r10 - 0x9e3b4], edi
		pop rbp
		xor r10, rax
		movsxd rdi, edi
		adc r9, rdi
		mov rdx, qword ptr [rbx + rsi*2 + 0x10]
		lea rbx, [r10 + rbx - 0x9e39c]
		dec si
		movzx edi, byte ptr [rsi + r11 - 0xfff9]
		lea r11, [r11 + r10 - 0x9e3ad]
		jno 0x7ffb72b7d536
100: UB addr = 7ffb72b7d536 with ID: 6 yields:
		ror si, 0xf
		rol si, 0xc7
		xor dil, bpl
		lea rcx, [rax*8 + 0x3d3d7905]
		ror dil, 1
		sub rsi, -0x577b11cf
		xor dil, 0xa1
		xor r8d, r8d
		rol r10w, cl
		adc dil, 0x94
		sub cx, cx
		xor dil, 0x9c
		not r8d
		btr si, cx
		xor bpl, dil
		sar r10w, 0xc6
		add rdi, rsp
		xchg ax, r8w
		mov qword ptr [r10 + rdi - 0x9fed3], rdx
		dec si
		add ax, r10w
		sub sil, al
		jmp r9
101: UB addr = 7ffb72a47342 with ID: 48 yields:
		push rdx
		inc r8w
		sub cl, 0xa4
		not r8w
		movzx r10d, byte ptr [rsp]
		sar edi, cl
		xor bp, r8w
		lea r8, [rsp + r8 + 8]
		sar r10, cl
		mov qword ptr [rdi + r8], rax
		add edi, 0x1908091f
		seta byte ptr [rsp + rdi - 0x1908091f]
		mov edx, dword ptr [r11 + rdi - 0x1908091d]
		xor edx, ebp
		xor edx, 0xe12e3f2d
		movsx eax, byte ptr [rsp + rdi - 0x1908091f]
		ror byte ptr [rsp + rdi*4 - 0x64202477], 0xe1
		cmovae rcx, rax
		rol edx, cl
		and qword ptr [rsp + rdi*2 - 0x3210123e], 0xffffffffe10855ae
		sal word ptr [rsp + rdi*2 - 0x3210123e], 0xc7
		call 0x7ffb72dc8bfb
102: UB addr = 7ffb72b47d9c with ID: 5 yields:
		movzx r8d, cx
		xor dl, bpl
		xor dword ptr [rsp + rsi*4 + 0xc], r8d
		pop r10
		not dl
		bts r10, 0x98
		lea rcx, [r10*4 - 0x6c5b2e6c]
		rol r8w, 0x2c
		inc dl
		mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]
		ror dl, 1
		xor word ptr [rsp + r10 - 0x4f1da1c1], r8w
		neg qword ptr [rsp + rsi]
		adc dl, sil
		sar r10d, 0x6b
		xadd qword ptr [rsp + r10 - 0x9e3b4], rdi
		neg dl
		inc r8d
		sub dl, 0xc
		neg rsi
		setl byte ptr [rsp + r10*4 - 0x278ecb]
		rol dl, 1
		xor bpl, dl
		lea rdx, [rsp + rdx + 8]
		mov qword ptr [rdx + r10*8 - 0x4f1da0], rax
		mov edi, dword ptr [r11 + r10 - 0x9e3b2]
		neg qword ptr [rsp + r10*2 - 0x13c768]
		xor edi, ebp
		xor edi, 0xe12e3f2d
		btc r8d, ecx
		rol edi, 1
		sub r8w, 0x64a7
		sal rcx, 0x87
		xor edi, 0x689d25ab
		neg edi
		sal r8w, 0xec
		mov qword ptr [rsp + r10 - 0x9e3b4], rbp
		movsx eax, cl
		btr esi, 0xa1
		xor dword ptr [rsp + r10 - 0x9e3b4], edi
		pop rbp
		xor r10, rax
		movsxd rdi, edi
		adc r9, rdi
		mov rdx, qword ptr [rbx + rsi*2 + 0x10]
		lea rbx, [r10 + rbx - 0x9e39c]
		dec si
		movzx edi, byte ptr [rsi + r11 - 0xfff9]
		lea r11, [r11 + r10 - 0x9e3ad]
		jno 0x7ffb72b7d536
103: UB addr = 7ffb72b7d536 with ID: 6 yields:
		ror si, 0xf
		rol si, 0xc7
		xor dil, bpl
		lea rcx, [rax*8 + 0x3d3d7905]
		ror dil, 1
		sub rsi, -0x577b11cf
		xor dil, 0xa1
		xor r8d, r8d
		rol r10w, cl
		adc dil, 0x94
		sub cx, cx
		xor dil, 0x9c
		not r8d
		btr si, cx
		xor bpl, dil
		sar r10w, 0xc6
		add rdi, rsp
		xchg ax, r8w
		mov qword ptr [r10 + rdi - 0x9fed3], rdx
		dec si
		add ax, r10w
		sub sil, al
		jmp r9
104: UB addr = 7ffb72a6dc74 with ID: 9 yields:
		mov qword ptr [rsp + rax*4 + 0x860000c], rbp
		shl r10, 0xf5
		sbb rsi, rdx
		xor dword ptr [rsp + rax*2 + 0x430000a], ecx
		add word ptr [rsp + rax*2 + 0x4300004], ax
		sal edx, 0xca
		btr edi, eax
		mov rbp, qword ptr [rsp + rdx*8 + 8]
		dec di
		mov qword ptr [rsp + rdx], rdx
		movsxd rcx, ecx
		mov r8d, 0x869b6ea2
		sbb r10, rdi
		add word ptr [rsp + rdx], di
		adc r9, rcx
		sal sil, 0x46
		mov rdi, qword ptr [rbx + rdx + 0x10]
		mov qword ptr [rsp + rdx*2 + 8], -0x6dd6a777
		jb 0x7ffb72dadbd6
105: UB addr = 7ffb72a6dcd2 with ID: 10 yields:
		lea rbx, [rdx + rbx + 0x18]
		neg qword ptr [rsp + rdx*8 + 8]
		setb r8b
		movzx esi, word ptr [r11 + rax + 0x2180007]
		lea r11, [r11 + rdx + 8]
		push rdx
		xor si, bp
		call 0x7ffb72c3e2f2
106: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
107: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
108: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
109: UB addr = 7ffb72a8f198 with ID: 58 yields:
		jns 0x7ffb72c8632a
110: UB addr = 7ffb72b7d42e with ID: 59 yields:
		mov rdi, qword ptr [rbx + rdx - 0xa5]
		mov ecx, 0x26214c3c
		xor edx, esi
		adc r10, rdi
		xadd dx, r8w
		mov qword ptr [rbx + rsi - 0x1cc1], r10
		lea rbx, [rbx + rdx - 0x22fe]
		jmp r9
111: UB addr = 7ffb729401e6 with ID: 60 yields:
		add cx, 0xddb4
		not cx
		cqo
		rol dl, 0xe4
		movzx esi, r10w
		ror cx, 1
		ror rax, 0x23
		shl r10d, 0xa1
		shl rsi, 0x51
		xor cx, 0xe5b6
		cwde
		xor bp, cx
		xchg r8d, edi
		cdqe
		dec r10b
		add rcx, rsp
		btr edx, edi
		adc rsi, rdi
		call 0x7ffb72e1c459
112: UB addr = 7ffb729f4df0 with ID: 61 yields:
		sal dx, 0xaa
		shl qword ptr [rsp + rdx*8 + 0x10], 0x90
		lea r8d, [r8 + rdx*2 - 0x7f8e038e]
		rol r8d, 2
		movsx edi, sil
		mov qword ptr [rsp + rdx], -0x714f95ee
		lea rcx, [rdi*8 + 0x4e0035a4]
		mov qword ptr [rsp + rdx + 0x10], rbp
		sub word ptr [rsp + rdx + 0xa], 0x5b8
		or si, 0x87ae
		xor dword ptr [rsp + rdx*2 + 0x10], r8d
		mov rbp, qword ptr [rsp + rdx + 0x10]
		ror rcx, 9
		movsxd r8, r8d
		ror dword ptr [rsp + rdx*2 + 0xa], 0x1f
		mov qword ptr [rsp + rdx + 0x10], 0x4fa44abb
		neg rsi
		add r9, r8
		sar dword ptr [rsp + rdx*2 + 6], cl
		mov qword ptr [rsp + rdx*2], r9
		ret 0x10
113: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
114: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
115: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
116: UB addr = 7ffb72a8f198 with ID: 58 yields:
		jns 0x7ffb72c8632a
117: UB addr = 7ffb72b7d42e with ID: 59 yields:
		mov rdi, qword ptr [rbx + rdx - 0xa5]
		mov ecx, 0x26214c3c
		xor edx, esi
		adc r10, rdi
		xadd dx, r8w
		mov qword ptr [rbx + rsi - 0x1cc1], r10
		lea rbx, [rbx + rdx - 0x22fe]
		jmp r9
118: UB addr = 7ffb72b8da15 with ID: 22 yields:
		push 0x643f3989
		mov ecx, 0xe3a653b
		mov edx, dword ptr [rcx + r11 - 0xe3a653b]
		xor edx, ebp
		mov edi, ecx
		movsx r8d, word ptr [rsp + rcx - 0xe3a6538]
		not edx
		rol ecx, 0xb
		lea edx, [rdx + rdi + 0x7065c654]
		ror edx, 1
		not byte ptr [rsp + rdi*2 - 0x1c74ca71]
		bswap edx
		sub edi, 0x1931938f
		xor r8b, 0xa6
		rol edx, 3
		mov qword ptr [rsp + r8*2 - 0x184], rbp
		not r10w
		movzx esi, cx
		xor bp, r10w
		sub rcx, rsi
		lea r10, [rsp + r10 + 8]
		mov qword ptr [rsp + r8 - 0x80c2], rcx
		btc dx, 0x19
		cwde
		mov qword ptr [rcx + r10 - 0x67a40000], rdi
		jb 0x7ffb72c16290
119: UB addr = 7ffb7295ce41 with ID: 23 yields:
		movzx esi, byte ptr [r8 + r11 - 0x80bc]
		call 0x7ffb72c0b213
120: UB addr = 7ffb728f7da3 with ID: 24 yields:
		xor dl, ah
		xor sil, 0x2e
		xor bpl, sil
		lea rsi, [rsp + rsi + 0x18]
		inc cl
		shl cx, 3
		mov rax, qword ptr [rcx + rsi - 0x67a40008]
		push r10
		lea rsi, [rcx - 0x277439d4]
		mov qword ptr [rbx + r8*8 - 0x40610], rax
		adc si, word ptr [rsp + rcx - 0x67a3ffef]
		call 0x7ffb72932bc2
121: UB addr = 7ffb72932bc2 with ID: 25 yields:
		push r8
		mov qword ptr [rsp + r8*2 - 0x10184], r9
		ret 0x28
122: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
123: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
124: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
125: UB addr = 7ffb72a8f198 with ID: 58 yields:
		jns 0x7ffb72c8632a
126: UB addr = 7ffb72b7d42e with ID: 59 yields:
		mov rdi, qword ptr [rbx + rdx - 0xa5]
		mov ecx, 0x26214c3c
		xor edx, esi
		adc r10, rdi
		xadd dx, r8w
		mov qword ptr [rbx + rsi - 0x1cc1], r10
		lea rbx, [rbx + rdx - 0x22fe]
		jmp r9
127: UB addr = 7ffb72b8da15 with ID: 22 yields:
		push 0x643f3989
		mov ecx, 0xe3a653b
		mov edx, dword ptr [rcx + r11 - 0xe3a653b]
		xor edx, ebp
		mov edi, ecx
		movsx r8d, word ptr [rsp + rcx - 0xe3a6538]
		not edx
		rol ecx, 0xb
		lea edx, [rdx + rdi + 0x7065c654]
		ror edx, 1
		not byte ptr [rsp + rdi*2 - 0x1c74ca71]
		bswap edx
		sub edi, 0x1931938f
		xor r8b, 0xa6
		rol edx, 3
		mov qword ptr [rsp + r8*2 - 0x184], rbp
		not r10w
		movzx esi, cx
		xor bp, r10w
		sub rcx, rsi
		lea r10, [rsp + r10 + 8]
		mov qword ptr [rsp + r8 - 0x80c2], rcx
		btc dx, 0x19
		cwde
		mov qword ptr [rcx + r10 - 0x67a40000], rdi
		jb 0x7ffb72c16290
128: UB addr = 7ffb7295ce41 with ID: 23 yields:
		movzx esi, byte ptr [r8 + r11 - 0x80bc]
		call 0x7ffb72c0b213
129: UB addr = 7ffb728f7da3 with ID: 24 yields:
		xor dl, ah
		xor sil, 0x2e
		xor bpl, sil
		lea rsi, [rsp + rsi + 0x18]
		inc cl
		shl cx, 3
		mov rax, qword ptr [rcx + rsi - 0x67a40008]
		push r10
		lea rsi, [rcx - 0x277439d4]
		mov qword ptr [rbx + r8*8 - 0x40610], rax
		adc si, word ptr [rsp + rcx - 0x67a3ffef]
		call 0x7ffb72932bc2
130: UB addr = 7ffb72932bc2 with ID: 25 yields:
		push r8
		mov qword ptr [rsp + r8*2 - 0x10184], r9
		ret 0x28
131: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
132: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
133: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
134: UB addr = 7ffb72a8f198 with ID: 58 yields:
		jns 0x7ffb72c8632a
135: UB addr = 7ffb72b7d42e with ID: 59 yields:
		mov rdi, qword ptr [rbx + rdx - 0xa5]
		mov ecx, 0x26214c3c
		xor edx, esi
		adc r10, rdi
		xadd dx, r8w
		mov qword ptr [rbx + rsi - 0x1cc1], r10
		lea rbx, [rbx + rdx - 0x22fe]
		jmp r9
136: UB addr = 7ffb72b8da15 with ID: 22 yields:
		push 0x643f3989
		mov ecx, 0xe3a653b
		mov edx, dword ptr [rcx + r11 - 0xe3a653b]
		xor edx, ebp
		mov edi, ecx
		movsx r8d, word ptr [rsp + rcx - 0xe3a6538]
		not edx
		rol ecx, 0xb
		lea edx, [rdx + rdi + 0x7065c654]
		ror edx, 1
		not byte ptr [rsp + rdi*2 - 0x1c74ca71]
		bswap edx
		sub edi, 0x1931938f
		xor r8b, 0xa6
		rol edx, 3
		mov qword ptr [rsp + r8*2 - 0x184], rbp
		not r10w
		movzx esi, cx
		xor bp, r10w
		sub rcx, rsi
		lea r10, [rsp + r10 + 8]
		mov qword ptr [rsp + r8 - 0x80c2], rcx
		btc dx, 0x19
		cwde
		mov qword ptr [rcx + r10 - 0x67a40000], rdi
		jb 0x7ffb72c16290
137: UB addr = 7ffb7295ce41 with ID: 23 yields:
		movzx esi, byte ptr [r8 + r11 - 0x80bc]
		call 0x7ffb72c0b213
138: UB addr = 7ffb728f7da3 with ID: 24 yields:
		xor dl, ah
		xor sil, 0x2e
		xor bpl, sil
		lea rsi, [rsp + rsi + 0x18]
		inc cl
		shl cx, 3
		mov rax, qword ptr [rcx + rsi - 0x67a40008]
		push r10
		lea rsi, [rcx - 0x277439d4]
		mov qword ptr [rbx + r8*8 - 0x40610], rax
		adc si, word ptr [rsp + rcx - 0x67a3ffef]
		call 0x7ffb72932bc2
139: UB addr = 7ffb72932bc2 with ID: 25 yields:
		push r8
		mov qword ptr [rsp + r8*2 - 0x10184], r9
		ret 0x28
140: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
141: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
142: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
143: UB addr = 7ffb72a8f198 with ID: 58 yields:
		jns 0x7ffb72c8632a
144: UB addr = 7ffb72b7d42e with ID: 59 yields:
		mov rdi, qword ptr [rbx + rdx - 0xa5]
		mov ecx, 0x26214c3c
		xor edx, esi
		adc r10, rdi
		xadd dx, r8w
		mov qword ptr [rbx + rsi - 0x1cc1], r10
		lea rbx, [rbx + rdx - 0x22fe]
		jmp r9
145: UB addr = 7ffb729401e6 with ID: 60 yields:
		add cx, 0xddb4
		not cx
		cqo
		rol dl, 0xe4
		movzx esi, r10w
		ror cx, 1
		ror rax, 0x23
		shl r10d, 0xa1
		shl rsi, 0x51
		xor cx, 0xe5b6
		cwde
		xor bp, cx
		xchg r8d, edi
		cdqe
		dec r10b
		add rcx, rsp
		btr edx, edi
		adc rsi, rdi
		call 0x7ffb72e1c459
146: UB addr = 7ffb729f4df0 with ID: 61 yields:
		sal dx, 0xaa
		shl qword ptr [rsp + rdx*8 + 0x10], 0x90
		lea r8d, [r8 + rdx*2 - 0x7f8e038e]
		rol r8d, 2
		movsx edi, sil
		mov qword ptr [rsp + rdx], -0x714f95ee
		lea rcx, [rdi*8 + 0x4e0035a4]
		mov qword ptr [rsp + rdx + 0x10], rbp
		sub word ptr [rsp + rdx + 0xa], 0x5b8
		or si, 0x87ae
		xor dword ptr [rsp + rdx*2 + 0x10], r8d
		mov rbp, qword ptr [rsp + rdx + 0x10]
		ror rcx, 9
		movsxd r8, r8d
		ror dword ptr [rsp + rdx*2 + 0xa], 0x1f
		mov qword ptr [rsp + rdx + 0x10], 0x4fa44abb
		neg rsi
		add r9, r8
		sar dword ptr [rsp + rdx*2 + 6], cl
		mov qword ptr [rsp + rdx*2], r9
		ret 0x10
147: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
148: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
149: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
150: UB addr = 7ffb72a8f198 with ID: 58 yields:
		jns 0x7ffb72c8632a
151: UB addr = 7ffb72b7d42e with ID: 59 yields:
		mov rdi, qword ptr [rbx + rdx - 0xa5]
		mov ecx, 0x26214c3c
		xor edx, esi
		adc r10, rdi
		xadd dx, r8w
		mov qword ptr [rbx + rsi - 0x1cc1], r10
		lea rbx, [rbx + rdx - 0x22fe]
		jmp r9
152: UB addr = 7ffb72b8da15 with ID: 22 yields:
		push 0x643f3989
		mov ecx, 0xe3a653b
		mov edx, dword ptr [rcx + r11 - 0xe3a653b]
		xor edx, ebp
		mov edi, ecx
		movsx r8d, word ptr [rsp + rcx - 0xe3a6538]
		not edx
		rol ecx, 0xb
		lea edx, [rdx + rdi + 0x7065c654]
		ror edx, 1
		not byte ptr [rsp + rdi*2 - 0x1c74ca71]
		bswap edx
		sub edi, 0x1931938f
		xor r8b, 0xa6
		rol edx, 3
		mov qword ptr [rsp + r8*2 - 0x184], rbp
		not r10w
		movzx esi, cx
		xor bp, r10w
		sub rcx, rsi
		lea r10, [rsp + r10 + 8]
		mov qword ptr [rsp + r8 - 0x80c2], rcx
		btc dx, 0x19
		cwde
		mov qword ptr [rcx + r10 - 0x67a40000], rdi
		jb 0x7ffb72c16290
153: UB addr = 7ffb7295ce41 with ID: 23 yields:
		movzx esi, byte ptr [r8 + r11 - 0x80bc]
		call 0x7ffb72c0b213
154: UB addr = 7ffb728f7da3 with ID: 24 yields:
		xor dl, ah
		xor sil, 0x2e
		xor bpl, sil
		lea rsi, [rsp + rsi + 0x18]
		inc cl
		shl cx, 3
		mov rax, qword ptr [rcx + rsi - 0x67a40008]
		push r10
		lea rsi, [rcx - 0x277439d4]
		mov qword ptr [rbx + r8*8 - 0x40610], rax
		adc si, word ptr [rsp + rcx - 0x67a3ffef]
		call 0x7ffb72932bc2
155: UB addr = 7ffb72932bc2 with ID: 25 yields:
		push r8
		mov qword ptr [rsp + r8*2 - 0x10184], r9
		ret 0x28
156: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
157: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
158: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
159: UB addr = 7ffb72a8f198 with ID: 58 yields:
		jns 0x7ffb72c8632a
160: UB addr = 7ffb72b7d42e with ID: 59 yields:
		mov rdi, qword ptr [rbx + rdx - 0xa5]
		mov ecx, 0x26214c3c
		xor edx, esi
		adc r10, rdi
		xadd dx, r8w
		mov qword ptr [rbx + rsi - 0x1cc1], r10
		lea rbx, [rbx + rdx - 0x22fe]
		jmp r9
161: UB addr = 7ffb72b8da15 with ID: 22 yields:
		push 0x643f3989
		mov ecx, 0xe3a653b
		mov edx, dword ptr [rcx + r11 - 0xe3a653b]
		xor edx, ebp
		mov edi, ecx
		movsx r8d, word ptr [rsp + rcx - 0xe3a6538]
		not edx
		rol ecx, 0xb
		lea edx, [rdx + rdi + 0x7065c654]
		ror edx, 1
		not byte ptr [rsp + rdi*2 - 0x1c74ca71]
		bswap edx
		sub edi, 0x1931938f
		xor r8b, 0xa6
		rol edx, 3
		mov qword ptr [rsp + r8*2 - 0x184], rbp
		not r10w
		movzx esi, cx
		xor bp, r10w
		sub rcx, rsi
		lea r10, [rsp + r10 + 8]
		mov qword ptr [rsp + r8 - 0x80c2], rcx
		btc dx, 0x19
		cwde
		mov qword ptr [rcx + r10 - 0x67a40000], rdi
		jb 0x7ffb72c16290
162: UB addr = 7ffb7295ce41 with ID: 23 yields:
		movzx esi, byte ptr [r8 + r11 - 0x80bc]
		call 0x7ffb72c0b213
163: UB addr = 7ffb728f7da3 with ID: 24 yields:
		xor dl, ah
		xor sil, 0x2e
		xor bpl, sil
		lea rsi, [rsp + rsi + 0x18]
		inc cl
		shl cx, 3
		mov rax, qword ptr [rcx + rsi - 0x67a40008]
		push r10
		lea rsi, [rcx - 0x277439d4]
		mov qword ptr [rbx + r8*8 - 0x40610], rax
		adc si, word ptr [rsp + rcx - 0x67a3ffef]
		call 0x7ffb72932bc2
164: UB addr = 7ffb72932bc2 with ID: 25 yields:
		push r8
		mov qword ptr [rsp + r8*2 - 0x10184], r9
		ret 0x28
165: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
166: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
167: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
168: UB addr = 7ffb72a8f198 with ID: 58 yields:
		jns 0x7ffb72c8632a
169: UB addr = 7ffb72b7d42e with ID: 59 yields:
		mov rdi, qword ptr [rbx + rdx - 0xa5]
		mov ecx, 0x26214c3c
		xor edx, esi
		adc r10, rdi
		xadd dx, r8w
		mov qword ptr [rbx + rsi - 0x1cc1], r10
		lea rbx, [rbx + rdx - 0x22fe]
		jmp r9
170: UB addr = 7ffb72b8da15 with ID: 22 yields:
		push 0x643f3989
		mov ecx, 0xe3a653b
		mov edx, dword ptr [rcx + r11 - 0xe3a653b]
		xor edx, ebp
		mov edi, ecx
		movsx r8d, word ptr [rsp + rcx - 0xe3a6538]
		not edx
		rol ecx, 0xb
		lea edx, [rdx + rdi + 0x7065c654]
		ror edx, 1
		not byte ptr [rsp + rdi*2 - 0x1c74ca71]
		bswap edx
		sub edi, 0x1931938f
		xor r8b, 0xa6
		rol edx, 3
		mov qword ptr [rsp + r8*2 - 0x184], rbp
		not r10w
		movzx esi, cx
		xor bp, r10w
		sub rcx, rsi
		lea r10, [rsp + r10 + 8]
		mov qword ptr [rsp + r8 - 0x80c2], rcx
		btc dx, 0x19
		cwde
		mov qword ptr [rcx + r10 - 0x67a40000], rdi
		jb 0x7ffb72c16290
171: UB addr = 7ffb7295ce41 with ID: 23 yields:
		movzx esi, byte ptr [r8 + r11 - 0x80bc]
		call 0x7ffb72c0b213
172: UB addr = 7ffb728f7da3 with ID: 24 yields:
		xor dl, ah
		xor sil, 0x2e
		xor bpl, sil
		lea rsi, [rsp + rsi + 0x18]
		inc cl
		shl cx, 3
		mov rax, qword ptr [rcx + rsi - 0x67a40008]
		push r10
		lea rsi, [rcx - 0x277439d4]
		mov qword ptr [rbx + r8*8 - 0x40610], rax
		adc si, word ptr [rsp + rcx - 0x67a3ffef]
		call 0x7ffb72932bc2
173: UB addr = 7ffb72932bc2 with ID: 25 yields:
		push r8
		mov qword ptr [rsp + r8*2 - 0x10184], r9
		ret 0x28
174: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
175: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
176: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
177: UB addr = 7ffb72a8f198 with ID: 58 yields:
		jns 0x7ffb72c8632a
178: UB addr = 7ffb72b7d42e with ID: 59 yields:
		mov rdi, qword ptr [rbx + rdx - 0xa5]
		mov ecx, 0x26214c3c
		xor edx, esi
		adc r10, rdi
		xadd dx, r8w
		mov qword ptr [rbx + rsi - 0x1cc1], r10
		lea rbx, [rbx + rdx - 0x22fe]
		jmp r9
179: UB addr = 7ffb729ad1fe with ID: 62 yields:
		mov rax, qword ptr [rbx]
		mov ecx, 0xb7bf4211
		mov edx, 0x82a603a6
		movzx r10d, word ptr [r11]
		mov edi, edx
		bts rcx, rdx
		jae 0x7ffb72c262bc
180: UB addr = 7ffb72aac738 with ID: 63 yields:
		ror r10, 2
		neg rdx
		sub byte ptr [rsp + rcx*2 - 0x4563ffe3], dil
		sar byte ptr [rsp + rcx*2 - 0x4563fff7], 0xc1
		not r10
		xor rbp, r10
		lea rax, [rdx + rdi*4 + 0x3bd1e2c]
		mov r8d, ecx
		shl dl, 0xc3
		mov qword ptr [rbx + rcx - 0x22b20000], r10
		jb 0x7ffb72cb5491
181: UB addr = 7ffb72ba875b with ID: 64 yields:
		movsxd rax, eax
		add r9, rax
		shr dl, 0xc5
		mov di, word ptr [r10 + r11 - 0x1663e]
		lea r8, [r10*8 + 0x1dac92b4]
		lea rcx, [rdx + r8*2 + 0x1ca16f26]
		lea r11, [rdx + r11 - 0x631291f2]
		mov eax, esi
		xor di, bp
		add r10w, si
		ror di, 1
		call 0x7ffb72ecba3e
182: UB addr = 7ffb72947bbd with ID: 65 yields:
		mov edi, 0xef27efaf
		mov r8, qword ptr [rbx]
		movsx eax, dil
		shr eax, 0x66
		mov rcx, qword ptr [rbx + rax - 0x3fffff6]
		jne 0x7ffb72d41b53
183: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
184: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
185: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
186: UB addr = 7ffb728ec820 with ID: 66 yields:
		mov rdx, qword ptr [rbx]
		mov eax, 0x2e3e62ae
		dec eax
		mov r10, qword ptr [rbx + rax - 0x2e3e62a5]
		add rdx, r10
		push rax
		movsx edi, word ptr [rsp + rax - 0x2e3e62ab]
		add word ptr [rsp + rax*2 - 0x5c7cc556], di
		mov rsi, rdx
		jg 0x7ffb72d73526
187: UB addr = 7ffb729be318 with ID: 67 yields:
		movsxd r8, r8d
		mov qword ptr [rsp + rax*2 - 0x5c7cc55a], rdi
		add eax, 0x3a96efa2
		pop rsi
		adc r9, r8
		btr esi, 0x1b
		movzx r8d, ax
		shr r10w, cl
		adc rdx, r9
		jmp rdx
188: UB addr = 7ffb72b91340 with ID: 26 yields:
		mov r8d, dword ptr [r11 + r8*2 - 0x4e0a7558]
		mov edi, 0x8834e7a7
		mov esi, edi
		movzx ecx, di
		push rsi
		lea r10, [rcx*8 - 0x67d484cc]
		lea r8d, [rcx + r8 - 0x410c0608]
		movsx edx, byte ptr [rsp + rcx - 0xd37e]
		movzx eax, di
		bswap r8d
		sbb rcx, 0x480c4e9f
		xchg dword ptr [rsp + rdx*2 - 0x65], r10d
		neg ax
		xor r8d, 0x3aabe31c
		xchg byte ptr [rsp + rcx + 0x480b7b27], al
		push rsi
		mov qword ptr [rsp + rsi - 0x80], rbp
		xor eax, 0x2fbddc91
		xor dword ptr [rsp + rsi*2 - 0x108], r8d
		mov rbp, qword ptr [rsp + rsi - 0x80]
		inc dil
		cqo
		movsxd r8, r8d
		inc byte ptr [rsp + rsi - 0x85]
		add r9, r8
		and ecx, 0x6532cb33
		mov r10, rbx
		je 0x7ffb72b7e82b
189: UB addr = 7ffb72b913e6 with ID: 27 yields:
		neg di
		mov qword ptr [rsi + rbx - 0x90], r10
		mov qword ptr [rsp + rsi - 0x80], rax
		bts rdx, rax
		mov r8, qword ptr [rsi + r11 - 0x84]
		ror word ptr [rsp + rsi*2 - 0x10f], 8
		push rdi
		call 0x7ffb729acebf
190: UB addr = 7ffb729acebf with ID: 28 yields:
		movsx r10d, word ptr [rsp + rsi - 0x7f]
		neg al
		shr ax, 1
		shl rdi, 0xd5
		lea r8, [rsi + r8 + 0x933b51f]
		or r10b, 0x91
		ror r8, 6
		cdqe
		xor rbp, r8
		cqo
		btc di, 0x1d
		shl dil, 0x22
		mov qword ptr [rsi + rbx - 0x98], r8
		rol byte ptr [rsp + rsi - 0x6d], 0x42
		lea r8, [rdi*4 + 0x76918820]
		mov rcx, qword ptr [r11 + rsi*4 - 0x214]
		rol dl, 0x61
		shr word ptr [rsp + rsi*4 - 0x206], 0x6e
		xchg byte ptr [rsp + rsi - 0x6f], dh
		lea r11, [r11 + rsi - 0x74]
		pop rax
		mov eax, r8d
		xor rcx, rbp
		lea rcx, [rcx + rsi*4 - 0x1b9fe73d]
		or word ptr [rsp + rdx - 0xc3fd], dx
		bswap rcx
		ror r8, 0xc3
		neg eax
		inc byte ptr [rsp + rsi - 0x88]
		rol rcx, 7
		xor rcx, 0xffffffffaf9b582f
		inc rcx
		not qword ptr [rsp + rsi*4 - 0x212]
		xor rbp, rcx
		rol dword ptr [rsp + rsi*2 - 0x110], 0xe5
		mov qword ptr [rsi + rbx - 0xa0], rcx
		cwde
		call 0x7ffb72b6006b
191: UB addr = 7ffb72b6006b with ID: 29 yields:
		push r8
		lea rbx, [rsi + rbx - 0xa0]
		xchg qword ptr [rsp + 8], rdi
		adc rdi, 0x10edc7
		jmp rdi
192: UB addr = 7ffb72abbd49 with ID: 68 yields:
		pop r8
		pop rdx
		pop rdx
		pop rax
		pop rdi
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
193: UB addr = 7ffb7298f853 with ID: 33 yields:
		mov r8d, dword ptr [r11]
		xor edi, edi
		lea r11, [rdi + r11 + 4]
		mov esi, 0x529e369e
		movsx ecx, di
		xor r8d, ebp
		add ecx, esi
		sbb r8d, 0xd9bf8d9b
		call 0x7ffb72c0da85
194: UB addr = 7ffb72ba64af with ID: 38 yields:
		mov rdx, qword ptr [rbx + rcx - 0x3fb092b0]
		lea r10, [rcx + 0x83fa737]
		not r8
		mov qword ptr [rsp + rcx*2 - 0x7f612570], -0x275467dd
		xor qword ptr [rsp + rcx*2 - 0x7f612570], r10
		sal byte ptr [rsp + rcx*2 - 0x7f612570], 0xe6
		not rdx
		and r8, rdx
		movsx edi, cl
		mov eax, edi
		movsx esi, dil
		mov r10, r8
		and rsi, 0xffffffffee97de0b
		jg 0x7ffb7290e32e
195: UB addr = 7ffb7290e32e with ID: 39 yields:
		jne 0x7ffb72b6fee5
196: UB addr = 7ffb72b6fee5 with ID: 470 yields:
		mov rax, qword ptr [rbx + rcx*2 - 0x7f612560]
		inc byte ptr [rsp + rcx*2 - 0x7f61256e]
		lea rcx, [rsi + rdi + 0x3f1fd820]
		shr cl, 0x83
		adc r10, rax
		push rcx
		lea r8, [rdi - 0x27ec5874]
		mov qword ptr [rbx + 0x10], r10
		pop rdi
		rol rsi, 0x2e
		cqo
		lea rbx, [rbx + rax*2 + 0x1b6c07b0]
		jae 0x7ffb72bd0b16
197: UB addr = 7ffb72a4e514 with ID: 41 yields:
		lea r11, [rdi + r11 - 0x37aafffc]
		mov qword ptr [rsp + rdi - 0x37ab0000], rdi
		pop rcx
		movzx r10d, r8w
		xor edx, ebp
		neg edx
		ror r10w, 0xa9
		lea rax, [r10*2 - 0x4ddc93fe]
		lea edx, [rdx + rdi*2 - 0x132c924e]
		and rax, rcx
		cmove di, r8w
		btc ecx, 1
		bswap edx
		push rax
		xor cl, 0x85
		ror edx, 2
		sbb r8, -0x685c3b75
		sete r8b
		lea edx, [rdx + rdi*2 + 0x75445a89]
		sar r10d, 4
		sal di, 6
		mov qword ptr [rsp + rdi - 0x37ab0000], r10
		mov qword ptr [rsp + rdi*2 - 0x6f560000], rbp
		bts edi, eax
		xor dword ptr [rsp + rdi - 0x37ab0001], edx
		pop rbp
		sub r8b, cl
		add cx, r10w
		movsxd rdx, edx
		adc r9, rdx
		lea rsi, [rdi*2 - 0x2f41f757]
		mov r10, qword ptr [rbx + rdi*2 - 0x6f560002]
		lea rdx, [r8 + rsi*4 - 0x7de0cded]
		sal rdx, 0x4c
		jns 0x7ffb72a1af1a
198: UB addr = 7ffb72a1af1a with ID: 42 yields:
		mov r8, qword ptr [rbx + rdi - 0x37aafff9]
		rol rcx, 0x48
		not r10
		call 0x7ffb728ac7a8
199: UB addr = 7ffb728ac7a8 with ID: 43 yields:
		call 0x7ffb72924658
200: UB addr = 7ffb72924658 with ID: 69 yields:
		not r8
		or r10, r8
		mov rbx, r10
		mov qword ptr [rsp + rdi*2 - 0x6f55fffa], rax
		mov qword ptr [rsp + rax*2 - 0x64400000], rcx
		pop rcx
		pop rdi
		jne 0x7ffb72c4500c
201: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
202: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
203: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
204: UB addr = 7ffb72aed5f0 with ID: 70 yields:
		jne 0x7ffb72c4500c
205: UB addr = 7ffb72a8f198 with ID: 58 yields:
		jns 0x7ffb72c8632a
206: UB addr = 7ffb72b7d42e with ID: 59 yields:
		mov rdi, qword ptr [rbx + rdx - 0xa5]
		mov ecx, 0x26214c3c
		xor edx, esi
		adc r10, rdi
		xadd dx, r8w
		mov qword ptr [rbx + rsi - 0x1cc1], r10
		lea rbx, [rbx + rdx - 0x22fe]
		jmp r9
207: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
208: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
209: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
210: UB addr = 7ffb72aed5f0 with ID: 70 yields:
		jne 0x7ffb72c4500c
211: UB addr = 7ffb728ec820 with ID: 66 yields:
		mov rdx, qword ptr [rbx]
		mov eax, 0x2e3e62ae
		dec eax
		mov r10, qword ptr [rbx + rax - 0x2e3e62a5]
		add rdx, r10
		push rax
		movsx edi, word ptr [rsp + rax - 0x2e3e62ab]
		add word ptr [rsp + rax*2 - 0x5c7cc556], di
		mov rsi, rdx
		jg 0x7ffb72d73526
212: UB addr = 7ffb729be318 with ID: 67 yields:
		movsxd r8, r8d
		mov qword ptr [rsp + rax*2 - 0x5c7cc55a], rdi
		add eax, 0x3a96efa2
		pop rsi
		adc r9, r8
		btr esi, 0x1b
		movzx r8d, ax
		shr r10w, cl
		adc rdx, r9
		jmp rdx
213: UB addr = 7ffb729ad1fe with ID: 62 yields:
		mov rax, qword ptr [rbx]
		mov ecx, 0xb7bf4211
		mov edx, 0x82a603a6
		movzx r10d, word ptr [r11]
		mov edi, edx
		bts rcx, rdx
		jae 0x7ffb72c262bc
214: UB addr = 7ffb72aac738 with ID: 63 yields:
		ror r10, 2
		neg rdx
		sub byte ptr [rsp + rcx*2 - 0x4563ffe3], dil
		sar byte ptr [rsp + rcx*2 - 0x4563fff7], 0xc1
		not r10
		xor rbp, r10
		lea rax, [rdx + rdi*4 + 0x3bd1e2c]
		mov r8d, ecx
		shl dl, 0xc3
		mov qword ptr [rbx + rcx - 0x22b20000], r10
		jb 0x7ffb72cb5491
215: UB addr = 7ffb72ba875b with ID: 64 yields:
		movsxd rax, eax
		add r9, rax
		shr dl, 0xc5
		mov di, word ptr [r10 + r11 - 0x1663e]
		lea r8, [r10*8 + 0x1dac92b4]
		lea rcx, [rdx + r8*2 + 0x1ca16f26]
		lea r11, [rdx + r11 - 0x631291f2]
		mov eax, esi
		xor di, bp
		add r10w, si
		ror di, 1
		call 0x7ffb72ecba3e
216: UB addr = 7ffb72a8f198 with ID: 58 yields:
		jns 0x7ffb72c8632a
217: UB addr = 7ffb72b7d42e with ID: 59 yields:
		mov rdi, qword ptr [rbx + rdx - 0xa5]
		mov ecx, 0x26214c3c
		xor edx, esi
		adc r10, rdi
		xadd dx, r8w
		mov qword ptr [rbx + rsi - 0x1cc1], r10
		lea rbx, [rbx + rdx - 0x22fe]
		jmp r9
218: UB addr = 7ffb729ad1fe with ID: 62 yields:
		mov rax, qword ptr [rbx]
		mov ecx, 0xb7bf4211
		mov edx, 0x82a603a6
		movzx r10d, word ptr [r11]
		mov edi, edx
		bts rcx, rdx
		jae 0x7ffb72c262bc
219: UB addr = 7ffb72aac738 with ID: 63 yields:
		ror r10, 2
		neg rdx
		sub byte ptr [rsp + rcx*2 - 0x4563ffe3], dil
		sar byte ptr [rsp + rcx*2 - 0x4563fff7], 0xc1
		not r10
		xor rbp, r10
		lea rax, [rdx + rdi*4 + 0x3bd1e2c]
		mov r8d, ecx
		shl dl, 0xc3
		mov qword ptr [rbx + rcx - 0x22b20000], r10
		jb 0x7ffb72cb5491
220: UB addr = 7ffb72ba875b with ID: 64 yields:
		movsxd rax, eax
		add r9, rax
		shr dl, 0xc5
		mov di, word ptr [r10 + r11 - 0x1663e]
		lea r8, [r10*8 + 0x1dac92b4]
		lea rcx, [rdx + r8*2 + 0x1ca16f26]
		lea r11, [rdx + r11 - 0x631291f2]
		mov eax, esi
		xor di, bp
		add r10w, si
		ror di, 1
		call 0x7ffb72ecba3e
221: UB addr = 7ffb72a8f198 with ID: 58 yields:
		jns 0x7ffb72c8632a
222: UB addr = 7ffb72b7d42e with ID: 59 yields:
		mov rdi, qword ptr [rbx + rdx - 0xa5]
		mov ecx, 0x26214c3c
		xor edx, esi
		adc r10, rdi
		xadd dx, r8w
		mov qword ptr [rbx + rsi - 0x1cc1], r10
		lea rbx, [rbx + rdx - 0x22fe]
		jmp r9
223: UB addr = 7ffb72b720bc with ID: 71 yields:
		rol rsi, 0x2e
		cqo
		lea rbx, [rbx + rax*2 + 0x1b6c07b0]
		jae 0x7ffb72bd0b16
224: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
225: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
226: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
227: UB addr = 7ffb72aed5f0 with ID: 70 yields:
		jne 0x7ffb72c4500c
228: UB addr = 7ffb728ec820 with ID: 66 yields:
		mov rdx, qword ptr [rbx]
		mov eax, 0x2e3e62ae
		dec eax
		mov r10, qword ptr [rbx + rax - 0x2e3e62a5]
		add rdx, r10
		push rax
		movsx edi, word ptr [rsp + rax - 0x2e3e62ab]
		add word ptr [rsp + rax*2 - 0x5c7cc556], di
		mov rsi, rdx
		jg 0x7ffb72d73526
229: UB addr = 7ffb729be318 with ID: 67 yields:
		movsxd r8, r8d
		mov qword ptr [rsp + rax*2 - 0x5c7cc55a], rdi
		add eax, 0x3a96efa2
		pop rsi
		adc r9, r8
		btr esi, 0x1b
		movzx r8d, ax
		shr r10w, cl
		adc rdx, r9
		jmp rdx
230: UB addr = 7ffb72a98d11 with ID: 72 yields:
		push 0x6cb41c0e
		sar qword ptr [rsp], 0x46
		mov rdx, qword ptr [rbx]
		jnp 0x7ffb72a9cd48
231: UB addr = 7ffb72a9cd48 with ID: 73 yields:
		mov r8d, 0x3f34e59d
		mov rsi, qword ptr [rbx + r8*2 - 0x7e69cb32]
		push r8
		or qword ptr [rsp + r8*2 - 0x7e69cb34], r8
		mov qword ptr ss:[r8 + rdx - 0x3f34e59d], rsi
		mov esi, r8d
		lea r10, [r8*8 - 0x5ec25378]
		movzx edi, byte ptr [r8 + r11 - 0x3f34e59d]
		neg esi
		pop rdx
		cmovno r10w, word ptr [rsp + r8*2 - 0x7e69cb34]
		xor dil, bpl
		lea rcx, [r10 + rdx*4 - 0x73c710e8]
		inc r10d
		add dil, r10b
		push r10
		add qword ptr [rsp + r8*2 - 0x7e69cb34], r8
		ror dil, 1
		pop rdx
		neg dil
		push r8
		xor dil, 0x2e
		xor bpl, dil
		call 0x7ffb728f4da5
232: UB addr = 7ffb728f4da5 with ID: 74 yields:
		lea rdi, [rsp + rdi + 0x18]
		mov r8, qword ptr [rdi + r8*2 - 0x7e69cb3a]
		sub dword ptr [rsp + 0xf], 0xd00fc921
		mov qword ptr [rbx + 8], r8
		sbb rbx, -9
		mov edi, dword ptr [r11 + 1]
		shr dword ptr [rsp + 0x11], 0xaa
		sbb r11, -6
		lea rax, [rdx*4 - 0x22682feb]
		sub r10b, dl
		xor edi, ebp
		inc ax
		add rax, r10
		dec edi
		movsx r8d, r10b
		cwd
		ror edi, 1
		add eax, 0xba15b715
		sbb edi, r8d
		mov qword ptr [rsp + r8*8], -0xac2875a
		sal dword ptr [rsp + r8*2 + 0xc], 0xb2
		bswap edi
		cwde
		xadd dl, ch
		mov qword ptr [rsp + r8*4 + 0x10], rbp
		jne 0x7ffb7294eb23
233: UB addr = 7ffb7294eb23 with ID: 75 yields:
		xor dword ptr [rsp + r8*2 + 0x10], edi
		xchg word ptr [rsp + r8 + 1], r8w
		mov rbp, qword ptr [rsp + r8 - 0x3d68]
		movsxd rdi, edi
		shl byte ptr [rsp + r8*2 - 0x7ae1], 0xc1
		not dword ptr [rsp + r8 - 0x3d6e]
		sbb eax, 0x18beef22
		adc r9, rdi
		not r10d
		sar ecx, 0x9d
		neg rax
		mov qword ptr [rsp + rcx*4 - 4], r9
		ret 0x10
234: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
235: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
236: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
237: UB addr = 7ffb729401e6 with ID: 60 yields:
		add cx, 0xddb4
		not cx
		cqo
		rol dl, 0xe4
		movzx esi, r10w
		ror cx, 1
		ror rax, 0x23
		shl r10d, 0xa1
		shl rsi, 0x51
		xor cx, 0xe5b6
		cwde
		xor bp, cx
		xchg r8d, edi
		cdqe
		dec r10b
		add rcx, rsp
		btr edx, edi
		adc rsi, rdi
		call 0x7ffb72e1c459
238: UB addr = 7ffb729f4df0 with ID: 61 yields:
		sal dx, 0xaa
		shl qword ptr [rsp + rdx*8 + 0x10], 0x90
		lea r8d, [r8 + rdx*2 - 0x7f8e038e]
		rol r8d, 2
		movsx edi, sil
		mov qword ptr [rsp + rdx], -0x714f95ee
		lea rcx, [rdi*8 + 0x4e0035a4]
		mov qword ptr [rsp + rdx + 0x10], rbp
		sub word ptr [rsp + rdx + 0xa], 0x5b8
		or si, 0x87ae
		xor dword ptr [rsp + rdx*2 + 0x10], r8d
		mov rbp, qword ptr [rsp + rdx + 0x10]
		ror rcx, 9
		movsxd r8, r8d
		ror dword ptr [rsp + rdx*2 + 0xa], 0x1f
		mov qword ptr [rsp + rdx + 0x10], 0x4fa44abb
		neg rsi
		add r9, r8
		sar dword ptr [rsp + rdx*2 + 6], cl
		mov qword ptr [rsp + rdx*2], r9
		ret 0x10
239: UB addr = 7ffb72b720bc with ID: 71 yields:
		rol rsi, 0x2e
		cqo
		lea rbx, [rbx + rax*2 + 0x1b6c07b0]
		jae 0x7ffb72bd0b16
240: UB addr = 7ffb729ce8d6 with ID: 76 yields:
		lea r11, [r11 + r10*2 - 0x5d25]
		xor sil, bpl
		rol dword ptr [rsp + r10*2 - 0x5d28], 0x67
		mov qword ptr [rsp + r10 - 0x2e8d], -0x5766b050
		adc sil, al
		sar qword ptr [rsp + r10*8 - 0x174a4], 0x37
		or ax, 0x829b
		rol sil, 1
		add sil, 0x89
		not byte ptr [rsp + r10 - 0x2eaf]
		push rcx
		not sil
		mov qword ptr [rsp + r10*8 - 0x175a7], rcx
		not byte ptr [rsp + r10*4 - 0xbacc]
		sal word ptr [rsp + r10*2 - 0x5d67], 0xe1
		ror sil, 1
		rol byte ptr [rsp + r10*2 - 0x5d65], 0x22
		ror word ptr [rsp + rax - 0xc28e], 0xaa
		not sil
		xor bpl, sil
		dec word ptr [rsp + r10*2 - 0x5d58]
		sar byte ptr [rsp + r10 - 0x2ea0], 0xc1
		lea rsi, [rsp + rsi + 0x18]
		mov rax, qword ptr [rsi + r10*4 - 0xbad4]
		mov r10, rax
		mov rdx, qword ptr [rbx + rcx]
		or r10, rdx
		mov edx, r8d
		and dword ptr [rsp + rcx*2 + 0x13], 0x213e8b94
		not r10
		mov qword ptr [rbx + rcx], r10
		neg byte ptr [rsp + rcx*4 + 0x11]
		sar qword ptr [rsp + r8 - 0x7db52e8e], 0xb4
		mov qword ptr [rsp + rcx], r9
		ret 0x10
241: UB addr = 7ffb7290e916 with ID: 77 yields:
		mov r8, qword ptr [rbx + rcx]
		mov r10, qword ptr [rbx + rcx*4 + 8]
		movsx edx, cl
		lea rbx, [rbx + rcx + 0x10]
		mov edi, edx
		or r8, r10
		btr rdi, rdx
		not r8
		shl cx, 0x2f
		call 0x7ffb72a4af7b
242: UB addr = 7ffb72a4af7b with ID: 78 yields:
		xor rdi, r8
		add cl, byte ptr [r11 + rcx*2]
		xor cl, bpl
		lea r10, [rdx*8 + 0x292eea03]
		push r10
		sar r10b, 0x41
		ror cl, 1
		add dl, 0xaf
		movsx r8d, dx
		neg cl
		mov qword ptr [rsp + rdx*4 - 0x2b4], r10
		bts r8w, 0x20
		adc cl, 0x90
		ror cl, 1
		xor bpl, cl
		lea rcx, [rsp + rcx + 0x10]
		or r8b, r10b
		mov qword ptr [rcx + rdx*2 - 0x15e], rdi
		neg qword ptr [rsp + rdx - 0xa7]
		movsx ecx, r10b
		rol word ptr [rsp + r10 - 0x292ee9fe], 0x85
		mov eax, dword ptr [rdx + r11 - 0xae]
		sar dl, cl
		jp 0x7ffb72d1c765
243: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
244: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
245: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
246: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
247: UB addr = 7ffb729a3952 with ID: 79 yields:
		call 0x7ffb72d50a00
248: UB addr = 7ffb729af5c4 with ID: 80 yields:
		lea esi, [rsi + r10*2 - 0x271e4027]
		xchg r8w, dx
		sar qword ptr [rsp + r8*2 + 0x60008], 4
		adc rdx, 0x26a1c227
		neg esi
		mov qword ptr [rsp + rdx*2 - 0x4d44e08e], rdx
		sal r8d, 0xed
		lea esi, [rsi + r10 + 0x6113e17]
		pop rdi
		push r10
		ror esi, 1
		mov qword ptr [rsp + rdi - 0x26a27037], rbp
		xor dword ptr [rsp + rdi - 0x26a27037], esi
		shl rdi, 0x3d
		mov rbp, qword ptr [rsp + rdi*8 + 0x10]
		mov dword ptr [rbx + rdi*8 + 4], esi
		mov rdi, qword ptr [rdx + r11 - 0x26a27043]
		lea rsi, [r8 + r8*8 - 0x54f59d4f]
		lea rcx, [rax - 0x3be90e7e]
		and al, dh
		xor rdi, rbp
		mov qword ptr [rsp + rdx - 0x26a27037], r8
		bswap rdi
		neg r10b
		call 0x7ffb72cf9af1
249: UB addr = 7ffb72b9168c with ID: 81 yields:
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
250: UB addr = 7ffb729e9388 with ID: 82 yields:
		mov r10d, 0x743bafb1
		movsx r8d, r10w
		mov rsi, qword ptr [rbx + rsi - 0x743bafb1]
		movzx eax, r10w
		mov ecx, dword ptr [rax + rsi - 0xafb1]
		cwde
		movzx esi, r8w
		mov dword ptr [rbx + rsi - 0xafad], ecx
		mov edx, r10d
		call 0x7ffb72da8477
251: UB addr = 7ffb72a800f3 with ID: 491 yields:
		mov qword ptr [rsp + rax*8 - 0x5f620], 0x7af253a
		lea rsi, [r10 + r10*2 - 0x586acbe9]
		neg r8d
		add eax, dword ptr [rsp + rax - 0xbec0]
		sbb qword ptr [rsp + rax - 0xbec4], rsi
		mov qword ptr [rsp + rax - 0xbec4], rbp
		movzx edi, ax
		xadd r10w, si
		xor dword ptr [rsp + rax - 0xbec4], r8d
		mov ecx, 0xe31fffa4
		call 0x7ffb72c6bfc3
252: UB addr = 7ffb72b9efe2 with ID: 84 yields:
		shl sil, 0x66
		setne byte ptr [rsp + rdi - 0x35]
		not eax
		or r10w, 0xce83
		mov qword ptr [rsp + rdi*2 - 0x7a], -0x37cebc5b
		inc word ptr [rsp + rdi*4 - 0xef]
		lea eax, [rax + rdi + 0x3e117151]
		bts si, 0x81
		not eax
		not qword ptr [rsp + rdi*2 - 0x72]
		lea eax, [rax + rdx - 0x1c09cd20]
		mov ecx, 0xedbb31a7
		jb 0x7ffb72ced128
253: UB addr = 7ffb72b9f029 with ID: 85 yields:
		bswap eax
		xadd word ptr [rsp + rdi*8 - 0x1e2], cx
		pop rdi
		not eax
		mov qword ptr [rsp], rbp
		sal cx, 0xe2
		inc esi
		not r8b
		xor dword ptr [rsp], eax
		xor rdi, rcx
		pop rbp
		sub r8d, 0x1b3333ba
		sub cx, r8w
		movsxd rax, eax
		adc r9, rax
		jmp r9
254: UB addr = 7ffb72ba875b with ID: 64 yields:
		movsxd rax, eax
		add r9, rax
		shr dl, 0xc5
		mov di, word ptr [r10 + r11 - 0x1663e]
		lea r8, [r10*8 + 0x1dac92b4]
		lea rcx, [rdx + r8*2 + 0x1ca16f26]
		lea r11, [rdx + r11 - 0x631291f2]
		mov eax, esi
		xor di, bp
		add r10w, si
		ror di, 1
		call 0x7ffb72ecba3e
255: UB addr = 7ffb7296b049 with ID: 86 yields:
		movzx r10d, byte ptr [r11 + r8 - 0x46afbf4b]
		xor r10b, bpl
		rol r10b, 1
		dec rdi
		xor r10b, 0xa
		bswap ecx
		movsx esi, r8b
		btr di, ax
		adc r10b, 0xa1
		sal r8b, 0x63
		xor r10b, cl
		sub r10b, dil
		not eax
		xor r10b, 0xb6
		call 0x7ffb7297216e
256: UB addr = 7ffb7297216e with ID: 87 yields:
		push rdx
		not rax
		add r10b, dil
		xor r10b, dil
		xchg qword ptr [rsp + 8], r8
		add r8, 0x42fc8e
		jmp r8
257: UB addr = 7ffb72975d39 with ID: 88 yields:
		xor bpl, r10b
		cwde
		lea r10, [rsp + r10 + 0x18]
		ror dword ptr [rsp + rsi - 0x3a], 0x2c
		movzx eax, byte ptr [r11 + rsi - 0x4a]
		xor al, bpl
		and byte ptr [rsp + rsi - 0x36], dil
		sal di, 0xcf
		sbb al, dil
		not al
		ror al, 1
		not al
		mov qword ptr [rsp + rsi*8 - 0x258], 0x448b2a03
		neg qword ptr [rsp + rsi*2 - 0x95]
		xor al, 0xad
		xor bpl, al
		mov edx, 0x1706ce2b
		movzx r10d, dl
		mov r8d, dword ptr [r11 + rdx*2 - 0x2e0d9c56]
		movzx edi, dl
		xor r8d, ebp
		movzx ecx, dil
		shl dx, 0xa5
		ror r8d, 1
		lea rsi, [rdx + rcx*8 + 0x719ec1b2]
		inc r8d
		lea rsi, [rsi*2 + 0x4e9d55b9]
		xor r8d, 0x16348688
		bts si, dx
		ror dl, 0x67
		inc r8d
		btr edx, r10d
		jae 0x7ffb728f353e
258: UB addr = 7ffb728f353e with ID: 89 yields:
		ror r8d, 3
		sal r10b, 0x26
		sbb ecx, edi
		push rbp
		and cl, 0x3d
		movzx eax, cl
		xor dword ptr [rsp + rdx - 0x1706c5c2], r8d
		lea rcx, [rcx + r10 + 0x5bb14d2a]
		cwde
		pop rbp
		not cl
		and edi, eax
		mov dword ptr [rbx + rdx*2 - 0x2e0d8b88], r8d
		sub r10, rdx
		mov rdx, qword ptr [r11 + rdx*2 - 0x2e0d8b80]
		shl di, 0x4e
		not si
		add ax, 0x1c05
		ror r10b, 0xa4
		lea rdx, [r10 + rdx + 0x456cae70]
		neg rdx
		lea r8, [r10*8 - 0x7fe7fbef]
		rol rdx, 1
		xor rbp, rdx
		or r10d, eax
		mov qword ptr [rbx + rdi*2 - 0x800c], rdx
		ja 0x7ffb72f0df4f
259: UB addr = 7ffb72a7a0dc with ID: 90 yields:
		ror dx, 1
		mov qword ptr [rsp + rdi - 0x4000], 0x6f0ac19b
		sub dx, 0xc9ba
		push r10
		or edi, 0x7da86d19
		pop rsi
		ror dx, 1
		or dword ptr [rsp + rax*2 - 0x32], 0xbf0b5da2
		adc dx, 0xee9e
		push rax
		ror eax, 0x70
		xor bp, dx
		cwde
		sar r10w, 0xe4
		lea rdx, [rsp + rdx + 0x10]
		mov rcx, qword ptr [rax + rdx]
		jns 0x7ffb72bd5c92
260: UB addr = 7ffb72a98d11 with ID: 72 yields:
		push 0x6cb41c0e
		sar qword ptr [rsp], 0x46
		mov rdx, qword ptr [rbx]
		jnp 0x7ffb72a9cd48
261: UB addr = 7ffb72a9cd48 with ID: 73 yields:
		mov r8d, 0x3f34e59d
		mov rsi, qword ptr [rbx + r8*2 - 0x7e69cb32]
		push r8
		or qword ptr [rsp + r8*2 - 0x7e69cb34], r8
		mov qword ptr ss:[r8 + rdx - 0x3f34e59d], rsi
		mov esi, r8d
		lea r10, [r8*8 - 0x5ec25378]
		movzx edi, byte ptr [r8 + r11 - 0x3f34e59d]
		neg esi
		pop rdx
		cmovno r10w, word ptr [rsp + r8*2 - 0x7e69cb34]
		xor dil, bpl
		lea rcx, [r10 + rdx*4 - 0x73c710e8]
		inc r10d
		add dil, r10b
		push r10
		add qword ptr [rsp + r8*2 - 0x7e69cb34], r8
		ror dil, 1
		pop rdx
		neg dil
		push r8
		xor dil, 0x2e
		xor bpl, dil
		call 0x7ffb728f4da5
262: UB addr = 7ffb728f4da5 with ID: 74 yields:
		lea rdi, [rsp + rdi + 0x18]
		mov r8, qword ptr [rdi + r8*2 - 0x7e69cb3a]
		sub dword ptr [rsp + 0xf], 0xd00fc921
		mov qword ptr [rbx + 8], r8
		sbb rbx, -9
		mov edi, dword ptr [r11 + 1]
		shr dword ptr [rsp + 0x11], 0xaa
		sbb r11, -6
		lea rax, [rdx*4 - 0x22682feb]
		sub r10b, dl
		xor edi, ebp
		inc ax
		add rax, r10
		dec edi
		movsx r8d, r10b
		cwd
		ror edi, 1
		add eax, 0xba15b715
		sbb edi, r8d
		mov qword ptr [rsp + r8*8], -0xac2875a
		sal dword ptr [rsp + r8*2 + 0xc], 0xb2
		bswap edi
		cwde
		xadd dl, ch
		mov qword ptr [rsp + r8*4 + 0x10], rbp
		jne 0x7ffb7294eb23
263: UB addr = 7ffb7294eb23 with ID: 75 yields:
		xor dword ptr [rsp + r8*2 + 0x10], edi
		xchg word ptr [rsp + r8 + 1], r8w
		mov rbp, qword ptr [rsp + r8 - 0x3d68]
		movsxd rdi, edi
		shl byte ptr [rsp + r8*2 - 0x7ae1], 0xc1
		not dword ptr [rsp + r8 - 0x3d6e]
		sbb eax, 0x18beef22
		adc r9, rdi
		not r10d
		sar ecx, 0x9d
		neg rax
		mov qword ptr [rsp + rcx*4 - 4], r9
		ret 0x10
264: UB addr = 7ffb72b9168c with ID: 81 yields:
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
265: UB addr = 7ffb728cf074 with ID: 91 yields:
		mov esi, 0xd6b5ba3c
		rol si, 0x4a
		mov rdi, qword ptr [rbx]
		sal esi, 0xa7
		mov r10d, 0x2b2aa382
		mov rdx, qword ptr [rdi + rsi - 0x5af97400]
		movsx eax, r10b
		sub r10d, esi
		sal r10b, 0x27
		mov qword ptr [rbx + rsi - 0x5af97400], rdx
		call 0x7ffb72caac55
266: UB addr = 7ffb72aaaffe with ID: 92 yields:
		xor r8b, bpl
		mov qword ptr [rsp + rdi*2 - 0x40000a], -0x54d64de5
		sub dword ptr [rsp + rdi*2 - 0x400003], esi
		neg r8b
		lea r10, [rdi + rax*2 + 0x4f36e825]
		not byte ptr [rsp + rdi*2 - 0x400003]
		ror byte ptr [rsp + rdi - 0x1ffffd], 0xe2
		adc r8b, 0x33
		and word ptr [rsp + rdi*4 - 0x800008], r10w
		adc r10w, word ptr [rsp + rdi - 0x1ffffe]
		neg r8b
		xor r8b, al
		xor bpl, r8b
		cdqe
		lea r8, [rsp + r8 + 0x10]
		call 0x7ffb72dde1b3
267: UB addr = 7ffb72969d61 with ID: 93 yields:
		dec r8b
		push r10
		xor bpl, r8b
		neg dword ptr [rsp + rcx - 0x6134a22a]
		pop rdi
		xadd ax, r10w
		adc r8, rsp
		mov rcx, qword ptr [r8 + rcx - 0x6134a22e]
		push r10
		cwd
		mov qword ptr [r10 + rbx - 0x1f], rcx
		call 0x7ffb72db4744
268: UB addr = 7ffb72a1d907 with ID: 94 yields:
		mov qword ptr [rbx + r10*2 - 0x40], rax
		dec byte ptr [rsp + r10*4 - 0x7c]
		mov esi, dword ptr [r11 + r10*4 - 0x7f]
		xor esi, ebp
		mov eax, 0x4c831738
		xor r10d, 0xb102621e
		dec esi
		ror esi, 1
		cdqe
		dec esi
		not cl
		bswap esi
		mov qword ptr [rsp + rax - 0x4c831738], rbp
		or ecx, eax
		xor dword ptr [rsp + rcx - 0x4c8317ff], esi
		pop rbp
		xchg rax, r10
		and r8, 0xfffffffff195a6b5
		movsxd rsi, esi
		add r9, rsi
		movsx edx, ax
		movzx edi, byte ptr [r11 + rcx - 0x4c8317fa]
		dec r8w
		lea r11, [r11 + rcx - 0x4c8317f9]
		jne 0x7ffb72bf9868
269: UB addr = 7ffb728bf4c3 with ID: 95 yields:
		mov qword ptr [rsp + rsi], 0x73ab5b2
		neg eax
		lea eax, [rax + rsi*2 - 0x3f027520]
		and di, word ptr [rsp + rsi + 5]
		lea r10, [rcx*4 + 0x7b33f5ab]
		adc cx, dx
		mov qword ptr [rsp + rsi], rbp
		jl 0x7ffb72d12ae1
270: UB addr = 7ffb72b71663 with ID: 34 yields:
		mov edx, 0xb4a57380
		mov r10, qword ptr [rbx]
		movsx edi, dx
		sal edi, 0x6f
		xor dl, dil
		movzx eax, byte ptr [r11 + rdi*2 - 0x73800000]
		not dx
		xor al, bpl
		movzx r8d, dx
		btc si, 0x39
		xor dword ptr [rsp + rax*2 - 0xf520], ecx
		inc di
		mov rbp, qword ptr [rsp + rax*4 - 0x1ea48]
		ror r8b, 0xe1
		movsxd rcx, ecx
		add r9, rcx
		mov rcx, qword ptr [rax + r11 - 0xf523]
		lea r11, [r11 + rax - 0xf51b]
		xor rcx, rbp
		shl rsi, 0x4b
		ror dil, 0x46
		not rcx
		jae 0x7ffb72f12ace
271: UB addr = 7ffb72aa2acd with ID: 35 yields:
		lea rcx, [rax + rcx - 0x42a3fed1]
		cwd
		push rdi
		xor al, r8b
		xor rbp, rcx
		shr r10d, 0x81
		mov qword ptr [rax + rbx - 0xf583], rcx
		mov qword ptr [rsp + rax - 0xf583], r9
		ret 0x18
272: UB addr = 7ffb72b9168c with ID: 81 yields:
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
273: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
274: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
275: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
276: UB addr = 7ffb72ba875b with ID: 64 yields:
		movsxd rax, eax
		add r9, rax
		shr dl, 0xc5
		mov di, word ptr [r10 + r11 - 0x1663e]
		lea r8, [r10*8 + 0x1dac92b4]
		lea rcx, [rdx + r8*2 + 0x1ca16f26]
		lea r11, [rdx + r11 - 0x631291f2]
		mov eax, esi
		xor di, bp
		add r10w, si
		ror di, 1
		call 0x7ffb72ecba3e
277: UB addr = 7ffb72a4af49 with ID: 509 yields:
		mov rax, qword ptr [rbx]
		mov r8d, 0xef2a0e08
		movzx r10d, r8w
		mov rdi, qword ptr [rbx + r10 - 0xe00]
		and r8, 0xffffffff99bbb5be
		seto r8b
		movsx edx, r8w
		adc rax, rdi
		mov rsi, rax
		mov ecx, r8d
		ror rdx, cl
		mov r10d, ecx
		lea r8d, [rsi + r8 + 0x44e49b2e]
		ror r8d, 1
		sub al, 0x28
		adc r10w, si
		or eax, eax
		not r8d
		jns 0x7ffb729361b0
278: UB addr = 7ffb72aed5f0 with ID: 70 yields:
		jne 0x7ffb72c4500c
279: UB addr = 7ffb72b7261d with ID: 527 yields:
		mov r10d, 0x6980f73e
		movzx eax, r10b
		btc ax, 0xae
		mov rsi, qword ptr [rax + rbx - 0x403e]
		movsx ecx, al
		mov edi, ecx
		mov rcx, qword ptr [rbx + r10 - 0x6980f736]
		adc rsi, rcx
		btr di, 0xa7
		xor rax, rax
		mov qword ptr [rbx + r10 - 0x6980f736], rsi
		adc eax, dword ptr [r11 + rax*2]
		xor eax, ebp
		neg eax
		sal di, 0x84
		lea rcx, [r10 + rdi*4 - 0x4ef4cfdc]
		ror eax, 2
		btc di, 0x87
		sar r10, cl
		lea eax, [rax + rcx*8 + 0x1bdd2f38]
		push rcx
		not eax
		mov qword ptr [rsp + r10*4], rbp
		xchg r10, rdi
		xor dword ptr [rsp + r10*2 - 0x6c0], eax
		pop rbp
		push rcx
		movsxd rax, eax
		add r9, rax
		movzx edi, byte ptr [r11]
		mov edx, 0x8a286702
		lea rsi, [rdx + 0x219ed34]
		xor dil, bpl
		movzx r8d, sil
		or r8w, dx
		push rdx
		not dil
		mov r10d, r8d
		push r10
		dec dil
		rol dil, 1
		movsx eax, si
		rol r10b, 0xe5
		neg dil
		rol dx, 0x2e
		shr esi, 0x42
		movsx ecx, sil
		xor bpl, dil
		neg r8d
		shl word ptr [rsp + rsi - 0x231094ff], 1
		not cx
		lea rdi, [rsp + rdi + 0x10]
		cwde
		jbe 0x7ffb72efdfcf
280: UB addr = 7ffb72b9168c with ID: 81 yields:
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
281: UB addr = 7ffb72b660a2 with ID: 98 yields:
		xor edx, ebp
		neg edx
		not qword ptr [rsp + r8*4 - 0x80f00]
		xor r8b, 0x37
		lea edx, [rdx + rdi*2 - 0x310c896c]
		bswap edx
		ror edx, 2
		bswap r8
		lea rcx, [rdi*2 + 0x729e9c18]
		lea edx, [rdx + rdi*4 - 0x35d193b3]
		sal word ptr [rsp + rdi - 0x469afb8a], 0xab
		mov qword ptr [rsp + rdi - 0x469afb8f], rbp
		xor dword ptr [rsp + rdi - 0x469afb8f], edx
		mov esi, 0x50a7d0bb
		inc dil
		xor rdi, 0xffffffffee22e83e
		pop rbp
		sal r10w, 0x83
		setnp sil
		movsxd rdx, edx
		adc r9, rdx
		lea rax, [rdi + rbx + 0x5747ec5a]
		push rcx
		mov r10, rax
		mov rdi, qword ptr ss:[r10 + rsi - 0x50a7d000]
		lea rdx, [r8*2 - 0x10c2d2d7]
		and dword ptr [rsp + rsi - 0x50a7cfff], edx
		mov qword ptr [rsi + rbx - 0x50a7d000], rdi
		mov qword ptr [rsp + rsi - 0x50a7d000], r9
		ret
282: UB addr = 7ffb729b7a13 with ID: 99 yields:
		mov r10d, 0x40b8f9a2
		mov rdi, qword ptr [rbx + r10 - 0x40b8f9a2]
		lea rdx, [r10*4 - 0x79dabbd0]
		or r10, 0xffffffffa523a11f
		movzx ecx, byte ptr [r11 + r10*4 + 0x69101904]
		not r10
		xor cl, bpl
		ror cl, 1
		ror edx, 0x33
		mov r8d, r10d
		movzx eax, r8w
		neg cl
		bswap rax
		add r10d, 0xe298ffa4
		xor cl, 0x28
		lea r8, [r8 + rdx*2 + 0x42278f03]
		or dx, 0x308b
		jge 0x7ffb72d56de2
283: UB addr = 7ffb72b76798 with ID: 100 yields:
		bswap r10d
		cdqe
		btc si, ax
		not r10d
		btr dx, 0x85
		neg r10d
		btc rdx, 0x3c
		btc rdx, rsi
		push rbp
		rol dx, 0xc7
		xor dword ptr [rsp + rax], r10d
		rol dl, 0xc7
		and rsi, 0xffffffffeb87a49f
		sal al, 0x86
		pop rbp
		movsxd r10, r10d
		bswap rsi
		jp 0x7ffb72e71c68
284: UB addr = 7ffb72b9168c with ID: 81 yields:
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
285: UB addr = 7ffb72ab309a with ID: 101 yields:
		push rbp
		or cx, di
		xor dword ptr [rsp + rdi - 0x32bdfaf1], edx
		ror cx, 0x26
		pop rbp
		movsxd rdx, edx
		lea rdi, [r10 + rdi*2 - 0xae16671]
		neg r10d
		add r9, rdx
		mov rdx, qword ptr [rbx + rcx - 0x32bdffff]
		xchg r8d, ecx
		mov cx, word ptr [rdx + r8*2 - 0x657bfffe]
		mov di, cx
		movsx esi, r10b
		sar rsi, 0x8b
		movsx ecx, r8w
		mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]
		add di, r8w
		movzx r8d, r10w
		push r10
		mov word ptr [rsi + rbx - 0x1ffff7], di
		movsx edi, r10w
		lea rbx, [rbx + rsi - 0x1ffff7]
		mov qword ptr [rsp + rsi - 0x1fffff], r9
		ret
286: UB addr = 7ffb72b618d8 with ID: 102 yields:
		mov qword ptr [rsp], 0x56abfb2c
		rol r8b, 1
		call 0x7ffb72972dfd
287: UB addr = 7ffb72972dfd with ID: 103 yields:
		mov eax, dword ptr [rsp + 0xb]
		push rax
		sub r8b, 0xa8
		not r8b
		dec r8b
		movsx esi, al
		mov qword ptr [rsp + rax - 0x4e], rsi
		dec esi
		xor bpl, r8b
		pop rax
		lea rcx, [rax + rax*2 - 0x6dd556e7]
		lea r8, [rsp + r8 + 0x10]
		mov rdi, qword ptr [rax + r8 - 0x56]
		mov qword ptr [rbx + rax - 0x5e], rdi
		pop rax
		mov r8d, dword ptr [r11 + rax - 0x55]
		lea r10, [rsi*4 + 0x1629549e]
		lea r11, [rax + r11 - 0x51]
		xor r8d, ebp
		inc byte ptr [rsp + rax*8 - 0x2ab]
		shl rcx, 0x49
		sal si, 0x6d
		dec r8d
		ror r8d, 1
		dec r8d
		cdq
		bswap r8d
		mov qword ptr [rsp + rax - 0x56], rbp
		or eax, edx
		cdqe
		xor dword ptr [rsp + rax*2 - 0xac], r8d
		pop rbp
		movsx edi, r10w
		push rdx
		not rdi
		movsxd r8, r8d
		push rax
		shl byte ptr [rsp + rax - 0x56], 0xa4
		add r9, r8
		xchg byte ptr [rsp + rax - 0x48], dl
		call 0x7ffb72d5ee77
288: UB addr = 7ffb729edf2b with ID: 104 yields:
		call 0x7ffb72964937
289: UB addr = 7ffb72964937 with ID: 105 yields:
		mov rax, qword ptr [rbx]
		mov qword ptr [rsp], -0x85cb880
		sal word ptr [rsp + rdx - 0x2213b869], 0x8f
		lea rbx, [rdx + rbx - 0x2213b866]
		lea rdi, [r8*2 - 0x1875a862]
		adc edx, dword ptr [rsp + rdx - 0x2213b86d]
		mov qword ptr [rsp + rdx - 0x2213b96d], r9
		ret 0x10
290: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
291: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
292: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
293: UB addr = 7ffb72b8a958 with ID: 106 yields:
		mov r8d, 0x7894e2a1
		lea rax, [r8 + r8*8 + 0x60018c3a]
		mov rcx, qword ptr [rbx + r8 - 0x7894e2a1]
		mov r8, qword ptr [rbx + r8 - 0x7894e299]
		movzx esi, ax
		add rcx, r8
		mov qword ptr [rbx + rsi - 0x83db], rcx
		mov esi, dword ptr [rsi + r11 - 0x83e3]
		mov ecx, dword ptr [r11]
		mov edx, 0x2c29210a
		mov edi, edx
		xor ecx, ebp
		push rdi
		neg ecx
		sar dx, 0xca
		sbb dword ptr [rsp + rdx*2 - 0x5852000e], edx
		movsx r8d, dx
		sbb ecx, 0x859d3727
		not r8w
		adc dl, 0x31
		and word ptr [rsp + r10 + 0xc], r10w
		mov qword ptr [rsp + r10], rsi
		neg qword ptr [rsp + r10*2 + 9]
		xor bpl, dl
		shl qword ptr [rsp + r10 + 5], 0xbf
		lea rdx, [rsp + rdx + 0x18]
		mov byte ptr [rsp + r10*8 + 0xc], sil
		shr r10d, cl
		jne 0x7ffb72bc1057
294: UB addr = 7ffb72b760b5 with ID: 8 yields:
		mov qword ptr [r10 + rdx], rax
		mov rdx, qword ptr [r10 + rbx + 8]
		lea rbx, [rbx + r10*4 + 0x10]
		setns sil
		or r10b, byte ptr [rsp + r10 + 0x16]
		movzx ecx, word ptr [r11 + r10 + 1]
		movzx eax, word ptr [rsp + r10 + 7]
		xor cx, bp
		shr dil, 0x87
		adc cx, 0xe297
		movsx r8d, byte ptr [rsp + rsi*2 + 0x11]
		not cx
		sub byte ptr [rsp + r10 + 0xd], 0x11
		sal r8d, 0xfc
		sbb cx, 0x4b88
		ror cx, 1
		xor bp, cx
		sal r8d, 0x7b
		call 0x7ffb72be9f6b
295: UB addr = 7ffb72b69522 with ID: 50 yields:
		mov eax, 0xb602e72e
		lea rdi, [rax - 0x6173404d]
		movzx ecx, di
		movzx edi, byte ptr [r11 + rcx*4 - 0x29b84]
		push rax
		sar word ptr [rsp + rcx - 0xa6de], cl
		xor dil, bpl
		movsx esi, cl
		inc dil
		lea r8, [rsi*8 - 0x71ff74e7]
		ror dil, cl
		neg dil
		cwd
		or edx, dword ptr [rsp + rcx - 0xa6dd]
		sbb dword ptr [rsp + rcx*8 - 0x53707], ecx
		xor dil, al
		neg dx
		xor bpl, dil
		sar word ptr [rsp + rdx*2 + 3], 0x26
		pop rcx
		adc rdi, rsp
		xchg eax, edx
		mov rdx, qword ptr [rdi + rax - 1]
		push rsi
		mov qword ptr [rax + rbx - 9], rdx
		call 0x7ffb72b91b37
296: UB addr = 7ffb72b91b37 with ID: 51 yields:
		mov r10d, dword ptr [r11 + rax*4 - 0xb]
		xor r10d, ebp
		mov qword ptr [rsp + rax*2 - 6], rcx
		cwde
		push r8
		dec r10d
		ror r10d, 1
		dec r10d
		push rax
		ror qword ptr [rsp + rax + 6], 0xb0
		cqo
		bswap r10d
		setae byte ptr [rsp + rax*2 + 0x10]
		cmovb si, cx
		mov qword ptr [rsp + rax + 0x15], rbp
		btc r8w, dx
		xor dword ptr [rsp + rax + 0x15], r10d
		and ecx, 0x76179610
		mov rbp, qword ptr [rsp + rdx + 0x18]
		shl eax, cl
		movsxd r10, r10d
		adc r9, r10
		shl al, 0x44
		mov qword ptr [rsp + rax*2 - 0x5ffe8], rdx
		movzx r10d, word ptr [r11 + rax*4 - 0xbfffb]
		shr cx, 0xc
		xchg byte ptr [rsp + rax - 0x2fffb], ah
		shr dword ptr [rsp + rax*4 - 0xbfff1], 0x7c
		lea r11, [r11 + rax - 0x2fff9]
		rol word ptr [rsp + rax*4 - 0xbfffb], 0x6e
		shl byte ptr [rsp + rax*2 - 0x5fffc], 1
		xor r10w, bp
		rol dl, 0x83
		dec ax
		sbb r10w, ax
		pop rax
		xchg qword ptr [rsp + rax*2 + 5], rsi
		sar dl, 0x22
		ror r10w, 1
		neg word ptr [rsp + rsi - 0x1000052]
		not r10w
		neg r10w
		xor bp, r10w
		movzx edi, cl
		lea r10, [rsp + r10 + 0x18]
		or rdi, qword ptr [r10 + rax - 3]
		mov qword ptr [rbx + rax - 0x13], rdi
		sal dx, 0xc4
		lea rbx, [rbx + rax - 0x13]
		inc esi
		or dl, 0xb0
		pop rcx
		pop rax
		pop rcx
		jl 0x7ffb72eb83a2
297: UB addr = 7ffb72a9cc1f with ID: 107 yields:
		sal rdx, 0xe
		inc r8d
		movzx eax, r10w
		not r8d
		push rax
		sub r8d, 0xe9243939
		btc rax, 0x2e
		pop rdi
		not r8d
		call 0x7ffb72c0360d
298: UB addr = 7ffb72b9168c with ID: 81 yields:
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
299: UB addr = 7ffb72ab309a with ID: 101 yields:
		push rbp
		or cx, di
		xor dword ptr [rsp + rdi - 0x32bdfaf1], edx
		ror cx, 0x26
		pop rbp
		movsxd rdx, edx
		lea rdi, [r10 + rdi*2 - 0xae16671]
		neg r10d
		add r9, rdx
		mov rdx, qword ptr [rbx + rcx - 0x32bdffff]
		xchg r8d, ecx
		mov cx, word ptr [rdx + r8*2 - 0x657bfffe]
		mov di, cx
		movsx esi, r10b
		sar rsi, 0x8b
		movsx ecx, r8w
		mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]
		add di, r8w
		movzx r8d, r10w
		push r10
		mov word ptr [rsi + rbx - 0x1ffff7], di
		movsx edi, r10w
		lea rbx, [rbx + rsi - 0x1ffff7]
		mov qword ptr [rsp + rsi - 0x1fffff], r9
		ret
300: UB addr = 7ffb72ba220a with ID: 108 yields:
		dec dword ptr [rsp + r8 - 0x462c01fa]
		setne sil
		lea rcx, [r8 + rcx + 0x30c33446]
		neg rcx
		inc rcx
		ror r8b, 0xa1
		cmovno ax, word ptr [rsp + r8 - 0x462c01f2]
		cwde
		xor rcx, 0xffffffff95af2610
		neg rcx
		sal dil, 0xc3
		sar dx, 0xc1
		btr rdi, 0x9b
		xor rbp, rcx
		mov qword ptr [rbx + rax*4 - 0x410], rcx
		bts edx, esi
		mov eax, dword ptr [rax + r11 - 0xf7]
		sbb r8, -0x76f0d6d3
		or dword ptr [rsp + 7], r8d
		xor eax, ebp
		lea rcx, [rdx*4 + 0x333a9e34]
		shl dil, 0x87
		neg eax
		xor r8w, 0x3dbd
		setno dil
		lea eax, [rax + r8 - 0x23818e3e]
		call 0x7ffb72c53b73
301: UB addr = 7ffb729dd783 with ID: 109 yields:
		push r8
		xor r10, 0xffffffff95af2610
		dec ax
		btr si, dx
		cwd
		neg r10
		xor rbp, r10
		pop rdi
		mov qword ptr [rbx + rax*8 - 0x380], r10
		lea rbx, [rbx + rax*4 - 0x1cc]
		or qword ptr [rsp + rax*4 - 0x19c], rax
		pop rcx
		pop rdi
		pop r10
		pop rcx
		jge 0x7ffb72eb83a2
302: UB addr = 7ffb72b9168c with ID: 81 yields:
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
303: UB addr = 7ffb72b660a2 with ID: 98 yields:
		xor edx, ebp
		neg edx
		not qword ptr [rsp + r8*4 - 0x80f00]
		xor r8b, 0x37
		lea edx, [rdx + rdi*2 - 0x310c896c]
		bswap edx
		ror edx, 2
		bswap r8
		lea rcx, [rdi*2 + 0x729e9c18]
		lea edx, [rdx + rdi*4 - 0x35d193b3]
		sal word ptr [rsp + rdi - 0x469afb8a], 0xab
		mov qword ptr [rsp + rdi - 0x469afb8f], rbp
		xor dword ptr [rsp + rdi - 0x469afb8f], edx
		mov esi, 0x50a7d0bb
		inc dil
		xor rdi, 0xffffffffee22e83e
		pop rbp
		sal r10w, 0x83
		setnp sil
		movsxd rdx, edx
		adc r9, rdx
		lea rax, [rdi + rbx + 0x5747ec5a]
		push rcx
		mov r10, rax
		mov rdi, qword ptr ss:[r10 + rsi - 0x50a7d000]
		lea rdx, [r8*2 - 0x10c2d2d7]
		and dword ptr [rsp + rsi - 0x50a7cfff], edx
		mov qword ptr [rsi + rbx - 0x50a7d000], rdi
		mov qword ptr [rsp + rsi - 0x50a7d000], r9
		ret
304: UB addr = 7ffb72a9cc1f with ID: 107 yields:
		sal rdx, 0xe
		inc r8d
		movzx eax, r10w
		not r8d
		push rax
		sub r8d, 0xe9243939
		btc rax, 0x2e
		pop rdi
		not r8d
		call 0x7ffb72c0360d
305: UB addr = 7ffb72b9168c with ID: 81 yields:
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
306: UB addr = 7ffb72ab309a with ID: 101 yields:
		push rbp
		or cx, di
		xor dword ptr [rsp + rdi - 0x32bdfaf1], edx
		ror cx, 0x26
		pop rbp
		movsxd rdx, edx
		lea rdi, [r10 + rdi*2 - 0xae16671]
		neg r10d
		add r9, rdx
		mov rdx, qword ptr [rbx + rcx - 0x32bdffff]
		xchg r8d, ecx
		mov cx, word ptr [rdx + r8*2 - 0x657bfffe]
		mov di, cx
		movsx esi, r10b
		sar rsi, 0x8b
		movsx ecx, r8w
		mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]
		add di, r8w
		movzx r8d, r10w
		push r10
		mov word ptr [rsi + rbx - 0x1ffff7], di
		movsx edi, r10w
		lea rbx, [rbx + rsi - 0x1ffff7]
		mov qword ptr [rsp + rsi - 0x1fffff], r9
		ret
307: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
308: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
309: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
310: UB addr = 7ffb72b7261d with ID: 527 yields:
		mov r10d, 0x6980f73e
		movzx eax, r10b
		btc ax, 0xae
		mov rsi, qword ptr [rax + rbx - 0x403e]
		movsx ecx, al
		mov edi, ecx
		mov rcx, qword ptr [rbx + r10 - 0x6980f736]
		adc rsi, rcx
		btr di, 0xa7
		xor rax, rax
		mov qword ptr [rbx + r10 - 0x6980f736], rsi
		adc eax, dword ptr [r11 + rax*2]
		xor eax, ebp
		neg eax
		sal di, 0x84
		lea rcx, [r10 + rdi*4 - 0x4ef4cfdc]
		ror eax, 2
		btc di, 0x87
		sar r10, cl
		lea eax, [rax + rcx*8 + 0x1bdd2f38]
		push rcx
		not eax
		mov qword ptr [rsp + r10*4], rbp
		xchg r10, rdi
		xor dword ptr [rsp + r10*2 - 0x6c0], eax
		pop rbp
		push rcx
		movsxd rax, eax
		add r9, rax
		movzx edi, byte ptr [r11]
		mov edx, 0x8a286702
		lea rsi, [rdx + 0x219ed34]
		xor dil, bpl
		movzx r8d, sil
		or r8w, dx
		push rdx
		not dil
		mov r10d, r8d
		push r10
		dec dil
		rol dil, 1
		movsx eax, si
		rol r10b, 0xe5
		neg dil
		rol dx, 0x2e
		shr esi, 0x42
		movsx ecx, sil
		xor bpl, dil
		neg r8d
		shl word ptr [rsp + rsi - 0x231094ff], 1
		not cx
		lea rdi, [rsp + rdi + 0x10]
		cwde
		jbe 0x7ffb72efdfcf
311: UB addr = 7ffb72b9168c with ID: 81 yields:
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
312: UB addr = 7ffb72b660a2 with ID: 98 yields:
		xor edx, ebp
		neg edx
		not qword ptr [rsp + r8*4 - 0x80f00]
		xor r8b, 0x37
		lea edx, [rdx + rdi*2 - 0x310c896c]
		bswap edx
		ror edx, 2
		bswap r8
		lea rcx, [rdi*2 + 0x729e9c18]
		lea edx, [rdx + rdi*4 - 0x35d193b3]
		sal word ptr [rsp + rdi - 0x469afb8a], 0xab
		mov qword ptr [rsp + rdi - 0x469afb8f], rbp
		xor dword ptr [rsp + rdi - 0x469afb8f], edx
		mov esi, 0x50a7d0bb
		inc dil
		xor rdi, 0xffffffffee22e83e
		pop rbp
		sal r10w, 0x83
		setnp sil
		movsxd rdx, edx
		adc r9, rdx
		lea rax, [rdi + rbx + 0x5747ec5a]
		push rcx
		mov r10, rax
		mov rdi, qword ptr ss:[r10 + rsi - 0x50a7d000]
		lea rdx, [r8*2 - 0x10c2d2d7]
		and dword ptr [rsp + rsi - 0x50a7cfff], edx
		mov qword ptr [rsi + rbx - 0x50a7d000], rdi
		mov qword ptr [rsp + rsi - 0x50a7d000], r9
		ret
313: UB addr = 7ffb72b7261d with ID: 527 yields:
		mov r10d, 0x6980f73e
		movzx eax, r10b
		btc ax, 0xae
		mov rsi, qword ptr [rax + rbx - 0x403e]
		movsx ecx, al
		mov edi, ecx
		mov rcx, qword ptr [rbx + r10 - 0x6980f736]
		adc rsi, rcx
		btr di, 0xa7
		xor rax, rax
		mov qword ptr [rbx + r10 - 0x6980f736], rsi
		adc eax, dword ptr [r11 + rax*2]
		xor eax, ebp
		neg eax
		sal di, 0x84
		lea rcx, [r10 + rdi*4 - 0x4ef4cfdc]
		ror eax, 2
		btc di, 0x87
		sar r10, cl
		lea eax, [rax + rcx*8 + 0x1bdd2f38]
		push rcx
		not eax
		mov qword ptr [rsp + r10*4], rbp
		xchg r10, rdi
		xor dword ptr [rsp + r10*2 - 0x6c0], eax
		pop rbp
		push rcx
		movsxd rax, eax
		add r9, rax
		movzx edi, byte ptr [r11]
		mov edx, 0x8a286702
		lea rsi, [rdx + 0x219ed34]
		xor dil, bpl
		movzx r8d, sil
		or r8w, dx
		push rdx
		not dil
		mov r10d, r8d
		push r10
		dec dil
		rol dil, 1
		movsx eax, si
		rol r10b, 0xe5
		neg dil
		rol dx, 0x2e
		shr esi, 0x42
		movsx ecx, sil
		xor bpl, dil
		neg r8d
		shl word ptr [rsp + rsi - 0x231094ff], 1
		not cx
		lea rdi, [rsp + rdi + 0x10]
		cwde
		jbe 0x7ffb72efdfcf
314: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
315: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
316: UB addr = 7ffb728ec8d6 with ID: 111 yields:
		mov edi, 0xb5077482
		mov r8, qword ptr [rbx]
		movsx esi, dil
		mov rax, qword ptr [rbx + 8]
		push rdi
		ror word ptr [rsp + 3], 0xac
		adc r8, rax
		movsx eax, dil
		shl eax, 0xc2
		mov rcx, r8
		sal rax, 0x9a
		mov r10, qword ptr [rbx + 0x10]
		and rcx, r10
		lea r8, [rsi + rdi*8 - 0x4bc9cd4a]
		sal word ptr [rsp + 3], 0xe7
		not rcx
		lea rsi, [rdi*8 + 0x733da337]
		or qword ptr [rsp], 0xffffffffa80c4cbf
		or word ptr [rsp + 6], r8w
		mov qword ptr [rbx + 0x10], rcx
		call 0x7ffb72cab9f8
317: UB addr = 7ffb72b6924e with ID: 112 yields:
		xor edi, ebp
		shl esi, 0x11
		neg edi
		lea edi, [rdi + rsi - 0x3264924e]
		mov qword ptr [rsp + 8], rax
		lea rdx, [rsi + 0x6c1853be]
		btr dx, si
		bswap edi
		ror edi, 2
		cdqe
		lea edi, [rdi + rax*8 - 0x1b65a577]
		shl word ptr [rsp + rax - 0x1ffffff6], 0xe1
		mov qword ptr [rsp + rax*4 - 0x7ffffff8], rbp
		cmovb eax, esi
		adc rax, rcx
		xor dword ptr [rsp + 8], edi
		ror eax, 0x5f
		mov rbp, qword ptr [rsp + rax*2 - 0x7ffe9ff8]
		call 0x7ffb72c5ee93
318: UB addr = 7ffb72b720bc with ID: 71 yields:
		rol rsi, 0x2e
		cqo
		lea rbx, [rbx + rax*2 + 0x1b6c07b0]
		jae 0x7ffb72bd0b16
319: UB addr = 7ffb72b69522 with ID: 50 yields:
		mov eax, 0xb602e72e
		lea rdi, [rax - 0x6173404d]
		movzx ecx, di
		movzx edi, byte ptr [r11 + rcx*4 - 0x29b84]
		push rax
		sar word ptr [rsp + rcx - 0xa6de], cl
		xor dil, bpl
		movsx esi, cl
		inc dil
		lea r8, [rsi*8 - 0x71ff74e7]
		ror dil, cl
		neg dil
		cwd
		or edx, dword ptr [rsp + rcx - 0xa6dd]
		sbb dword ptr [rsp + rcx*8 - 0x53707], ecx
		xor dil, al
		neg dx
		xor bpl, dil
		sar word ptr [rsp + rdx*2 + 3], 0x26
		pop rcx
		adc rdi, rsp
		xchg eax, edx
		mov rdx, qword ptr [rdi + rax - 1]
		push rsi
		mov qword ptr [rax + rbx - 9], rdx
		call 0x7ffb72b91b37
320: UB addr = 7ffb72b91b37 with ID: 51 yields:
		mov r10d, dword ptr [r11 + rax*4 - 0xb]
		xor r10d, ebp
		mov qword ptr [rsp + rax*2 - 6], rcx
		cwde
		push r8
		dec r10d
		ror r10d, 1
		dec r10d
		push rax
		ror qword ptr [rsp + rax + 6], 0xb0
		cqo
		bswap r10d
		setae byte ptr [rsp + rax*2 + 0x10]
		cmovb si, cx
		mov qword ptr [rsp + rax + 0x15], rbp
		btc r8w, dx
		xor dword ptr [rsp + rax + 0x15], r10d
		and ecx, 0x76179610
		mov rbp, qword ptr [rsp + rdx + 0x18]
		shl eax, cl
		movsxd r10, r10d
		adc r9, r10
		shl al, 0x44
		mov qword ptr [rsp + rax*2 - 0x5ffe8], rdx
		movzx r10d, word ptr [r11 + rax*4 - 0xbfffb]
		shr cx, 0xc
		xchg byte ptr [rsp + rax - 0x2fffb], ah
		shr dword ptr [rsp + rax*4 - 0xbfff1], 0x7c
		lea r11, [r11 + rax - 0x2fff9]
		rol word ptr [rsp + rax*4 - 0xbfffb], 0x6e
		shl byte ptr [rsp + rax*2 - 0x5fffc], 1
		xor r10w, bp
		rol dl, 0x83
		dec ax
		sbb r10w, ax
		pop rax
		xchg qword ptr [rsp + rax*2 + 5], rsi
		sar dl, 0x22
		ror r10w, 1
		neg word ptr [rsp + rsi - 0x1000052]
		not r10w
		neg r10w
		xor bp, r10w
		movzx edi, cl
		lea r10, [rsp + r10 + 0x18]
		or rdi, qword ptr [r10 + rax - 3]
		mov qword ptr [rbx + rax - 0x13], rdi
		sal dx, 0xc4
		lea rbx, [rbx + rax - 0x13]
		inc esi
		or dl, 0xb0
		pop rcx
		pop rax
		pop rcx
		jl 0x7ffb72eb83a2
321: UB addr = 7ffb72b69522 with ID: 50 yields:
		mov eax, 0xb602e72e
		lea rdi, [rax - 0x6173404d]
		movzx ecx, di
		movzx edi, byte ptr [r11 + rcx*4 - 0x29b84]
		push rax
		sar word ptr [rsp + rcx - 0xa6de], cl
		xor dil, bpl
		movsx esi, cl
		inc dil
		lea r8, [rsi*8 - 0x71ff74e7]
		ror dil, cl
		neg dil
		cwd
		or edx, dword ptr [rsp + rcx - 0xa6dd]
		sbb dword ptr [rsp + rcx*8 - 0x53707], ecx
		xor dil, al
		neg dx
		xor bpl, dil
		sar word ptr [rsp + rdx*2 + 3], 0x26
		pop rcx
		adc rdi, rsp
		xchg eax, edx
		mov rdx, qword ptr [rdi + rax - 1]
		push rsi
		mov qword ptr [rax + rbx - 9], rdx
		call 0x7ffb72b91b37
322: UB addr = 7ffb72b91b37 with ID: 51 yields:
		mov r10d, dword ptr [r11 + rax*4 - 0xb]
		xor r10d, ebp
		mov qword ptr [rsp + rax*2 - 6], rcx
		cwde
		push r8
		dec r10d
		ror r10d, 1
		dec r10d
		push rax
		ror qword ptr [rsp + rax + 6], 0xb0
		cqo
		bswap r10d
		setae byte ptr [rsp + rax*2 + 0x10]
		cmovb si, cx
		mov qword ptr [rsp + rax + 0x15], rbp
		btc r8w, dx
		xor dword ptr [rsp + rax + 0x15], r10d
		and ecx, 0x76179610
		mov rbp, qword ptr [rsp + rdx + 0x18]
		shl eax, cl
		movsxd r10, r10d
		adc r9, r10
		shl al, 0x44
		mov qword ptr [rsp + rax*2 - 0x5ffe8], rdx
		movzx r10d, word ptr [r11 + rax*4 - 0xbfffb]
		shr cx, 0xc
		xchg byte ptr [rsp + rax - 0x2fffb], ah
		shr dword ptr [rsp + rax*4 - 0xbfff1], 0x7c
		lea r11, [r11 + rax - 0x2fff9]
		rol word ptr [rsp + rax*4 - 0xbfffb], 0x6e
		shl byte ptr [rsp + rax*2 - 0x5fffc], 1
		xor r10w, bp
		rol dl, 0x83
		dec ax
		sbb r10w, ax
		pop rax
		xchg qword ptr [rsp + rax*2 + 5], rsi
		sar dl, 0x22
		ror r10w, 1
		neg word ptr [rsp + rsi - 0x1000052]
		not r10w
		neg r10w
		xor bp, r10w
		movzx edi, cl
		lea r10, [rsp + r10 + 0x18]
		or rdi, qword ptr [r10 + rax - 3]
		mov qword ptr [rbx + rax - 0x13], rdi
		sal dx, 0xc4
		lea rbx, [rbx + rax - 0x13]
		inc esi
		or dl, 0xb0
		pop rcx
		pop rax
		pop rcx
		jl 0x7ffb72eb83a2
323: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
324: UB addr = 7ffb72aed5f0 with ID: 70 yields:
		jne 0x7ffb72c4500c
325: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
326: UB addr = 7ffb72aed5f0 with ID: 70 yields:
		jne 0x7ffb72c4500c
327: UB addr = 7ffb72b69522 with ID: 50 yields:
		mov eax, 0xb602e72e
		lea rdi, [rax - 0x6173404d]
		movzx ecx, di
		movzx edi, byte ptr [r11 + rcx*4 - 0x29b84]
		push rax
		sar word ptr [rsp + rcx - 0xa6de], cl
		xor dil, bpl
		movsx esi, cl
		inc dil
		lea r8, [rsi*8 - 0x71ff74e7]
		ror dil, cl
		neg dil
		cwd
		or edx, dword ptr [rsp + rcx - 0xa6dd]
		sbb dword ptr [rsp + rcx*8 - 0x53707], ecx
		xor dil, al
		neg dx
		xor bpl, dil
		sar word ptr [rsp + rdx*2 + 3], 0x26
		pop rcx
		adc rdi, rsp
		xchg eax, edx
		mov rdx, qword ptr [rdi + rax - 1]
		push rsi
		mov qword ptr [rax + rbx - 9], rdx
		call 0x7ffb72b91b37
328: UB addr = 7ffb72b91b37 with ID: 51 yields:
		mov r10d, dword ptr [r11 + rax*4 - 0xb]
		xor r10d, ebp
		mov qword ptr [rsp + rax*2 - 6], rcx
		cwde
		push r8
		dec r10d
		ror r10d, 1
		dec r10d
		push rax
		ror qword ptr [rsp + rax + 6], 0xb0
		cqo
		bswap r10d
		setae byte ptr [rsp + rax*2 + 0x10]
		cmovb si, cx
		mov qword ptr [rsp + rax + 0x15], rbp
		btc r8w, dx
		xor dword ptr [rsp + rax + 0x15], r10d
		and ecx, 0x76179610
		mov rbp, qword ptr [rsp + rdx + 0x18]
		shl eax, cl
		movsxd r10, r10d
		adc r9, r10
		shl al, 0x44
		mov qword ptr [rsp + rax*2 - 0x5ffe8], rdx
		movzx r10d, word ptr [r11 + rax*4 - 0xbfffb]
		shr cx, 0xc
		xchg byte ptr [rsp + rax - 0x2fffb], ah
		shr dword ptr [rsp + rax*4 - 0xbfff1], 0x7c
		lea r11, [r11 + rax - 0x2fff9]
		rol word ptr [rsp + rax*4 - 0xbfffb], 0x6e
		shl byte ptr [rsp + rax*2 - 0x5fffc], 1
		xor r10w, bp
		rol dl, 0x83
		dec ax
		sbb r10w, ax
		pop rax
		xchg qword ptr [rsp + rax*2 + 5], rsi
		sar dl, 0x22
		ror r10w, 1
		neg word ptr [rsp + rsi - 0x1000052]
		not r10w
		neg r10w
		xor bp, r10w
		movzx edi, cl
		lea r10, [rsp + r10 + 0x18]
		or rdi, qword ptr [r10 + rax - 3]
		mov qword ptr [rbx + rax - 0x13], rdi
		sal dx, 0xc4
		lea rbx, [rbx + rax - 0x13]
		inc esi
		or dl, 0xb0
		pop rcx
		pop rax
		pop rcx
		jl 0x7ffb72eb83a2
329: UB addr = 7ffb72aed5f0 with ID: 70 yields:
		jne 0x7ffb72c4500c
330: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
331: UB addr = 7ffb72aed5f0 with ID: 70 yields:
		jne 0x7ffb72c4500c
332: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
333: UB addr = 7ffb72aed5f0 with ID: 70 yields:
		jne 0x7ffb72c4500c
334: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
335: UB addr = 7ffb72aed5f0 with ID: 70 yields:
		jne 0x7ffb72c4500c
336: UB addr = 7ffb72b3bbd8 with ID: 54 yields:
		mov rsi, qword ptr [rbx]
		mov r11d, 0x2b8bf70f
		movsx edx, r11b
		lea rbx, [rbx + r11 - 0x2b8bf707]
		mov r11, rsi
		sub rbp, rdx
		mov r10d, 0xda962391
		lea r8, [r10 + r10*8 + 0x4803c381]
		lea r9, [rip - 0x15]
		mov r10d, dword ptr [r11]
		movzx eax, r8b
		mov ecx, eax
		lea r11, [r11 + rax*4 - 0x264]
		xadd eax, r8d
		movzx edi, cx
		xor r10d, ebp
		push rcx
		bswap eax
		dec r10d
		shr byte ptr [rsp + r8*2 - 0x132], 6
		bswap r10d
		shl al, 0xc1
		shr rax, 0x16
		mov edx, r8d
		ror r10d, 3
		xor al, dil
		lea r10d, [r10 + r8*2 + 0x3228c97a]
		xchg qword ptr [rsp + r8*2 - 0x134], rcx
		lea rsi, [rcx + 0x7a6de21]
		xor r10d, 0xd7940b1e
		neg word ptr [rsp + r8*2 - 0x130]
		mov qword ptr [rsp + r8*2 - 0x134], rbp
		cmovg rcx, rsi
		shl r8, 0xb
		xor dword ptr [rsp + r8 - 0x4d000], r10d
		pop rbp
		push rax
		inc r8d
		movsxd r10, r10d
		add r9, r10
		mov qword ptr [rsp + r8 - 0x4d001], r9
		ret
337: UB addr = 7ffb72b47d9c with ID: 5 yields:
		movzx r8d, cx
		xor dl, bpl
		xor dword ptr [rsp + rsi*4 + 0xc], r8d
		pop r10
		not dl
		bts r10, 0x98
		lea rcx, [r10*4 - 0x6c5b2e6c]
		rol r8w, 0x2c
		inc dl
		mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]
		ror dl, 1
		xor word ptr [rsp + r10 - 0x4f1da1c1], r8w
		neg qword ptr [rsp + rsi]
		adc dl, sil
		sar r10d, 0x6b
		xadd qword ptr [rsp + r10 - 0x9e3b4], rdi
		neg dl
		inc r8d
		sub dl, 0xc
		neg rsi
		setl byte ptr [rsp + r10*4 - 0x278ecb]
		rol dl, 1
		xor bpl, dl
		lea rdx, [rsp + rdx + 8]
		mov qword ptr [rdx + r10*8 - 0x4f1da0], rax
		mov edi, dword ptr [r11 + r10 - 0x9e3b2]
		neg qword ptr [rsp + r10*2 - 0x13c768]
		xor edi, ebp
		xor edi, 0xe12e3f2d
		btc r8d, ecx
		rol edi, 1
		sub r8w, 0x64a7
		sal rcx, 0x87
		xor edi, 0x689d25ab
		neg edi
		sal r8w, 0xec
		mov qword ptr [rsp + r10 - 0x9e3b4], rbp
		movsx eax, cl
		btr esi, 0xa1
		xor dword ptr [rsp + r10 - 0x9e3b4], edi
		pop rbp
		xor r10, rax
		movsxd rdi, edi
		adc r9, rdi
		mov rdx, qword ptr [rbx + rsi*2 + 0x10]
		lea rbx, [r10 + rbx - 0x9e39c]
		dec si
		movzx edi, byte ptr [rsi + r11 - 0xfff9]
		lea r11, [r11 + r10 - 0x9e3ad]
		jno 0x7ffb72b7d536
338: UB addr = 7ffb72b7d536 with ID: 6 yields:
		ror si, 0xf
		rol si, 0xc7
		xor dil, bpl
		lea rcx, [rax*8 + 0x3d3d7905]
		ror dil, 1
		sub rsi, -0x577b11cf
		xor dil, 0xa1
		xor r8d, r8d
		rol r10w, cl
		adc dil, 0x94
		sub cx, cx
		xor dil, 0x9c
		not r8d
		btr si, cx
		xor bpl, dil
		sar r10w, 0xc6
		add rdi, rsp
		xchg ax, r8w
		mov qword ptr [r10 + rdi - 0x9fed3], rdx
		dec si
		add ax, r10w
		sub sil, al
		jmp r9
339: UB addr = 7ffb72b47d9c with ID: 5 yields:
		movzx r8d, cx
		xor dl, bpl
		xor dword ptr [rsp + rsi*4 + 0xc], r8d
		pop r10
		not dl
		bts r10, 0x98
		lea rcx, [r10*4 - 0x6c5b2e6c]
		rol r8w, 0x2c
		inc dl
		mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]
		ror dl, 1
		xor word ptr [rsp + r10 - 0x4f1da1c1], r8w
		neg qword ptr [rsp + rsi]
		adc dl, sil
		sar r10d, 0x6b
		xadd qword ptr [rsp + r10 - 0x9e3b4], rdi
		neg dl
		inc r8d
		sub dl, 0xc
		neg rsi
		setl byte ptr [rsp + r10*4 - 0x278ecb]
		rol dl, 1
		xor bpl, dl
		lea rdx, [rsp + rdx + 8]
		mov qword ptr [rdx + r10*8 - 0x4f1da0], rax
		mov edi, dword ptr [r11 + r10 - 0x9e3b2]
		neg qword ptr [rsp + r10*2 - 0x13c768]
		xor edi, ebp
		xor edi, 0xe12e3f2d
		btc r8d, ecx
		rol edi, 1
		sub r8w, 0x64a7
		sal rcx, 0x87
		xor edi, 0x689d25ab
		neg edi
		sal r8w, 0xec
		mov qword ptr [rsp + r10 - 0x9e3b4], rbp
		movsx eax, cl
		btr esi, 0xa1
		xor dword ptr [rsp + r10 - 0x9e3b4], edi
		pop rbp
		xor r10, rax
		movsxd rdi, edi
		adc r9, rdi
		mov rdx, qword ptr [rbx + rsi*2 + 0x10]
		lea rbx, [r10 + rbx - 0x9e39c]
		dec si
		movzx edi, byte ptr [rsi + r11 - 0xfff9]
		lea r11, [r11 + r10 - 0x9e3ad]
		jno 0x7ffb72b7d536
340: UB addr = 7ffb72b7d536 with ID: 6 yields:
		ror si, 0xf
		rol si, 0xc7
		xor dil, bpl
		lea rcx, [rax*8 + 0x3d3d7905]
		ror dil, 1
		sub rsi, -0x577b11cf
		xor dil, 0xa1
		xor r8d, r8d
		rol r10w, cl
		adc dil, 0x94
		sub cx, cx
		xor dil, 0x9c
		not r8d
		btr si, cx
		xor bpl, dil
		sar r10w, 0xc6
		add rdi, rsp
		xchg ax, r8w
		mov qword ptr [r10 + rdi - 0x9fed3], rdx
		dec si
		add ax, r10w
		sub sil, al
		jmp r9
341: UB addr = 7ffb72b47d9c with ID: 5 yields:
		movzx r8d, cx
		xor dl, bpl
		xor dword ptr [rsp + rsi*4 + 0xc], r8d
		pop r10
		not dl
		bts r10, 0x98
		lea rcx, [r10*4 - 0x6c5b2e6c]
		rol r8w, 0x2c
		inc dl
		mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]
		ror dl, 1
		xor word ptr [rsp + r10 - 0x4f1da1c1], r8w
		neg qword ptr [rsp + rsi]
		adc dl, sil
		sar r10d, 0x6b
		xadd qword ptr [rsp + r10 - 0x9e3b4], rdi
		neg dl
		inc r8d
		sub dl, 0xc
		neg rsi
		setl byte ptr [rsp + r10*4 - 0x278ecb]
		rol dl, 1
		xor bpl, dl
		lea rdx, [rsp + rdx + 8]
		mov qword ptr [rdx + r10*8 - 0x4f1da0], rax
		mov edi, dword ptr [r11 + r10 - 0x9e3b2]
		neg qword ptr [rsp + r10*2 - 0x13c768]
		xor edi, ebp
		xor edi, 0xe12e3f2d
		btc r8d, ecx
		rol edi, 1
		sub r8w, 0x64a7
		sal rcx, 0x87
		xor edi, 0x689d25ab
		neg edi
		sal r8w, 0xec
		mov qword ptr [rsp + r10 - 0x9e3b4], rbp
		movsx eax, cl
		btr esi, 0xa1
		xor dword ptr [rsp + r10 - 0x9e3b4], edi
		pop rbp
		xor r10, rax
		movsxd rdi, edi
		adc r9, rdi
		mov rdx, qword ptr [rbx + rsi*2 + 0x10]
		lea rbx, [r10 + rbx - 0x9e39c]
		dec si
		movzx edi, byte ptr [rsi + r11 - 0xfff9]
		lea r11, [r11 + r10 - 0x9e3ad]
		jno 0x7ffb72b7d536
342: UB addr = 7ffb72b7d536 with ID: 6 yields:
		ror si, 0xf
		rol si, 0xc7
		xor dil, bpl
		lea rcx, [rax*8 + 0x3d3d7905]
		ror dil, 1
		sub rsi, -0x577b11cf
		xor dil, 0xa1
		xor r8d, r8d
		rol r10w, cl
		adc dil, 0x94
		sub cx, cx
		xor dil, 0x9c
		not r8d
		btr si, cx
		xor bpl, dil
		sar r10w, 0xc6
		add rdi, rsp
		xchg ax, r8w
		mov qword ptr [r10 + rdi - 0x9fed3], rdx
		dec si
		add ax, r10w
		sub sil, al
		jmp r9
343: UB addr = 7ffb72b47d9c with ID: 5 yields:
		movzx r8d, cx
		xor dl, bpl
		xor dword ptr [rsp + rsi*4 + 0xc], r8d
		pop r10
		not dl
		bts r10, 0x98
		lea rcx, [r10*4 - 0x6c5b2e6c]
		rol r8w, 0x2c
		inc dl
		mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]
		ror dl, 1
		xor word ptr [rsp + r10 - 0x4f1da1c1], r8w
		neg qword ptr [rsp + rsi]
		adc dl, sil
		sar r10d, 0x6b
		xadd qword ptr [rsp + r10 - 0x9e3b4], rdi
		neg dl
		inc r8d
		sub dl, 0xc
		neg rsi
		setl byte ptr [rsp + r10*4 - 0x278ecb]
		rol dl, 1
		xor bpl, dl
		lea rdx, [rsp + rdx + 8]
		mov qword ptr [rdx + r10*8 - 0x4f1da0], rax
		mov edi, dword ptr [r11 + r10 - 0x9e3b2]
		neg qword ptr [rsp + r10*2 - 0x13c768]
		xor edi, ebp
		xor edi, 0xe12e3f2d
		btc r8d, ecx
		rol edi, 1
		sub r8w, 0x64a7
		sal rcx, 0x87
		xor edi, 0x689d25ab
		neg edi
		sal r8w, 0xec
		mov qword ptr [rsp + r10 - 0x9e3b4], rbp
		movsx eax, cl
		btr esi, 0xa1
		xor dword ptr [rsp + r10 - 0x9e3b4], edi
		pop rbp
		xor r10, rax
		movsxd rdi, edi
		adc r9, rdi
		mov rdx, qword ptr [rbx + rsi*2 + 0x10]
		lea rbx, [r10 + rbx - 0x9e39c]
		dec si
		movzx edi, byte ptr [rsi + r11 - 0xfff9]
		lea r11, [r11 + r10 - 0x9e3ad]
		jno 0x7ffb72b7d536
344: UB addr = 7ffb72b7d536 with ID: 6 yields:
		ror si, 0xf
		rol si, 0xc7
		xor dil, bpl
		lea rcx, [rax*8 + 0x3d3d7905]
		ror dil, 1
		sub rsi, -0x577b11cf
		xor dil, 0xa1
		xor r8d, r8d
		rol r10w, cl
		adc dil, 0x94
		sub cx, cx
		xor dil, 0x9c
		not r8d
		btr si, cx
		xor bpl, dil
		sar r10w, 0xc6
		add rdi, rsp
		xchg ax, r8w
		mov qword ptr [r10 + rdi - 0x9fed3], rdx
		dec si
		add ax, r10w
		sub sil, al
		jmp r9
345: UB addr = 7ffb72a47342 with ID: 48 yields:
		push rdx
		inc r8w
		sub cl, 0xa4
		not r8w
		movzx r10d, byte ptr [rsp]
		sar edi, cl
		xor bp, r8w
		lea r8, [rsp + r8 + 8]
		sar r10, cl
		mov qword ptr [rdi + r8], rax
		add edi, 0x1908091f
		seta byte ptr [rsp + rdi - 0x1908091f]
		mov edx, dword ptr [r11 + rdi - 0x1908091d]
		xor edx, ebp
		xor edx, 0xe12e3f2d
		movsx eax, byte ptr [rsp + rdi - 0x1908091f]
		ror byte ptr [rsp + rdi*4 - 0x64202477], 0xe1
		cmovae rcx, rax
		rol edx, cl
		and qword ptr [rsp + rdi*2 - 0x3210123e], 0xffffffffe10855ae
		sal word ptr [rsp + rdi*2 - 0x3210123e], 0xc7
		call 0x7ffb72dc8bfb
346: UB addr = 7ffb72b9db35 with ID: 11 yields:
		xor rbp, r10
		mov qword ptr [rsp + rsi - 0xffae], rdx
		xor r8, rax
		btc esi, ecx
		mov qword ptr [rsi + rbx - 0xffb6], r10
		push rsi
		neg ecx
		xadd eax, esi
		movzx eax, byte ptr [rax + r11 - 0x2000ff91]
		shr di, 0xed
		or dx, 0xec87
		lea r11, [r11 + rdx*4 - 0x3f607]
		call 0x7ffb72c67c09
347: UB addr = 7ffb728df27b with ID: 12 yields:
		mov rdi, qword ptr [rax + rdi + 0x5519fffd]
		pop rsi
		adc rsi, 0x18852e
		jmp rsi
348: UB addr = 7ffb72b7261d with ID: 527 yields:
		mov r10d, 0x6980f73e
		movzx eax, r10b
		btc ax, 0xae
		mov rsi, qword ptr [rax + rbx - 0x403e]
		movsx ecx, al
		mov edi, ecx
		mov rcx, qword ptr [rbx + r10 - 0x6980f736]
		adc rsi, rcx
		btr di, 0xa7
		xor rax, rax
		mov qword ptr [rbx + r10 - 0x6980f736], rsi
		adc eax, dword ptr [r11 + rax*2]
		xor eax, ebp
		neg eax
		sal di, 0x84
		lea rcx, [r10 + rdi*4 - 0x4ef4cfdc]
		ror eax, 2
		btc di, 0x87
		sar r10, cl
		lea eax, [rax + rcx*8 + 0x1bdd2f38]
		push rcx
		not eax
		mov qword ptr [rsp + r10*4], rbp
		xchg r10, rdi
		xor dword ptr [rsp + r10*2 - 0x6c0], eax
		pop rbp
		push rcx
		movsxd rax, eax
		add r9, rax
		movzx edi, byte ptr [r11]
		mov edx, 0x8a286702
		lea rsi, [rdx + 0x219ed34]
		xor dil, bpl
		movzx r8d, sil
		or r8w, dx
		push rdx
		not dil
		mov r10d, r8d
		push r10
		dec dil
		rol dil, 1
		movsx eax, si
		rol r10b, 0xe5
		neg dil
		rol dx, 0x2e
		shr esi, 0x42
		movsx ecx, sil
		xor bpl, dil
		neg r8d
		shl word ptr [rsp + rsi - 0x231094ff], 1
		not cx
		lea rdi, [rsp + rdi + 0x10]
		cwde
		jbe 0x7ffb72efdfcf
349: UB addr = 7ffb72b69522 with ID: 50 yields:
		mov eax, 0xb602e72e
		lea rdi, [rax - 0x6173404d]
		movzx ecx, di
		movzx edi, byte ptr [r11 + rcx*4 - 0x29b84]
		push rax
		sar word ptr [rsp + rcx - 0xa6de], cl
		xor dil, bpl
		movsx esi, cl
		inc dil
		lea r8, [rsi*8 - 0x71ff74e7]
		ror dil, cl
		neg dil
		cwd
		or edx, dword ptr [rsp + rcx - 0xa6dd]
		sbb dword ptr [rsp + rcx*8 - 0x53707], ecx
		xor dil, al
		neg dx
		xor bpl, dil
		sar word ptr [rsp + rdx*2 + 3], 0x26
		pop rcx
		adc rdi, rsp
		xchg eax, edx
		mov rdx, qword ptr [rdi + rax - 1]
		push rsi
		mov qword ptr [rax + rbx - 9], rdx
		call 0x7ffb72b91b37
350: UB addr = 7ffb72b91b37 with ID: 51 yields:
		mov r10d, dword ptr [r11 + rax*4 - 0xb]
		xor r10d, ebp
		mov qword ptr [rsp + rax*2 - 6], rcx
		cwde
		push r8
		dec r10d
		ror r10d, 1
		dec r10d
		push rax
		ror qword ptr [rsp + rax + 6], 0xb0
		cqo
		bswap r10d
		setae byte ptr [rsp + rax*2 + 0x10]
		cmovb si, cx
		mov qword ptr [rsp + rax + 0x15], rbp
		btc r8w, dx
		xor dword ptr [rsp + rax + 0x15], r10d
		and ecx, 0x76179610
		mov rbp, qword ptr [rsp + rdx + 0x18]
		shl eax, cl
		movsxd r10, r10d
		adc r9, r10
		shl al, 0x44
		mov qword ptr [rsp + rax*2 - 0x5ffe8], rdx
		movzx r10d, word ptr [r11 + rax*4 - 0xbfffb]
		shr cx, 0xc
		xchg byte ptr [rsp + rax - 0x2fffb], ah
		shr dword ptr [rsp + rax*4 - 0xbfff1], 0x7c
		lea r11, [r11 + rax - 0x2fff9]
		rol word ptr [rsp + rax*4 - 0xbfffb], 0x6e
		shl byte ptr [rsp + rax*2 - 0x5fffc], 1
		xor r10w, bp
		rol dl, 0x83
		dec ax
		sbb r10w, ax
		pop rax
		xchg qword ptr [rsp + rax*2 + 5], rsi
		sar dl, 0x22
		ror r10w, 1
		neg word ptr [rsp + rsi - 0x1000052]
		not r10w
		neg r10w
		xor bp, r10w
		movzx edi, cl
		lea r10, [rsp + r10 + 0x18]
		or rdi, qword ptr [r10 + rax - 3]
		mov qword ptr [rbx + rax - 0x13], rdi
		sal dx, 0xc4
		lea rbx, [rbx + rax - 0x13]
		inc esi
		or dl, 0xb0
		pop rcx
		pop rax
		pop rcx
		jl 0x7ffb72eb83a2
351: UB addr = 7ffb72b69522 with ID: 50 yields:
		mov eax, 0xb602e72e
		lea rdi, [rax - 0x6173404d]
		movzx ecx, di
		movzx edi, byte ptr [r11 + rcx*4 - 0x29b84]
		push rax
		sar word ptr [rsp + rcx - 0xa6de], cl
		xor dil, bpl
		movsx esi, cl
		inc dil
		lea r8, [rsi*8 - 0x71ff74e7]
		ror dil, cl
		neg dil
		cwd
		or edx, dword ptr [rsp + rcx - 0xa6dd]
		sbb dword ptr [rsp + rcx*8 - 0x53707], ecx
		xor dil, al
		neg dx
		xor bpl, dil
		sar word ptr [rsp + rdx*2 + 3], 0x26
		pop rcx
		adc rdi, rsp
		xchg eax, edx
		mov rdx, qword ptr [rdi + rax - 1]
		push rsi
		mov qword ptr [rax + rbx - 9], rdx
		call 0x7ffb72b91b37
352: UB addr = 7ffb72b91b37 with ID: 51 yields:
		mov r10d, dword ptr [r11 + rax*4 - 0xb]
		xor r10d, ebp
		mov qword ptr [rsp + rax*2 - 6], rcx
		cwde
		push r8
		dec r10d
		ror r10d, 1
		dec r10d
		push rax
		ror qword ptr [rsp + rax + 6], 0xb0
		cqo
		bswap r10d
		setae byte ptr [rsp + rax*2 + 0x10]
		cmovb si, cx
		mov qword ptr [rsp + rax + 0x15], rbp
		btc r8w, dx
		xor dword ptr [rsp + rax + 0x15], r10d
		and ecx, 0x76179610
		mov rbp, qword ptr [rsp + rdx + 0x18]
		shl eax, cl
		movsxd r10, r10d
		adc r9, r10
		shl al, 0x44
		mov qword ptr [rsp + rax*2 - 0x5ffe8], rdx
		movzx r10d, word ptr [r11 + rax*4 - 0xbfffb]
		shr cx, 0xc
		xchg byte ptr [rsp + rax - 0x2fffb], ah
		shr dword ptr [rsp + rax*4 - 0xbfff1], 0x7c
		lea r11, [r11 + rax - 0x2fff9]
		rol word ptr [rsp + rax*4 - 0xbfffb], 0x6e
		shl byte ptr [rsp + rax*2 - 0x5fffc], 1
		xor r10w, bp
		rol dl, 0x83
		dec ax
		sbb r10w, ax
		pop rax
		xchg qword ptr [rsp + rax*2 + 5], rsi
		sar dl, 0x22
		ror r10w, 1
		neg word ptr [rsp + rsi - 0x1000052]
		not r10w
		neg r10w
		xor bp, r10w
		movzx edi, cl
		lea r10, [rsp + r10 + 0x18]
		or rdi, qword ptr [r10 + rax - 3]
		mov qword ptr [rbx + rax - 0x13], rdi
		sal dx, 0xc4
		lea rbx, [rbx + rax - 0x13]
		inc esi
		or dl, 0xb0
		pop rcx
		pop rax
		pop rcx
		jl 0x7ffb72eb83a2
353: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
354: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
355: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
356: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
357: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
358: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
359: UB addr = 7ffb729dc938 with ID: 114 yields:
		movzx edx, byte ptr [r11]
		mov ecx, 0xa636301e
		xor dl, bpl
		lea r9, [rcx + rcx*8 - 0x38e81b60]
		movsx r8d, r9b
		dec dl
		sub r9b, 0x2a
		mov r11d, 0xb2ba3cac
		rol dl, 1
		neg dl
		btr ecx, r11d
		adc ecx, 0x7a8af914
		mov esi, r9d
		not dl
		call 0x7ffb72d9a9d5
360: UB addr = 7ffb72b04610 with ID: 115 yields:
		neg byte ptr [rsp + rdx + 3]
		jge 0x7ffb72b88eab
361: UB addr = 7ffb72b88eab with ID: 116 yields:
		xor dword ptr [rsp + rdx*2 + 0x18], r9d
		rol word ptr [rsp + rdx*8 + 0xf], 0xa8
		mov r10, qword ptr [rsp + rdx + 0x18]
		movsxd r9, r9d
		adc dword ptr [rsp + rdx*2 + 0x10], esi
		adc rbp, r9
		mov qword ptr [rsp + rdx], rbp
		ret 0x18
362: UB addr = 7ffb728ebd34 with ID: 117 yields:
		mov esi, 0x7999d01a
		mov edx, esi
		mov rcx, qword ptr [rsi + r8 - 0x7999d01a]
		mov r9b, byte ptr [rbx + rsi - 0x7999d01a]
		lea r11, [rdx + rsi*8 - 0x1ec425ee]
		mov edi, edx
		xor r9b, r10b
		dec r9b
		neg r9b
		xchg rax, rdi
		xor r9b, 0x9e
		cdq
		call 0x7ffb728bd997
363: UB addr = 7ffb728bd997 with ID: 118 yields:
		dec r9b
		and rdi, 0x1a373c9a
		ror edi, 0xb5
		neg r9b
		push r11
		add dword ptr [rsp + rsi - 0x7999d016], esi
		xor r10b, r9b
		cwd
		or rax, rdi
		mov qword ptr [rsp + rdx*2 - 0x1fff6], rdi
		lea r9, [rsp + r9 + 0x10]
		adc rax, 0x2831ca3e
		mov qword ptr [rsi + r9 - 0x7999d01a], rcx
		mov edx, dword ptr [rbx + rsi - 0x7999d019]
		bswap rax
		xor r11d, dword ptr [rsp + rsi - 0x7999d019]
		xor edx, r10d
		inc edx
		lea rsi, [rax*4 - 0x7c7863f7]
		not edx
		or dword ptr [rsp + r11 - 0x39838ed6], eax
		inc dword ptr [rsp + r11*2 - 0x73071da0]
		ja 0x7ffb72e0837d
364: UB addr = 7ffb729cd952 with ID: 119 yields:
		rol r11w, 1
		shr al, cl
		adc byte ptr [rsp + 0x1c], 0x1b
		adc dword ptr [rsp + 0xf], ecx
		sbb r11w, 0x7c26
		not r11w
		or r9, qword ptr [rsp + 2]
		dec al
		xor r10w, r11w
		xor r9, 0xffffffffb9255b97
		call 0x7ffb72aa787a
365: UB addr = 7ffb72aa787a with ID: 120 yields:
		lea r11, [rsp + r11 + 0x28]
		adc eax, ecx
		neg r9d
		xor esi, dword ptr [rsp + r9 - 0x7975e905]
		mov qword ptr [r11 + rsi - 0x1f1db300], rdi
		lea r11, [rax + rcx*8 - 0x12756bc5]
		mov edx, dword ptr [rsp + rsi*2 - 0x3e3b65e4]
		inc byte ptr [rsp + rsi - 0x1f1db2f5]
		mov qword ptr [rsp + rsi*4 - 0x7c76cc00], rbp
		ret 0x20
366: UB addr = 7ffb72aa2b33 with ID: 121 yields:
		lea rdx, [rsp + rdx + 0x18]
		mov qword ptr [rsp + 8], rcx
		mov qword ptr [rdx], rdi
		mov r9d, dword ptr [rbx + 1]
		mov esi, ecx
		cbw
		bts rcx, 0xa2
		xor r9d, r10d
		mov qword ptr [rsp + 8], rax
		inc r9d
		cdqe
		sal al, 0xc3
		push rax
		ror r9d, 2
		or byte ptr [rsp + rax + 0x78260106], 0x27
		movsx edi, sil
		dec r9d
		rol r9d, 3
		cdqe
		and ecx, eax
		mov qword ptr [rsp + rax + 0x78260100], r10
		sub di, ax
		push rcx
		xor dword ptr [rsp + rax + 0x78260108], r9d
		call 0x7ffb72d6c847
367: UB addr = 7ffb72aa2b33 with ID: 121 yields:
		lea rdx, [rsp + rdx + 0x18]
		mov qword ptr [rsp + 8], rcx
		mov qword ptr [rdx], rdi
		mov r9d, dword ptr [rbx + 1]
		mov esi, ecx
		cbw
		bts rcx, 0xa2
		xor r9d, r10d
		mov qword ptr [rsp + 8], rax
		inc r9d
		cdqe
		sal al, 0xc3
		push rax
		ror r9d, 2
		or byte ptr [rsp + rax + 0x78260106], 0x27
		movsx edi, sil
		dec r9d
		rol r9d, 3
		cdqe
		and ecx, eax
		mov qword ptr [rsp + rax + 0x78260100], r10
		sub di, ax
		push rcx
		xor dword ptr [rsp + rax + 0x78260108], r9d
		call 0x7ffb72d6c847
368: UB addr = 7ffb72aa2b33 with ID: 121 yields:
		lea rdx, [rsp + rdx + 0x18]
		mov qword ptr [rsp + 8], rcx
		mov qword ptr [rdx], rdi
		mov r9d, dword ptr [rbx + 1]
		mov esi, ecx
		cbw
		bts rcx, 0xa2
		xor r9d, r10d
		mov qword ptr [rsp + 8], rax
		inc r9d
		cdqe
		sal al, 0xc3
		push rax
		ror r9d, 2
		or byte ptr [rsp + rax + 0x78260106], 0x27
		movsx edi, sil
		dec r9d
		rol r9d, 3
		cdqe
		and ecx, eax
		mov qword ptr [rsp + rax + 0x78260100], r10
		sub di, ax
		push rcx
		xor dword ptr [rsp + rax + 0x78260108], r9d
		call 0x7ffb72d6c847
369: UB addr = 7ffb728ebd34 with ID: 117 yields:
		mov esi, 0x7999d01a
		mov edx, esi
		mov rcx, qword ptr [rsi + r8 - 0x7999d01a]
		mov r9b, byte ptr [rbx + rsi - 0x7999d01a]
		lea r11, [rdx + rsi*8 - 0x1ec425ee]
		mov edi, edx
		xor r9b, r10b
		dec r9b
		neg r9b
		xchg rax, rdi
		xor r9b, 0x9e
		cdq
		call 0x7ffb728bd997
370: UB addr = 7ffb728bd997 with ID: 118 yields:
		dec r9b
		and rdi, 0x1a373c9a
		ror edi, 0xb5
		neg r9b
		push r11
		add dword ptr [rsp + rsi - 0x7999d016], esi
		xor r10b, r9b
		cwd
		or rax, rdi
		mov qword ptr [rsp + rdx*2 - 0x1fff6], rdi
		lea r9, [rsp + r9 + 0x10]
		adc rax, 0x2831ca3e
		mov qword ptr [rsi + r9 - 0x7999d01a], rcx
		mov edx, dword ptr [rbx + rsi - 0x7999d019]
		bswap rax
		xor r11d, dword ptr [rsp + rsi - 0x7999d019]
		xor edx, r10d
		inc edx
		lea rsi, [rax*4 - 0x7c7863f7]
		not edx
		or dword ptr [rsp + r11 - 0x39838ed6], eax
		inc dword ptr [rsp + r11*2 - 0x73071da0]
		ja 0x7ffb72e0837d
371: UB addr = 7ffb729cd952 with ID: 119 yields:
		rol r11w, 1
		shr al, cl
		adc byte ptr [rsp + 0x1c], 0x1b
		adc dword ptr [rsp + 0xf], ecx
		sbb r11w, 0x7c26
		not r11w
		or r9, qword ptr [rsp + 2]
		dec al
		xor r10w, r11w
		xor r9, 0xffffffffb9255b97
		call 0x7ffb72aa787a
372: UB addr = 7ffb72aa787a with ID: 120 yields:
		lea r11, [rsp + r11 + 0x28]
		adc eax, ecx
		neg r9d
		xor esi, dword ptr [rsp + r9 - 0x7975e905]
		mov qword ptr [r11 + rsi - 0x1f1db300], rdi
		lea r11, [rax + rcx*8 - 0x12756bc5]
		mov edx, dword ptr [rsp + rsi*2 - 0x3e3b65e4]
		inc byte ptr [rsp + rsi - 0x1f1db2f5]
		mov qword ptr [rsp + rsi*4 - 0x7c76cc00], rbp
		ret 0x20
373: UB addr = 7ffb72aa2b33 with ID: 121 yields:
		lea rdx, [rsp + rdx + 0x18]
		mov qword ptr [rsp + 8], rcx
		mov qword ptr [rdx], rdi
		mov r9d, dword ptr [rbx + 1]
		mov esi, ecx
		cbw
		bts rcx, 0xa2
		xor r9d, r10d
		mov qword ptr [rsp + 8], rax
		inc r9d
		cdqe
		sal al, 0xc3
		push rax
		ror r9d, 2
		or byte ptr [rsp + rax + 0x78260106], 0x27
		movsx edi, sil
		dec r9d
		rol r9d, 3
		cdqe
		and ecx, eax
		mov qword ptr [rsp + rax + 0x78260100], r10
		sub di, ax
		push rcx
		xor dword ptr [rsp + rax + 0x78260108], r9d
		call 0x7ffb72d6c847
374: UB addr = 7ffb72aa2b33 with ID: 121 yields:
		lea rdx, [rsp + rdx + 0x18]
		mov qword ptr [rsp + 8], rcx
		mov qword ptr [rdx], rdi
		mov r9d, dword ptr [rbx + 1]
		mov esi, ecx
		cbw
		bts rcx, 0xa2
		xor r9d, r10d
		mov qword ptr [rsp + 8], rax
		inc r9d
		cdqe
		sal al, 0xc3
		push rax
		ror r9d, 2
		or byte ptr [rsp + rax + 0x78260106], 0x27
		movsx edi, sil
		dec r9d
		rol r9d, 3
		cdqe
		and ecx, eax
		mov qword ptr [rsp + rax + 0x78260100], r10
		sub di, ax
		push rcx
		xor dword ptr [rsp + rax + 0x78260108], r9d
		call 0x7ffb72d6c847
375: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
376: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
377: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
378: UB addr = 7ffb72ab43e7 with ID: 125 yields:
		mov eax, 0xbc205814
		dec cx
		mov rcx, qword ptr [r8]
		mov rdi, qword ptr [rcx]
		jne 0x7ffb72c476f5
379: UB addr = 7ffb72a26d8d with ID: 126 yields:
		cqo
		xor r9, qword ptr [rsp + rcx - 0x5814]
		not r11d
		mov esi, dword ptr [rsp + rdx + 4]
		jns 0x7ffb72d84dfb
380: UB addr = 7ffb72a02498 with ID: 127 yields:
		call 0x7ffb72cc9702
381: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
382: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
383: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
384: UB addr = 7ffb729e4f2f with ID: 128 yields:
		movsx edx, di
		mov r11d, edx
		movzx edi, byte ptr [rdi + rbx - 0x78a2de1c]
		sub r11d, 0xc50b6183
		lea r9, [r11*4 - 0x5d40cdd8]
		not edx
		xor dil, r10b
		btc r9, rdx
		not dx
		sbb dil, 4
		rol dl, 0xa1
		push r9
		xor dil, r9b
		push r9
		neg dil
		add qword ptr [rsp + rdx - 0xde33], r9
		and word ptr [rsp + rdx - 0xde35], r11w
		lea rcx, [r11*8 + 0x109e031]
		inc dil
		add qword ptr [rsp + rdx*4 - 0x378d8], 0x13a995a7
		and r11w, 0x312
		sub dx, 0x6b5
		xor r10b, dil
		lea rdi, [rsp + rdi + 0x10]
		btc r9w, r11w
		jae 0x7ffb72ca928c
385: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
386: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
387: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
388: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
389: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
390: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
391: UB addr = 7ffb728ee87c with ID: 129 yields:
		mov dword ptr [r8 + rcx*2 - 0x82], eax
		mov eax, 0xc48b9f19
		lea r9, [r8 + rcx*2 - 0x82]
		cbw
		mov rdx, r9
		movsx edi, word ptr [rsp + rcx*2 - 0x7d]
		movzx r9d, ax
		dec dword ptr [rsp + rcx*4 - 0x103]
		mov eax, dword ptr ss:[rdx + rcx - 0x43]
		mov qword ptr [rsp + rcx - 0x43], 0x7c968f06
		jge 0x7ffb72e5eb9e
392: UB addr = 7ffb728bb33d with ID: 130 yields:
		mov r9d, dword ptr [r8]
		mov esi, 0x53341499
		movzx edx, si
		push rsi
		mov eax, dword ptr [r8 + rsi - 0x53341495]
		not r9d
		ror rdx, 0xbf
		not eax
		mov r11d, esi
		lea rcx, [r11 + r11*4 + 0x5e14ada6]
		or r9d, eax
		mov dword ptr [r8 + rdx*4 - 0xa4c4], r9d
		call 0x7ffb72dafb37
393: UB addr = 7ffb72a374b0 with ID: 131 yields:
		xor eax, r10d
		movzx esi, dl
		ror rsi, cl
		mov edi, r9d
		sbb eax, 0xfc81ef17
		neg eax
		dec eax
		btc rdi, rsi
		btr rcx, rsi
		neg eax
		call 0x7ffb72dff7c1
394: UB addr = 7ffb72a314fd with ID: 132 yields:
		mov esi, 0xda2ca506
		not sil
		mov dil, byte ptr [rbx + rdi - 6]
		movsx r9d, si
		xor dil, r10b
		ror dil, 1
		movzx r11d, si
		not dil
		xchg rsi, r11
		mov eax, esi
		bts si, 0x15
		dec dil
		sar r11d, 0xd4
		and sil, r11b
		xor dil, 0x30
		sar r11, 0x5f
		xor r10b, dil
		bswap esi
		add rdi, rsp
		mov ecx, 0x578ee096
		mov edx, dword ptr [rdi + r11*2 - 2]
		rol r9, cl
		shl sil, 0x24
		sal r9b, 0x26
		mov dword ptr [r8 + r11*2 - 6], edx
		mov edi, dword ptr [rbx + r11*2 - 1]
		btc r11w, 0x22
		lea rdx, [rsi + r9*2 + 0x5a1bca8d]
		xor edi, r10d
		ror edi, 3
		lea rcx, [rdx*2 + 0xf2bd0ab]
		shr rax, 0xcf
		adc edi, eax
		neg edi
		xor edi, 0x843f2b8e
		call 0x7ffb72c8425d
395: UB addr = 7ffb72a393ae with ID: 133 yields:
		movsxd rcx, ecx
		adc rbp, rcx
		mov r11d, dword ptr [rdx + rbx + 4]
		xor r11d, r10d
		not r11d
		rol r11d, 2
		inc sil
		xor rdx, qword ptr [rsp + rdx + 4]
		xor r11d, 0x84bdb4a7
		push rdi
		xor di, dx
		bswap r11d
		sal r9w, 0x6e
		lea r11d, [r11 + r9*2 - 0x3dc0d21d]
		pop rax
		xor word ptr [rsp + rdi + 0xe], ax
		mov qword ptr [rsp + rdi + 0x10], r10
		cwd
		not di
		mov dword ptr [rsp + rdi - 0xfff7], edi
		xor dword ptr [rsp + rdi*2 - 0x1ffee], r11d
		or rdx, qword ptr [rsp + rdi*2 - 0x1fffa]
		shl si, 0x84
		movsx ecx, word ptr [rsp + rdi - 0xfff6]
		mov r10, qword ptr [rsp + rdi*2 - 0x1ffee]
		rol qword ptr [rsp + rdi - 0xfffc], 0xa0
		push rdx
		mov dword ptr [r8 + rdi*2 - 0x20002], r11d
		or r9w, ax
		mov r11, qword ptr [rbx + rdi*2 - 0x1fff6]
		lea rbx, [rdi + rbx - 0xffef]
		rol word ptr [rsp + rdi*8 - 0x7fff4], 0xcd
		cbw
		cmovb rdi, qword ptr [rsp + rdi - 0xffef]
		xor r11, r10
		add word ptr [rsp + rax*2 + 7], cx
		neg r11
		btr rsi, rdi
		lea r11, [r11 + rax*2 + 0x4e3c2026]
		sbb dl, 0x83
		sar r9w, 0x2d
		rol r11, 2
		xadd qword ptr [rsp + rax + 0x10], r9
		lea r11, [r11 + rax*2 - 0x10804886]
		not r11
		xor r10, r11
		add dword ptr [rsp + 0x11], edx
		mov qword ptr [r8 - 0xc], r11
		sub rcx, rcx
		mov r11d, dword ptr [rsp + rcx*2 + 0x12]
		and rsi, qword ptr [rsp + rcx*4]
		lea r8, [r8 + rcx*4 - 0xc]
		and dword ptr [rsp + rcx*4], edx
		sar dword ptr [rsp + rcx + 0x14], 0xdc
		pop r9
		pop rax
		pop rax
		pop r9
		jns 0x7ffb72b05b5c
396: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
397: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
398: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
399: UB addr = 7ffb728c140b with ID: 134 yields:
		lea rbx, [rbx + rdx + 6]
		xor sil, r10b
		lea rcx, [r11*2 - 0x116eba7f]
		inc dword ptr [rsp + r11 - 0x13a48b17]
		rol sil, 1
		lea rax, [r11*8 - 0x606607ec]
		rol rdi, 0x74
		neg sil
		cbw
		xchg byte ptr [rsp + r11*2 - 0x27491648], al
		dec sil
		rol sil, 1
		or cl, byte ptr [rsp + r11 - 0x13a48b1e]
		or cl, byte ptr [rsp + r11*2 - 0x27491658]
		inc sil
		xor r10b, sil
		neg r11
		adc word ptr [rsp + r11 + 0x13a48b41], 0xff99
		lea rsi, [rsp + rsi + 0x20]
		shr di, 0xe3
		sub cl, 0x2a
		mov r11, qword ptr [rsi + r11*2 + 0x27491666]
		sub byte ptr [rsp + rdx + 0xc], dil
		and dword ptr [rsp + rdx*2 + 0x1c], 0x6ea3f432
		mov qword ptr [rsp + rdx], rcx
		mov qword ptr [r8 + rdx - 4], r11
		lea r8, [rdx + r8 - 4]
		pop rax
		pop rdi
		pop r9
		pop rdx
		ja 0x7ffb72b05b5c
400: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
401: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
402: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
403: UB addr = 7ffb72a9638e with ID: 135 yields:
		add esi, eax
		add rbp, rcx
		xor r11, qword ptr [r11 + rbx + 5]
		sub rax, 0x7e84b31a
		jb 0x7ffb72de4ccb
404: UB addr = 7ffb72a963a5 with ID: 136 yields:
		add rax, -0x2dc14b7a
		lea rbx, [rbx + rdi + 0x2ed33ca4]
		movsx ecx, r9b
		xor cx, 0xe4a3
		xor r11, r10
		cwde
		neg si
		bswap r11
		add r9, rcx
		dec r11
		call 0x7ffb72cb8221
405: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
406: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
407: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
408: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
409: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
410: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
411: UB addr = 7ffb72b7efa4 with ID: 137 yields:
		mov rdx, qword ptr [r8]
		mov r9d, 0xe32af400
		mov r11, qword ptr [r8 + 8]
		lea rsi, [r9 + r9 - 0x6bc79800]
		add r8, 0x10
		movsx eax, r9b
		push rsi
		push rsi
		mov qword ptr ss:[rdx + rax*4], r11
		mov r9d, dword ptr [rax + rbx]
		movzx ecx, si
		and dword ptr [rsp + rax + 7], 0x2305bab
		dec dword ptr [rsp + rax + 2]
		lea rbx, [rbx + rax*8 + 4]
		bts esi, ecx
		xor r9d, r10d
		bswap rcx
		not r9d
		ror r9d, 1
		sal cl, 0xc6
		setne sil
		xor r9d, 0xc59adc0d
		sar esi, 0x59
		sbb r9d, 0xbeb4dda3
		pop rdx
		not r9d
		cwde
		movsx edi, si
		dec r9d
		cqo
		dec dl
		mov qword ptr [rsp + rsi*2 - 0x5a], r10
		push rsi
		mov r11d, edx
		xor dword ptr [rsp + rsi*4 - 0xac], r9d
		mov r10, qword ptr [rsp + rsi - 0x25]
		sal al, 0xe1
		jno 0x7ffb72c65445
412: UB addr = 7ffb72a5dcd6 with ID: 138 yields:
		mov qword ptr [rsp + rdi*4 + 0x20], r10
		call 0x7ffb72eff0f9
413: UB addr = 7ffb729e6621 with ID: 139 yields:
		mov r10, qword ptr [rsp + rdi + 0x20]
		sal sil, 0xa1
		movsxd r9, r9d
		inc rcx
		push rdx
		not dx
		adc rbp, r9
		mov qword ptr [rsp + rdi*8], rbp
		ret 0x28
414: UB addr = 7ffb72a0fd93 with ID: 140 yields:
		movsx r9d, si
		movzx ecx, r9b
		and r9d, eax
		not r9b
		push r9
		lea r11, [rcx + r11 - 0x7ebc63d6]
		pop rax
		xor r10, r11
		mov qword ptr [r8 + rcx - 0x3b], r11
		mov esi, dword ptr [rcx + rbx - 0x2b]
		cdq
		and r9b, 0x39
		xor esi, r10d
		call 0x7ffb72bef813
415: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
416: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
417: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
418: UB addr = 7ffb72ab43e7 with ID: 125 yields:
		mov eax, 0xbc205814
		dec cx
		mov rcx, qword ptr [r8]
		mov rdi, qword ptr [rcx]
		jne 0x7ffb72c476f5
419: UB addr = 7ffb72a26d8d with ID: 126 yields:
		cqo
		xor r9, qword ptr [rsp + rcx - 0x5814]
		not r11d
		mov esi, dword ptr [rsp + rdx + 4]
		jns 0x7ffb72d84dfb
420: UB addr = 7ffb72a0fd93 with ID: 140 yields:
		movsx r9d, si
		movzx ecx, r9b
		and r9d, eax
		not r9b
		push r9
		lea r11, [rcx + r11 - 0x7ebc63d6]
		pop rax
		xor r10, r11
		mov qword ptr [r8 + rcx - 0x3b], r11
		mov esi, dword ptr [rcx + rbx - 0x2b]
		cdq
		and r9b, 0x39
		xor esi, r10d
		call 0x7ffb72bef813
421: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
422: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
423: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
424: UB addr = 7ffb72ab43e7 with ID: 125 yields:
		mov eax, 0xbc205814
		dec cx
		mov rcx, qword ptr [r8]
		mov rdi, qword ptr [rcx]
		jne 0x7ffb72c476f5
425: UB addr = 7ffb72a26d8d with ID: 126 yields:
		cqo
		xor r9, qword ptr [rsp + rcx - 0x5814]
		not r11d
		mov esi, dword ptr [rsp + rdx + 4]
		jns 0x7ffb72d84dfb
426: UB addr = 7ffb7298bf61 with ID: 141 yields:
		mov rdi, r8
		mov edx, 0xdc3ab90e
		mov r11d, 0x28046523
		shr r11d, 0xc7
		mov qword ptr [r8 + r11*2 - 0xa0119c], rdi
		movzx esi, word ptr [r11 + rbx - 0x5008ca]
		lea rax, [rdx*2 - 0x4ffc2676]
		mov ecx, r11d
		xor si, r10w
		mov edi, 0x3895853b
		add si, 0x2b2f
		mov r9d, ecx
		ror si, 1
		add r11, -0x1dfc4eca
		not r9b
		sbb si, 0x3c00
		call 0x7ffb72c6a757
427: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
428: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
429: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
430: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
431: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
432: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
433: UB addr = 7ffb72a374b0 with ID: 131 yields:
		xor eax, r10d
		movzx esi, dl
		ror rsi, cl
		mov edi, r9d
		sbb eax, 0xfc81ef17
		neg eax
		dec eax
		btc rdi, rsi
		btr rcx, rsi
		neg eax
		call 0x7ffb72dff7c1
434: UB addr = 7ffb72a4224e with ID: 142 yields:
		mov qword ptr [rsp + rdi*2 - 0x735c9e54], rax
		movsxd rdx, edx
		push rdi
		xchg byte ptr [rsp + rax*2 - 0x1a6e6], dil
		add rbp, rdx
		pop rax
		movzx esi, al
		sub r9, qword ptr [rsp + rax*2 - 0x735c9e54]
		mov edi, dword ptr [rbx + rdi - 0x39ae4f73]
		lea rbx, [rbx + rax - 0x39ae4f22]
		call 0x7ffb729dd9dd
435: UB addr = 7ffb729dd9dd with ID: 143 yields:
		mov qword ptr [rsp + rax - 0x39ae4f22], r9
		adc qword ptr [rsp + rax - 0x39ae4f22], 0x5c25a903
		xor edi, r10d
		mov edx, 0xa72c34be
		sal dword ptr [rsp + rax - 0x39ae4f22], 0x57
		ror edi, 2
		bswap edi
		cwde
		ror dword ptr [rsp + rax*4 - 0x13c9e], 0x90
		inc edi
		sub cx, r9w
		xadd qword ptr [rsp + rax - 0x4f22], rdx
		rol edi, 2
		neg edi
		and dx, 0xc68b
		xchg byte ptr [rsp + rax*4 - 0x13c9f], r9b
		mov qword ptr [rsp + rax*2 - 0x9e4c], r10
		bswap rdx
		mov qword ptr [rsp + rsi - 0x2a], rdx
		xor dword ptr [rsp + rax*4 - 0x13ca0], edi
		and byte ptr [rsp + rsi - 0x24], 0x32
		mov r10, qword ptr [rsp + rax - 0x4f22]
		mov dword ptr [r8 + rax*4 - 0x13ca8], edi
		jb 0x7ffb72b533be
436: UB addr = 7ffb729dda68 with ID: 144 yields:
		mov qword ptr [rsp + rax - 0x4f2a], rbp
		ret 8
437: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
438: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
439: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
440: UB addr = 7ffb72a374b0 with ID: 131 yields:
		xor eax, r10d
		movzx esi, dl
		ror rsi, cl
		mov edi, r9d
		sbb eax, 0xfc81ef17
		neg eax
		dec eax
		btc rdi, rsi
		btr rcx, rsi
		neg eax
		call 0x7ffb72dff7c1
441: UB addr = 7ffb72a681b2 with ID: 145 yields:
		mov ecx, dword ptr [rbx]
		mov esi, 0xf3b40e3a
		xor ecx, r10d
		rol esi, 0x25
		jae 0x7ffb72900871
442: UB addr = 7ffb72900871 with ID: 146 yields:
		bswap esi
		ror ecx, 1
		mov edi, 0xf40b6f93
		movzx r11d, dil
		xor ecx, 0xfaef885
		lea rax, [r11*4 - 0x63db297e]
		cbw
		inc ecx
		bswap ecx
		ror sil, 0x83
		sar sil, 0x84
		lea ecx, [rcx + rax*2 - 0x56b1db4]
		mov edx, eax
		xchg edi, esi
		push r10
		cmovae rax, rdx
		xor dword ptr [rsp + r11*2 - 0x126], ecx
		pop r10
		mov r9d, 0x7ea7ad17
		add si, r9w
		shl r9d, 0x2a
		movsxd rcx, ecx
		push rdx
		adc rbp, rcx
		call 0x7ffb72a71121
443: UB addr = 7ffb72a71121 with ID: 147 yields:
		mov eax, dword ptr [r8 + r11*2 - 0x126]
		xchg edi, esi
		mov esi, dword ptr [r8 + rsi - 0x4ec781f8]
		or eax, esi
		shr r11d, 0xb
		not r11b
		not eax
		sar qword ptr [rsp + r11*4 - 0x3f4], 0xa3
		movzx ecx, r9w
		mov dword ptr [r8 + r11*2 - 0x1fa], eax
		dec dil
		not r11b
		jp 0x7ffb729bf974
444: UB addr = 7ffb72a7115f with ID: 148 yields:
		mov eax, dword ptr [r11 + rbx + 4]
		push r9
		lea rbx, [r11 + rbx + 8]
		btr r9w, 0xaa
		sal r11w, 0x22
		xor eax, r10d
		mov qword ptr [rsp + r11 + 8], r9
		call 0x7ffb729d2d09
445: UB addr = 7ffb729d2d09 with ID: 149 yields:
		shl r11w, 0x62
		sbb edx, r9d
		pop rsi
		not word ptr [rsp + r11 + 0xd]
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
446: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
447: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
448: UB addr = 7ffb72a374b0 with ID: 131 yields:
		xor eax, r10d
		movzx esi, dl
		ror rsi, cl
		mov edi, r9d
		sbb eax, 0xfc81ef17
		neg eax
		dec eax
		btc rdi, rsi
		btr rcx, rsi
		neg eax
		call 0x7ffb72dff7c1
449: UB addr = 7ffb7298e7e3 with ID: 170 yields:
		mov edx, 0x10003f89
		mov eax, edx
		mov r9d, dword ptr [rbx + rdx*2 - 0x20007f12]
		movsx r11d, ax
		lea rbx, [rbx + rdx*4 - 0x4000fe20]
		not r11w
		lea rsi, [r11 + r11 - 0x4bf67c5e]
		xor r9d, r10d
		neg r9d
		shr rsi, 0xcc
		sbb rdx, rdx
		movsx ecx, al
		dec r9d
		bswap r9d
		lea r9d, [r9 + rdx + 0xdb9523b]
		ror rsi, cl
		push r10
		lea r10, [rdx + rsi + 0x491b9297]
		bts rdx, rsi
		xor dword ptr [rsp + rax - 0x10003f89], r9d
		add dil, r9b
		mov qword ptr [rsp + 0x18], r10
		bts r11w, cx
		xadd ecx, edx
		xor dword ptr [rsp + 0x18], eax
		movzx esi, cl
		mov r10, qword ptr [rsp + rsi - 0xe7]
		movsxd rax, eax
		sub si, di
		add rbp, rax
		mov qword ptr [rsp + rsi*4 - 0x39ed0], rcx
		or sil, 0xb1
		pop rax
		shl ecx, 0x78
		lea rbx, [rbx + rsi*2 - 0x1cf68]
		shl edi, 0x50
		mov eax, r11d
		shl rax, 0x3c
		cwde
		xchg word ptr [rsp + rdi*4 - 0x6513fff0], r11w
		push rsi
		xor byte ptr [rsp + rdi - 0x1944ffff], 1
		lea r9, [rdi + r9 + 0xbd3e1ad]
		xchg esi, edx
		shr rax, 0x3d
		rol r9, 7
		xor r10, r9
		sar dx, 0xa8
		dec r11b
		mov qword ptr [r8 + rdx*4 - 0x3ffa4], r9
		lea r8, [r8 + rdx - 0xffef]
		mov rdi, qword ptr [rsp + 8]
		add rdi, 0x11d958
		jmp rdi
450: UB addr = 7ffb7298dd18 with ID: 151 yields:
		mov r11, qword ptr [r8]
		call 0x7ffb72e7a898
451: UB addr = 7ffb729ed731 with ID: 152 yields:
		xchg ax, r9w
		ror r11d, 3
		mov qword ptr [rsp + rdi*2], rcx
		sal byte ptr [rsp + rdi + 7], 0x81
		adc r11d, edx
		inc dx
		shr r9, 0xb6
		sar qword ptr [rsp + r9], cl
		rol r11d, 3
		neg qword ptr [rsp + r9]
		sub r9w, word ptr [rsp + r9*2 + 5]
		not r11d
		mov qword ptr [rsp + r9*8 - 8], r10
		movsx esi, cx
		xor dword ptr [rsp + r9 - 1], r11d
		or eax, esi
		xchg rsi, rdx
		pop r10
		movsxd r11, r11d
		cdqe
		add rbp, r11
		mov r9, qword ptr [rbx + r9*8 - 2]
		movsx r11d, cx
		sar dil, 0x66
		dec cx
		xor r9, r10
		call 0x7ffb72cbd11c
452: UB addr = 7ffb729d6cfd with ID: 153 yields:
		lea rdi, [rsp + rdi + 0x18]
		mov rcx, qword ptr [rcx + rdi - 0x107405]
		xchg rax, rsi
		shl word ptr [rsp + rsi*2 + 0x1c002], 6
		mov qword ptr [r8 + rsi + 0xdfe4], rcx
		lea r8, [rsi + r8 + 0xdfe4]
		cqo
		mov qword ptr [rsp + rsi + 0xdff6], rax
		pop rax
		pop rax
		pop rax
		js 0x7ffb72b05b5c
453: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
454: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
455: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
456: UB addr = 7ffb72998036 with ID: 154 yields:
		add rbp, rax
		lea rax, [r11 + rsi*4 - 0x5ccb1bdd]
		mov qword ptr [rsp + rdi], rbp
		ret
457: UB addr = 7ffb729208df with ID: 155 yields:
		xor al, 0x8f
		neg al
		xchg di, r9w
		neg rdi
		ror r9w, 0xab
		dec al
		add r11d, esi
		xor al, 0x25
		neg edi
		setge cl
		rol al, 1
		shl sil, 0x22
		or sil, cl
		xor r10b, al
		btc cx, si
		bswap rdi
		jae 0x7ffb72c85aec
458: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
459: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
460: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
461: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
462: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
463: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
464: UB addr = 7ffb72a0fd93 with ID: 140 yields:
		movsx r9d, si
		movzx ecx, r9b
		and r9d, eax
		not r9b
		push r9
		lea r11, [rcx + r11 - 0x7ebc63d6]
		pop rax
		xor r10, r11
		mov qword ptr [r8 + rcx - 0x3b], r11
		mov esi, dword ptr [rcx + rbx - 0x2b]
		cdq
		and r9b, 0x39
		xor esi, r10d
		call 0x7ffb72bef813
465: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
466: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
467: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
468: UB addr = 7ffb72abd8da with ID: 156 yields:
		xchg r11, rdi
		pop r10
		mov ecx, 0x1faa9a97
		lea rdx, [rsp + rdx + 0x18]
		mov qword ptr [rsp + 8], rcx
		mov qword ptr [rdx], rdi
		mov r9d, dword ptr [rbx + 1]
		mov esi, ecx
		cbw
		bts rcx, 0xa2
		xor r9d, r10d
		mov qword ptr [rsp + 8], rax
		inc r9d
		cdqe
		sal al, 0xc3
		push rax
		ror r9d, 2
		or byte ptr [rsp + rax + 0x78260106], 0x27
		movsx edi, sil
		dec r9d
		rol r9d, 3
		cdqe
		and ecx, eax
		mov qword ptr [rsp + rax + 0x78260100], r10
		sub di, ax
		push rcx
		xor dword ptr [rsp + rax + 0x78260108], r9d
		call 0x7ffb72d6c847
469: UB addr = 7ffb729e3083 with ID: 157 yields:
		mov edi, dword ptr [rbx]
		xor edi, r10d
		mov r11d, 0x8b0da487
		movsx ecx, r11b
		inc edi
		movzx r9d, cl
		ror edi, 2
		call 0x7ffb72927726
470: UB addr = 7ffb72927726 with ID: 158 yields:
		dec edi
		ror r11d, 0x93
		rol edi, 3
		mov edx, r11d
		mov qword ptr [rsp + r9*2 - 0x10e], r10
		mov esi, 0x5498099d
		xor dword ptr [rsp + r9*2 - 0x10e], edi
		btr r9w, si
		pop r10
		movsxd rdi, edi
		adc rbp, rdi
		dec dl
		movsx edi, cx
		mov rcx, qword ptr [r9 + r8 - 0x87]
		movzx r11d, byte ptr [rbx + r9 - 0x83]
		sal rsi, 0x16
		sub dx, r9w
		btc esi, 0xba
		xor r11b, r10b
		inc r11b
		call 0x7ffb72dd1f89
471: UB addr = 7ffb72a1b24c with ID: 159 yields:
		mov r11d, 0xe09c309
		ror r11d, 0xcc
		call 0x7ffb72deba0f
472: UB addr = 7ffb7293ba55 with ID: 160 yields:
		xor dil, r10b
		dec dil
		push r9
		xor dil, 0xad
		movzx r11d, sil
		pop rcx
		movsx eax, word ptr [rsp + rdx*8 - 0x7ffdc]
		add dil, 0x28
		xor dil, al
		sal qword ptr [rsp + rdx - 0xfff8], cl
		inc r9d
		xchg dword ptr [rsp + rdx*8 - 0x7ffbf], eax
		xor r10b, dil
		sub qword ptr [rsp + rsi*4 - 0x34d04f9c], rdx
		jno 0x7ffb72cf6e71
473: UB addr = 7ffb7297b66e with ID: 161 yields:
		not edx
		mov byte ptr [rsp + rsi*2 - 0xa1fe1c], cl
		push rax
		and r11w, si
		dec edx
		movzx r9d, si
		call 0x7ffb72a208a3
474: UB addr = 7ffb72a208a3 with ID: 162 yields:
		mov qword ptr [rsp + rsi*2 - 0xa1fe12], r10
		mov qword ptr [rsp + rsi*8 - 0x287f8a8], rax
		xor dword ptr [rsp + rsi*8 - 0x287f890], edx
		shl r11b, 0xc2
		mov r10, qword ptr [rsp + rsi - 0x50fefd]
		movsxd rdx, edx
		push r9
		call 0x7ffb72c1acca
475: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
476: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
477: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
478: UB addr = 7ffb7296570d with ID: 163 yields:
		mov qword ptr [rsp + r11*2 - 0x2270e272], -0x2951d0f6
		cbw
		lea rsi, [rsp + rsi + 0x10]
		sal rcx, cl
		mov rcx, qword ptr [rdi + rsi - 0x1bb]
		jne 0x7ffb72c1bde9
479: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
480: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
481: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
482: UB addr = 7ffb729fc87f with ID: 164 yields:
		mov qword ptr [rsp + rdx*2], 0x240e0e1d
		mov r9, qword ptr [rsi + rcx - 0x70ab8ba2]
		mov qword ptr [rdx + r8 - 0x10], r9
		pop rdi
		movsx r9d, word ptr [rsp + rsi - 0x70ab8ba0]
		lea r8, [rsi + r8 - 0x70ab8bb2]
		xchg byte ptr [rsp + rsi - 0x70ab8b9b], ah
		mov ecx, dword ptr [rdi + rbx - 0x240e0e1c]
		sal dil, 0x44
		lea rbx, [rbx + rdi*2 - 0x481c1d9b]
		xor ecx, r10d
		sar rdx, 0x3e
		lea ecx, [rcx + rdx*2 - 0x3c195d0c]
		neg ecx
		rol sil, 0x65
		and dil, dl
		ror dword ptr [rsp + rdi - 0x240e0dfc], 0xd8
		lea ecx, [rcx + rdx*8 - 0x64801e2b]
		bswap ecx
		sbb word ptr [rsp + rsi - 0x70ab8b53], 0xe30b
		sbb di, dx
		inc ecx
		sal dil, 0x45
		and r9d, 0xfd0f29bd
		not ecx
		push rsi
		cdqe
		dec ecx
		xadd dword ptr [rsp + rdi*2 - 0x481c1bb8], esi
		sete byte ptr [rsp + rsi - 0x77dbc50c]
		mov qword ptr [rsp + rdi - 0x240e0dd8], r10
		dec dword ptr [rsp + rdi - 0x240e0ddf]
		xor dword ptr [rsp + rsi - 0x77dbc510], ecx
		mov r10, qword ptr [rsp + rsi - 0x77dbc510]
		push r9
		sub dword ptr [rsp + rsi - 0x77dbc50f], 0x13aaa31a
		movsxd rcx, ecx
		add rbp, rcx
		pop r9
		pop r9
		pop r9
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
483: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
484: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
485: UB addr = 7ffb7296570d with ID: 163 yields:
		mov qword ptr [rsp + r11*2 - 0x2270e272], -0x2951d0f6
		cbw
		lea rsi, [rsp + rsi + 0x10]
		sal rcx, cl
		mov rcx, qword ptr [rdi + rsi - 0x1bb]
		jne 0x7ffb72c1bde9
486: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
487: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
488: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
489: UB addr = 7ffb72a825df with ID: 165 yields:
		movzx r9d, word ptr [rbx]
		mov r11d, 0x1d3c53b5
		movsx edi, r11w
		xor r9w, r10w
		ror r9w, 1
		push rdi
		xor r9w, 0x289b
		ror r9w, 1
		sal word ptr [rsp + r11 - 0x1d1c53b3], 0xc2
		inc r9w
		movsx eax, dil
		neg r9w
		shr r11, 0x55
		mov edx, 0x27140bb2
		xor r10w, r9w
		lea rdi, [rdx*8 - 0x166b7743]
		lea r9, [rsp + r9 + 8]
		mov r11, qword ptr [r11 + r9 - 0xe8]
		btr eax, edi
		rol dil, 0xa2
		sal rdx, 0x31
		mov qword ptr [r8 - 8], r11
		bts ax, 0x3c
		xor qword ptr [rsp], 0x75021d29
		mov r11d, dword ptr [rbx + 2]
		setnp byte ptr [rsp + 1]
		mov ecx, edx
		xor word ptr [rsp + rcx*2 + 6], dx
		xor r11d, r10d
		call 0x7ffb72d84612
490: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
491: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
492: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
493: UB addr = 7ffb7296570d with ID: 163 yields:
		mov qword ptr [rsp + r11*2 - 0x2270e272], -0x2951d0f6
		cbw
		lea rsi, [rsp + rsi + 0x10]
		sal rcx, cl
		mov rcx, qword ptr [rdi + rsi - 0x1bb]
		jne 0x7ffb72c1bde9
494: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
495: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
496: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
497: UB addr = 7ffb7296570d with ID: 163 yields:
		mov qword ptr [rsp + r11*2 - 0x2270e272], -0x2951d0f6
		cbw
		lea rsi, [rsp + rsi + 0x10]
		sal rcx, cl
		mov rcx, qword ptr [rdi + rsi - 0x1bb]
		jne 0x7ffb72c1bde9
498: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
499: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
500: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
501: UB addr = 7ffb72a152c8 with ID: 166 yields:
		mov qword ptr [rsp + rdi*8 - 0x200], -0x63fbfb49
		not ax
		add ax, 0x7616
		sub byte ptr [rsp + rdi*2 - 0x7e], sil
		not ax
		rol byte ptr [rsp + rdi - 0x3c], 0x22
		xadd qword ptr [rsp + rdi - 0x40], rdi
		neg ax
		xor r10w, ax
		xor rdi, rsi
		lea rax, [rsp + rax + 8]
		shr qword ptr [rsp], 0xc7
		mov r9, qword ptr [rax]
		mov qword ptr [r8 - 8], r9
		setbe dil
		push rdi
		movzx r9d, word ptr [rbx + 2]
		shr rdi, 0x88
		xor r9w, r10w
		add dword ptr [rsp + 8], 0xee16b905
		pop rcx
		not r9w
		call 0x7ffb72a88e54
502: UB addr = 7ffb72a88e54 with ID: 167 yields:
		adc word ptr [rsp + 8], 0x28b3
		adc r9w, 0x2e2a
		rol r9w, cl
		movzx edx, dil
		dec r9w
		not dword ptr [rsp + rdx*2 - 0x12f]
		pop rsi
		neg rdi
		xor r10w, r9w
		sal dword ptr [rsp + rdx - 0x9c], 0xbc
		mov word ptr [rdx + r8 - 0xa6], r9w
		movzx esi, cl
		mov ecx, dword ptr [rbx + rdx*8 - 0x4dc]
		pop r9
		xor ecx, r10d
		sar edx, 0x6b
		neg ecx
		inc dl
		xadd rdx, rdi
		ror ecx, 1
		lea rax, [rdx + rdx*2 + 0x222550c]
		not ecx
		sub ecx, 0xa6857537
		bswap r9d
		push r10
		xor dword ptr [rsp + rsi*2 - 2], ecx
		pop r10
		movsxd rcx, ecx
		sar eax, 0xd3
		setnp al
		adc rbp, rcx
		cdq
		neg rdx
		cwde
		mov rdi, qword ptr [rbx + rdx*2 + 8]
		lea r11, [rsi + r9*4 - 0x184546fc]
		and dx, 0xcb0a
		push rax
		lea rbx, [rbx + rdx*2 + 0x10]
		xor rdi, r10
		pop rdx
		neg rdi
		add rdi, rdx
		btc eax, 0x33
		sub dx, r11w
		movsx ecx, ax
		ror rdi, 4
		add rdi, rsi
		shr al, 0xc3
		neg rdi
		sar ax, cl
		push rsi
		xor r10, rdi
		mov qword ptr [r8 + rdx*2 - 0x8d0a], rdi
		inc dword ptr [rsp + rdx*2 - 0x8cf7]
		lea r8, [r8 + rdx*4 - 0x11a02]
		or al, 0x36
		pop rsi
		jns 0x7ffb72b05b5c
503: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
504: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
505: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
506: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
507: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
508: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
509: UB addr = 7ffb72a374b0 with ID: 131 yields:
		xor eax, r10d
		movzx esi, dl
		ror rsi, cl
		mov edi, r9d
		sbb eax, 0xfc81ef17
		neg eax
		dec eax
		btc rdi, rsi
		btr rcx, rsi
		neg eax
		call 0x7ffb72dff7c1
510: UB addr = 7ffb72a4224e with ID: 142 yields:
		mov qword ptr [rsp + rdi*2 - 0x735c9e54], rax
		movsxd rdx, edx
		push rdi
		xchg byte ptr [rsp + rax*2 - 0x1a6e6], dil
		add rbp, rdx
		pop rax
		movzx esi, al
		sub r9, qword ptr [rsp + rax*2 - 0x735c9e54]
		mov edi, dword ptr [rbx + rdi - 0x39ae4f73]
		lea rbx, [rbx + rax - 0x39ae4f22]
		call 0x7ffb729dd9dd
511: UB addr = 7ffb729dd9dd with ID: 143 yields:
		mov qword ptr [rsp + rax - 0x39ae4f22], r9
		adc qword ptr [rsp + rax - 0x39ae4f22], 0x5c25a903
		xor edi, r10d
		mov edx, 0xa72c34be
		sal dword ptr [rsp + rax - 0x39ae4f22], 0x57
		ror edi, 2
		bswap edi
		cwde
		ror dword ptr [rsp + rax*4 - 0x13c9e], 0x90
		inc edi
		sub cx, r9w
		xadd qword ptr [rsp + rax - 0x4f22], rdx
		rol edi, 2
		neg edi
		and dx, 0xc68b
		xchg byte ptr [rsp + rax*4 - 0x13c9f], r9b
		mov qword ptr [rsp + rax*2 - 0x9e4c], r10
		bswap rdx
		mov qword ptr [rsp + rsi - 0x2a], rdx
		xor dword ptr [rsp + rax*4 - 0x13ca0], edi
		and byte ptr [rsp + rsi - 0x24], 0x32
		mov r10, qword ptr [rsp + rax - 0x4f22]
		mov dword ptr [r8 + rax*4 - 0x13ca8], edi
		jb 0x7ffb72b533be
512: UB addr = 7ffb729dda68 with ID: 144 yields:
		mov qword ptr [rsp + rax - 0x4f2a], rbp
		ret 8
513: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
514: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
515: UB addr = 7ffb72ae9fbd with ID: 168 yields:
		mov rsp, rdx
		pushfq
		mov rsi, r9
		push 0x5d811808
		ror qword ptr [rsp], 0x44
		cld
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		rep movsb byte ptr [rdi], byte ptr [rsi]
		call 0x7ffb72afe760
516: UB addr = 7ffb72afe760 with ID: 169 yields:
		mov qword ptr [rsp], -0xfcb1aee
		push -0x37eeb8fa
		push qword ptr [rsp + 0x18]
		popfq
		lea rsp, [rsp + 0x20]
		jmp rbp
517: UB addr = 7ffb72a374b0 with ID: 131 yields:
		xor eax, r10d
		movzx esi, dl
		ror rsi, cl
		mov edi, r9d
		sbb eax, 0xfc81ef17
		neg eax
		dec eax
		btc rdi, rsi
		btr rcx, rsi
		neg eax
		call 0x7ffb72dff7c1
518: UB addr = 7ffb72a681b2 with ID: 145 yields:
		mov ecx, dword ptr [rbx]
		mov esi, 0xf3b40e3a
		xor ecx, r10d
		rol esi, 0x25
		jae 0x7ffb72900871
519: UB addr = 7ffb72900871 with ID: 146 yields:
		bswap esi
		ror ecx, 1
		mov edi, 0xf40b6f93
		movzx r11d, dil
		xor ecx, 0xfaef885
		lea rax, [r11*4 - 0x63db297e]
		cbw
		inc ecx
		bswap ecx
		ror sil, 0x83
		sar sil, 0x84
		lea ecx, [rcx + rax*2 - 0x56b1db4]
		mov edx, eax
		xchg edi, esi
		push r10
		cmovae rax, rdx
		xor dword ptr [rsp + r11*2 - 0x126], ecx
		pop r10
		mov r9d, 0x7ea7ad17
		add si, r9w
		shl r9d, 0x2a
		movsxd rcx, ecx
		push rdx
		adc rbp, rcx
		call 0x7ffb72a71121
520: UB addr = 7ffb72a71121 with ID: 147 yields:
		mov eax, dword ptr [r8 + r11*2 - 0x126]
		xchg edi, esi
		mov esi, dword ptr [r8 + rsi - 0x4ec781f8]
		or eax, esi
		shr r11d, 0xb
		not r11b
		not eax
		sar qword ptr [rsp + r11*4 - 0x3f4], 0xa3
		movzx ecx, r9w
		mov dword ptr [r8 + r11*2 - 0x1fa], eax
		dec dil
		not r11b
		jp 0x7ffb729bf974
521: UB addr = 7ffb72a7115f with ID: 148 yields:
		mov eax, dword ptr [r11 + rbx + 4]
		push r9
		lea rbx, [r11 + rbx + 8]
		btr r9w, 0xaa
		sal r11w, 0x22
		xor eax, r10d
		mov qword ptr [rsp + r11 + 8], r9
		call 0x7ffb729d2d09
522: UB addr = 7ffb729d2d09 with ID: 149 yields:
		shl r11w, 0x62
		sbb edx, r9d
		pop rsi
		not word ptr [rsp + r11 + 0xd]
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
523: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
524: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
525: UB addr = 7ffb72a374b0 with ID: 131 yields:
		xor eax, r10d
		movzx esi, dl
		ror rsi, cl
		mov edi, r9d
		sbb eax, 0xfc81ef17
		neg eax
		dec eax
		btc rdi, rsi
		btr rcx, rsi
		neg eax
		call 0x7ffb72dff7c1
526: UB addr = 7ffb7298e7e3 with ID: 170 yields:
		mov edx, 0x10003f89
		mov eax, edx
		mov r9d, dword ptr [rbx + rdx*2 - 0x20007f12]
		movsx r11d, ax
		lea rbx, [rbx + rdx*4 - 0x4000fe20]
		not r11w
		lea rsi, [r11 + r11 - 0x4bf67c5e]
		xor r9d, r10d
		neg r9d
		shr rsi, 0xcc
		sbb rdx, rdx
		movsx ecx, al
		dec r9d
		bswap r9d
		lea r9d, [r9 + rdx + 0xdb9523b]
		ror rsi, cl
		push r10
		lea r10, [rdx + rsi + 0x491b9297]
		bts rdx, rsi
		xor dword ptr [rsp + rax - 0x10003f89], r9d
		add dil, r9b
		mov qword ptr [rsp + 0x18], r10
		bts r11w, cx
		xadd ecx, edx
		xor dword ptr [rsp + 0x18], eax
		movzx esi, cl
		mov r10, qword ptr [rsp + rsi - 0xe7]
		movsxd rax, eax
		sub si, di
		add rbp, rax
		mov qword ptr [rsp + rsi*4 - 0x39ed0], rcx
		or sil, 0xb1
		pop rax
		shl ecx, 0x78
		lea rbx, [rbx + rsi*2 - 0x1cf68]
		shl edi, 0x50
		mov eax, r11d
		shl rax, 0x3c
		cwde
		xchg word ptr [rsp + rdi*4 - 0x6513fff0], r11w
		push rsi
		xor byte ptr [rsp + rdi - 0x1944ffff], 1
		lea r9, [rdi + r9 + 0xbd3e1ad]
		xchg esi, edx
		shr rax, 0x3d
		rol r9, 7
		xor r10, r9
		sar dx, 0xa8
		dec r11b
		mov qword ptr [r8 + rdx*4 - 0x3ffa4], r9
		lea r8, [r8 + rdx - 0xffef]
		mov rdi, qword ptr [rsp + 8]
		add rdi, 0x11d958
		jmp rdi
527: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
528: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
529: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
530: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
531: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
532: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
533: UB addr = 7ffb72a374b0 with ID: 131 yields:
		xor eax, r10d
		movzx esi, dl
		ror rsi, cl
		mov edi, r9d
		sbb eax, 0xfc81ef17
		neg eax
		dec eax
		btc rdi, rsi
		btr rcx, rsi
		neg eax
		call 0x7ffb72dff7c1
534: UB addr = 7ffb7299b9bf with ID: 171 yields:
		xadd ecx, edi
		dec sil
		xor sil, 0x30
		xadd dil, r11b
		sbb al, dil
		xor r10b, sil
		xchg dx, r9w
		add rsi, rsp
		push rdx
		ror qword ptr [rsp + r11 - 0xf5f6], cl
		mov edi, dword ptr [r11 + rsi - 0xf5f6]
		neg dx
		mov dword ptr [r11 + r8 - 0xf5fa], edi
		xadd qword ptr [rsp + r11 - 0xf5f6], r11
		mov r9d, dword ptr [rbx + 1]
		pop r11
		adc rbx, 5
		xor r9d, r10d
		xor r11d, eax
		ror r9d, 3
		movsx edi, al
		lea rsi, [rdx*2 + 0x7c8d3833]
		inc r9d
		and eax, 0xfa907d30
		neg r9d
		xor r9d, 0x843f2b8e
		sar r11w, 0x4f
		shr esi, cl
		sal ax, 0x8d
		push r10
		bswap r11d
		xor dword ptr [rsp + rdi - 0x6a], r9d
		or r11w, 0x263a
		push rax
		mov r10, qword ptr [rsp + rdi*2 - 0xcc]
		jnp 0x7ffb72c845d5
535: UB addr = 7ffb72a393ae with ID: 133 yields:
		movsxd rcx, ecx
		adc rbp, rcx
		mov r11d, dword ptr [rdx + rbx + 4]
		xor r11d, r10d
		not r11d
		rol r11d, 2
		inc sil
		xor rdx, qword ptr [rsp + rdx + 4]
		xor r11d, 0x84bdb4a7
		push rdi
		xor di, dx
		bswap r11d
		sal r9w, 0x6e
		lea r11d, [r11 + r9*2 - 0x3dc0d21d]
		pop rax
		xor word ptr [rsp + rdi + 0xe], ax
		mov qword ptr [rsp + rdi + 0x10], r10
		cwd
		not di
		mov dword ptr [rsp + rdi - 0xfff7], edi
		xor dword ptr [rsp + rdi*2 - 0x1ffee], r11d
		or rdx, qword ptr [rsp + rdi*2 - 0x1fffa]
		shl si, 0x84
		movsx ecx, word ptr [rsp + rdi - 0xfff6]
		mov r10, qword ptr [rsp + rdi*2 - 0x1ffee]
		rol qword ptr [rsp + rdi - 0xfffc], 0xa0
		push rdx
		mov dword ptr [r8 + rdi*2 - 0x20002], r11d
		or r9w, ax
		mov r11, qword ptr [rbx + rdi*2 - 0x1fff6]
		lea rbx, [rdi + rbx - 0xffef]
		rol word ptr [rsp + rdi*8 - 0x7fff4], 0xcd
		cbw
		cmovb rdi, qword ptr [rsp + rdi - 0xffef]
		xor r11, r10
		add word ptr [rsp + rax*2 + 7], cx
		neg r11
		btr rsi, rdi
		lea r11, [r11 + rax*2 + 0x4e3c2026]
		sbb dl, 0x83
		sar r9w, 0x2d
		rol r11, 2
		xadd qword ptr [rsp + rax + 0x10], r9
		lea r11, [r11 + rax*2 - 0x10804886]
		not r11
		xor r10, r11
		add dword ptr [rsp + 0x11], edx
		mov qword ptr [r8 - 0xc], r11
		sub rcx, rcx
		mov r11d, dword ptr [rsp + rcx*2 + 0x12]
		and rsi, qword ptr [rsp + rcx*4]
		lea r8, [r8 + rcx*4 - 0xc]
		and dword ptr [rsp + rcx*4], edx
		sar dword ptr [rsp + rcx + 0x14], 0xdc
		pop r9
		pop rax
		pop rax
		pop r9
		jns 0x7ffb72b05b5c
536: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
537: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
538: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
539: UB addr = 7ffb7295c1ab with ID: 172 yields:
		mov qword ptr [rsp + rcx + 0xf9fc], rbp
		ret 8
540: UB addr = 7ffb7298aac7 with ID: 173 yields:
		inc edx
		rol di, 0x81
		shl r9d, cl
		not edx
		not r11w
		xadd r9w, r11w
		ror edx, 1
		xor edx, 0xd12ac05
		rol edi, cl
		call 0x7ffb72c184d6
541: UB addr = 7ffb72a0fd93 with ID: 140 yields:
		movsx r9d, si
		movzx ecx, r9b
		and r9d, eax
		not r9b
		push r9
		lea r11, [rcx + r11 - 0x7ebc63d6]
		pop rax
		xor r10, r11
		mov qword ptr [r8 + rcx - 0x3b], r11
		mov esi, dword ptr [rcx + rbx - 0x2b]
		cdq
		and r9b, 0x39
		xor esi, r10d
		call 0x7ffb72bef813
542: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
543: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
544: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
545: UB addr = 7ffb72a825df with ID: 165 yields:
		movzx r9d, word ptr [rbx]
		mov r11d, 0x1d3c53b5
		movsx edi, r11w
		xor r9w, r10w
		ror r9w, 1
		push rdi
		xor r9w, 0x289b
		ror r9w, 1
		sal word ptr [rsp + r11 - 0x1d1c53b3], 0xc2
		inc r9w
		movsx eax, dil
		neg r9w
		shr r11, 0x55
		mov edx, 0x27140bb2
		xor r10w, r9w
		lea rdi, [rdx*8 - 0x166b7743]
		lea r9, [rsp + r9 + 8]
		mov r11, qword ptr [r11 + r9 - 0xe8]
		btr eax, edi
		rol dil, 0xa2
		sal rdx, 0x31
		mov qword ptr [r8 - 8], r11
		bts ax, 0x3c
		xor qword ptr [rsp], 0x75021d29
		mov r11d, dword ptr [rbx + 2]
		setnp byte ptr [rsp + 1]
		mov ecx, edx
		xor word ptr [rsp + rcx*2 + 6], dx
		xor r11d, r10d
		call 0x7ffb72d84612
546: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
547: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
548: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
549: UB addr = 7ffb72ae9ba4 with ID: 174 yields:
		mov r11d, 0xd5a83fb7
		mov eax, r11d
		mov r9, qword ptr [r8]
		call 0x7ffb72ac6231
550: UB addr = 7ffb72ac6231 with ID: 175 yields:
		add r8, 8
		mov rbx, r9
		pop rsi
		neg byte ptr [rsp + rdx + 3]
		jge 0x7ffb72b88eab
551: UB addr = 7ffb72b88eab with ID: 116 yields:
		xor dword ptr [rsp + rdx*2 + 0x18], r9d
		rol word ptr [rsp + rdx*8 + 0xf], 0xa8
		mov r10, qword ptr [rsp + rdx + 0x18]
		movsxd r9, r9d
		adc dword ptr [rsp + rdx*2 + 0x10], esi
		adc rbp, r9
		mov qword ptr [rsp + rdx], rbp
		ret 0x18
552: UB addr = 7ffb72a707b5 with ID: 176 yields:
		lea rax, [rcx + rax*2 - 0x237b3d00]
		lea rcx, [rcx - 0x40ffaf73]
		dec r11b
		xor r10b, r11b
		push rax
		ror dword ptr [rsp + rdi*2], cl
		sub byte ptr [rsp + rdi + 7], al
		lea r11, [rsp + r11 + 8]
		xchg cl, sil
		movzx edx, byte ptr [rsp + rdi + 2]
		btc rcx, rdi
		mov qword ptr [r11 + rdi*4], r9
		sar rsi, 0x26
		add edi, dword ptr [rdi + rbx + 1]
		btc ecx, 0xa0
		cwde
		lea rbx, [rbx + rsi*8 + 0xd]
		sal dword ptr [rsp + rsi*2 + 0x204], cl
		adc esi, 0x9aa91b0f
		xor edi, r10d
		ror dx, cl
		inc edi
		ror byte ptr [rsp + rdx - 0x87a], 0x23
		inc byte ptr [rsp + rdx*8 - 0x43fb]
		sal qword ptr [rsp + rdx - 0x880], cl
		ror edi, 2
		xadd qword ptr [rsp + rdx - 0x880], rcx
		movzx r9d, byte ptr [rsp + rdx*2 - 0x10ff]
		jge 0x7ffb72c09547
553: UB addr = 7ffb7297b956 with ID: 177 yields:
		mov qword ptr [rsp + rdx - 0x880], r10
		xor dword ptr [rsp + rdx - 0x880], edi
		and rsi, rdx
		setb dl
		rol rsi, 0x55
		pop r10
		movsxd rdi, edi
		add rbp, rdi
		ror edx, 0x85
		jmp rbp
554: UB addr = 7ffb72aa2b33 with ID: 121 yields:
		lea rdx, [rsp + rdx + 0x18]
		mov qword ptr [rsp + 8], rcx
		mov qword ptr [rdx], rdi
		mov r9d, dword ptr [rbx + 1]
		mov esi, ecx
		cbw
		bts rcx, 0xa2
		xor r9d, r10d
		mov qword ptr [rsp + 8], rax
		inc r9d
		cdqe
		sal al, 0xc3
		push rax
		ror r9d, 2
		or byte ptr [rsp + rax + 0x78260106], 0x27
		movsx edi, sil
		dec r9d
		rol r9d, 3
		cdqe
		and ecx, eax
		mov qword ptr [rsp + rax + 0x78260100], r10
		sub di, ax
		push rcx
		xor dword ptr [rsp + rax + 0x78260108], r9d
		call 0x7ffb72d6c847
555: UB addr = 7ffb72aa2b33 with ID: 121 yields:
		lea rdx, [rsp + rdx + 0x18]
		mov qword ptr [rsp + 8], rcx
		mov qword ptr [rdx], rdi
		mov r9d, dword ptr [rbx + 1]
		mov esi, ecx
		cbw
		bts rcx, 0xa2
		xor r9d, r10d
		mov qword ptr [rsp + 8], rax
		inc r9d
		cdqe
		sal al, 0xc3
		push rax
		ror r9d, 2
		or byte ptr [rsp + rax + 0x78260106], 0x27
		movsx edi, sil
		dec r9d
		rol r9d, 3
		cdqe
		and ecx, eax
		mov qword ptr [rsp + rax + 0x78260100], r10
		sub di, ax
		push rcx
		xor dword ptr [rsp + rax + 0x78260108], r9d
		call 0x7ffb72d6c847
556: UB addr = 7ffb729facb8 with ID: 178 yields:
		not eax
		adc rdx, rcx
		sbb eax, 0x9f277b80
		ror eax, 1
		bswap eax
		bswap rcx
		dec eax
		or r9w, r11w
		or r11, rdx
		dec dx
		push r10
		xor dword ptr [rsp + rdx - 0x52962491], eax
		lea r9, [r9 + 0x69943113]
		pop r10
		inc r9
		btr rcx, r11
		mov edi, r11d
		movsxd rax, eax
		call 0x7ffb72e6154e
557: UB addr = 7ffb72ab2d96 with ID: 179 yields:
		adc rbp, rax
		mov qword ptr [rsp + rdx - 0x52962491], r9
		mov rax, qword ptr [r11 + r8 - 0x5adf2cbb]
		movzx edx, word ptr [r11 + rbx - 0x5adf2cb7]
		call 0x7ffb72dda795
558: UB addr = 7ffb72a394be with ID: 180 yields:
		pop rsi
		inc dx
		xor dx, 0xb795
		inc dx
		inc dil
		neg rdi
		neg dx
		neg qword ptr [rsp + r11 - 0x5adf2cb3]
		xor r10w, dx
		dec r11w
		call 0x7ffb72aae57f
559: UB addr = 7ffb72aae57f with ID: 181 yields:
		lea rdx, [rsp + rdx + 0x18]
		movzx esi, byte ptr [rsp + r11 - 0x5adf2ca6]
		mov qword ptr [rsp + r11 - 0x5adf2cb2], rsi
		or sil, dil
		mov qword ptr [rdx + r11 - 0x5adf2cba], rax
		sal dword ptr [rsp + rsi - 0xeb], 0x70
		mov r11, qword ptr [r8 + rsi - 0xf7]
		setns byte ptr [rsp + rsi - 0xef]
		movzx eax, di
		lea r8, [r8 + rsi*2 - 0x1ee]
		xchg dword ptr [rsp + rsi*2 - 0x1ef], esi
		inc r9w
		movzx ecx, word ptr [rax + rbx - 0x3ee0]
		not r9d
		lea rbx, [rbx + r9 - 0x70e76f35]
		xor cx, r10w
		cdq
		neg byte ptr [rsp + r9 - 0x70e7de6f]
		rol cx, 1
		neg cx
		mov qword ptr [rsp + r9 - 0x70e7de7a], -0x55d358c9
		inc cx
		xchg byte ptr [rsp + r9 - 0x70e7de65], dl
		call 0x7ffb72d17f30
560: UB addr = 7ffb72aa2b33 with ID: 121 yields:
		lea rdx, [rsp + rdx + 0x18]
		mov qword ptr [rsp + 8], rcx
		mov qword ptr [rdx], rdi
		mov r9d, dword ptr [rbx + 1]
		mov esi, ecx
		cbw
		bts rcx, 0xa2
		xor r9d, r10d
		mov qword ptr [rsp + 8], rax
		inc r9d
		cdqe
		sal al, 0xc3
		push rax
		ror r9d, 2
		or byte ptr [rsp + rax + 0x78260106], 0x27
		movsx edi, sil
		dec r9d
		rol r9d, 3
		cdqe
		and ecx, eax
		mov qword ptr [rsp + rax + 0x78260100], r10
		sub di, ax
		push rcx
		xor dword ptr [rsp + rax + 0x78260108], r9d
		call 0x7ffb72d6c847
561: UB addr = 7ffb72aa2b33 with ID: 121 yields:
		lea rdx, [rsp + rdx + 0x18]
		mov qword ptr [rsp + 8], rcx
		mov qword ptr [rdx], rdi
		mov r9d, dword ptr [rbx + 1]
		mov esi, ecx
		cbw
		bts rcx, 0xa2
		xor r9d, r10d
		mov qword ptr [rsp + 8], rax
		inc r9d
		cdqe
		sal al, 0xc3
		push rax
		ror r9d, 2
		or byte ptr [rsp + rax + 0x78260106], 0x27
		movsx edi, sil
		dec r9d
		rol r9d, 3
		cdqe
		and ecx, eax
		mov qword ptr [rsp + rax + 0x78260100], r10
		sub di, ax
		push rcx
		xor dword ptr [rsp + rax + 0x78260108], r9d
		call 0x7ffb72d6c847
562: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
563: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
564: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
565: UB addr = 7ffb72ab43e7 with ID: 125 yields:
		mov eax, 0xbc205814
		dec cx
		mov rcx, qword ptr [r8]
		mov rdi, qword ptr [rcx]
		jne 0x7ffb72c476f5
566: UB addr = 7ffb72a26d8d with ID: 126 yields:
		cqo
		xor r9, qword ptr [rsp + rcx - 0x5814]
		not r11d
		mov esi, dword ptr [rsp + rdx + 4]
		jns 0x7ffb72d84dfb
567: UB addr = 7ffb72a1b24c with ID: 159 yields:
		mov r11d, 0xe09c309
		ror r11d, 0xcc
		call 0x7ffb72deba0f
568: UB addr = 7ffb7293ba55 with ID: 160 yields:
		xor dil, r10b
		dec dil
		push r9
		xor dil, 0xad
		movzx r11d, sil
		pop rcx
		movsx eax, word ptr [rsp + rdx*8 - 0x7ffdc]
		add dil, 0x28
		xor dil, al
		sal qword ptr [rsp + rdx - 0xfff8], cl
		inc r9d
		xchg dword ptr [rsp + rdx*8 - 0x7ffbf], eax
		xor r10b, dil
		sub qword ptr [rsp + rsi*4 - 0x34d04f9c], rdx
		jno 0x7ffb72cf6e71
569: UB addr = 7ffb7297b66e with ID: 161 yields:
		not edx
		mov byte ptr [rsp + rsi*2 - 0xa1fe1c], cl
		push rax
		and r11w, si
		dec edx
		movzx r9d, si
		call 0x7ffb72a208a3
570: UB addr = 7ffb72a208a3 with ID: 162 yields:
		mov qword ptr [rsp + rsi*2 - 0xa1fe12], r10
		mov qword ptr [rsp + rsi*8 - 0x287f8a8], rax
		xor dword ptr [rsp + rsi*8 - 0x287f890], edx
		shl r11b, 0xc2
		mov r10, qword ptr [rsp + rsi - 0x50fefd]
		movsxd rdx, edx
		push r9
		call 0x7ffb72c1acca
571: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
572: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
573: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
574: UB addr = 7ffb7296570d with ID: 163 yields:
		mov qword ptr [rsp + r11*2 - 0x2270e272], -0x2951d0f6
		cbw
		lea rsi, [rsp + rsi + 0x10]
		sal rcx, cl
		mov rcx, qword ptr [rdi + rsi - 0x1bb]
		jne 0x7ffb72c1bde9
575: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
576: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
577: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
578: UB addr = 7ffb728ce691 with ID: 182 yields:
		mov esi, dword ptr [r11 + rbx - 0x18d]
		and r11, 0xffffffff9b302c25
		xor esi, r10d
		ror dword ptr [rsp + r11 - 3], 0x9c
		lea esi, [rsi + r11*2 - 0x54a32794]
		jae 0x7ffb72c03357
579: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
580: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
581: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
582: UB addr = 7ffb72a825df with ID: 165 yields:
		movzx r9d, word ptr [rbx]
		mov r11d, 0x1d3c53b5
		movsx edi, r11w
		xor r9w, r10w
		ror r9w, 1
		push rdi
		xor r9w, 0x289b
		ror r9w, 1
		sal word ptr [rsp + r11 - 0x1d1c53b3], 0xc2
		inc r9w
		movsx eax, dil
		neg r9w
		shr r11, 0x55
		mov edx, 0x27140bb2
		xor r10w, r9w
		lea rdi, [rdx*8 - 0x166b7743]
		lea r9, [rsp + r9 + 8]
		mov r11, qword ptr [r11 + r9 - 0xe8]
		btr eax, edi
		rol dil, 0xa2
		sal rdx, 0x31
		mov qword ptr [r8 - 8], r11
		bts ax, 0x3c
		xor qword ptr [rsp], 0x75021d29
		mov r11d, dword ptr [rbx + 2]
		setnp byte ptr [rsp + 1]
		mov ecx, edx
		xor word ptr [rsp + rcx*2 + 6], dx
		xor r11d, r10d
		call 0x7ffb72d84612
583: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
584: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
585: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
586: UB addr = 7ffb7296570d with ID: 163 yields:
		mov qword ptr [rsp + r11*2 - 0x2270e272], -0x2951d0f6
		cbw
		lea rsi, [rsp + rsi + 0x10]
		sal rcx, cl
		mov rcx, qword ptr [rdi + rsi - 0x1bb]
		jne 0x7ffb72c1bde9
587: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
588: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
589: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
590: UB addr = 7ffb7296570d with ID: 163 yields:
		mov qword ptr [rsp + r11*2 - 0x2270e272], -0x2951d0f6
		cbw
		lea rsi, [rsp + rsi + 0x10]
		sal rcx, cl
		mov rcx, qword ptr [rdi + rsi - 0x1bb]
		jne 0x7ffb72c1bde9
591: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
592: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
593: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
594: UB addr = 7ffb72a825df with ID: 165 yields:
		movzx r9d, word ptr [rbx]
		mov r11d, 0x1d3c53b5
		movsx edi, r11w
		xor r9w, r10w
		ror r9w, 1
		push rdi
		xor r9w, 0x289b
		ror r9w, 1
		sal word ptr [rsp + r11 - 0x1d1c53b3], 0xc2
		inc r9w
		movsx eax, dil
		neg r9w
		shr r11, 0x55
		mov edx, 0x27140bb2
		xor r10w, r9w
		lea rdi, [rdx*8 - 0x166b7743]
		lea r9, [rsp + r9 + 8]
		mov r11, qword ptr [r11 + r9 - 0xe8]
		btr eax, edi
		rol dil, 0xa2
		sal rdx, 0x31
		mov qword ptr [r8 - 8], r11
		bts ax, 0x3c
		xor qword ptr [rsp], 0x75021d29
		mov r11d, dword ptr [rbx + 2]
		setnp byte ptr [rsp + 1]
		mov ecx, edx
		xor word ptr [rsp + rcx*2 + 6], dx
		xor r11d, r10d
		call 0x7ffb72d84612
595: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
596: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
597: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
598: UB addr = 7ffb72a825df with ID: 165 yields:
		movzx r9d, word ptr [rbx]
		mov r11d, 0x1d3c53b5
		movsx edi, r11w
		xor r9w, r10w
		ror r9w, 1
		push rdi
		xor r9w, 0x289b
		ror r9w, 1
		sal word ptr [rsp + r11 - 0x1d1c53b3], 0xc2
		inc r9w
		movsx eax, dil
		neg r9w
		shr r11, 0x55
		mov edx, 0x27140bb2
		xor r10w, r9w
		lea rdi, [rdx*8 - 0x166b7743]
		lea r9, [rsp + r9 + 8]
		mov r11, qword ptr [r11 + r9 - 0xe8]
		btr eax, edi
		rol dil, 0xa2
		sal rdx, 0x31
		mov qword ptr [r8 - 8], r11
		bts ax, 0x3c
		xor qword ptr [rsp], 0x75021d29
		mov r11d, dword ptr [rbx + 2]
		setnp byte ptr [rsp + 1]
		mov ecx, edx
		xor word ptr [rsp + rcx*2 + 6], dx
		xor r11d, r10d
		call 0x7ffb72d84612
599: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
600: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
601: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
602: UB addr = 7ffb72a825df with ID: 165 yields:
		movzx r9d, word ptr [rbx]
		mov r11d, 0x1d3c53b5
		movsx edi, r11w
		xor r9w, r10w
		ror r9w, 1
		push rdi
		xor r9w, 0x289b
		ror r9w, 1
		sal word ptr [rsp + r11 - 0x1d1c53b3], 0xc2
		inc r9w
		movsx eax, dil
		neg r9w
		shr r11, 0x55
		mov edx, 0x27140bb2
		xor r10w, r9w
		lea rdi, [rdx*8 - 0x166b7743]
		lea r9, [rsp + r9 + 8]
		mov r11, qword ptr [r11 + r9 - 0xe8]
		btr eax, edi
		rol dil, 0xa2
		sal rdx, 0x31
		mov qword ptr [r8 - 8], r11
		bts ax, 0x3c
		xor qword ptr [rsp], 0x75021d29
		mov r11d, dword ptr [rbx + 2]
		setnp byte ptr [rsp + 1]
		mov ecx, edx
		xor word ptr [rsp + rcx*2 + 6], dx
		xor r11d, r10d
		call 0x7ffb72d84612
603: UB addr = 7ffb72b05b5c with ID: 122 yields:
		btc eax, 0x85
		lea rax, [rsp + rax - 0x7d379f42]
		jae 0x7ffb728bbe12
604: UB addr = 7ffb728bbe12 with ID: 123 yields:
		call 0x7ffb72c9da56
605: UB addr = 7ffb72afe778 with ID: 124 yields:
		jmp rbp
606: UB addr = 7ffb72b1344e with ID: 261 yields:
		mov eax, 0xcc98c118
		mov rbx, r8
		movabs r10, 0x7ff9e7130000
		sub rbx, r10
		lea rdi, [rip - 7]
		mov edx, 0x1c94e937
		movsx r9d, dx
		mov edx, dword ptr [r8 + rdx - 0x1c94e937]
		add r8, 4
		movzx r10d, r9w
		xor edx, ebx
		neg edx
		not edx
		not r9b
		xor bl, r9b
		mov ecx, r10d
		lea r9, [rsp + r9 + 8]
		mov qword ptr [r9 + rax*4 - 0x484150d0], rdx
		mov qword ptr [rsp + rax*2 - 0x2420a868], r10
		mov r11d, dword ptr [rax + r8 - 0x12105433]
		sal cl, 0x64
		xor r11d, ebx
		xor rax, 0xffffffffec3e78b1
		movsx ebp, byte ptr [rsp + rax + 0x1d1d37c]
		movzx r9d, bp
		neg r11d
		inc r11d
		cqo
		xor qword ptr [rsp + rax*2 + 0x3a3a6f6], rcx
		jge 0x7ffb729cc9ba
607: UB addr = 7ffb728eb08f with ID: 184 yields:
		or dword ptr [rsp + r11 - 0xdf0d], r9d
		neg bp
		push rdx
		sub bp, 0x1b15
		lea r9, [r11 + rcx*8 + 0x540c0baf]
		call 0x7ffb72d7a452
608: UB addr = 7ffb72a228d5 with ID: 185 yields:
		neg bpl
		inc dword ptr [rsp + r11*4 - 0x282d]
		pop rcx
		xor bl, bpl
		lea rbp, [rsp + rbp + 0x18]
		shr dword ptr [rsp + r11*2 - 0x141d], 0xa1
		shr r11d, 0xe9
		mov qword ptr [r11 + rbp - 5], r10
		xadd cl, al
		pop r11
		mov r11, qword ptr [rsi + 0x10]
		call 0x7ffb72ce7c92
609: UB addr = 7ffb729e107b with ID: 186 yields:
		xor al, bl
		or dl, 0x22
		or word ptr [rsp + 0xd], 0xce95
		not al
		mov r10d, edx
		xor r10d, edx
		sbb r9, qword ptr [rsp + r10 + 0x10]
		xor al, 0x91
		neg al
		add al, 0x20
		xor cl, byte ptr [rsp + r10 + 0xd]
		xor bl, al
		pop rbp
		add rbp, -0xb968e
		jmp rbp
610: UB addr = 7ffb72b894a2 with ID: 187 yields:
		call 0x7ffb72bd1c7f
611: UB addr = 7ffb72959e63 with ID: 188 yields:
		mov r11d, dword ptr [r8]
		mov ebp, 0x1c286c1a
		xor r11d, ebx
		mov edx, ebp
		neg r11d
		lea rcx, [rbp + rdx + 0x5889aca7]
		lea r9, [rbp*2 - 0x6bdd6af9]
		ror r9w, 0x23
		inc r11d
		neg rbp
		movzx r10d, dx
		neg r11d
		sub cx, r10w
		btc ecx, 0x24
		xor r11d, 0x3fbfdd22
		push rbx
		xor dword ptr [rsp + rbp*2 + 0x3850d834], r11d
		pop rbx
		movsxd r11, r11d
		add rdi, r11
		mov r10, qword ptr [rsi + rbp + 0x1c286c1a]
		add bp, r9w
		movzx edx, byte ptr [r8 + rbp + 0x1c28fe77]
		lea rax, [r9 + r9*4 - 0x58422a5b]
		xor dl, bl
		or r9b, cl
		inc ebp
		not dl
		or r9, rbp
		adc dl, r9b
		neg dl
		cwde
		ror dl, 1
		neg r9d
		lea r11, [r9*8 - 0x466b7978]
		shl r9, cl
		sbb dl, 0x38
		lea r9, [r9 + rcx*8 + 0x629f4a1c]
		or r9d, r11d
		or r9w, cx
		not dl
		btc ecx, 5
		xor bl, dl
		sar r9w, 0x6f
		push rax
		lea rdx, [rsp + rdx + 8]
		inc byte ptr [rsp + r9*2 - 0x7bf1fffc]
		mov qword ptr [rdx + r9*2 - 0x7bf20000], r10
		dec cl
		mov rbp, qword ptr [rsi + r9 - 0x3df8fff8]
		bswap r11
		lea rsi, [rsi + r9 - 0x3df8fff0]
		movsx edx, r9w
		sar qword ptr [rsp + r9*2 - 0x7bf20000], cl
		movzx ecx, byte ptr [r9 + r8 - 0x3df8fffb]
		lea r8, [r8 + r9 - 0x3df8fffa]
		xor cl, bl
		neg cl
		sub rdx, 0x27211a2a
		setle byte ptr [rsp + r9 - 0x3df90000]
		adc cl, r9b
		pop rax
		call 0x7ffb72c13988
612: UB addr = 7ffb72959e63 with ID: 188 yields:
		mov r11d, dword ptr [r8]
		mov ebp, 0x1c286c1a
		xor r11d, ebx
		mov edx, ebp
		neg r11d
		lea rcx, [rbp + rdx + 0x5889aca7]
		lea r9, [rbp*2 - 0x6bdd6af9]
		ror r9w, 0x23
		inc r11d
		neg rbp
		movzx r10d, dx
		neg r11d
		sub cx, r10w
		btc ecx, 0x24
		xor r11d, 0x3fbfdd22
		push rbx
		xor dword ptr [rsp + rbp*2 + 0x3850d834], r11d
		pop rbx
		movsxd r11, r11d
		add rdi, r11
		mov r10, qword ptr [rsi + rbp + 0x1c286c1a]
		add bp, r9w
		movzx edx, byte ptr [r8 + rbp + 0x1c28fe77]
		lea rax, [r9 + r9*4 - 0x58422a5b]
		xor dl, bl
		or r9b, cl
		inc ebp
		not dl
		or r9, rbp
		adc dl, r9b
		neg dl
		cwde
		ror dl, 1
		neg r9d
		lea r11, [r9*8 - 0x466b7978]
		shl r9, cl
		sbb dl, 0x38
		lea r9, [r9 + rcx*8 + 0x629f4a1c]
		or r9d, r11d
		or r9w, cx
		not dl
		btc ecx, 5
		xor bl, dl
		sar r9w, 0x6f
		push rax
		lea rdx, [rsp + rdx + 8]
		inc byte ptr [rsp + r9*2 - 0x7bf1fffc]
		mov qword ptr [rdx + r9*2 - 0x7bf20000], r10
		dec cl
		mov rbp, qword ptr [rsi + r9 - 0x3df8fff8]
		bswap r11
		lea rsi, [rsi + r9 - 0x3df8fff0]
		movsx edx, r9w
		sar qword ptr [rsp + r9*2 - 0x7bf20000], cl
		movzx ecx, byte ptr [r9 + r8 - 0x3df8fffb]
		lea r8, [r8 + r9 - 0x3df8fffa]
		xor cl, bl
		neg cl
		sub rdx, 0x27211a2a
		setle byte ptr [rsp + r9 - 0x3df90000]
		adc cl, r9b
		pop rax
		call 0x7ffb72c13988
613: UB addr = 7ffb72959e63 with ID: 188 yields:
		mov r11d, dword ptr [r8]
		mov ebp, 0x1c286c1a
		xor r11d, ebx
		mov edx, ebp
		neg r11d
		lea rcx, [rbp + rdx + 0x5889aca7]
		lea r9, [rbp*2 - 0x6bdd6af9]
		ror r9w, 0x23
		inc r11d
		neg rbp
		movzx r10d, dx
		neg r11d
		sub cx, r10w
		btc ecx, 0x24
		xor r11d, 0x3fbfdd22
		push rbx
		xor dword ptr [rsp + rbp*2 + 0x3850d834], r11d
		pop rbx
		movsxd r11, r11d
		add rdi, r11
		mov r10, qword ptr [rsi + rbp + 0x1c286c1a]
		add bp, r9w
		movzx edx, byte ptr [r8 + rbp + 0x1c28fe77]
		lea rax, [r9 + r9*4 - 0x58422a5b]
		xor dl, bl
		or r9b, cl
		inc ebp
		not dl
		or r9, rbp
		adc dl, r9b
		neg dl
		cwde
		ror dl, 1
		neg r9d
		lea r11, [r9*8 - 0x466b7978]
		shl r9, cl
		sbb dl, 0x38
		lea r9, [r9 + rcx*8 + 0x629f4a1c]
		or r9d, r11d
		or r9w, cx
		not dl
		btc ecx, 5
		xor bl, dl
		sar r9w, 0x6f
		push rax
		lea rdx, [rsp + rdx + 8]
		inc byte ptr [rsp + r9*2 - 0x7bf1fffc]
		mov qword ptr [rdx + r9*2 - 0x7bf20000], r10
		dec cl
		mov rbp, qword ptr [rsi + r9 - 0x3df8fff8]
		bswap r11
		lea rsi, [rsi + r9 - 0x3df8fff0]
		movsx edx, r9w
		sar qword ptr [rsp + r9*2 - 0x7bf20000], cl
		movzx ecx, byte ptr [r9 + r8 - 0x3df8fffb]
		lea r8, [r8 + r9 - 0x3df8fffa]
		xor cl, bl
		neg cl
		sub rdx, 0x27211a2a
		setle byte ptr [rsp + r9 - 0x3df90000]
		adc cl, r9b
		pop rax
		call 0x7ffb72c13988
614: UB addr = 7ffb72959e63 with ID: 188 yields:
		mov r11d, dword ptr [r8]
		mov ebp, 0x1c286c1a
		xor r11d, ebx
		mov edx, ebp
		neg r11d
		lea rcx, [rbp + rdx + 0x5889aca7]
		lea r9, [rbp*2 - 0x6bdd6af9]
		ror r9w, 0x23
		inc r11d
		neg rbp
		movzx r10d, dx
		neg r11d
		sub cx, r10w
		btc ecx, 0x24
		xor r11d, 0x3fbfdd22
		push rbx
		xor dword ptr [rsp + rbp*2 + 0x3850d834], r11d
		pop rbx
		movsxd r11, r11d
		add rdi, r11
		mov r10, qword ptr [rsi + rbp + 0x1c286c1a]
		add bp, r9w
		movzx edx, byte ptr [r8 + rbp + 0x1c28fe77]
		lea rax, [r9 + r9*4 - 0x58422a5b]
		xor dl, bl
		or r9b, cl
		inc ebp
		not dl
		or r9, rbp
		adc dl, r9b
		neg dl
		cwde
		ror dl, 1
		neg r9d
		lea r11, [r9*8 - 0x466b7978]
		shl r9, cl
		sbb dl, 0x38
		lea r9, [r9 + rcx*8 + 0x629f4a1c]
		or r9d, r11d
		or r9w, cx
		not dl
		btc ecx, 5
		xor bl, dl
		sar r9w, 0x6f
		push rax
		lea rdx, [rsp + rdx + 8]
		inc byte ptr [rsp + r9*2 - 0x7bf1fffc]
		mov qword ptr [rdx + r9*2 - 0x7bf20000], r10
		dec cl
		mov rbp, qword ptr [rsi + r9 - 0x3df8fff8]
		bswap r11
		lea rsi, [rsi + r9 - 0x3df8fff0]
		movsx edx, r9w
		sar qword ptr [rsp + r9*2 - 0x7bf20000], cl
		movzx ecx, byte ptr [r9 + r8 - 0x3df8fffb]
		lea r8, [r8 + r9 - 0x3df8fffa]
		xor cl, bl
		neg cl
		sub rdx, 0x27211a2a
		setle byte ptr [rsp + r9 - 0x3df90000]
		adc cl, r9b
		pop rax
		call 0x7ffb72c13988
615: UB addr = 7ffb728ee500 with ID: 189 yields:
		not r9b
		xor bl, r9b
		mov ecx, r10d
		lea r9, [rsp + r9 + 8]
		mov qword ptr [r9 + rax*4 - 0x484150d0], rdx
		mov qword ptr [rsp + rax*2 - 0x2420a868], r10
		mov r11d, dword ptr [rax + r8 - 0x12105433]
		sal cl, 0x64
		xor r11d, ebx
		xor rax, 0xffffffffec3e78b1
		movsx ebp, byte ptr [rsp + rax + 0x1d1d37c]
		movzx r9d, bp
		neg r11d
		inc r11d
		cqo
		xor qword ptr [rsp + rax*2 + 0x3a3a6f6], rcx
		jge 0x7ffb729cc9ba
616: UB addr = 7ffb729cc9ba with ID: 190 yields:
		neg r11d
		xchg byte ptr [rsp + rax*4 + 0x7474df0], r10b
		bswap rcx
		xor r11d, 0x3fbfdd22
		push rax
		mov qword ptr [rsp + rax*2 + 0x3a3a6fe], rbx
		shl ebp, 0x1d
		xor dword ptr [rsp + rax*4 + 0x7474df4], r11d
		mov rbx, qword ptr [rsp + rax*2 + 0x3a3a6fe]
		mov qword ptr [rsp + rdx*4 + 0xc], rcx
		or ax, bp
		movsxd r11, r11d
		sub dword ptr [rsp + rax + 0x1d1d380], eax
		add rdi, r11
		mov rdx, qword ptr [rsi + rax + 0x1d1d383]
		movzx ecx, word ptr [r8 + rax + 0x1d1d380]
		movsx r11d, r9b
		inc r10d
		xor cx, bx
		sar r10, 0x8f
		adc cx, 0xe384
		and r9b, r9b
		sets r11b
		xor cx, 0x3aa4
		or r11b, 0x15
		adc cx, 0x3e06
		cbw
		neg bp
		and dword ptr [rsp + rax*2 + 0x3a20101], r9d
		neg cx
		add r9b, 0xaf
		inc cx
		rol cx, 1
		cdqe
		xor bx, cx
		btc r10, r11
		jb 0x7ffb72bcf292
617: UB addr = 7ffb729cca6c with ID: 191 yields:
		jae 0x7ffb72c7a0cd
618: UB addr = 7ffb72993033 with ID: 192 yields:
		movsxd rax, eax
		and r10w, 0xe732
		xor r11, r9
		adc rdi, rax
		shl ecx, 0xa5
		jae 0x7ffb72dc8bc8
619: UB addr = 7ffb728eb08f with ID: 184 yields:
		or dword ptr [rsp + r11 - 0xdf0d], r9d
		neg bp
		push rdx
		sub bp, 0x1b15
		lea r9, [r11 + rcx*8 + 0x540c0baf]
		call 0x7ffb72d7a452
620: UB addr = 7ffb72a228d5 with ID: 185 yields:
		neg bpl
		inc dword ptr [rsp + r11*4 - 0x282d]
		pop rcx
		xor bl, bpl
		lea rbp, [rsp + rbp + 0x18]
		shr dword ptr [rsp + r11*2 - 0x141d], 0xa1
		shr r11d, 0xe9
		mov qword ptr [r11 + rbp - 5], r10
		xadd cl, al
		pop r11
		mov r11, qword ptr [rsi + 0x10]
		call 0x7ffb72ce7c92
621: UB addr = 7ffb729e107b with ID: 186 yields:
		xor al, bl
		or dl, 0x22
		or word ptr [rsp + 0xd], 0xce95
		not al
		mov r10d, edx
		xor r10d, edx
		sbb r9, qword ptr [rsp + r10 + 0x10]
		xor al, 0x91
		neg al
		add al, 0x20
		xor cl, byte ptr [rsp + r10 + 0xd]
		xor bl, al
		pop rbp
		add rbp, -0xb968e
		jmp rbp
622: UB addr = 7ffb72b894a2 with ID: 187 yields:
		call 0x7ffb72bd1c7f
623: UB addr = 7ffb72902818 with ID: 193 yields:
		mov ecx, 0x8028af23
		xor dword ptr [rsp + r10 - 0x6aad0174], eax
		or dword ptr [rsp + r10 - 0x6aad017d], ebp
		xchg word ptr [rsp + r10 - 0x6aad0177], dx
		sub r11w, cx
		mov rbx, qword ptr [rsp + r10 - 0x6aad0174]
		shl rbp, cl
		bswap r10
		xadd dword ptr [rsp + 8], r11d
		movsxd rax, eax
		jbe 0x7ffb72df9656
624: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
625: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
626: UB addr = 7ffb72957d25 with ID: 263 yields:
		mov r10d, 0x493ed594
		mov r11d, dword ptr [r8 + r10 - 0x493ed594]
		movsx eax, r10b
		push rax
		xor r11d, ebx
		dec r11d
		cqo
		movsx ecx, dx
		neg r11d
		dec qword ptr [rsp + r10 - 0x493ed594]
		lea r9, [rcx*8 - 0x5bc03067]
		cdq
		sub r11d, edx
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
627: UB addr = 7ffb728e2e70 with ID: 197 yields:
		not eax
		push r10
		mov qword ptr [rsp + 8], rbx
		xor dword ptr [rsp + 8], eax
		xadd qword ptr [rsp], rbp
		xadd dx, r9w
		mov rbx, qword ptr [rsp + 8]
		movsxd rax, eax
		add rdi, rax
		call 0x7ffb72d6d107
628: UB addr = 7ffb72bac007 with ID: 198 yields:
		movzx edx, byte ptr [r8]
		mov r11d, 0x7e145f96
		movsx ecx, r11w
		xor dl, bl
		not dl
		push rcx
		movzx eax, cx
		push rcx
		neg dl
		not rax
		xchg dword ptr [rsp + rcx - 0x5f91], eax
		inc dl
		rol dl, 1
		add dl, 0xd
		not dword ptr [rsp + rcx - 0x5f96]
		push rax
		cwde
		neg dl
		xor bl, dl
		lea rdx, [rsp + rdx + 0x18]
		mov ebp, 0xb01123b7
		push rax
		shl r11b, 0xe5
		mov r9, qword ptr [r11 + rdx - 0x7e145fc0]
		movsx r10d, word ptr [rsp + r11 - 0x7e145fb5]
		jne 0x7ffb729f10ab
629: UB addr = 7ffb729f10ab with ID: 199 yields:
		mov r11, r9
		mov rbp, qword ptr [rcx + rsi - 0x5f96]
		lea rsi, [rsi + rcx*2 - 0xbf24]
		add r10, qword ptr [rsp + rcx - 0x5f7e]
		neg eax
		sar r10d, 0xff
		adc r11, rbp
		mov rbp, r11
		push rcx
		dec rcx
		not word ptr [rsp + rcx*2 - 0xbf04]
		add ax, word ptr [r8 + rcx - 0x5f94]
		rol cx, 0x63
		xor ax, bx
		xor ax, 0x3c92
		inc ax
		movzx edx, byte ptr [rsp + rcx - 0x3f2a7e8]
		ror ax, 1
		neg ax
		ror ax, 1
		mov r9d, edx
		rol dl, 0x83
		sbb ax, r10w
		ror dl, 0x22
		shr word ptr [rsp + rcx*2 - 0x7e54ff0], 0x81
		je 0x7ffb72ba2296
630: UB addr = 7ffb72ba2296 with ID: 200 yields:
		xor bx, ax
		shr cl, 0x41
		bt r10d, 0x24
		not rdx
		lea rax, [rsp + rax + 0x28]
		jae 0x7ffb729f8fb9
631: UB addr = 7ffb729f8fb9 with ID: 201 yields:
		mov qword ptr [rcx + rax - 0x3f2a800], rbp
		mov ecx, dword ptr [rcx + r8 - 0x3f2a7fd]
		movsx eax, r10b
		lea r8, [r10 + r8 + 7]
		shr dword ptr [rsp + r10 + 0x16], 0xd2
		and dword ptr [rsp + r10*8 + 0x23], edx
		neg word ptr [rsp + rdx + 0xd9]
		xor ecx, ebx
		lea rdx, [rdx + rdx*8 + 0x3929371b]
		movsx ebp, al
		or byte ptr [rsp + r10*4 + 0x19], r10b
		not ecx
		bswap ecx
		cqo
		lea ecx, [rcx + r10*4 - 0x640b2a1c]
		rol ecx, 1
		call 0x7ffb72e81a09
632: UB addr = 7ffb72a811ae with ID: 202 yields:
		mov edx, 0x87363633
		movzx r10d, dl
		mov r9d, dword ptr [r8 + r10*8 - 0x198]
		xor r9d, ebx
		mov eax, edx
		xadd r10, rax
		ror r9d, 1
		movzx ebp, al
		not r9d
		mov ecx, r10d
		lea r11, [rdx*2 + 0x3e934839]
		and r10, rdx
		neg r9d
		sub rbp, r11
		xor cl, r10b
		shr edx, cl
		rol r9d, 1
		xor r10w, cx
		push rbx
		btc rbp, 0x89
		xor dword ptr [rsp + rdx*2 - 0x10e6c6c6], r9d
		not al
		btr r10d, 0x29
		pop rbx
		bswap eax
		sbb r10w, ax
		mov dword ptr [rsi + rdx - 0x8736367], r9d
		shl r11w, 0x49
		movzx r9d, dl
		sar r9w, 0xe1
		mov ecx, dword ptr [r8 + rdx*2 - 0x10e6c6c2]
		xadd r11b, al
		xor ecx, ebx
		not r10w
		push r10
		btc r11, r9
		lea ecx, [rcx + r10 + 0x16f5023]
		call 0x7ffb72dba9bb
633: UB addr = 7ffb7296a10b with ID: 203 yields:
		neg r11
		ror r11, 1
		inc r9b
		lea r11, [r11 + rdx*2 - 0x5c91986f]
		dec ax
		rol r11, 5
		cbw
		ror byte ptr [rsp + rdx - 0x8736355], 0xc5
		cdq
		xor rbx, r11
		and edx, 0x3237e912
		mov qword ptr [rdx + rsi - 0xc], r11
		lea rsi, [rdx + rsi - 0xc]
		movzx r11d, word ptr [rsp + rdx + 6]
		pop rdx
		pop rbp
		jae 0x7ffb72be239f
634: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
635: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
636: UB addr = 7ffb72957d25 with ID: 263 yields:
		mov r10d, 0x493ed594
		mov r11d, dword ptr [r8 + r10 - 0x493ed594]
		movsx eax, r10b
		push rax
		xor r11d, ebx
		dec r11d
		cqo
		movsx ecx, dx
		neg r11d
		dec qword ptr [rsp + r10 - 0x493ed594]
		lea r9, [rcx*8 - 0x5bc03067]
		cdq
		sub r11d, edx
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
637: UB addr = 7ffb729b9acf with ID: 205 yields:
		sub r11b, 0x92
		xor bl, r11b
		push rdx
		lea r11, [rsp + r11 + 0x10]
		cdqe
		pop r9
		mov dword ptr [r11 + rax - 0x37b30005], r10d
		lea r11, [r9 + rbp*8 + 0x281c322]
		cdq
		lea ecx, [r9 + rcx - 0x478e75c2]
		mov qword ptr [rsp + rax - 0x37b30005], r11
		xor bp, ax
		xor ecx, 0xe5246936
		inc ecx
		xor ecx, 0xfcb3462f
		xor bpl, dl
		mov qword ptr [rsp + rax - 0x37b30005], rbx
		sbb r10, r10
		push r11
		cbw
		xor dword ptr [rsp + rax*2 - 0x6f660002], ecx
		dec r9b
		or ebp, r11d
		mov rbx, qword ptr [rsp + r9 - 0x4104ffb5]
		cdq
		or r9, 0xffffffffe6999a0f
		mov dword ptr [r9 + rsi + 0x18620041], ecx
		mov qword ptr [rsp + r9 + 0x18620049], r10
		rol rax, 0xb5
		xor rdx, qword ptr [r8 + r9 + 0x1862004a]
		push r11
		lea r8, [r8 + r9 + 0x18620052]
		ror al, 0x86
		btr ax, 0xb9
		xchg dword ptr [rsp + rbp - 0x4386c7d8], r9d
		xor rdx, rbx
		sub word ptr [rsp + r9*8 - 0x213], r9w
		neg rdx
		not rdx
		push r10
		ror rdx, 1
		bts rax, 0x31
		ror r11d, 0x28
		neg rdx
		dec ebp
		btc r9w, bp
		xchg rcx, rbp
		xor rbx, rdx
		cmp rsi, r9
		ja 0x7ffb72ac6561
638: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
639: UB addr = 7ffb72957d25 with ID: 263 yields:
		mov r10d, 0x493ed594
		mov r11d, dword ptr [r8 + r10 - 0x493ed594]
		movsx eax, r10b
		push rax
		xor r11d, ebx
		dec r11d
		cqo
		movsx ecx, dx
		neg r11d
		dec qword ptr [rsp + r10 - 0x493ed594]
		lea r9, [rcx*8 - 0x5bc03067]
		cdq
		sub r11d, edx
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
640: UB addr = 7ffb7292b11d with ID: 207 yields:
		mov edx, 0xf437be08
		mov r9d, dword ptr [r8]
		push rdx
		xor r9d, ebx
		shl dword ptr [rsp + 1], 0x83
		lea rbp, [rdx - 0x25c6a1cf]
		rol r9d, 3
		neg r9d
		bswap r9d
		mov qword ptr [rsp + r10 - 0x2001c39], rbp
		sub r9d, 0xe603452a
		xor r9d, 0x128ad583
		mov qword ptr [rsp + r10*2 - 0x4003814], rbx
		cdqe
		xor al, r10b
		lea rbx, [rax + rax*2 - 0x25c4574a]
		xor dword ptr [rsp + rax*2 - 0x3866], r9d
		movzx r11d, bx
		pop rbx
		movsxd r9, r9d
		neg r10b
		adc rdi, r9
		movzx edx, byte ptr [r10 + r8 - 0x2001cee]
		lea r8, [r8 + rax*4 - 0x70c3]
		movsx r9d, al
		ror rax, 0x25
		lea rbp, [rax*8 + 0x18a0f3a5]
		xor dl, bl
		xor bp, ax
		adc dl, 0x95
		add r11w, ax
		lea rcx, [rax*8 - 0x1bde0fde]
		cbw
		not dl
		ror dl, 1
		call 0x7ffb729b5ec0
641: UB addr = 7ffb729b5ec0 with ID: 208 yields:
		dec dl
		rol dl, 1
		xor bl, dl
		pop r9
		add r9, 0x3d54bf
		jmp r9
642: UB addr = 7ffb728e8848 with ID: 209 yields:
		mov dword ptr [r11 + rsi - 0xfd57], r10d
		pop rdx
		lea rsi, [rsi + r11*2 - 0x1faa6]
		movzx r10d, r11b
		cmp rsi, r9
		ja 0x7ffb72ac6561
643: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
644: UB addr = 7ffb72987299 with ID: 210 yields:
		mov r9d, 0xbb21e688
		call 0x7ffb72d4e2a6
645: UB addr = 7ffb729bb4db with ID: 211 yields:
		sbb al, 0x93
		xor al, 0x89
		and r11w, bp
		jae 0x7ffb72904421
646: UB addr = 7ffb72904421 with ID: 214 yields:
		ror al, 1
		mov r9d, r11d
		xor bl, al
		add rax, rsp
		bswap ebp
		bts cx, 0x13
		mov r11d, dword ptr [rcx + rax - 0xb9d]
		ror r9b, 0x27
		bswap r9
		or r9d, r11d
		btc ecx, 0xb0
		ror eax, 1
		push rbx
		movsx ebx, r9w
		push rbx
		neg bp
		xor dword ptr [rsp + rbx*2 - 0x1b88], eax
		dec byte ptr [rsp + r9 - 0xdc2]
		inc word ptr [rsp + r9 - 0xdc8]
		mov rbx, qword ptr [rsp + r9 - 0xdc0]
		add cx, 0xdaa8
		sbb bpl, bpl
		lea rdx, [r11 + rbp*4 - 0x7d55b079]
		movsxd rax, eax
		setge bpl
		btc r10d, 0xad
		mov qword ptr [rsp + r9*8 - 0x6e38], -0x77cd8eec
		add rdi, rax
		sub qword ptr [rsp + r9*8 - 0x6e38], -0x387cf2ec
		inc byte ptr [rsp + r9 - 0xdb9]
		mov qword ptr [rsp + r9*2 - 0x1b90], rdi
		ret 8
647: UB addr = 7ffb729da9c8 with ID: 213 yields:
		rol r10b, 1
		mov qword ptr [rsp + rbp - 0xb5e6], r9
		and qword ptr [rsp + rbp*8 - 0x5af30], rdx
		inc qword ptr [rsp + rbp - 0xb5e6]
		neg r10b
		sub r10b, 0x94
		neg r10b
		adc r10b, 0xb7
		xor r10b, 0xa5
		mov r11d, dword ptr [rsp + rbp*2 - 0x16bcc]
		xchg dword ptr [rsp + rbp - 0xb5e4], edx
		xor bl, r10b
		lea r10, [rsp + r10 + 8]
		mov r9d, dword ptr [r10 + rbp*2 - 0x16bcc]
		and dword ptr [rsp + rbp - 0xb5e3], 0x66a393ad
		mov dword ptr [rsi + rbp - 0xb5ea], r9d
		and r11b, cl
		movzx ebp, byte ptr [r8 + rbp - 0xb5e5]
		mov r9d, ecx
		sal r9w, 0x82
		shr byte ptr [rsp + rdx - 0xeffa], 0x26
		xor bpl, bl
		inc ecx
		xor dx, ax
		xor ecx, 0xf1911ba
		push rdx
		not r9d
		mov qword ptr [rsp + rdx*2 + 0x18], rbx
		sar dx, 0xaa
		xor dword ptr [rsp + rdx + 0x18], ecx
		shl dword ptr [rsp + rdx + 0x13], 0x12
		mov rbx, qword ptr [rsp + rdx*2 + 0x18]
		mov qword ptr [rsp + rdx*2 + 0x18], r9
		movsxd rcx, ecx
		adc rdi, rcx
		or eax, dword ptr [rsp + rbp + 0x18]
		pop r9
		pop rdx
		pop r10
		pop r9
		jae 0x7ffb72be239f
648: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
649: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
650: UB addr = 7ffb729bb4db with ID: 211 yields:
		sbb al, 0x93
		xor al, 0x89
		and r11w, bp
		jae 0x7ffb72904421
651: UB addr = 7ffb72904421 with ID: 214 yields:
		ror al, 1
		mov r9d, r11d
		xor bl, al
		add rax, rsp
		bswap ebp
		bts cx, 0x13
		mov r11d, dword ptr [rcx + rax - 0xb9d]
		ror r9b, 0x27
		bswap r9
		or r9d, r11d
		btc ecx, 0xb0
		ror eax, 1
		push rbx
		movsx ebx, r9w
		push rbx
		neg bp
		xor dword ptr [rsp + rbx*2 - 0x1b88], eax
		dec byte ptr [rsp + r9 - 0xdc2]
		inc word ptr [rsp + r9 - 0xdc8]
		mov rbx, qword ptr [rsp + r9 - 0xdc0]
		add cx, 0xdaa8
		sbb bpl, bpl
		lea rdx, [r11 + rbp*4 - 0x7d55b079]
		movsxd rax, eax
		setge bpl
		btc r10d, 0xad
		mov qword ptr [rsp + r9*8 - 0x6e38], -0x77cd8eec
		add rdi, rax
		sub qword ptr [rsp + r9*8 - 0x6e38], -0x387cf2ec
		inc byte ptr [rsp + r9 - 0xdb9]
		mov qword ptr [rsp + r9*2 - 0x1b90], rdi
		ret 8
652: UB addr = 7ffb728e182e with ID: 215 yields:
		movzx ecx, word ptr [r8 + r10]
		xor r9w, word ptr [rsp + r10 + 0x23]
		call 0x7ffb72c1657e
653: UB addr = 7ffb7299a3d9 with ID: 216 yields:
		sar word ptr [rsp + r10*8 + 0x21], 0xc8
		sbb cx, 0x7810
		xchg qword ptr [rsp + 0x20], r11
		add r11, -0x40a67d
		jmp r11
654: UB addr = 7ffb72a86032 with ID: 217 yields:
		or r10w, 0xb12b
		xor bx, cx
		call 0x7ffb728e0ee7
655: UB addr = 7ffb728e0ee7 with ID: 218 yields:
		lea rcx, [rsp + rcx + 0x40]
		mov r9, qword ptr [rcx + r10 - 0xb12b]
		lea r11, [rbp + rbp*2 + 0x2ebe2cb1]
		movzx ecx, r11b
		inc r11
		mov qword ptr [rsi + r10 - 0xb13b], r9
		lea r9, [rbp + rbp*4 - 0x36f3c573]
		mov r11d, dword ptr [r8 + r10*2 - 0x16252]
		mov qword ptr [rsp + r10 - 0xb12b], -0x6d73ccc3
		call 0x7ffb72c6119f
656: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
657: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
658: UB addr = 7ffb729a80f1 with ID: 219 yields:
		mov r10d, 0x5d360f9a
		movzx ecx, r10w
		movzx eax, word ptr [r8 + rcx - 0xf9a]
		xor ax, bx
		movzx r11d, r10w
		rol cx, 6
		not ax
		movsx r9d, r10b
		xor r10b, r9b
		sbb ax, 0x573d
		movzx edx, r11w
		xadd r10d, r11d
		rol ax, 1
		add rcx, r11
		adc cx, r11w
		adc ax, 0x9c3f
		xor bx, ax
		not cx
		add rax, rsp
		adc ecx, r11d
		mov rbp, qword ptr [rax + rbp*2 - 0x600d4da4]
		mov qword ptr [rsi + rdx*2 - 0x3e70], rbp
		movzx ebp, word ptr [r8 + rdx*8 - 0xf99e]
		sub r11, 0x78ad0f16
		xor bp, bx
		mov eax, r10d
		cdqe
		sar r11b, cl
		neg bp
		xor bp, 0x8d90
		and r11b, 0x98
		cqo
		rol bp, cl
		sub bp, 0x57ad
		not bp
		neg bp
		ror r9d, 0xb4
		shl r9w, 0xc1
		xor bx, bp
		adc rbp, rsp
		lea r10, [r9*2 - 0x37e74768]
		mov rax, qword ptr [rbp + r11*2 + 0x36ee00e0]
		sal r11w, 0xa3
		mov qword ptr [rsi + r11 + 0x1b770370], rax
		sar dl, cl
		xchg r11w, dx
		mov r9d, dword ptr [r8 + r11 + 0x1b780004]
		movsx ebp, r11w
		btc ebp, ecx
		lea r8, [r8 + r11*2 + 0x36f00008]
		xor r9d, ebx
		shl r10, 0x66
		neg r11d
		sbb r9d, r10d
		lea rax, [r11*8 - 0x136601eb]
		dec r10
		xor r9d, 0xf18cc296
		cdq
		xchg rax, r11
		lea r9d, [r9 + rbp*2 - 0x73ade3d]
		btr rbp, 0x30
		rol r9d, 1
		shr rdx, cl
		push rcx
		rol r10, 0x2b
		inc r9d
		call 0x7ffb72962875
659: UB addr = 7ffb72962875 with ID: 220 yields:
		neg word ptr [rsp + rbp*4 + 3]
		sal dx, cl
		mov qword ptr [rsp + rdx - 0x3ffffff4], rbx
		xor dword ptr [rsp + rbp*4], r9d
		mov qword ptr [rsp + rcx - 0x74d91e02], rbp
		shr dx, cl
		mov rbx, qword ptr [rsp + rbp*8 - 8]
		adc ebp, r10d
		not qword ptr [rsp + rax - 0x1b780000]
		movsxd r9, r9d
		call 0x7ffb72d6183f
660: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
661: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
662: UB addr = 7ffb72ac3e71 with ID: 221 yields:
		mov qword ptr [rsp + r11 - 0xcd20], 0x7bc3390
		mov ebp, dword ptr [r11 + r8 - 0xcd20]
		call 0x7ffb72a428e1
663: UB addr = 7ffb72a428e1 with ID: 222 yields:
		mov qword ptr [rsp + r11 - 0xcd20], 0x210b8a0
		dec r11b
		cwde
		lea rdx, [r9 + r11*4 + 0x58b333b8]
		movsx ecx, dl
		mov r10d, ecx
		lea ebp, [r11 + rbp - 0x6608ce9f]
		xadd byte ptr [rsp + r11*8 - 0x668f0], r11b
		or r10w, r9w
		not ebp
		dec ebp
		and r11, qword ptr [rsp + r11*8 - 0x66c7d]
		xadd r9b, r10b
		cdq
		mov qword ptr [rsp + r11 + 0x10], rbx
		movzx ebx, r10w
		call 0x7ffb72dbb197
664: UB addr = 7ffb7299dd8d with ID: 223 yields:
		xor r11b, byte ptr [r11 + r8 + 4]
		not word ptr [rsp + rcx*8 - 0x7b]
		sub r10, 0x3b30ac21
		lea rbp, [rax*4 - 0x6e6937cf]
		lea r8, [r8 + rcx*8 - 0x93]
		xor rbp, rcx
		btc rax, 3
		xor r11b, bl
		bts r10, 0xae
		jae 0x7ffb72c1f4a6
665: UB addr = 7ffb7299ddc4 with ID: 224 yields:
		sbb r11b, 0x7f
		ror r11b, 1
		sub al, bpl
		cdqe
		adc r11b, 0x8a
		sal ebp, cl
		rol r11b, 1
		not byte ptr [rsp + rax*8 + 0x10580]
		or word ptr [rsp + rcx*2 - 0x12], 0x1d27
		xadd ax, r10w
		xor bl, r11b
		shl word ptr [rsp + rax + 0x99f3], 0xea
		lea r11, [rsp + r11 + 0x20]
		pop r10
		or rbp, r10
		ror byte ptr [rsp + rax*4 + 0x267da], 0x42
		mov qword ptr [rax + r11 + 0x99f2], rdx
		movsx r9d, word ptr [rsp + rax*2 + 0x133f8]
		adc rbp, -0x66f6a1d3
		mov qword ptr [rsp + rax + 0x99f2], rdi
		ret 0x10
666: UB addr = 7ffb729df55a with ID: 225 yields:
		mov rbx, qword ptr [rsp + rdx + 0x10]
		mov qword ptr [rsp + r9 - 0x46210599], r10
		movsxd rax, eax
		add rdi, rax
		mov byte ptr [rsp + rdx + 0xc], 2
		mov ecx, dword ptr [rdx + rsi + 4]
		sub word ptr [rsp + r9 - 0x4621059a], 0xa887
		sal r9d, 0x85
		lea rsi, [rsi + rdx*2 + 8]
		mov qword ptr [rsp + rdx*4], r11
		movzx ebp, byte ptr [r8 + rdx*2 + 4]
		and r11w, r9w
		sal word ptr [rsp + rdx + 0xc], 0xaa
		lea rdx, [r9*2 + 0xd3d3980]
		lea r8, [r8 + r10 + 5]
		movsx eax, word ptr [rsp + r10*4 + 0xe]
		xor bpl, bl
		xchg qword ptr [rsp + r11*2 + 0x1e010], rdx
		cwd
		xor bpl, al
		sub bpl, 0x9a
		neg bpl
		shl r11w, 0xcd
		btc eax, edx
		call 0x7ffb729635a1
667: UB addr = 7ffb729635a1 with ID: 226 yields:
		not bpl
		rol bpl, 1
		dec r11b
		cwd
		shl rax, 0x4c
		sbb bpl, 0xa
		xchg word ptr [rsp + rdx + 0x16], dx
		ror bpl, 1
		btc eax, edx
		not byte ptr [rsp + r10*4 + 0x19]
		lea r9, [rax + rax*8 + 0x1f2fce8d]
		xor bl, bpl
		cwd
		lea rbp, [rsp + rbp + 0x20]
		mov dword ptr [rbp + rdx - 0xffff], ecx
		mov qword ptr [rsp + rdx - 0xffff], rdi
		ret 0x18
668: UB addr = 7ffb72a811ae with ID: 202 yields:
		mov edx, 0x87363633
		movzx r10d, dl
		mov r9d, dword ptr [r8 + r10*8 - 0x198]
		xor r9d, ebx
		mov eax, edx
		xadd r10, rax
		ror r9d, 1
		movzx ebp, al
		not r9d
		mov ecx, r10d
		lea r11, [rdx*2 + 0x3e934839]
		and r10, rdx
		neg r9d
		sub rbp, r11
		xor cl, r10b
		shr edx, cl
		rol r9d, 1
		xor r10w, cx
		push rbx
		btc rbp, 0x89
		xor dword ptr [rsp + rdx*2 - 0x10e6c6c6], r9d
		not al
		btr r10d, 0x29
		pop rbx
		bswap eax
		sbb r10w, ax
		mov dword ptr [rsi + rdx - 0x8736367], r9d
		shl r11w, 0x49
		movzx r9d, dl
		sar r9w, 0xe1
		mov ecx, dword ptr [r8 + rdx*2 - 0x10e6c6c2]
		xadd r11b, al
		xor ecx, ebx
		not r10w
		push r10
		btc r11, r9
		lea ecx, [rcx + r10 + 0x16f5023]
		call 0x7ffb72dba9bb
669: UB addr = 7ffb7296a10b with ID: 203 yields:
		neg r11
		ror r11, 1
		inc r9b
		lea r11, [r11 + rdx*2 - 0x5c91986f]
		dec ax
		rol r11, 5
		cbw
		ror byte ptr [rsp + rdx - 0x8736355], 0xc5
		cdq
		xor rbx, r11
		and edx, 0x3237e912
		mov qword ptr [rdx + rsi - 0xc], r11
		lea rsi, [rdx + rsi - 0xc]
		movzx r11d, word ptr [rsp + rdx + 6]
		pop rdx
		pop rbp
		jae 0x7ffb72be239f
670: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
671: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
672: UB addr = 7ffb72957d25 with ID: 263 yields:
		mov r10d, 0x493ed594
		mov r11d, dword ptr [r8 + r10 - 0x493ed594]
		movsx eax, r10b
		push rax
		xor r11d, ebx
		dec r11d
		cqo
		movsx ecx, dx
		neg r11d
		dec qword ptr [rsp + r10 - 0x493ed594]
		lea r9, [rcx*8 - 0x5bc03067]
		cdq
		sub r11d, edx
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
673: UB addr = 7ffb7294e535 with ID: 228 yields:
		lea rsi, [rsi + rcx*4 - 4]
		dec r9
		pop r10
		pop r9
		pop rbp
		pop r11
		jns 0x7ffb72be239f
674: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
675: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
676: UB addr = 7ffb72957d25 with ID: 263 yields:
		mov r10d, 0x493ed594
		mov r11d, dword ptr [r8 + r10 - 0x493ed594]
		movsx eax, r10b
		push rax
		xor r11d, ebx
		dec r11d
		cqo
		movsx ecx, dx
		neg r11d
		dec qword ptr [rsp + r10 - 0x493ed594]
		lea r9, [rcx*8 - 0x5bc03067]
		cdq
		sub r11d, edx
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
677: UB addr = 7ffb72a42885 with ID: 230 yields:
		bts r11d, 0xb8
		adc dl, r10b
		mov ebp, dword ptr [rsp + r11*8 - 0x8071e27]
		ror dl, 1
		call 0x7ffb72daf092
678: UB addr = 7ffb728c051c with ID: 231 yields:
		btc r10, 0x85
		shl r10w, 0xa3
		rol r11b, 1
		push rdx
		xor bl, r11b
		lea r11, [rsp + r11 + 0x18]
		pop rdx
		rol r10d, 0xf6
		sbb rax, 0x1691ddb2
		add rdx, qword ptr [r11 + rbp*2]
		ror al, 0x81
		ror word ptr [rsp + rbp + 0xb], 0x8c
		movsx r11d, cx
		mov qword ptr [r10 + rsi - 0x6a0e09c1], rdx
		lea rsi, [r9 + rsi - 0x7821cfd0]
		push r11
		add bp, 0x4384
		pop rbp
		pop r10
		pop r9
		jge 0x7ffb72be239f
679: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
680: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
681: UB addr = 7ffb72957d25 with ID: 263 yields:
		mov r10d, 0x493ed594
		mov r11d, dword ptr [r8 + r10 - 0x493ed594]
		movsx eax, r10b
		push rax
		xor r11d, ebx
		dec r11d
		cqo
		movsx ecx, dx
		neg r11d
		dec qword ptr [rsp + r10 - 0x493ed594]
		lea r9, [rcx*8 - 0x5bc03067]
		cdq
		sub r11d, edx
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
682: UB addr = 7ffb72b9ed40 with ID: 233 yields:
		lea r11, [rcx*2 - 0xf5430d3]
		movzx ebp, word ptr [rsp + rax*4 + 2]
		mov r10, qword ptr [r8 + rax*4 + 5]
		mov qword ptr [rsp + rax*8 + 8], rbp
		cdq
		lea r8, [rax + r8 + 0xd]
		rol ebp, 0xec
		sbb dl, dl
		cmovb r11d, ecx
		xor r10, rbx
		shl word ptr [rsp + rax + 0xa], 0x61
		ror r10, 1
		pop r9
		pop rcx
		lea r10, [r10 + rcx*2 - 0x4d6ca35c]
		lea rcx, [rbp + r11*4 + 0x772280ab]
		ror r10, 2
		rol r11w, 0x27
		add ecx, 0x73a713b5
		dec r10
		xor r9b, al
		add bpl, al
		xor r10, 0xffffffffa1941012
		xor r9w, bp
		call 0x7ffb72cf3096
683: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
684: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
685: UB addr = 7ffb729df991 with ID: 234 yields:
		mov qword ptr [r11 + rsi - 0x8b], rcx
		and r11, rdx
		mov r10d, dword ptr [r8 + r11*4 + 8]
		cdq
		push r9
		xor r10d, ebx
		add word ptr [rsp + rdx + 1], dx
		btc bp, r9w
		sbb r10d, edx
		shr eax, 0x23
		mov ecx, eax
		shr byte ptr [rsp + rdx], 0x21
		neg r10d
		xadd ebp, edx
		inc r10d
		rol r10d, 1
		mov qword ptr [rsp + r11*2], rbx
		xor dword ptr [rsp + r9 - 0x5e29949b], r10d
		lea rdx, [rdx*4 + 0x578b9f38]
		inc r9w
		pop rbx
		movsxd r10, r10d
		add rdi, r10
		cmp rsi, r9
		ja 0x7ffb72ac6561
686: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
687: UB addr = 7ffb72974544 with ID: 235 yields:
		mov ecx, 0x269b8db6
		movsx r9d, cx
		mov eax, r9d
		mov rcx, qword ptr [rsi + rcx - 0x269b8db6]
		mov r9, qword ptr [rcx]
		movsx ecx, al
		movzx ebp, cl
		mov qword ptr [rsi + rbp*2 - 0x16c], r9
		movsx r9d, bpl
		not r9
		btr ecx, ecx
		mov eax, dword ptr [rbp + r8 - 0xb6]
		cmovb rbp, rcx
		add cx, bp
		sbb r8, -5
		xor eax, ebx
		movsx r10d, bpl
		btr r10w, r9w
		ror eax, 2
		sal rcx, cl
		seta r9b
		adc eax, ecx
		bswap eax
		inc eax
		ror r9, 0x18
		not eax
		push r9
		shl word ptr [rsp + 3], 0x22
		sbb eax, 0x391a119f
		movsx edx, cl
		xchg bp, r9w
		sar r10w, 0x63
		ror eax, 1
		lea eax, [rax + rdx*4 - 0x3b0b64a3]
		pop rdx
		and r10, r9
		call 0x7ffb728e2e70
688: UB addr = 7ffb728e2e70 with ID: 197 yields:
		not eax
		push r10
		mov qword ptr [rsp + 8], rbx
		xor dword ptr [rsp + 8], eax
		xadd qword ptr [rsp], rbp
		xadd dx, r9w
		mov rbx, qword ptr [rsp + 8]
		movsxd rax, eax
		add rdi, rax
		call 0x7ffb72d6d107
689: UB addr = 7ffb72a8f0ba with ID: 236 yields:
		mov r10d, 0x8022e524
		mov r11, qword ptr [rsi]
		mov qword ptr [rsp + r10], rcx
		cdqe
		mov qword ptr [rsp + r10], rdi
		ret
690: UB addr = 7ffb72998573 with ID: 237 yields:
		dec ecx
		or r10d, 0x73828e2b
		not ecx
		lea rbp, [rdx*4 - 0x14c92cc3]
		inc ecx
		cdqe
		push rbx
		inc bp
		xor dword ptr [rsp + rax + 0x46f64048], ecx
		movzx ebx, bpl
		or r10b, bl
		pop rbx
		sar al, 0x27
		lea r9, [rax*4 - 0x7cf14d58]
		movsxd rcx, ecx
		btr eax, edx
		xchg rbp, rdx
		btc eax, 0xbb
		add rdi, rcx
		btr eax, ebp
		mov r11d, dword ptr [rsi + r11*2 - 0xf97300]
		call 0x7ffb72cdfff4
691: UB addr = 7ffb7294e535 with ID: 228 yields:
		lea rsi, [rsi + rcx*4 - 4]
		dec r9
		pop r10
		pop r9
		pop rbp
		pop r11
		jns 0x7ffb72be239f
692: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
693: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
694: UB addr = 7ffb729df991 with ID: 234 yields:
		mov qword ptr [r11 + rsi - 0x8b], rcx
		and r11, rdx
		mov r10d, dword ptr [r8 + r11*4 + 8]
		cdq
		push r9
		xor r10d, ebx
		add word ptr [rsp + rdx + 1], dx
		btc bp, r9w
		sbb r10d, edx
		shr eax, 0x23
		mov ecx, eax
		shr byte ptr [rsp + rdx], 0x21
		neg r10d
		xadd ebp, edx
		inc r10d
		rol r10d, 1
		mov qword ptr [rsp + r11*2], rbx
		xor dword ptr [rsp + r9 - 0x5e29949b], r10d
		lea rdx, [rdx*4 + 0x578b9f38]
		inc r9w
		pop rbx
		movsxd r10, r10d
		add rdi, r10
		cmp rsi, r9
		ja 0x7ffb72ac6561
695: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
696: UB addr = 7ffb72974544 with ID: 235 yields:
		mov ecx, 0x269b8db6
		movsx r9d, cx
		mov eax, r9d
		mov rcx, qword ptr [rsi + rcx - 0x269b8db6]
		mov r9, qword ptr [rcx]
		movsx ecx, al
		movzx ebp, cl
		mov qword ptr [rsi + rbp*2 - 0x16c], r9
		movsx r9d, bpl
		not r9
		btr ecx, ecx
		mov eax, dword ptr [rbp + r8 - 0xb6]
		cmovb rbp, rcx
		add cx, bp
		sbb r8, -5
		xor eax, ebx
		movsx r10d, bpl
		btr r10w, r9w
		ror eax, 2
		sal rcx, cl
		seta r9b
		adc eax, ecx
		bswap eax
		inc eax
		ror r9, 0x18
		not eax
		push r9
		shl word ptr [rsp + 3], 0x22
		sbb eax, 0x391a119f
		movsx edx, cl
		xchg bp, r9w
		sar r10w, 0x63
		ror eax, 1
		lea eax, [rax + rdx*4 - 0x3b0b64a3]
		pop rdx
		and r10, r9
		call 0x7ffb728e2e70
697: UB addr = 7ffb728e2e70 with ID: 197 yields:
		not eax
		push r10
		mov qword ptr [rsp + 8], rbx
		xor dword ptr [rsp + 8], eax
		xadd qword ptr [rsp], rbp
		xadd dx, r9w
		mov rbx, qword ptr [rsp + 8]
		movsxd rax, eax
		add rdi, rax
		call 0x7ffb72d6d107
698: UB addr = 7ffb72902818 with ID: 193 yields:
		mov ecx, 0x8028af23
		xor dword ptr [rsp + r10 - 0x6aad0174], eax
		or dword ptr [rsp + r10 - 0x6aad017d], ebp
		xchg word ptr [rsp + r10 - 0x6aad0177], dx
		sub r11w, cx
		mov rbx, qword ptr [rsp + r10 - 0x6aad0174]
		shl rbp, cl
		bswap r10
		xadd dword ptr [rsp + 8], r11d
		movsxd rax, eax
		jbe 0x7ffb72df9656
699: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
700: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
701: UB addr = 7ffb72957d25 with ID: 263 yields:
		mov r10d, 0x493ed594
		mov r11d, dword ptr [r8 + r10 - 0x493ed594]
		movsx eax, r10b
		push rax
		xor r11d, ebx
		dec r11d
		cqo
		movsx ecx, dx
		neg r11d
		dec qword ptr [rsp + r10 - 0x493ed594]
		lea r9, [rcx*8 - 0x5bc03067]
		cdq
		sub r11d, edx
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
702: UB addr = 7ffb728e2e70 with ID: 197 yields:
		not eax
		push r10
		mov qword ptr [rsp + 8], rbx
		xor dword ptr [rsp + 8], eax
		xadd qword ptr [rsp], rbp
		xadd dx, r9w
		mov rbx, qword ptr [rsp + 8]
		movsxd rax, eax
		add rdi, rax
		call 0x7ffb72d6d107
703: UB addr = 7ffb72993b4a with ID: 238 yields:
		mov qword ptr [rsp + rax - 0x7b], -0x3972fd6d
		movsxd rdx, edx
		neg r10d
		sar byte ptr [rsp + rax*2 - 0xf6], cl
		sal rcx, 0xf3
		adc rdi, rdx
		not eax
		mov qword ptr [rsp + rax - 0x661], rdx
		pop rdx
		jp 0x7ffb72be239f
704: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
705: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
706: UB addr = 7ffb729df991 with ID: 234 yields:
		mov qword ptr [r11 + rsi - 0x8b], rcx
		and r11, rdx
		mov r10d, dword ptr [r8 + r11*4 + 8]
		cdq
		push r9
		xor r10d, ebx
		add word ptr [rsp + rdx + 1], dx
		btc bp, r9w
		sbb r10d, edx
		shr eax, 0x23
		mov ecx, eax
		shr byte ptr [rsp + rdx], 0x21
		neg r10d
		xadd ebp, edx
		inc r10d
		rol r10d, 1
		mov qword ptr [rsp + r11*2], rbx
		xor dword ptr [rsp + r9 - 0x5e29949b], r10d
		lea rdx, [rdx*4 + 0x578b9f38]
		inc r9w
		pop rbx
		movsxd r10, r10d
		add rdi, r10
		cmp rsi, r9
		ja 0x7ffb72ac6561
707: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
708: UB addr = 7ffb72902818 with ID: 193 yields:
		mov ecx, 0x8028af23
		xor dword ptr [rsp + r10 - 0x6aad0174], eax
		or dword ptr [rsp + r10 - 0x6aad017d], ebp
		xchg word ptr [rsp + r10 - 0x6aad0177], dx
		sub r11w, cx
		mov rbx, qword ptr [rsp + r10 - 0x6aad0174]
		shl rbp, cl
		bswap r10
		xadd dword ptr [rsp + 8], r11d
		movsxd rax, eax
		jbe 0x7ffb72df9656
709: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
710: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
711: UB addr = 7ffb72957d25 with ID: 263 yields:
		mov r10d, 0x493ed594
		mov r11d, dword ptr [r8 + r10 - 0x493ed594]
		movsx eax, r10b
		push rax
		xor r11d, ebx
		dec r11d
		cqo
		movsx ecx, dx
		neg r11d
		dec qword ptr [rsp + r10 - 0x493ed594]
		lea r9, [rcx*8 - 0x5bc03067]
		cdq
		sub r11d, edx
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
712: UB addr = 7ffb728e2e70 with ID: 197 yields:
		not eax
		push r10
		mov qword ptr [rsp + 8], rbx
		xor dword ptr [rsp + 8], eax
		xadd qword ptr [rsp], rbp
		xadd dx, r9w
		mov rbx, qword ptr [rsp + 8]
		movsxd rax, eax
		add rdi, rax
		call 0x7ffb72d6d107
713: UB addr = 7ffb72957d25 with ID: 263 yields:
		mov r10d, 0x493ed594
		mov r11d, dword ptr [r8 + r10 - 0x493ed594]
		movsx eax, r10b
		push rax
		xor r11d, ebx
		dec r11d
		cqo
		movsx ecx, dx
		neg r11d
		dec qword ptr [rsp + r10 - 0x493ed594]
		lea r9, [rcx*8 - 0x5bc03067]
		cdq
		sub r11d, edx
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
714: UB addr = 7ffb729201d0 with ID: 240 yields:
		jne 0x7ffb72ce9340
715: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
716: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
717: UB addr = 7ffb729df991 with ID: 234 yields:
		mov qword ptr [r11 + rsi - 0x8b], rcx
		and r11, rdx
		mov r10d, dword ptr [r8 + r11*4 + 8]
		cdq
		push r9
		xor r10d, ebx
		add word ptr [rsp + rdx + 1], dx
		btc bp, r9w
		sbb r10d, edx
		shr eax, 0x23
		mov ecx, eax
		shr byte ptr [rsp + rdx], 0x21
		neg r10d
		xadd ebp, edx
		inc r10d
		rol r10d, 1
		mov qword ptr [rsp + r11*2], rbx
		xor dword ptr [rsp + r9 - 0x5e29949b], r10d
		lea rdx, [rdx*4 + 0x578b9f38]
		inc r9w
		pop rbx
		movsxd r10, r10d
		add rdi, r10
		cmp rsi, r9
		ja 0x7ffb72ac6561
718: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
719: UB addr = 7ffb72974544 with ID: 235 yields:
		mov ecx, 0x269b8db6
		movsx r9d, cx
		mov eax, r9d
		mov rcx, qword ptr [rsi + rcx - 0x269b8db6]
		mov r9, qword ptr [rcx]
		movsx ecx, al
		movzx ebp, cl
		mov qword ptr [rsi + rbp*2 - 0x16c], r9
		movsx r9d, bpl
		not r9
		btr ecx, ecx
		mov eax, dword ptr [rbp + r8 - 0xb6]
		cmovb rbp, rcx
		add cx, bp
		sbb r8, -5
		xor eax, ebx
		movsx r10d, bpl
		btr r10w, r9w
		ror eax, 2
		sal rcx, cl
		seta r9b
		adc eax, ecx
		bswap eax
		inc eax
		ror r9, 0x18
		not eax
		push r9
		shl word ptr [rsp + 3], 0x22
		sbb eax, 0x391a119f
		movsx edx, cl
		xchg bp, r9w
		sar r10w, 0x63
		ror eax, 1
		lea eax, [rax + rdx*4 - 0x3b0b64a3]
		pop rdx
		and r10, r9
		call 0x7ffb728e2e70
720: UB addr = 7ffb728e2e70 with ID: 197 yields:
		not eax
		push r10
		mov qword ptr [rsp + 8], rbx
		xor dword ptr [rsp + 8], eax
		xadd qword ptr [rsp], rbp
		xadd dx, r9w
		mov rbx, qword ptr [rsp + 8]
		movsxd rax, eax
		add rdi, rax
		call 0x7ffb72d6d107
721: UB addr = 7ffb72909bf3 with ID: 241 yields:
		mov edx, 0x3b054aaa
		mov r11d, 0x5584dab6
		mov r9, qword ptr [rdx + rsi - 0x3b054aaa]
		movzx ecx, r11w
		mov eax, 0x7e925694
		ror cx, 0xc8
		mov r10, qword ptr [r11 + rsi - 0x5584daae]
		mov ebp, 0xce3c9eb8
		btc ecx, 0xb3
		and r9, r10
		not r9
		mov qword ptr [rdx + rsi - 0x3b054aa2], r9
		lea r9, [rdx + rsi - 0x3b054aa2]
		and edx, ecx
		movsx r10d, cx
		mov qword ptr [rsi + rdx - 0x28a], r9
		sal al, 0x86
		call 0x7ffb72c2176d
722: UB addr = 7ffb729f81d3 with ID: 242 yields:
		mov eax, r11d
		dec r11d
		dec edx
		bswap eax
		dec bp
		bswap edx
		inc edx
		not edx
		xchg r10d, r9d
		ror cx, 0xe1
		push rbx
		and r9d, r10d
		cmovns r11, r9
		xor dword ptr [rsp + r11 - 0x55852efc], edx
		pop rbx
		push r9
		xchg byte ptr [rsp + r11 - 0x55852ef8], r10b
		movsxd rdx, edx
		bts rax, rbp
		adc r9w, 0x2221
		shr r9w, 0xe8
		add rdi, rdx
		sal rbp, 0xdf
		or qword ptr [rsp + r11 - 0x55852efc], r9
		bt r10d, ebp
		mov qword ptr [rsp + r11 - 0x55852efc], rdi
		ret
723: UB addr = 7ffb728f209f with ID: 243 yields:
		mov qword ptr [rsp + r9], 0x1fa61591
		rol qword ptr [rsp + r9], 0x88
		mov qword ptr [rsp + r9*4], rbx
		jae 0x7ffb72cf2be2
724: UB addr = 7ffb728d5c3a with ID: 244 yields:
		not dl
		xor rax, r11
		setp bpl
		xor bl, dl
		neg ax
		add rdx, rsp
		and eax, ecx
		mov qword ptr [rcx + rdx - 0x20080800], r9
		push rcx
		mov qword ptr [rsp + rax*2], rdi
		ret
725: UB addr = 7ffb72b94e2b with ID: 245 yields:
		sub r9d, 0x63114488
		sbb rcx, r10
		sal al, 0x27
		rol rcx, 6
		dec r10b
		lea rcx, [rcx + r10*8 - 0x7521fea3]
		bswap rcx
		cbw
		xor rbx, rcx
		sal r11, 0xf5
		mov qword ptr [rdx + rsi - 0x3da4b10a], rcx
		lea rsi, [rdx + rsi - 0x3da4b10a]
		not r11
		mov edx, dword ptr [r8 + r10*2 - 0x1f4]
		bts rax, r10
		lea r8, [r8 + r10 - 0xf1]
		and al, r11b
		xor edx, ebx
		lea rbp, [r10*8 + 0x4ba28922]
		btr bp, r10w
		lea edx, [rdx + r9 - 0x14486bbc]
		rol edx, 2
		shl r11, 0xc4
		jae 0x7ffb72c34f31
726: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
727: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
728: UB addr = 7ffb72957d25 with ID: 263 yields:
		mov r10d, 0x493ed594
		mov r11d, dword ptr [r8 + r10 - 0x493ed594]
		movsx eax, r10b
		push rax
		xor r11d, ebx
		dec r11d
		cqo
		movsx ecx, dx
		neg r11d
		dec qword ptr [rsp + r10 - 0x493ed594]
		lea r9, [rcx*8 - 0x5bc03067]
		cdq
		sub r11d, edx
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
729: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
730: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
731: UB addr = 7ffb72902818 with ID: 193 yields:
		mov ecx, 0x8028af23
		xor dword ptr [rsp + r10 - 0x6aad0174], eax
		or dword ptr [rsp + r10 - 0x6aad017d], ebp
		xchg word ptr [rsp + r10 - 0x6aad0177], dx
		sub r11w, cx
		mov rbx, qword ptr [rsp + r10 - 0x6aad0174]
		shl rbp, cl
		bswap r10
		xadd dword ptr [rsp + 8], r11d
		movsxd rax, eax
		jbe 0x7ffb72df9656
732: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
733: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
734: UB addr = 7ffb72957d25 with ID: 263 yields:
		mov r10d, 0x493ed594
		mov r11d, dword ptr [r8 + r10 - 0x493ed594]
		movsx eax, r10b
		push rax
		xor r11d, ebx
		dec r11d
		cqo
		movsx ecx, dx
		neg r11d
		dec qword ptr [rsp + r10 - 0x493ed594]
		lea r9, [rcx*8 - 0x5bc03067]
		cdq
		sub r11d, edx
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
735: UB addr = 7ffb728e2e70 with ID: 197 yields:
		not eax
		push r10
		mov qword ptr [rsp + 8], rbx
		xor dword ptr [rsp + 8], eax
		xadd qword ptr [rsp], rbp
		xadd dx, r9w
		mov rbx, qword ptr [rsp + 8]
		movsxd rax, eax
		add rdi, rax
		call 0x7ffb72d6d107
736: UB addr = 7ffb72909bf3 with ID: 241 yields:
		mov edx, 0x3b054aaa
		mov r11d, 0x5584dab6
		mov r9, qword ptr [rdx + rsi - 0x3b054aaa]
		movzx ecx, r11w
		mov eax, 0x7e925694
		ror cx, 0xc8
		mov r10, qword ptr [r11 + rsi - 0x5584daae]
		mov ebp, 0xce3c9eb8
		btc ecx, 0xb3
		and r9, r10
		not r9
		mov qword ptr [rdx + rsi - 0x3b054aa2], r9
		lea r9, [rdx + rsi - 0x3b054aa2]
		and edx, ecx
		movsx r10d, cx
		mov qword ptr [rsi + rdx - 0x28a], r9
		sal al, 0x86
		call 0x7ffb72c2176d
737: UB addr = 7ffb729f81d3 with ID: 242 yields:
		mov eax, r11d
		dec r11d
		dec edx
		bswap eax
		dec bp
		bswap edx
		inc edx
		not edx
		xchg r10d, r9d
		ror cx, 0xe1
		push rbx
		and r9d, r10d
		cmovns r11, r9
		xor dword ptr [rsp + r11 - 0x55852efc], edx
		pop rbx
		push r9
		xchg byte ptr [rsp + r11 - 0x55852ef8], r10b
		movsxd rdx, edx
		bts rax, rbp
		adc r9w, 0x2221
		shr r9w, 0xe8
		add rdi, rdx
		sal rbp, 0xdf
		or qword ptr [rsp + r11 - 0x55852efc], r9
		bt r10d, ebp
		mov qword ptr [rsp + r11 - 0x55852efc], rdi
		ret
738: UB addr = 7ffb728f209f with ID: 243 yields:
		mov qword ptr [rsp + r9], 0x1fa61591
		rol qword ptr [rsp + r9], 0x88
		mov qword ptr [rsp + r9*4], rbx
		jae 0x7ffb72cf2be2
739: UB addr = 7ffb72959e63 with ID: 188 yields:
		mov r11d, dword ptr [r8]
		mov ebp, 0x1c286c1a
		xor r11d, ebx
		mov edx, ebp
		neg r11d
		lea rcx, [rbp + rdx + 0x5889aca7]
		lea r9, [rbp*2 - 0x6bdd6af9]
		ror r9w, 0x23
		inc r11d
		neg rbp
		movzx r10d, dx
		neg r11d
		sub cx, r10w
		btc ecx, 0x24
		xor r11d, 0x3fbfdd22
		push rbx
		xor dword ptr [rsp + rbp*2 + 0x3850d834], r11d
		pop rbx
		movsxd r11, r11d
		add rdi, r11
		mov r10, qword ptr [rsi + rbp + 0x1c286c1a]
		add bp, r9w
		movzx edx, byte ptr [r8 + rbp + 0x1c28fe77]
		lea rax, [r9 + r9*4 - 0x58422a5b]
		xor dl, bl
		or r9b, cl
		inc ebp
		not dl
		or r9, rbp
		adc dl, r9b
		neg dl
		cwde
		ror dl, 1
		neg r9d
		lea r11, [r9*8 - 0x466b7978]
		shl r9, cl
		sbb dl, 0x38
		lea r9, [r9 + rcx*8 + 0x629f4a1c]
		or r9d, r11d
		or r9w, cx
		not dl
		btc ecx, 5
		xor bl, dl
		sar r9w, 0x6f
		push rax
		lea rdx, [rsp + rdx + 8]
		inc byte ptr [rsp + r9*2 - 0x7bf1fffc]
		mov qword ptr [rdx + r9*2 - 0x7bf20000], r10
		dec cl
		mov rbp, qword ptr [rsi + r9 - 0x3df8fff8]
		bswap r11
		lea rsi, [rsi + r9 - 0x3df8fff0]
		movsx edx, r9w
		sar qword ptr [rsp + r9*2 - 0x7bf20000], cl
		movzx ecx, byte ptr [r9 + r8 - 0x3df8fffb]
		lea r8, [r8 + r9 - 0x3df8fffa]
		xor cl, bl
		neg cl
		sub rdx, 0x27211a2a
		setle byte ptr [rsp + r9 - 0x3df90000]
		adc cl, r9b
		pop rax
		call 0x7ffb72c13988
740: UB addr = 7ffb72957d25 with ID: 263 yields:
		mov r10d, 0x493ed594
		mov r11d, dword ptr [r8 + r10 - 0x493ed594]
		movsx eax, r10b
		push rax
		xor r11d, ebx
		dec r11d
		cqo
		movsx ecx, dx
		neg r11d
		dec qword ptr [rsp + r10 - 0x493ed594]
		lea r9, [rcx*8 - 0x5bc03067]
		cdq
		sub r11d, edx
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
741: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
742: UB addr = 7ffb72943abe with ID: 248 yields:
		mov r9d, dword ptr [r8 + r10*4 - 0x38b080ce]
		xor r9d, ebx
		sar ax, cl
		xchg dl, bpl
		dec r9d
		movzx r11d, al
		neg r9d
		mov qword ptr [rsp + r10 - 0xe2c2034], 0xe2d5326
		lea r10, [r11 + rax*8 - 0x2af826f2]
		sub r10b, byte ptr [rsp + rdx - 0x3628065c]
		inc r9d
		rol r9d, 1
		mov qword ptr [rsp + rdx - 0x36280663], rbx
		cwd
		xor dword ptr [rsp + rdx*2 - 0x6c500000], r9d
		pop rbx
		sub r11d, ecx
		movsxd r9, r9d
		add rdi, r9
		cbw
		movzx edx, byte ptr [r8 + rdx - 0x3627fffa]
		sub rbp, 0x290efb9a
		lea r8, [r8 + r11 - 0x2c618b41]
		sal al, cl
		xor dl, bl
		movsx r9d, bp
		not dl
		call 0x7ffb72e0260c
743: UB addr = 7ffb72a05f91 with ID: 249 yields:
		lea rdx, [rsp + rdx + 8]
		bts ebp, 0xa3
		mov qword ptr [rsp + rbp*2 - 0x10], r9
		mov rcx, qword ptr [rdx + rbp*2 - 0x10]
		setae r11b
		adc byte ptr [rsp + rbp - 3], bpl
		mov qword ptr [rsi + rbp*2 - 0x20], rcx
		lea rsi, [rsi + rbp*4 - 0x30]
		ror r11d, 0x89
		pop rdx
		jbe 0x7ffb72be239f
744: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
745: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
746: UB addr = 7ffb72943abe with ID: 248 yields:
		mov r9d, dword ptr [r8 + r10*4 - 0x38b080ce]
		xor r9d, ebx
		sar ax, cl
		xchg dl, bpl
		dec r9d
		movzx r11d, al
		neg r9d
		mov qword ptr [rsp + r10 - 0xe2c2034], 0xe2d5326
		lea r10, [r11 + rax*8 - 0x2af826f2]
		sub r10b, byte ptr [rsp + rdx - 0x3628065c]
		inc r9d
		rol r9d, 1
		mov qword ptr [rsp + rdx - 0x36280663], rbx
		cwd
		xor dword ptr [rsp + rdx*2 - 0x6c500000], r9d
		pop rbx
		sub r11d, ecx
		movsxd r9, r9d
		add rdi, r9
		cbw
		movzx edx, byte ptr [r8 + rdx - 0x3627fffa]
		sub rbp, 0x290efb9a
		lea r8, [r8 + r11 - 0x2c618b41]
		sal al, cl
		xor dl, bl
		movsx r9d, bp
		not dl
		call 0x7ffb72e0260c
747: UB addr = 7ffb72a05f91 with ID: 249 yields:
		lea rdx, [rsp + rdx + 8]
		bts ebp, 0xa3
		mov qword ptr [rsp + rbp*2 - 0x10], r9
		mov rcx, qword ptr [rdx + rbp*2 - 0x10]
		setae r11b
		adc byte ptr [rsp + rbp - 3], bpl
		mov qword ptr [rsi + rbp*2 - 0x20], rcx
		lea rsi, [rsi + rbp*4 - 0x30]
		ror r11d, 0x89
		pop rdx
		jbe 0x7ffb72be239f
748: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
749: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
750: UB addr = 7ffb72b94e2b with ID: 245 yields:
		sub r9d, 0x63114488
		sbb rcx, r10
		sal al, 0x27
		rol rcx, 6
		dec r10b
		lea rcx, [rcx + r10*8 - 0x7521fea3]
		bswap rcx
		cbw
		xor rbx, rcx
		sal r11, 0xf5
		mov qword ptr [rdx + rsi - 0x3da4b10a], rcx
		lea rsi, [rdx + rsi - 0x3da4b10a]
		not r11
		mov edx, dword ptr [r8 + r10*2 - 0x1f4]
		bts rax, r10
		lea r8, [r8 + r10 - 0xf1]
		and al, r11b
		xor edx, ebx
		lea rbp, [r10*8 + 0x4ba28922]
		btr bp, r10w
		lea edx, [rdx + r9 - 0x14486bbc]
		rol edx, 2
		shl r11, 0xc4
		jae 0x7ffb72c34f31
751: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
752: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
753: UB addr = 7ffb72957d25 with ID: 263 yields:
		mov r10d, 0x493ed594
		mov r11d, dword ptr [r8 + r10 - 0x493ed594]
		movsx eax, r10b
		push rax
		xor r11d, ebx
		dec r11d
		cqo
		movsx ecx, dx
		neg r11d
		dec qword ptr [rsp + r10 - 0x493ed594]
		lea r9, [rcx*8 - 0x5bc03067]
		cdq
		sub r11d, edx
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
754: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
755: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
756: UB addr = 7ffb72957d25 with ID: 263 yields:
		mov r10d, 0x493ed594
		mov r11d, dword ptr [r8 + r10 - 0x493ed594]
		movsx eax, r10b
		push rax
		xor r11d, ebx
		dec r11d
		cqo
		movsx ecx, dx
		neg r11d
		dec qword ptr [rsp + r10 - 0x493ed594]
		lea r9, [rcx*8 - 0x5bc03067]
		cdq
		sub r11d, edx
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
757: UB addr = 7ffb728e2e70 with ID: 197 yields:
		not eax
		push r10
		mov qword ptr [rsp + 8], rbx
		xor dword ptr [rsp + 8], eax
		xadd qword ptr [rsp], rbp
		xadd dx, r9w
		mov rbx, qword ptr [rsp + 8]
		movsxd rax, eax
		add rdi, rax
		call 0x7ffb72d6d107
758: UB addr = 7ffb72957d25 with ID: 263 yields:
		mov r10d, 0x493ed594
		mov r11d, dword ptr [r8 + r10 - 0x493ed594]
		movsx eax, r10b
		push rax
		xor r11d, ebx
		dec r11d
		cqo
		movsx ecx, dx
		neg r11d
		dec qword ptr [rsp + r10 - 0x493ed594]
		lea r9, [rcx*8 - 0x5bc03067]
		cdq
		sub r11d, edx
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
759: UB addr = 7ffb729201d0 with ID: 240 yields:
		jne 0x7ffb72ce9340
760: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
761: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
762: UB addr = 7ffb729df991 with ID: 234 yields:
		mov qword ptr [r11 + rsi - 0x8b], rcx
		and r11, rdx
		mov r10d, dword ptr [r8 + r11*4 + 8]
		cdq
		push r9
		xor r10d, ebx
		add word ptr [rsp + rdx + 1], dx
		btc bp, r9w
		sbb r10d, edx
		shr eax, 0x23
		mov ecx, eax
		shr byte ptr [rsp + rdx], 0x21
		neg r10d
		xadd ebp, edx
		inc r10d
		rol r10d, 1
		mov qword ptr [rsp + r11*2], rbx
		xor dword ptr [rsp + r9 - 0x5e29949b], r10d
		lea rdx, [rdx*4 + 0x578b9f38]
		inc r9w
		pop rbx
		movsxd r10, r10d
		add rdi, r10
		cmp rsi, r9
		ja 0x7ffb72ac6561
763: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
764: UB addr = 7ffb72974544 with ID: 235 yields:
		mov ecx, 0x269b8db6
		movsx r9d, cx
		mov eax, r9d
		mov rcx, qword ptr [rsi + rcx - 0x269b8db6]
		mov r9, qword ptr [rcx]
		movsx ecx, al
		movzx ebp, cl
		mov qword ptr [rsi + rbp*2 - 0x16c], r9
		movsx r9d, bpl
		not r9
		btr ecx, ecx
		mov eax, dword ptr [rbp + r8 - 0xb6]
		cmovb rbp, rcx
		add cx, bp
		sbb r8, -5
		xor eax, ebx
		movsx r10d, bpl
		btr r10w, r9w
		ror eax, 2
		sal rcx, cl
		seta r9b
		adc eax, ecx
		bswap eax
		inc eax
		ror r9, 0x18
		not eax
		push r9
		shl word ptr [rsp + 3], 0x22
		sbb eax, 0x391a119f
		movsx edx, cl
		xchg bp, r9w
		sar r10w, 0x63
		ror eax, 1
		lea eax, [rax + rdx*4 - 0x3b0b64a3]
		pop rdx
		and r10, r9
		call 0x7ffb728e2e70
765: UB addr = 7ffb728e2e70 with ID: 197 yields:
		not eax
		push r10
		mov qword ptr [rsp + 8], rbx
		xor dword ptr [rsp + 8], eax
		xadd qword ptr [rsp], rbp
		xadd dx, r9w
		mov rbx, qword ptr [rsp + 8]
		movsxd rax, eax
		add rdi, rax
		call 0x7ffb72d6d107
766: UB addr = 7ffb72909bf3 with ID: 241 yields:
		mov edx, 0x3b054aaa
		mov r11d, 0x5584dab6
		mov r9, qword ptr [rdx + rsi - 0x3b054aaa]
		movzx ecx, r11w
		mov eax, 0x7e925694
		ror cx, 0xc8
		mov r10, qword ptr [r11 + rsi - 0x5584daae]
		mov ebp, 0xce3c9eb8
		btc ecx, 0xb3
		and r9, r10
		not r9
		mov qword ptr [rdx + rsi - 0x3b054aa2], r9
		lea r9, [rdx + rsi - 0x3b054aa2]
		and edx, ecx
		movsx r10d, cx
		mov qword ptr [rsi + rdx - 0x28a], r9
		sal al, 0x86
		call 0x7ffb72c2176d
767: UB addr = 7ffb729f81d3 with ID: 242 yields:
		mov eax, r11d
		dec r11d
		dec edx
		bswap eax
		dec bp
		bswap edx
		inc edx
		not edx
		xchg r10d, r9d
		ror cx, 0xe1
		push rbx
		and r9d, r10d
		cmovns r11, r9
		xor dword ptr [rsp + r11 - 0x55852efc], edx
		pop rbx
		push r9
		xchg byte ptr [rsp + r11 - 0x55852ef8], r10b
		movsxd rdx, edx
		bts rax, rbp
		adc r9w, 0x2221
		shr r9w, 0xe8
		add rdi, rdx
		sal rbp, 0xdf
		or qword ptr [rsp + r11 - 0x55852efc], r9
		bt r10d, ebp
		mov qword ptr [rsp + r11 - 0x55852efc], rdi
		ret
768: UB addr = 7ffb72ba1800 with ID: 251 yields:
		mov ebp, 0xe30440b9
		mov edx, dword ptr [r8]
		movzx r11d, bp
		lea r9, [r11 + rbp*8 - 0x40f3f7e8]
		not r11w
		lea r8, [r8 + r11 - 0xbf42]
		btr bp, r9w
		xor edx, ebx
		sar rbp, 0x24
		push r9
		not edx
		rol dword ptr [rsp + rbp*8 + 3], 0xbb
		inc r11d
		or dword ptr [rsp + rbp + 2], 0x7983da3
		bswap edx
		xor edx, 0x631288ab
		lea rcx, [r11 + rbp*4 - 0x186aaf70]
		not dword ptr [rsp + rbp*4 + 3]
		push rbp
		ror edx, 1
		inc dword ptr [rsp + rbp + 8]
		dec edx
		movzx r10d, bpl
		shr r11d, cl
		neg r11w
		xor edx, 0x76206f3a
		neg r9b
		btr r9, r11
		mov qword ptr [rsp + rbp + 8], rbx
		xor dword ptr [rsp + rbp + 8], edx
		mov rbx, qword ptr [rsp + rbp + 8]
		shl r9w, 0xad
		movsxd rdx, edx
		shl byte ptr [rsp + rbp], 0x62
		adc rdi, rdx
		xor qword ptr [rsp + rcx + 0x1869f029], 0xffffffff841f989a
		shr rcx, 0xe7
		mov rax, qword ptr [rsi + rbp*8]
		neg r11
		rol r9d, cl
		shr bp, 0x6a
		add rbp, qword ptr ss:[rax + rbp*4]
		rol dword ptr [rsp + r11 + 2], cl
		mov rdx, rbp
		mov rbp, qword ptr [r11 + rsi + 8]
		and rdx, rbp
		mov qword ptr [rsp + r11*4 + 8], r10
		shl r10, cl
		not rdx
		je 0x7ffb72d35ddb
769: UB addr = 7ffb729df991 with ID: 234 yields:
		mov qword ptr [r11 + rsi - 0x8b], rcx
		and r11, rdx
		mov r10d, dword ptr [r8 + r11*4 + 8]
		cdq
		push r9
		xor r10d, ebx
		add word ptr [rsp + rdx + 1], dx
		btc bp, r9w
		sbb r10d, edx
		shr eax, 0x23
		mov ecx, eax
		shr byte ptr [rsp + rdx], 0x21
		neg r10d
		xadd ebp, edx
		inc r10d
		rol r10d, 1
		mov qword ptr [rsp + r11*2], rbx
		xor dword ptr [rsp + r9 - 0x5e29949b], r10d
		lea rdx, [rdx*4 + 0x578b9f38]
		inc r9w
		pop rbx
		movsxd r10, r10d
		add rdi, r10
		cmp rsi, r9
		ja 0x7ffb72ac6561
770: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
771: UB addr = 7ffb729a5d84 with ID: 252 yields:
		mov ecx, 0x41aed209
		mov ebp, dword ptr [r8 + rcx - 0x41aed209]
		movzx eax, cx
		rol ebp, 1
		push rbx
		cbw
		not r9
		dec rax
		xor dword ptr [rsp + r11 - 0xffb6], ebp
		pop rbx
		movsxd rbp, ebp
		add rdi, rbp
		bswap edx
		cdqe
		movzx ebp, byte ptr [rax + r8 + 0xf]
		shl r9w, 0x6a
		ror rax, cl
		setnp dl
		xor bpl, bl
		dec dx
		sub bpl, 0x17
		xor bpl, al
		inc eax
		sub r9d, r11d
		rol bpl, 1
		movzx r10d, dl
		bswap r11
		xor bpl, dl
		sal edx, 0x3e
		sbb bpl, 0x89
		call 0x7ffb72d17c3f
772: UB addr = 7ffb72b9ed40 with ID: 233 yields:
		lea r11, [rcx*2 - 0xf5430d3]
		movzx ebp, word ptr [rsp + rax*4 + 2]
		mov r10, qword ptr [r8 + rax*4 + 5]
		mov qword ptr [rsp + rax*8 + 8], rbp
		cdq
		lea r8, [rax + r8 + 0xd]
		rol ebp, 0xec
		sbb dl, dl
		cmovb r11d, ecx
		xor r10, rbx
		shl word ptr [rsp + rax + 0xa], 0x61
		ror r10, 1
		pop r9
		pop rcx
		lea r10, [r10 + rcx*2 - 0x4d6ca35c]
		lea rcx, [rbp + r11*4 + 0x772280ab]
		ror r10, 2
		rol r11w, 0x27
		add ecx, 0x73a713b5
		dec r10
		xor r9b, al
		add bpl, al
		xor r10, 0xffffffffa1941012
		xor r9w, bp
		call 0x7ffb72cf3096
773: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
774: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
775: UB addr = 7ffb729df991 with ID: 234 yields:
		mov qword ptr [r11 + rsi - 0x8b], rcx
		and r11, rdx
		mov r10d, dword ptr [r8 + r11*4 + 8]
		cdq
		push r9
		xor r10d, ebx
		add word ptr [rsp + rdx + 1], dx
		btc bp, r9w
		sbb r10d, edx
		shr eax, 0x23
		mov ecx, eax
		shr byte ptr [rsp + rdx], 0x21
		neg r10d
		xadd ebp, edx
		inc r10d
		rol r10d, 1
		mov qword ptr [rsp + r11*2], rbx
		xor dword ptr [rsp + r9 - 0x5e29949b], r10d
		lea rdx, [rdx*4 + 0x578b9f38]
		inc r9w
		pop rbx
		movsxd r10, r10d
		add rdi, r10
		cmp rsi, r9
		ja 0x7ffb72ac6561
776: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
777: UB addr = 7ffb72974544 with ID: 235 yields:
		mov ecx, 0x269b8db6
		movsx r9d, cx
		mov eax, r9d
		mov rcx, qword ptr [rsi + rcx - 0x269b8db6]
		mov r9, qword ptr [rcx]
		movsx ecx, al
		movzx ebp, cl
		mov qword ptr [rsi + rbp*2 - 0x16c], r9
		movsx r9d, bpl
		not r9
		btr ecx, ecx
		mov eax, dword ptr [rbp + r8 - 0xb6]
		cmovb rbp, rcx
		add cx, bp
		sbb r8, -5
		xor eax, ebx
		movsx r10d, bpl
		btr r10w, r9w
		ror eax, 2
		sal rcx, cl
		seta r9b
		adc eax, ecx
		bswap eax
		inc eax
		ror r9, 0x18
		not eax
		push r9
		shl word ptr [rsp + 3], 0x22
		sbb eax, 0x391a119f
		movsx edx, cl
		xchg bp, r9w
		sar r10w, 0x63
		ror eax, 1
		lea eax, [rax + rdx*4 - 0x3b0b64a3]
		pop rdx
		and r10, r9
		call 0x7ffb728e2e70
778: UB addr = 7ffb728e2e70 with ID: 197 yields:
		not eax
		push r10
		mov qword ptr [rsp + 8], rbx
		xor dword ptr [rsp + 8], eax
		xadd qword ptr [rsp], rbp
		xadd dx, r9w
		mov rbx, qword ptr [rsp + 8]
		movsxd rax, eax
		add rdi, rax
		call 0x7ffb72d6d107
779: UB addr = 7ffb72909bf3 with ID: 241 yields:
		mov edx, 0x3b054aaa
		mov r11d, 0x5584dab6
		mov r9, qword ptr [rdx + rsi - 0x3b054aaa]
		movzx ecx, r11w
		mov eax, 0x7e925694
		ror cx, 0xc8
		mov r10, qword ptr [r11 + rsi - 0x5584daae]
		mov ebp, 0xce3c9eb8
		btc ecx, 0xb3
		and r9, r10
		not r9
		mov qword ptr [rdx + rsi - 0x3b054aa2], r9
		lea r9, [rdx + rsi - 0x3b054aa2]
		and edx, ecx
		movsx r10d, cx
		mov qword ptr [rsi + rdx - 0x28a], r9
		sal al, 0x86
		call 0x7ffb72c2176d
780: UB addr = 7ffb729f81d3 with ID: 242 yields:
		mov eax, r11d
		dec r11d
		dec edx
		bswap eax
		dec bp
		bswap edx
		inc edx
		not edx
		xchg r10d, r9d
		ror cx, 0xe1
		push rbx
		and r9d, r10d
		cmovns r11, r9
		xor dword ptr [rsp + r11 - 0x55852efc], edx
		pop rbx
		push r9
		xchg byte ptr [rsp + r11 - 0x55852ef8], r10b
		movsxd rdx, edx
		bts rax, rbp
		adc r9w, 0x2221
		shr r9w, 0xe8
		add rdi, rdx
		sal rbp, 0xdf
		or qword ptr [rsp + r11 - 0x55852efc], r9
		bt r10d, ebp
		mov qword ptr [rsp + r11 - 0x55852efc], rdi
		ret
781: UB addr = 7ffb72ba1800 with ID: 251 yields:
		mov ebp, 0xe30440b9
		mov edx, dword ptr [r8]
		movzx r11d, bp
		lea r9, [r11 + rbp*8 - 0x40f3f7e8]
		not r11w
		lea r8, [r8 + r11 - 0xbf42]
		btr bp, r9w
		xor edx, ebx
		sar rbp, 0x24
		push r9
		not edx
		rol dword ptr [rsp + rbp*8 + 3], 0xbb
		inc r11d
		or dword ptr [rsp + rbp + 2], 0x7983da3
		bswap edx
		xor edx, 0x631288ab
		lea rcx, [r11 + rbp*4 - 0x186aaf70]
		not dword ptr [rsp + rbp*4 + 3]
		push rbp
		ror edx, 1
		inc dword ptr [rsp + rbp + 8]
		dec edx
		movzx r10d, bpl
		shr r11d, cl
		neg r11w
		xor edx, 0x76206f3a
		neg r9b
		btr r9, r11
		mov qword ptr [rsp + rbp + 8], rbx
		xor dword ptr [rsp + rbp + 8], edx
		mov rbx, qword ptr [rsp + rbp + 8]
		shl r9w, 0xad
		movsxd rdx, edx
		shl byte ptr [rsp + rbp], 0x62
		adc rdi, rdx
		xor qword ptr [rsp + rcx + 0x1869f029], 0xffffffff841f989a
		shr rcx, 0xe7
		mov rax, qword ptr [rsi + rbp*8]
		neg r11
		rol r9d, cl
		shr bp, 0x6a
		add rbp, qword ptr ss:[rax + rbp*4]
		rol dword ptr [rsp + r11 + 2], cl
		mov rdx, rbp
		mov rbp, qword ptr [r11 + rsi + 8]
		and rdx, rbp
		mov qword ptr [rsp + r11*4 + 8], r10
		shl r10, cl
		not rdx
		je 0x7ffb72d35ddb
782: UB addr = 7ffb728f0470 with ID: 253 yields:
		push -0x2a6d0dce
		mov eax, 0xea0a2f99
		btc rax, 0x32
		mov rdx, qword ptr [rsi]
		neg word ptr [rsp + 2]
		call 0x7ffb72d23f22
783: UB addr = 7ffb72a5136a with ID: 254 yields:
		adc rdi, rcx
		mov qword ptr [rsp + rax - 0x5ff31fe8], -0x34ce65d5
		mov rax, qword ptr [rsi + rax - 0x5ff31ffe]
		ror word ptr [rsp + rbp + 0x646d8c32], 0x27
		mov rcx, qword ptr [rsi + rbp + 0x646d8c29]
		and qword ptr [rsp + r9*2 - 0xe91a], r11
		jle 0x7ffb72ec8c9c
784: UB addr = 7ffb72a513a3 with ID: 255 yields:
		bts edx, ebp
		adc rax, rcx
		inc r11
		mov qword ptr [rbp + rsi + 0x646d8c29], rax
		btr r11w, dx
		lea rsi, [rsi + r9 - 0x748f]
		movzx eax, r11b
		adc eax, ebp
		dec al
		mov qword ptr [rsp + rbp + 0x646d8c1f], rdi
		ret 0x18
785: UB addr = 7ffb729496cb with ID: 256 yields:
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
786: UB addr = 7ffb729e2753 with ID: 257 yields:
		sbb bpl, 0x8a
		not bpl
		sub bpl, 0x94
		rol bpl, 1
		ror r10, cl
		not r10b
		xor bl, bpl
		mov byte ptr [rsp + r11 - 0x68a991f0], r10b
		sar rdx, cl
		lea rbp, [rsp + rbp + 0x10]
		cdq
		jns 0x7ffb72c3c452
787: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
788: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
789: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
790: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
791: UB addr = 7ffb72957d25 with ID: 263 yields:
		mov r10d, 0x493ed594
		mov r11d, dword ptr [r8 + r10 - 0x493ed594]
		movsx eax, r10b
		push rax
		xor r11d, ebx
		dec r11d
		cqo
		movsx ecx, dx
		neg r11d
		dec qword ptr [rsp + r10 - 0x493ed594]
		lea r9, [rcx*8 - 0x5bc03067]
		cdq
		sub r11d, edx
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
792: UB addr = 7ffb728e2e70 with ID: 197 yields:
		not eax
		push r10
		mov qword ptr [rsp + 8], rbx
		xor dword ptr [rsp + 8], eax
		xadd qword ptr [rsp], rbp
		xadd dx, r9w
		mov rbx, qword ptr [rsp + 8]
		movsxd rax, eax
		add rdi, rax
		call 0x7ffb72d6d107
793: UB addr = 7ffb729496cb with ID: 256 yields:
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
794: UB addr = 7ffb729e2753 with ID: 257 yields:
		sbb bpl, 0x8a
		not bpl
		sub bpl, 0x94
		rol bpl, 1
		ror r10, cl
		not r10b
		xor bl, bpl
		mov byte ptr [rsp + r11 - 0x68a991f0], r10b
		sar rdx, cl
		lea rbp, [rsp + rbp + 0x10]
		cdq
		jns 0x7ffb72c3c452
795: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
796: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
797: UB addr = 7ffb72ba06c2 with ID: 258 yields:
		btr r11d, 0xb9
		sbb r10w, 0x1933
		ror r10w, 1
		call 0x7ffb72e2aa44
798: UB addr = 7ffb72a37966 with ID: 259 yields:
		jb 0x7ffb72e6d2f9
799: UB addr = 7ffb72a99e35 with ID: 260 yields:
		not byte ptr [rsp + rax + 0x6e]
		pop r11
		pop r11
		pop r11
		js 0x7ffb72be239f
800: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
801: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
802: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
803: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
804: UB addr = 7ffb72943abe with ID: 248 yields:
		mov r9d, dword ptr [r8 + r10*4 - 0x38b080ce]
		xor r9d, ebx
		sar ax, cl
		xchg dl, bpl
		dec r9d
		movzx r11d, al
		neg r9d
		mov qword ptr [rsp + r10 - 0xe2c2034], 0xe2d5326
		lea r10, [r11 + rax*8 - 0x2af826f2]
		sub r10b, byte ptr [rsp + rdx - 0x3628065c]
		inc r9d
		rol r9d, 1
		mov qword ptr [rsp + rdx - 0x36280663], rbx
		cwd
		xor dword ptr [rsp + rdx*2 - 0x6c500000], r9d
		pop rbx
		sub r11d, ecx
		movsxd r9, r9d
		add rdi, r9
		cbw
		movzx edx, byte ptr [r8 + rdx - 0x3627fffa]
		sub rbp, 0x290efb9a
		lea r8, [r8 + r11 - 0x2c618b41]
		sal al, cl
		xor dl, bl
		movsx r9d, bp
		not dl
		call 0x7ffb72e0260c
805: UB addr = 7ffb72a05f91 with ID: 249 yields:
		lea rdx, [rsp + rdx + 8]
		bts ebp, 0xa3
		mov qword ptr [rsp + rbp*2 - 0x10], r9
		mov rcx, qword ptr [rdx + rbp*2 - 0x10]
		setae r11b
		adc byte ptr [rsp + rbp - 3], bpl
		mov qword ptr [rsi + rbp*2 - 0x20], rcx
		lea rsi, [rsi + rbp*4 - 0x30]
		ror r11d, 0x89
		pop rdx
		jbe 0x7ffb72be239f
806: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
807: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
808: UB addr = 7ffb72b1344e with ID: 261 yields:
		mov eax, 0xcc98c118
		mov rbx, r8
		movabs r10, 0x7ff9e7130000
		sub rbx, r10
		lea rdi, [rip - 7]
		mov edx, 0x1c94e937
		movsx r9d, dx
		mov edx, dword ptr [r8 + rdx - 0x1c94e937]
		add r8, 4
		movzx r10d, r9w
		xor edx, ebx
		neg edx
		not edx
		not r9b
		xor bl, r9b
		mov ecx, r10d
		lea r9, [rsp + r9 + 8]
		mov qword ptr [r9 + rax*4 - 0x484150d0], rdx
		mov qword ptr [rsp + rax*2 - 0x2420a868], r10
		mov r11d, dword ptr [rax + r8 - 0x12105433]
		sal cl, 0x64
		xor r11d, ebx
		xor rax, 0xffffffffec3e78b1
		movsx ebp, byte ptr [rsp + rax + 0x1d1d37c]
		movzx r9d, bp
		neg r11d
		inc r11d
		cqo
		xor qword ptr [rsp + rax*2 + 0x3a3a6f6], rcx
		jge 0x7ffb729cc9ba
809: UB addr = 7ffb729cc9ba with ID: 190 yields:
		neg r11d
		xchg byte ptr [rsp + rax*4 + 0x7474df0], r10b
		bswap rcx
		xor r11d, 0x3fbfdd22
		push rax
		mov qword ptr [rsp + rax*2 + 0x3a3a6fe], rbx
		shl ebp, 0x1d
		xor dword ptr [rsp + rax*4 + 0x7474df4], r11d
		mov rbx, qword ptr [rsp + rax*2 + 0x3a3a6fe]
		mov qword ptr [rsp + rdx*4 + 0xc], rcx
		or ax, bp
		movsxd r11, r11d
		sub dword ptr [rsp + rax + 0x1d1d380], eax
		add rdi, r11
		mov rdx, qword ptr [rsi + rax + 0x1d1d383]
		movzx ecx, word ptr [r8 + rax + 0x1d1d380]
		movsx r11d, r9b
		inc r10d
		xor cx, bx
		sar r10, 0x8f
		adc cx, 0xe384
		and r9b, r9b
		sets r11b
		xor cx, 0x3aa4
		or r11b, 0x15
		adc cx, 0x3e06
		cbw
		neg bp
		and dword ptr [rsp + rax*2 + 0x3a20101], r9d
		neg cx
		add r9b, 0xaf
		inc cx
		rol cx, 1
		cdqe
		xor bx, cx
		btc r10, r11
		jb 0x7ffb72bcf292
810: UB addr = 7ffb729cca6c with ID: 191 yields:
		jae 0x7ffb72c7a0cd
811: UB addr = 7ffb72959e63 with ID: 188 yields:
		mov r11d, dword ptr [r8]
		mov ebp, 0x1c286c1a
		xor r11d, ebx
		mov edx, ebp
		neg r11d
		lea rcx, [rbp + rdx + 0x5889aca7]
		lea r9, [rbp*2 - 0x6bdd6af9]
		ror r9w, 0x23
		inc r11d
		neg rbp
		movzx r10d, dx
		neg r11d
		sub cx, r10w
		btc ecx, 0x24
		xor r11d, 0x3fbfdd22
		push rbx
		xor dword ptr [rsp + rbp*2 + 0x3850d834], r11d
		pop rbx
		movsxd r11, r11d
		add rdi, r11
		mov r10, qword ptr [rsi + rbp + 0x1c286c1a]
		add bp, r9w
		movzx edx, byte ptr [r8 + rbp + 0x1c28fe77]
		lea rax, [r9 + r9*4 - 0x58422a5b]
		xor dl, bl
		or r9b, cl
		inc ebp
		not dl
		or r9, rbp
		adc dl, r9b
		neg dl
		cwde
		ror dl, 1
		neg r9d
		lea r11, [r9*8 - 0x466b7978]
		shl r9, cl
		sbb dl, 0x38
		lea r9, [r9 + rcx*8 + 0x629f4a1c]
		or r9d, r11d
		or r9w, cx
		not dl
		btc ecx, 5
		xor bl, dl
		sar r9w, 0x6f
		push rax
		lea rdx, [rsp + rdx + 8]
		inc byte ptr [rsp + r9*2 - 0x7bf1fffc]
		mov qword ptr [rdx + r9*2 - 0x7bf20000], r10
		dec cl
		mov rbp, qword ptr [rsi + r9 - 0x3df8fff8]
		bswap r11
		lea rsi, [rsi + r9 - 0x3df8fff0]
		movsx edx, r9w
		sar qword ptr [rsp + r9*2 - 0x7bf20000], cl
		movzx ecx, byte ptr [r9 + r8 - 0x3df8fffb]
		lea r8, [r8 + r9 - 0x3df8fffa]
		xor cl, bl
		neg cl
		sub rdx, 0x27211a2a
		setle byte ptr [rsp + r9 - 0x3df90000]
		adc cl, r9b
		pop rax
		call 0x7ffb72c13988
812: UB addr = 7ffb728ee500 with ID: 189 yields:
		not r9b
		xor bl, r9b
		mov ecx, r10d
		lea r9, [rsp + r9 + 8]
		mov qword ptr [r9 + rax*4 - 0x484150d0], rdx
		mov qword ptr [rsp + rax*2 - 0x2420a868], r10
		mov r11d, dword ptr [rax + r8 - 0x12105433]
		sal cl, 0x64
		xor r11d, ebx
		xor rax, 0xffffffffec3e78b1
		movsx ebp, byte ptr [rsp + rax + 0x1d1d37c]
		movzx r9d, bp
		neg r11d
		inc r11d
		cqo
		xor qword ptr [rsp + rax*2 + 0x3a3a6f6], rcx
		jge 0x7ffb729cc9ba
813: UB addr = 7ffb729cc9ba with ID: 190 yields:
		neg r11d
		xchg byte ptr [rsp + rax*4 + 0x7474df0], r10b
		bswap rcx
		xor r11d, 0x3fbfdd22
		push rax
		mov qword ptr [rsp + rax*2 + 0x3a3a6fe], rbx
		shl ebp, 0x1d
		xor dword ptr [rsp + rax*4 + 0x7474df4], r11d
		mov rbx, qword ptr [rsp + rax*2 + 0x3a3a6fe]
		mov qword ptr [rsp + rdx*4 + 0xc], rcx
		or ax, bp
		movsxd r11, r11d
		sub dword ptr [rsp + rax + 0x1d1d380], eax
		add rdi, r11
		mov rdx, qword ptr [rsi + rax + 0x1d1d383]
		movzx ecx, word ptr [r8 + rax + 0x1d1d380]
		movsx r11d, r9b
		inc r10d
		xor cx, bx
		sar r10, 0x8f
		adc cx, 0xe384
		and r9b, r9b
		sets r11b
		xor cx, 0x3aa4
		or r11b, 0x15
		adc cx, 0x3e06
		cbw
		neg bp
		and dword ptr [rsp + rax*2 + 0x3a20101], r9d
		neg cx
		add r9b, 0xaf
		inc cx
		rol cx, 1
		cdqe
		xor bx, cx
		btc r10, r11
		jb 0x7ffb72bcf292
814: UB addr = 7ffb729cca6c with ID: 191 yields:
		jae 0x7ffb72c7a0cd
815: UB addr = 7ffb72993033 with ID: 192 yields:
		movsxd rax, eax
		and r10w, 0xe732
		xor r11, r9
		adc rdi, rax
		shl ecx, 0xa5
		jae 0x7ffb72dc8bc8
816: UB addr = 7ffb728eb08f with ID: 184 yields:
		or dword ptr [rsp + r11 - 0xdf0d], r9d
		neg bp
		push rdx
		sub bp, 0x1b15
		lea r9, [r11 + rcx*8 + 0x540c0baf]
		call 0x7ffb72d7a452
817: UB addr = 7ffb72a228d5 with ID: 185 yields:
		neg bpl
		inc dword ptr [rsp + r11*4 - 0x282d]
		pop rcx
		xor bl, bpl
		lea rbp, [rsp + rbp + 0x18]
		shr dword ptr [rsp + r11*2 - 0x141d], 0xa1
		shr r11d, 0xe9
		mov qword ptr [r11 + rbp - 5], r10
		xadd cl, al
		pop r11
		mov r11, qword ptr [rsi + 0x10]
		call 0x7ffb72ce7c92
818: UB addr = 7ffb729e107b with ID: 186 yields:
		xor al, bl
		or dl, 0x22
		or word ptr [rsp + 0xd], 0xce95
		not al
		mov r10d, edx
		xor r10d, edx
		sbb r9, qword ptr [rsp + r10 + 0x10]
		xor al, 0x91
		neg al
		add al, 0x20
		xor cl, byte ptr [rsp + r10 + 0xd]
		xor bl, al
		pop rbp
		add rbp, -0xb968e
		jmp rbp
819: UB addr = 7ffb72b894a2 with ID: 187 yields:
		call 0x7ffb72bd1c7f
820: UB addr = 7ffb72959e63 with ID: 188 yields:
		mov r11d, dword ptr [r8]
		mov ebp, 0x1c286c1a
		xor r11d, ebx
		mov edx, ebp
		neg r11d
		lea rcx, [rbp + rdx + 0x5889aca7]
		lea r9, [rbp*2 - 0x6bdd6af9]
		ror r9w, 0x23
		inc r11d
		neg rbp
		movzx r10d, dx
		neg r11d
		sub cx, r10w
		btc ecx, 0x24
		xor r11d, 0x3fbfdd22
		push rbx
		xor dword ptr [rsp + rbp*2 + 0x3850d834], r11d
		pop rbx
		movsxd r11, r11d
		add rdi, r11
		mov r10, qword ptr [rsi + rbp + 0x1c286c1a]
		add bp, r9w
		movzx edx, byte ptr [r8 + rbp + 0x1c28fe77]
		lea rax, [r9 + r9*4 - 0x58422a5b]
		xor dl, bl
		or r9b, cl
		inc ebp
		not dl
		or r9, rbp
		adc dl, r9b
		neg dl
		cwde
		ror dl, 1
		neg r9d
		lea r11, [r9*8 - 0x466b7978]
		shl r9, cl
		sbb dl, 0x38
		lea r9, [r9 + rcx*8 + 0x629f4a1c]
		or r9d, r11d
		or r9w, cx
		not dl
		btc ecx, 5
		xor bl, dl
		sar r9w, 0x6f
		push rax
		lea rdx, [rsp + rdx + 8]
		inc byte ptr [rsp + r9*2 - 0x7bf1fffc]
		mov qword ptr [rdx + r9*2 - 0x7bf20000], r10
		dec cl
		mov rbp, qword ptr [rsi + r9 - 0x3df8fff8]
		bswap r11
		lea rsi, [rsi + r9 - 0x3df8fff0]
		movsx edx, r9w
		sar qword ptr [rsp + r9*2 - 0x7bf20000], cl
		movzx ecx, byte ptr [r9 + r8 - 0x3df8fffb]
		lea r8, [r8 + r9 - 0x3df8fffa]
		xor cl, bl
		neg cl
		sub rdx, 0x27211a2a
		setle byte ptr [rsp + r9 - 0x3df90000]
		adc cl, r9b
		pop rax
		call 0x7ffb72c13988
821: UB addr = 7ffb72993033 with ID: 192 yields:
		movsxd rax, eax
		and r10w, 0xe732
		xor r11, r9
		adc rdi, rax
		shl ecx, 0xa5
		jae 0x7ffb72dc8bc8
822: UB addr = 7ffb728eb08f with ID: 184 yields:
		or dword ptr [rsp + r11 - 0xdf0d], r9d
		neg bp
		push rdx
		sub bp, 0x1b15
		lea r9, [r11 + rcx*8 + 0x540c0baf]
		call 0x7ffb72d7a452
823: UB addr = 7ffb72a228d5 with ID: 185 yields:
		neg bpl
		inc dword ptr [rsp + r11*4 - 0x282d]
		pop rcx
		xor bl, bpl
		lea rbp, [rsp + rbp + 0x18]
		shr dword ptr [rsp + r11*2 - 0x141d], 0xa1
		shr r11d, 0xe9
		mov qword ptr [r11 + rbp - 5], r10
		xadd cl, al
		pop r11
		mov r11, qword ptr [rsi + 0x10]
		call 0x7ffb72ce7c92
824: UB addr = 7ffb729e107b with ID: 186 yields:
		xor al, bl
		or dl, 0x22
		or word ptr [rsp + 0xd], 0xce95
		not al
		mov r10d, edx
		xor r10d, edx
		sbb r9, qword ptr [rsp + r10 + 0x10]
		xor al, 0x91
		neg al
		add al, 0x20
		xor cl, byte ptr [rsp + r10 + 0xd]
		xor bl, al
		pop rbp
		add rbp, -0xb968e
		jmp rbp
825: UB addr = 7ffb72b894a2 with ID: 187 yields:
		call 0x7ffb72bd1c7f
826: UB addr = 7ffb72b9a229 with ID: 262 yields:
		shl eax, 0x66
		xor r11d, ebx
		not cl
		cqo
		lea r11d, [r11 + r10*2 - 0x4359b042]
		push r10
		rol r11d, 2
		neg r11d
		inc r11d
		mov qword ptr [rsp + rcx*2 - 0x7ff2], rbx
		lea rbp, [rax + rdx*8 + 0x4841314]
		lea r9, [rdx + rax + 0x3b261aa9]
		rol cx, 0x2f
		xor dword ptr [rsp + rcx*8 - 0x4fff0], r11d
		lea rdx, [r10 + r9*8 - 0x73ed8cc8]
		sal r9w, 0xe4
		mov rbx, qword ptr [rsp + rcx*2 - 0x13ff0]
		movsxd r11, r11d
		jp 0x7ffb72cb503a
827: UB addr = 7ffb729df991 with ID: 234 yields:
		mov qword ptr [r11 + rsi - 0x8b], rcx
		and r11, rdx
		mov r10d, dword ptr [r8 + r11*4 + 8]
		cdq
		push r9
		xor r10d, ebx
		add word ptr [rsp + rdx + 1], dx
		btc bp, r9w
		sbb r10d, edx
		shr eax, 0x23
		mov ecx, eax
		shr byte ptr [rsp + rdx], 0x21
		neg r10d
		xadd ebp, edx
		inc r10d
		rol r10d, 1
		mov qword ptr [rsp + r11*2], rbx
		xor dword ptr [rsp + r9 - 0x5e29949b], r10d
		lea rdx, [rdx*4 + 0x578b9f38]
		inc r9w
		pop rbx
		movsxd r10, r10d
		add rdi, r10
		cmp rsi, r9
		ja 0x7ffb72ac6561
828: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
829: UB addr = 7ffb72974544 with ID: 235 yields:
		mov ecx, 0x269b8db6
		movsx r9d, cx
		mov eax, r9d
		mov rcx, qword ptr [rsi + rcx - 0x269b8db6]
		mov r9, qword ptr [rcx]
		movsx ecx, al
		movzx ebp, cl
		mov qword ptr [rsi + rbp*2 - 0x16c], r9
		movsx r9d, bpl
		not r9
		btr ecx, ecx
		mov eax, dword ptr [rbp + r8 - 0xb6]
		cmovb rbp, rcx
		add cx, bp
		sbb r8, -5
		xor eax, ebx
		movsx r10d, bpl
		btr r10w, r9w
		ror eax, 2
		sal rcx, cl
		seta r9b
		adc eax, ecx
		bswap eax
		inc eax
		ror r9, 0x18
		not eax
		push r9
		shl word ptr [rsp + 3], 0x22
		sbb eax, 0x391a119f
		movsx edx, cl
		xchg bp, r9w
		sar r10w, 0x63
		ror eax, 1
		lea eax, [rax + rdx*4 - 0x3b0b64a3]
		pop rdx
		and r10, r9
		call 0x7ffb728e2e70
830: UB addr = 7ffb728e2e70 with ID: 197 yields:
		not eax
		push r10
		mov qword ptr [rsp + 8], rbx
		xor dword ptr [rsp + 8], eax
		xadd qword ptr [rsp], rbp
		xadd dx, r9w
		mov rbx, qword ptr [rsp + 8]
		movsxd rax, eax
		add rdi, rax
		call 0x7ffb72d6d107
831: UB addr = 7ffb72957d25 with ID: 263 yields:
		mov r10d, 0x493ed594
		mov r11d, dword ptr [r8 + r10 - 0x493ed594]
		movsx eax, r10b
		push rax
		xor r11d, ebx
		dec r11d
		cqo
		movsx ecx, dx
		neg r11d
		dec qword ptr [rsp + r10 - 0x493ed594]
		lea r9, [rcx*8 - 0x5bc03067]
		cdq
		sub r11d, edx
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
832: UB addr = 7ffb729e2753 with ID: 257 yields:
		sbb bpl, 0x8a
		not bpl
		sub bpl, 0x94
		rol bpl, 1
		ror r10, cl
		not r10b
		xor bl, bpl
		mov byte ptr [rsp + r11 - 0x68a991f0], r10b
		sar rdx, cl
		lea rbp, [rsp + rbp + 0x10]
		cdq
		jns 0x7ffb72c3c452
833: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
834: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
835: UB addr = 7ffb72ba06c2 with ID: 258 yields:
		btr r11d, 0xb9
		sbb r10w, 0x1933
		ror r10w, 1
		call 0x7ffb72e2aa44
836: UB addr = 7ffb72a37966 with ID: 259 yields:
		jb 0x7ffb72e6d2f9
837: UB addr = 7ffb72a99e35 with ID: 260 yields:
		not byte ptr [rsp + rax + 0x6e]
		pop r11
		pop r11
		pop r11
		js 0x7ffb72be239f
838: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
839: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
840: UB addr = 7ffb729496cb with ID: 256 yields:
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
841: UB addr = 7ffb729e2753 with ID: 257 yields:
		sbb bpl, 0x8a
		not bpl
		sub bpl, 0x94
		rol bpl, 1
		ror r10, cl
		not r10b
		xor bl, bpl
		mov byte ptr [rsp + r11 - 0x68a991f0], r10b
		sar rdx, cl
		lea rbp, [rsp + rbp + 0x10]
		cdq
		jns 0x7ffb72c3c452
842: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
843: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
844: UB addr = 7ffb72943abe with ID: 248 yields:
		mov r9d, dword ptr [r8 + r10*4 - 0x38b080ce]
		xor r9d, ebx
		sar ax, cl
		xchg dl, bpl
		dec r9d
		movzx r11d, al
		neg r9d
		mov qword ptr [rsp + r10 - 0xe2c2034], 0xe2d5326
		lea r10, [r11 + rax*8 - 0x2af826f2]
		sub r10b, byte ptr [rsp + rdx - 0x3628065c]
		inc r9d
		rol r9d, 1
		mov qword ptr [rsp + rdx - 0x36280663], rbx
		cwd
		xor dword ptr [rsp + rdx*2 - 0x6c500000], r9d
		pop rbx
		sub r11d, ecx
		movsxd r9, r9d
		add rdi, r9
		cbw
		movzx edx, byte ptr [r8 + rdx - 0x3627fffa]
		sub rbp, 0x290efb9a
		lea r8, [r8 + r11 - 0x2c618b41]
		sal al, cl
		xor dl, bl
		movsx r9d, bp
		not dl
		call 0x7ffb72e0260c
845: UB addr = 7ffb72a05f91 with ID: 249 yields:
		lea rdx, [rsp + rdx + 8]
		bts ebp, 0xa3
		mov qword ptr [rsp + rbp*2 - 0x10], r9
		mov rcx, qword ptr [rdx + rbp*2 - 0x10]
		setae r11b
		adc byte ptr [rsp + rbp - 3], bpl
		mov qword ptr [rsi + rbp*2 - 0x20], rcx
		lea rsi, [rsi + rbp*4 - 0x30]
		ror r11d, 0x89
		pop rdx
		jbe 0x7ffb72be239f
846: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
847: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
848: UB addr = 7ffb72ba06c2 with ID: 258 yields:
		btr r11d, 0xb9
		sbb r10w, 0x1933
		ror r10w, 1
		call 0x7ffb72e2aa44
849: UB addr = 7ffb72a37966 with ID: 259 yields:
		jb 0x7ffb72e6d2f9
850: UB addr = 7ffb72a99e35 with ID: 260 yields:
		not byte ptr [rsp + rax + 0x6e]
		pop r11
		pop r11
		pop r11
		js 0x7ffb72be239f
851: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
852: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
853: UB addr = 7ffb729496cb with ID: 256 yields:
		or r11b, cl
		not bpl
		bts rcx, r10
		xor r9b, r11b
		rol bpl, 1
		call 0x7ffb72dc1c24
854: UB addr = 7ffb729e2753 with ID: 257 yields:
		sbb bpl, 0x8a
		not bpl
		sub bpl, 0x94
		rol bpl, 1
		ror r10, cl
		not r10b
		xor bl, bpl
		mov byte ptr [rsp + r11 - 0x68a991f0], r10b
		sar rdx, cl
		lea rbp, [rsp + rbp + 0x10]
		cdq
		jns 0x7ffb72c3c452
855: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
856: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
857: UB addr = 7ffb72ba06c2 with ID: 258 yields:
		btr r11d, 0xb9
		sbb r10w, 0x1933
		ror r10w, 1
		call 0x7ffb72e2aa44
858: UB addr = 7ffb72a37966 with ID: 259 yields:
		jb 0x7ffb72e6d2f9
859: UB addr = 7ffb72a99e35 with ID: 260 yields:
		not byte ptr [rsp + rax + 0x6e]
		pop r11
		pop r11
		pop r11
		js 0x7ffb72be239f
860: UB addr = 7ffb72b49481 with ID: 194 yields:
		cmp rsi, r9
		ja 0x7ffb72ac6561
861: UB addr = 7ffb72ac6561 with ID: 195 yields:
		push -0x4d5b8a56
		call 0x7ffb72bc03d2
862: UB addr = 7ffb72b0eae1 with ID: 264 yields:
		call 0x7ffb72ec07c8
863: UB addr = 7ffb72916ab6 with ID: 265 yields:
		mov r9, r11
		mov r8d, 0x6205a28
		rol r8, 0x94
		movabs rbx, 0x7ff9e7130000
		sbb r9, rbx
		lea rdi, [rip - 7]
		mov ebx, 0xfa1b7d12
		bswap ebx
		lea r11, [r11 + rbx*2 - 0x24fa37f8]
		and bx, 0xa629
		mov r8d, dword ptr [r11 + rbx - 0x127d0228]
		xchg rbp, rbx
		shl ebp, 0x10
		xor r8d, r9d
		lea r10, [rbx*2 + 0x670db818]
		lea r8d, [r8 + rbx*2 - 0x4f884355]
		mov eax, ebx
		sub ebx, ebp
		neg r8d
		add al, 0x1a
		sub rbx, -0x227052cb
		movsx ecx, ax
		xor r8d, 0xc80e8daa
		btr ax, 0x22
		sal r10d, 0x5c
		inc r8d
		movzx edx, bpl
		shr al, 0x83
		ror dx, 0x49
		not r8d
		push r9
		shr bl, 0xc1
		inc dx
		xor dword ptr [rsp + rbx*2 - 0x658aa8f2], r8d
		rol al, 0x81
		jno 0x7ffb72ad8509
864: UB addr = 7ffb72ad8509 with ID: 266 yields:
		sbb al, bh
		pop r9
		xchg rax, rcx
		movsxd r8, r8d
		call 0x7ffb72922c46
865: UB addr = 7ffb72922c46 with ID: 267 yields:
		add rdi, r8
		mov qword ptr [rsp + rbx - 0x32c55479], r10
		mov qword ptr [rsp + rbx - 0x32c55479], rdi
		ret
866: UB addr = 7ffb729d0957 with ID: 268 yields:
		rol ebp, 3
		sub r10d, edx
		call 0x7ffb728f626d
867: UB addr = 7ffb728f626d with ID: 269 yields:
		neg ebp
		mov qword ptr [rsp + rbx - 0x4ba31c8], 0x1b0d303
		mov qword ptr [rsp + rbx*2 - 0x9746390], r9
		bts r10d, edx
		setae r10b
		xor cx, r10w
		xor dword ptr [rsp + rbx*2 - 0x9746390], ebp
		ror rbx, cl
		pop r9
		call 0x7ffb72cb6307
868: UB addr = 7ffb72a739e5 with ID: 270 yields:
		ror bl, 1
		dec bl
		or rax, 0x2e1eb223
		pop rcx
		adc rcx, -0xc84a8
		jmp rcx
869: UB addr = 7ffb72b95466 with ID: 271 yields:
		rol bl, 1
		neg bl
		push rax
		not dl
		xor r9b, bl
		lea rbx, [rsp + rbx + 0x18]
		pop rax
		sub qword ptr [rsp + rdx*2 - 0x1fa], rax
		mov qword ptr [rbx + rdx - 0xff], r10
		cwde
		movsx ecx, dl
		mov qword ptr [rsp + rbp*2 - 0xd392], rdi
		ret 8
870: UB addr = 7ffb72994303 with ID: 272 yields:
		mov eax, dword ptr [r10 + r11 - 8]
		xor eax, r9d
		lea eax, [rax + r8 + 0x163c649f]
		lea rdx, [r10 + rbx*4 + 0x7f1fac84]
		mov qword ptr [rsp + rcx - 0x43881e58], rcx
		bswap eax
		lea rbp, [r10*2 + 0x1d096c3e]
		xadd dx, bp
		sbb eax, r10d
		neg eax
		rol eax, 3
		add eax, r10d
		ror ebp, cl
		mov qword ptr [rsp + rcx - 0x43881e40], r9
		ror r8b, 0x63
		call 0x7ffb72c83b03
871: UB addr = 7ffb72988e80 with ID: 273 yields:
		movsxd rax, eax
		not r10
		dec r10
		lea rdx, [r8 + rbx*4 - 0x50c28459]
		add rdi, rax
		add cx, r8w
		adc bl, r10b
		mov rax, qword ptr [rcx + rsi - 0x4388bc18]
		mov qword ptr [rsp + rcx - 0x4388bc28], 0x50a0b70e
		sub byte ptr [rsp + r10 + 3], cl
		xchg qword ptr [rsp + 8], r10
		add r10, 0x2210e7
		jmp r10
872: UB addr = 7ffb72919461 with ID: 274 yields:
		not rdx
		ror r10b, 1
		inc r8b
		xor r9b, r10b
		sub qword ptr [rsp + rbx*2 - 0x12453ae6], rdx
		lea r10, [rsp + r10 + 0x28]
		call 0x7ffb72bd3fa7
873: UB addr = 7ffb729d0957 with ID: 268 yields:
		rol ebp, 3
		sub r10d, edx
		call 0x7ffb728f626d
874: UB addr = 7ffb728f626d with ID: 269 yields:
		neg ebp
		mov qword ptr [rsp + rbx - 0x4ba31c8], 0x1b0d303
		mov qword ptr [rsp + rbx*2 - 0x9746390], r9
		bts r10d, edx
		setae r10b
		xor cx, r10w
		xor dword ptr [rsp + rbx*2 - 0x9746390], ebp
		ror rbx, cl
		pop r9
		call 0x7ffb72cb6307
875: UB addr = 7ffb72a739e5 with ID: 270 yields:
		ror bl, 1
		dec bl
		or rax, 0x2e1eb223
		pop rcx
		adc rcx, -0xc84a8
		jmp rcx
876: UB addr = 7ffb72b95466 with ID: 271 yields:
		rol bl, 1
		neg bl
		push rax
		not dl
		xor r9b, bl
		lea rbx, [rsp + rbx + 0x18]
		pop rax
		sub qword ptr [rsp + rdx*2 - 0x1fa], rax
		mov qword ptr [rbx + rdx - 0xff], r10
		cwde
		movsx ecx, dl
		mov qword ptr [rsp + rbp*2 - 0xd392], rdi
		ret 8
877: UB addr = 7ffb729d2b11 with ID: 275 yields:
		bts r10, 1
		add r10w, dx
		xor r8w, 0x3c05
		xor r9w, r8w
		lea rcx, [rdx*4 - 0x5e52b7d5]
		not cl
		add ebp, edx
		lea r8, [rsp + r8 + 8]
		bts bp, 0x38
		movzx ebx, dl
		mov qword ptr [r8 + rbx*8 - 0x370], rax
		mov qword ptr [rsp + rbp - 0x723adb5], rdx
		mov edx, dword ptr [r11 + rbp*4 - 0x1c8eb6da]
		cmovae rcx, qword ptr [rsp + rbp*4 - 0x1c8eb6d4]
		xor edx, r9d
		mov qword ptr [rsp + rbp*4 - 0x1c0eb6d4], 0x5000e68a
		lea edx, [rdx + r10*2 - 0x6b62e4bb]
		bswap edx
		dec edx
		inc byte ptr [rsp + rbx - 0x67]
		jnp 0x7ffb72d24068
878: UB addr = 7ffb729d0957 with ID: 268 yields:
		rol ebp, 3
		sub r10d, edx
		call 0x7ffb728f626d
879: UB addr = 7ffb728f626d with ID: 269 yields:
		neg ebp
		mov qword ptr [rsp + rbx - 0x4ba31c8], 0x1b0d303
		mov qword ptr [rsp + rbx*2 - 0x9746390], r9
		bts r10d, edx
		setae r10b
		xor cx, r10w
		xor dword ptr [rsp + rbx*2 - 0x9746390], ebp
		ror rbx, cl
		pop r9
		call 0x7ffb72cb6307
880: UB addr = 7ffb72a739e5 with ID: 270 yields:
		ror bl, 1
		dec bl
		or rax, 0x2e1eb223
		pop rcx
		adc rcx, -0xc84a8
		jmp rcx
881: UB addr = 7ffb72b95466 with ID: 271 yields:
		rol bl, 1
		neg bl
		push rax
		not dl
		xor r9b, bl
		lea rbx, [rsp + rbx + 0x18]
		pop rax
		sub qword ptr [rsp + rdx*2 - 0x1fa], rax
		mov qword ptr [rbx + rdx - 0xff], r10
		cwde
		movsx ecx, dl
		mov qword ptr [rsp + rbp*2 - 0xd392], rdi
		ret 8
882: UB addr = 7ffb729d0957 with ID: 268 yields:
		rol ebp, 3
		sub r10d, edx
		call 0x7ffb728f626d
883: UB addr = 7ffb728f626d with ID: 269 yields:
		neg ebp
		mov qword ptr [rsp + rbx - 0x4ba31c8], 0x1b0d303
		mov qword ptr [rsp + rbx*2 - 0x9746390], r9
		bts r10d, edx
		setae r10b
		xor cx, r10w
		xor dword ptr [rsp + rbx*2 - 0x9746390], ebp
		ror rbx, cl
		pop r9
		call 0x7ffb72cb6307
884: UB addr = 7ffb72a739e5 with ID: 270 yields:
		ror bl, 1
		dec bl
		or rax, 0x2e1eb223
		pop rcx
		adc rcx, -0xc84a8
		jmp rcx
885: UB addr = 7ffb72b95466 with ID: 271 yields:
		rol bl, 1
		neg bl
		push rax
		not dl
		xor r9b, bl
		lea rbx, [rsp + rbx + 0x18]
		pop rax
		sub qword ptr [rsp + rdx*2 - 0x1fa], rax
		mov qword ptr [rbx + rdx - 0xff], r10
		cwde
		movsx ecx, dl
		mov qword ptr [rsp + rbp*2 - 0xd392], rdi
		ret 8
886: UB addr = 7ffb729d0957 with ID: 268 yields:
		rol ebp, 3
		sub r10d, edx
		call 0x7ffb728f626d
887: UB addr = 7ffb728f626d with ID: 269 yields:
		neg ebp
		mov qword ptr [rsp + rbx - 0x4ba31c8], 0x1b0d303
		mov qword ptr [rsp + rbx*2 - 0x9746390], r9
		bts r10d, edx
		setae r10b
		xor cx, r10w
		xor dword ptr [rsp + rbx*2 - 0x9746390], ebp
		ror rbx, cl
		pop r9
		call 0x7ffb72cb6307
888: UB addr = 7ffb72a739e5 with ID: 270 yields:
		ror bl, 1
		dec bl
		or rax, 0x2e1eb223
		pop rcx
		adc rcx, -0xc84a8
		jmp rcx
889: UB addr = 7ffb72b95466 with ID: 271 yields:
		rol bl, 1
		neg bl
		push rax
		not dl
		xor r9b, bl
		lea rbx, [rsp + rbx + 0x18]
		pop rax
		sub qword ptr [rsp + rdx*2 - 0x1fa], rax
		mov qword ptr [rbx + rdx - 0xff], r10
		cwde
		movsx ecx, dl
		mov qword ptr [rsp + rbp*2 - 0xd392], rdi
		ret 8
890: UB addr = 7ffb729d0957 with ID: 268 yields:
		rol ebp, 3
		sub r10d, edx
		call 0x7ffb728f626d
891: UB addr = 7ffb728f626d with ID: 269 yields:
		neg ebp
		mov qword ptr [rsp + rbx - 0x4ba31c8], 0x1b0d303
		mov qword ptr [rsp + rbx*2 - 0x9746390], r9
		bts r10d, edx
		setae r10b
		xor cx, r10w
		xor dword ptr [rsp + rbx*2 - 0x9746390], ebp
		ror rbx, cl
		pop r9
		call 0x7ffb72cb6307
892: UB addr = 7ffb72a739e5 with ID: 270 yields:
		ror bl, 1
		dec bl
		or rax, 0x2e1eb223
		pop rcx
		adc rcx, -0xc84a8
		jmp rcx
893: UB addr = 7ffb72b95466 with ID: 271 yields:
		rol bl, 1
		neg bl
		push rax
		not dl
		xor r9b, bl
		lea rbx, [rsp + rbx + 0x18]
		pop rax
		sub qword ptr [rsp + rdx*2 - 0x1fa], rax
		mov qword ptr [rbx + rdx - 0xff], r10
		cwde
		movsx ecx, dl
		mov qword ptr [rsp + rbp*2 - 0xd392], rdi
		ret 8
894: UB addr = 7ffb72b71aef with ID: 276 yields:
		mov edx, 0x200f6b0d
		lea r8, [rdx + rdx*8 + 0x77257aa0]
		movzx ecx, dx
		lea rax, [rcx + rcx*2 - 0x25c4edc]
		and cx, 0x1730
		lea r10, [rdx + r10 + 0x353d58b6]
		sal r8d, 0x6a
		xor r9, r10
		sar dl, 4
		lea rbp, [r8 + rax*4 + 0x5a92ba5]
		mov qword ptr [rsi + rdx*2 - 0x401ed608], r10
		mov r10d, dword ptr [r11 + rdx*2 - 0x401ed60c]
		xor eax, eax
		shr bp, 0x43
		dec rdx
		xor r10d, r9d
		ror r10d, 3
		xadd al, dl
		sal rax, 0xa1
		bswap r10d
		movzx ebx, ax
		sal rbp, 0x28
		jb 0x7ffb72ce03ed
895: UB addr = 7ffb72ba4f40 with ID: 277 yields:
		rol rbx, 0x34
		add rdi, r10
		mov qword ptr [rsp + rdx], rdx
		inc bl
		je 0x7ffb72b801d7
896: UB addr = 7ffb72ba4f53 with ID: 278 yields:
		mov rax, qword ptr [r11 + rdx - 0x14]
		lea r11, [r11 + rdx*2 - 0x14]
		dec cl
		or word ptr [rsp + rdx + 2], bx
		xor rax, r9
		inc rax
		and ecx, 0x3a926d18
		pop rdx
		movsx r10d, dx
		not rax
		not r10
		rol rax, 1
		xchg r8d, r10d
		lea rax, [rax + rcx*2 - 0x73a60719]
		rol r8w, 0xee
		xor r9, rax
		lea r10, [rdx + 0x51a68029]
		lea rbx, [rbp + r10 - 0x3c4779ea]
		mov qword ptr [rcx + rsi - 0x4010], rax
		call 0x7ffb72e14c8d
897: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
898: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
899: UB addr = 7ffb7291c40f with ID: 281 yields:
		mov edx, dword ptr [r11 - 4]
		mov r8d, 0x1602999f
		xor edx, r9d
		lea rbx, [r8*2 - 0x7cd41e6e]
		movzx eax, bl
		rol edx, 1
		inc bx
		xor eax, 0x4c1a5a8b
		sub al, 0xb
		inc edx
		mov r10d, 0x9c2fcb86
		bts r10d, eax
		ror edx, 1
		sal r10w, 9
		or r8w, bx
		xchg rbp, rbx
		dec edx
		shl r8, 0x76
		sal eax, 0xec
		neg edx
		cwde
		lea rbx, [r10 + rbx - 0xdef94d3]
		push r9
		movsx ecx, dx
		mov r10, r8
		sub ebx, 0x8182d5bf
		bts eax, 0xa9
		mov rdx, qword ptr [rsi + rcx*2]
		ror cx, 0xc2
		push rax
		adc r10, rdx
		mov qword ptr [rsp + rcx + 8], 0x6fa95096
		mov qword ptr [rsi + rcx], r10
		mov qword ptr [rsp + rcx*2], rdi
		ret 8
900: UB addr = 7ffb72b8eb81 with ID: 282 yields:
		mov ebp, 0x638b56ae
		lea rdx, [rbp + rbp*4 + 0x24035c1a]
		lea r8, [rdx*4 - 0x4fde93f1]
		mov rcx, qword ptr [rsi + rbp - 0x638b56ae]
		shr dl, 0xa6
		lea rbx, [r8*8 - 0x6dc37fea]
		jnp 0x7ffb72c85968
901: UB addr = 7ffb72a3c3c4 with ID: 283 yields:
		neg edx
		lea edx, [rdx + rbp*2 + 0x4be269c6]
		bswap edx
		pop rcx
		inc r8w
		push r9
		xor dword ptr [rsp + rbp + 0x638b56ae], edx
		pop r9
		xor rcx, 0x4a8ee4af
		lea r10, [rbp + r8*8 - 0x7fcb6f73]
		movsxd rdx, edx
		xchg rbx, r10
		adc rdi, rdx
		sub ebp, 0xc09ee0a3
		mov rax, qword ptr [rsi + rax - 0x42357f8e]
		inc ebp
		mov rdx, qword ptr [rsi + rdx - 0x1ca939df]
		sal cx, 0x4d
		js 0x7ffb72b9c70a
902: UB addr = 7ffb72b9c70a with ID: 284 yields:
		add rax, rdx
		neg r8
		sar r10b, 0x47
		mov qword ptr [rsi + 8], rax
		adc rsi, 8
		call 0x7ffb72c0f627
903: UB addr = 7ffb7291c40f with ID: 281 yields:
		mov edx, dword ptr [r11 - 4]
		mov r8d, 0x1602999f
		xor edx, r9d
		lea rbx, [r8*2 - 0x7cd41e6e]
		movzx eax, bl
		rol edx, 1
		inc bx
		xor eax, 0x4c1a5a8b
		sub al, 0xb
		inc edx
		mov r10d, 0x9c2fcb86
		bts r10d, eax
		ror edx, 1
		sal r10w, 9
		or r8w, bx
		xchg rbp, rbx
		dec edx
		shl r8, 0x76
		sal eax, 0xec
		neg edx
		cwde
		lea rbx, [r10 + rbx - 0xdef94d3]
		push r9
		movsx ecx, dx
		mov r10, r8
		sub ebx, 0x8182d5bf
		bts eax, 0xa9
		mov rdx, qword ptr [rsi + rcx*2]
		ror cx, 0xc2
		push rax
		adc r10, rdx
		mov qword ptr [rsp + rcx + 8], 0x6fa95096
		mov qword ptr [rsi + rcx], r10
		mov qword ptr [rsp + rcx*2], rdi
		ret 8
904: UB addr = 7ffb729a35c6 with ID: 285 yields:
		not eax
		shr bpl, 0xe4
		movsx ebx, r10w
		push rcx
		bswap eax
		mov qword ptr [rsp + rdx + 8], r10
		dec eax
		add cx, 0x220f
		call 0x7ffb72f0a2a3
905: UB addr = 7ffb72b7232d with ID: 286 yields:
		add qword ptr [rsp + rdx + 0x18], r9
		add bx, cx
		xor dword ptr [rsp + rdx + 0x18], eax
		xchg r10w, r8w
		mov qword ptr [rsp + rdx], r10
		mov r9, qword ptr [rsp + rdx*4 + 0x18]
		and r8w, r10w
		mov dword ptr [rsp + rdx*8 + 0x11], r10d
		or cx, word ptr [rsp + rdx*8 + 3]
		movsxd rax, eax
		rol r8d, 0xea
		btc r10, 0xa7
		btr r8, r10
		adc rdi, rax
		xadd bpl, dl
		mov qword ptr [rsp + rdx + 8], rcx
		push rcx
		add rdx, qword ptr [r11 + rdx*2 - 0xc]
		bts ecx, 6
		mov qword ptr [rsp + rcx - 0xffdf], rcx
		lea r11, [r11 + rcx - 0x1000b]
		xor rdx, r9
		not rdx
		sal byte ptr [rsp + rcx*2 - 0x1fff2], 0xe3
		bswap rdx
		not rdx
		call 0x7ffb72c5f999
906: UB addr = 7ffb72988ef6 with ID: 287 yields:
		mov qword ptr [rsp + rax*2 - 0xe9f0], rbp
		mov qword ptr [rsi + rax*4 - 0x1d3e8], rbx
		shl dl, 0x25
		pop rbx
		movzx r10d, byte ptr [rax + r11 - 0x7505]
		lea r11, [rax + r11 - 0x7505]
		xor r10b, r9b
		call 0x7ffb72bf7fe6
907: UB addr = 7ffb72b894a7 with ID: 288 yields:
		lea r10, [rsp + r10 + 0x28]
		cwde
		rol r8b, 0x86
		mov qword ptr [rsp + rax - 0x74f8], rax
		add r8, qword ptr [r10 + rax*2 - 0xe9f0]
		mov qword ptr [rax + rsi - 0x7508], r8
		cqo
		neg byte ptr [rsp + rax - 0x74ea]
		sar qword ptr [rsp + rax - 0x74ee], cl
		lea rsi, [rsi + rax - 0x7508]
		push rax
		pop rax
		pop rcx
		pop rbp
		pop r10
		pop r8
		pop r8
		jae 0x7ffb72a83ef6
908: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
909: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
910: UB addr = 7ffb72b77f78 with ID: 289 yields:
		and cx, 0x6eae
		sets bpl
		movsxd rdx, edx
		adc rdi, rdx
		xchg eax, ecx
		mov ebx, dword ptr [r11 - 4]
		mov r8d, 0x593a3e09
		movzx r10d, r8w
		xor ebx, r9d
		push r8
		rol word ptr [rsp + r10*2 - 0x7c0d], 0x29
		xor ebx, 0xe510688e
		inc ebx
		lea rdx, [r8 + r8*8 - 0x124729db]
		call 0x7ffb72c12ee4
911: UB addr = 7ffb72976d7c with ID: 290 yields:
		ror eax, 1
		shl ebp, 0x1a
		dec eax
		pop r8
		add r8, 0x43503
		jmp r8
912: UB addr = 7ffb729bc52e with ID: 291 yields:
		xadd ax, bx
		xor bpl, r9b
		rol bpl, 1
		lea r10, [r8 + r8 - 0x7a65ac77]
		shr ebx, 0xab
		xor r10, rax
		neg bpl
		movsx edx, r8w
		xadd dl, r8b
		xor bpl, 0x28
		add bpl, 0x2a
		shr bx, 0x2e
		lea rcx, [rdx + r10*2 + 0x98c26ab]
		xor r9b, bpl
		lea rax, [rcx + rdx*8 - 0x19c5e8cc]
		add rbp, rsp
		cqo
		sub edx, 0x8825fa2f
		sub r10, r10
		adc rbx, qword ptr [rbp + rbx]
		sub r10b, 2
		mov qword ptr [rsi + r8*2 - 0x513e2ec4], rbx
		add eax, 0x8493bf92
		bswap r8
		movzx ebx, dl
		lea rsi, [rsi + r10 - 0x10e]
		dec dl
		bts r10w, r10w
		jae 0x7ffb72a83ef6
913: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
914: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
915: UB addr = 7ffb72b8fb00 with ID: 292 yields:
		mov ecx, 0xe10e46ac
		movzx r8d, cl
		movzx ebp, word ptr [r8 + r11 - 0xae]
		call 0x7ffb72d0f014
916: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
917: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
918: UB addr = 7ffb729ab6ab with ID: 293 yields:
		mov qword ptr [rsp + rbx - 0x1d4ded], r8
		add bpl, 0x31
		sal ax, 8
		xadd dword ptr [rsp + rbx*4 - 0x7537b4], eax
		call 0x7ffb72bf3ace
919: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
920: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
921: UB addr = 7ffb729ab6ab with ID: 293 yields:
		mov qword ptr [rsp + rbx - 0x1d4ded], r8
		add bpl, 0x31
		sal ax, 8
		xadd dword ptr [rsp + rbx*4 - 0x7537b4], eax
		call 0x7ffb72bf3ace
922: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
923: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
924: UB addr = 7ffb729ab6ab with ID: 293 yields:
		mov qword ptr [rsp + rbx - 0x1d4ded], r8
		add bpl, 0x31
		sal ax, 8
		xadd dword ptr [rsp + rbx*4 - 0x7537b4], eax
		call 0x7ffb72bf3ace
925: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
926: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
927: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
928: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
929: UB addr = 7ffb7292f6d5 with ID: 294 yields:
		bswap ebp
		mov qword ptr [rsp + rdx*2 - 0x1ff06], r10
		ror bl, 1
		xchg dword ptr [rsp + rbp*2 - 0x59030688], ebp
		dec bl
		inc ecx
		shr dword ptr [rsp + rdx - 0xff82], cl
		not bl
		xor bl, 0xaa
		ror qword ptr [rsp + rdx - 0xff83], cl
		adc qword ptr [rsp + rdx*2 - 0x1ff06], -0x21faa27b
		pop rax
		not bl
		xor r9b, bl
		add rbx, rsp
		not bpl
		btr rdx, rbp
		mov r10, qword ptr [rbx + rdx*4 - 0x3fe0c]
		mov qword ptr [rsi + rdx*4 - 0x3fe14], r10
		xadd r8b, bpl
		movzx r10d, byte ptr [rdx + r11 - 0xff85]
		lea rax, [rbp + r8 + 0x2aa4f31]
		xor r10b, r9b
		neg r10b
		neg r8w
		cwde
		xor r10b, 0xa2
		xor ax, 0x73a0
		inc r10b
		ror cl, 0x27
		rol r10b, 1
		not r10b
		shl al, 0x85
		or rcx, rax
		cmovbe rbp, rdx
		xor r9b, r10b
		shl eax, cl
		add r8b, bpl
		adc r10, rsp
		sub r8d, 0x3fb4e99e
		jl 0x7ffb72e555da
930: UB addr = 7ffb72a16ba0 with ID: 295 yields:
		mov qword ptr [rsp + rdx*2 - 0x1fe00], 0x611cbc8a
		inc r8d
		xadd rax, rbp
		ror r8d, 1
		dec ebp
		ror dword ptr [rsp + rdx*2 - 0x3fbff], 0x65
		dec r8d
		neg r8d
		push rdx
		lea rbx, [rax - 0x62d921d8]
		mov qword ptr [rsp + rdx - 0x1fdf8], r9
		dec qword ptr [rsp + rdx - 0x1fe00]
		and rbx, qword ptr [rsp + rdx - 0x1fe00]
		xor dword ptr [rsp + rdx - 0x1fdf8], r8d
		bswap r10
		rol ax, 0xae
		mov r9, qword ptr [rsp + rdx*4 - 0x7f7f8]
		setae byte ptr [rsp + rdx - 0x1fdfb]
		jb 0x7ffb72ea2b64
931: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
932: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
933: UB addr = 7ffb72916aea with ID: 296 yields:
		lea rdi, [rip - 7]
		mov ebx, 0xfa1b7d12
		bswap ebx
		lea r11, [r11 + rbx*2 - 0x24fa37f8]
		and bx, 0xa629
		mov r8d, dword ptr [r11 + rbx - 0x127d0228]
		xchg rbp, rbx
		shl ebp, 0x10
		xor r8d, r9d
		lea r10, [rbx*2 + 0x670db818]
		lea r8d, [r8 + rbx*2 - 0x4f884355]
		mov eax, ebx
		sub ebx, ebp
		neg r8d
		add al, 0x1a
		sub rbx, -0x227052cb
		movsx ecx, ax
		xor r8d, 0xc80e8daa
		btr ax, 0x22
		sal r10d, 0x5c
		inc r8d
		movzx edx, bpl
		shr al, 0x83
		ror dx, 0x49
		not r8d
		push r9
		shr bl, 0xc1
		inc dx
		xor dword ptr [rsp + rbx*2 - 0x658aa8f2], r8d
		rol al, 0x81
		jno 0x7ffb72ad8509
934: UB addr = 7ffb72ad8509 with ID: 266 yields:
		sbb al, bh
		pop r9
		xchg rax, rcx
		movsxd r8, r8d
		call 0x7ffb72922c46
935: UB addr = 7ffb72922c46 with ID: 267 yields:
		add rdi, r8
		mov qword ptr [rsp + rbx - 0x32c55479], r10
		mov qword ptr [rsp + rbx - 0x32c55479], rdi
		ret
936: UB addr = 7ffb729d0957 with ID: 268 yields:
		rol ebp, 3
		sub r10d, edx
		call 0x7ffb728f626d
937: UB addr = 7ffb728f626d with ID: 269 yields:
		neg ebp
		mov qword ptr [rsp + rbx - 0x4ba31c8], 0x1b0d303
		mov qword ptr [rsp + rbx*2 - 0x9746390], r9
		bts r10d, edx
		setae r10b
		xor cx, r10w
		xor dword ptr [rsp + rbx*2 - 0x9746390], ebp
		ror rbx, cl
		pop r9
		call 0x7ffb72cb6307
938: UB addr = 7ffb72a739e5 with ID: 270 yields:
		ror bl, 1
		dec bl
		or rax, 0x2e1eb223
		pop rcx
		adc rcx, -0xc84a8
		jmp rcx
939: UB addr = 7ffb72b95466 with ID: 271 yields:
		rol bl, 1
		neg bl
		push rax
		not dl
		xor r9b, bl
		lea rbx, [rsp + rbx + 0x18]
		pop rax
		sub qword ptr [rsp + rdx*2 - 0x1fa], rax
		mov qword ptr [rbx + rdx - 0xff], r10
		cwde
		movsx ecx, dl
		mov qword ptr [rsp + rbp*2 - 0xd392], rdi
		ret 8
940: UB addr = 7ffb729d0957 with ID: 268 yields:
		rol ebp, 3
		sub r10d, edx
		call 0x7ffb728f626d
941: UB addr = 7ffb728f626d with ID: 269 yields:
		neg ebp
		mov qword ptr [rsp + rbx - 0x4ba31c8], 0x1b0d303
		mov qword ptr [rsp + rbx*2 - 0x9746390], r9
		bts r10d, edx
		setae r10b
		xor cx, r10w
		xor dword ptr [rsp + rbx*2 - 0x9746390], ebp
		ror rbx, cl
		pop r9
		call 0x7ffb72cb6307
942: UB addr = 7ffb72a739e5 with ID: 270 yields:
		ror bl, 1
		dec bl
		or rax, 0x2e1eb223
		pop rcx
		adc rcx, -0xc84a8
		jmp rcx
943: UB addr = 7ffb72b95466 with ID: 271 yields:
		rol bl, 1
		neg bl
		push rax
		not dl
		xor r9b, bl
		lea rbx, [rsp + rbx + 0x18]
		pop rax
		sub qword ptr [rsp + rdx*2 - 0x1fa], rax
		mov qword ptr [rbx + rdx - 0xff], r10
		cwde
		movsx ecx, dl
		mov qword ptr [rsp + rbp*2 - 0xd392], rdi
		ret 8
944: UB addr = 7ffb729d0957 with ID: 268 yields:
		rol ebp, 3
		sub r10d, edx
		call 0x7ffb728f626d
945: UB addr = 7ffb728f626d with ID: 269 yields:
		neg ebp
		mov qword ptr [rsp + rbx - 0x4ba31c8], 0x1b0d303
		mov qword ptr [rsp + rbx*2 - 0x9746390], r9
		bts r10d, edx
		setae r10b
		xor cx, r10w
		xor dword ptr [rsp + rbx*2 - 0x9746390], ebp
		ror rbx, cl
		pop r9
		call 0x7ffb72cb6307
946: UB addr = 7ffb72a739e5 with ID: 270 yields:
		ror bl, 1
		dec bl
		or rax, 0x2e1eb223
		pop rcx
		adc rcx, -0xc84a8
		jmp rcx
947: UB addr = 7ffb72b95466 with ID: 271 yields:
		rol bl, 1
		neg bl
		push rax
		not dl
		xor r9b, bl
		lea rbx, [rsp + rbx + 0x18]
		pop rax
		sub qword ptr [rsp + rdx*2 - 0x1fa], rax
		mov qword ptr [rbx + rdx - 0xff], r10
		cwde
		movsx ecx, dl
		mov qword ptr [rsp + rbp*2 - 0xd392], rdi
		ret 8
948: UB addr = 7ffb729d0957 with ID: 268 yields:
		rol ebp, 3
		sub r10d, edx
		call 0x7ffb728f626d
949: UB addr = 7ffb728f626d with ID: 269 yields:
		neg ebp
		mov qword ptr [rsp + rbx - 0x4ba31c8], 0x1b0d303
		mov qword ptr [rsp + rbx*2 - 0x9746390], r9
		bts r10d, edx
		setae r10b
		xor cx, r10w
		xor dword ptr [rsp + rbx*2 - 0x9746390], ebp
		ror rbx, cl
		pop r9
		call 0x7ffb72cb6307
950: UB addr = 7ffb72a739e5 with ID: 270 yields:
		ror bl, 1
		dec bl
		or rax, 0x2e1eb223
		pop rcx
		adc rcx, -0xc84a8
		jmp rcx
951: UB addr = 7ffb72b95466 with ID: 271 yields:
		rol bl, 1
		neg bl
		push rax
		not dl
		xor r9b, bl
		lea rbx, [rsp + rbx + 0x18]
		pop rax
		sub qword ptr [rsp + rdx*2 - 0x1fa], rax
		mov qword ptr [rbx + rdx - 0xff], r10
		cwde
		movsx ecx, dl
		mov qword ptr [rsp + rbp*2 - 0xd392], rdi
		ret 8
952: UB addr = 7ffb72994303 with ID: 272 yields:
		mov eax, dword ptr [r10 + r11 - 8]
		xor eax, r9d
		lea eax, [rax + r8 + 0x163c649f]
		lea rdx, [r10 + rbx*4 + 0x7f1fac84]
		mov qword ptr [rsp + rcx - 0x43881e58], rcx
		bswap eax
		lea rbp, [r10*2 + 0x1d096c3e]
		xadd dx, bp
		sbb eax, r10d
		neg eax
		rol eax, 3
		add eax, r10d
		ror ebp, cl
		mov qword ptr [rsp + rcx - 0x43881e40], r9
		ror r8b, 0x63
		call 0x7ffb72c83b03
953: UB addr = 7ffb72988e80 with ID: 273 yields:
		movsxd rax, eax
		not r10
		dec r10
		lea rdx, [r8 + rbx*4 - 0x50c28459]
		add rdi, rax
		add cx, r8w
		adc bl, r10b
		mov rax, qword ptr [rcx + rsi - 0x4388bc18]
		mov qword ptr [rsp + rcx - 0x4388bc28], 0x50a0b70e
		sub byte ptr [rsp + r10 + 3], cl
		xchg qword ptr [rsp + 8], r10
		add r10, 0x2210e7
		jmp r10
954: UB addr = 7ffb72919461 with ID: 274 yields:
		not rdx
		ror r10b, 1
		inc r8b
		xor r9b, r10b
		sub qword ptr [rsp + rbx*2 - 0x12453ae6], rdx
		lea r10, [rsp + r10 + 0x28]
		call 0x7ffb72bd3fa7
955: UB addr = 7ffb729d0957 with ID: 268 yields:
		rol ebp, 3
		sub r10d, edx
		call 0x7ffb728f626d
956: UB addr = 7ffb728f626d with ID: 269 yields:
		neg ebp
		mov qword ptr [rsp + rbx - 0x4ba31c8], 0x1b0d303
		mov qword ptr [rsp + rbx*2 - 0x9746390], r9
		bts r10d, edx
		setae r10b
		xor cx, r10w
		xor dword ptr [rsp + rbx*2 - 0x9746390], ebp
		ror rbx, cl
		pop r9
		call 0x7ffb72cb6307
957: UB addr = 7ffb72a739e5 with ID: 270 yields:
		ror bl, 1
		dec bl
		or rax, 0x2e1eb223
		pop rcx
		adc rcx, -0xc84a8
		jmp rcx
958: UB addr = 7ffb72b95466 with ID: 271 yields:
		rol bl, 1
		neg bl
		push rax
		not dl
		xor r9b, bl
		lea rbx, [rsp + rbx + 0x18]
		pop rax
		sub qword ptr [rsp + rdx*2 - 0x1fa], rax
		mov qword ptr [rbx + rdx - 0xff], r10
		cwde
		movsx ecx, dl
		mov qword ptr [rsp + rbp*2 - 0xd392], rdi
		ret 8
959: UB addr = 7ffb72a5be9a with ID: 297 yields:
		jnp 0x7ffb72c80403
960: UB addr = 7ffb729fbd4f with ID: 298 yields:
		rol r8d, 0xb3
		lea r11, [r11 + rdx*8 - 6]
		sal r8b, 0x41
		call 0x7ffb728fa81a
961: UB addr = 7ffb728fa81a with ID: 299 yields:
		cdq
		lea r10d, [rdx + r10 - 0x175dfdda]
		bswap r10d
		movzx ecx, word ptr [rsp + 0x12]
		add r10d, edx
		rol ebx, cl
		mov qword ptr [rsp + rcx*4 - 0x3bef0], rcx
		neg r10d
		rol r10d, 3
		sar ax, 0x47
		sub r10d, edx
		mov qword ptr [rsp + rcx*4 - 0x3bee8], r9
		sal al, 0x66
		shr word ptr [rsp + rcx*8 - 0x77de8], 0xc9
		xor dword ptr [rsp + rcx*2 - 0x1df6c], r10d
		movzx ebp, r8b
		dec ecx
		mov r9, qword ptr [rsp + rcx*4 - 0x3bee4]
		pop r8
		movsxd r10, r10d
		movsx r8d, bl
		rol bx, 0x24
		add rdi, r10
		and eax, 0x2584b827
		mov qword ptr [rsp + rax - 0x25840000], rdi
		ret 8
962: UB addr = 7ffb72b71aef with ID: 276 yields:
		mov edx, 0x200f6b0d
		lea r8, [rdx + rdx*8 + 0x77257aa0]
		movzx ecx, dx
		lea rax, [rcx + rcx*2 - 0x25c4edc]
		and cx, 0x1730
		lea r10, [rdx + r10 + 0x353d58b6]
		sal r8d, 0x6a
		xor r9, r10
		sar dl, 4
		lea rbp, [r8 + rax*4 + 0x5a92ba5]
		mov qword ptr [rsi + rdx*2 - 0x401ed608], r10
		mov r10d, dword ptr [r11 + rdx*2 - 0x401ed60c]
		xor eax, eax
		shr bp, 0x43
		dec rdx
		xor r10d, r9d
		ror r10d, 3
		xadd al, dl
		sal rax, 0xa1
		bswap r10d
		movzx ebx, ax
		sal rbp, 0x28
		jb 0x7ffb72ce03ed
963: UB addr = 7ffb72ba4f40 with ID: 277 yields:
		rol rbx, 0x34
		add rdi, r10
		mov qword ptr [rsp + rdx], rdx
		inc bl
		je 0x7ffb72b801d7
964: UB addr = 7ffb72ba4f53 with ID: 278 yields:
		mov rax, qword ptr [r11 + rdx - 0x14]
		lea r11, [r11 + rdx*2 - 0x14]
		dec cl
		or word ptr [rsp + rdx + 2], bx
		xor rax, r9
		inc rax
		and ecx, 0x3a926d18
		pop rdx
		movsx r10d, dx
		not rax
		not r10
		rol rax, 1
		xchg r8d, r10d
		lea rax, [rax + rcx*2 - 0x73a60719]
		rol r8w, 0xee
		xor r9, rax
		lea r10, [rdx + 0x51a68029]
		lea rbx, [rbp + r10 - 0x3c4779ea]
		mov qword ptr [rcx + rsi - 0x4010], rax
		call 0x7ffb72e14c8d
965: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
966: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
967: UB addr = 7ffb72b8eb81 with ID: 282 yields:
		mov ebp, 0x638b56ae
		lea rdx, [rbp + rbp*4 + 0x24035c1a]
		lea r8, [rdx*4 - 0x4fde93f1]
		mov rcx, qword ptr [rsi + rbp - 0x638b56ae]
		shr dl, 0xa6
		lea rbx, [r8*8 - 0x6dc37fea]
		jnp 0x7ffb72c85968
968: UB addr = 7ffb72a3c3c4 with ID: 283 yields:
		neg edx
		lea edx, [rdx + rbp*2 + 0x4be269c6]
		bswap edx
		pop rcx
		inc r8w
		push r9
		xor dword ptr [rsp + rbp + 0x638b56ae], edx
		pop r9
		xor rcx, 0x4a8ee4af
		lea r10, [rbp + r8*8 - 0x7fcb6f73]
		movsxd rdx, edx
		xchg rbx, r10
		adc rdi, rdx
		sub ebp, 0xc09ee0a3
		mov rax, qword ptr [rsi + rax - 0x42357f8e]
		inc ebp
		mov rdx, qword ptr [rsi + rdx - 0x1ca939df]
		sal cx, 0x4d
		js 0x7ffb72b9c70a
969: UB addr = 7ffb72b9c70a with ID: 284 yields:
		add rax, rdx
		neg r8
		sar r10b, 0x47
		mov qword ptr [rsi + 8], rax
		adc rsi, 8
		call 0x7ffb72c0f627
970: UB addr = 7ffb72935887 with ID: 300 yields:
		mov r8, qword ptr [rbp]
		dec rcx
		xadd dword ptr [rsp + 0x25], r10d
		mov qword ptr [rsi], r8
		add r10, rdx
		pop rdx
		pop rbp
		pop r10
		pop rax
		pop r10
		pop rbx
		jmp rdi
971: UB addr = 7ffb7291c40f with ID: 281 yields:
		mov edx, dword ptr [r11 - 4]
		mov r8d, 0x1602999f
		xor edx, r9d
		lea rbx, [r8*2 - 0x7cd41e6e]
		movzx eax, bl
		rol edx, 1
		inc bx
		xor eax, 0x4c1a5a8b
		sub al, 0xb
		inc edx
		mov r10d, 0x9c2fcb86
		bts r10d, eax
		ror edx, 1
		sal r10w, 9
		or r8w, bx
		xchg rbp, rbx
		dec edx
		shl r8, 0x76
		sal eax, 0xec
		neg edx
		cwde
		lea rbx, [r10 + rbx - 0xdef94d3]
		push r9
		movsx ecx, dx
		mov r10, r8
		sub ebx, 0x8182d5bf
		bts eax, 0xa9
		mov rdx, qword ptr [rsi + rcx*2]
		ror cx, 0xc2
		push rax
		adc r10, rdx
		mov qword ptr [rsp + rcx + 8], 0x6fa95096
		mov qword ptr [rsi + rcx], r10
		mov qword ptr [rsp + rcx*2], rdi
		ret 8
972: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
973: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
974: UB addr = 7ffb72947021 with ID: 301 yields:
		sub qword ptr [rsp + rbx*2 - 0x6415796a], rbx
		movzx r10d, byte ptr [rbx + r11 - 0x320abcba]
		not word ptr [rsp + rbx - 0x320abcb3]
		call 0x7ffb72ceb5c9
975: UB addr = 7ffb72a63d1c with ID: 302 yields:
		lea r10, [rsp + r10 + 0x18]
		rol rbp, cl
		mov dword ptr [r10 + rbx*2 - 0x641596b6], eax
		movzx eax, cl
		xchg qword ptr [rsp + 8], rax
		add rax, 0x2ad44
		jmp rax
976: UB addr = 7ffb72971d83 with ID: 303 yields:
		mov qword ptr [rsp + rbx*2 - 0x641596b6], rdi
		ret 0x10
977: UB addr = 7ffb729c064c with ID: 304 yields:
		mov ebp, 0x7fa16588
		mov ecx, ebp
		movzx r10d, byte ptr [r11 + rbp - 0x7fa16589]
		xor rcx, 0xffffffffcda1c336
		xor r10b, r9b
		neg r10b
		mov edx, 0x793ab593
		sub r10b, 0xb9
		lea rax, [rcx + rdx*4 - 0x12c25963]
		neg ax
		rol r10b, 1
		cdqe
		pop rbx
		add rbx, -0x4b79ec
		jmp rbx
978: UB addr = 7ffb7299955f with ID: 305 yields:
		movzx r8d, dl
		inc ebp
		call 0x7ffb72e10cdf
979: UB addr = 7ffb7298164e with ID: 306 yields:
		not dx
		add rdi, rbp
		movzx eax, byte ptr [r11 + r8 - 0xc3]
		movzx ebp, r10w
		sar r8b, 0x26
		lea r11, [rdx + r11 + 0x7bd43eb8]
		dec r10b
		adc r10, -0xa5d8c5c
		dec r10
		xor al, r9b
		xadd rbx, r8
		xor dx, 0xb0bd
		ror al, 1
		add bp, bx
		xadd r10d, ebx
		sbb al, 0xaf
		rol al, 1
		sbb al, 0xff
		lea rcx, [r8*2 + 0x98a7f82]
		dec ecx
		btr r10, rcx
		xor r9b, al
		bts bx, r10w
		setae cl
		push r10
		mov word ptr [rsi + r8 - 0xc7], ax
		call 0x7ffb72ac3eb4
980: UB addr = 7ffb72ac3eb4 with ID: 307 yields:
		mov qword ptr [rsp + r8 - 0xbd], rbx
		lea rsi, [rsi + rdx + 0x7bd48df7]
		pop r8
		pop r8
		jb 0x7ffb72a83ef6
981: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
982: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
983: UB addr = 7ffb72a413ea with ID: 308 yields:
		xchg dword ptr [rsp + rax - 0x40b31500], eax
		inc ax
		neg bpl
		sub rdx, -0x4914f3
		xor r9b, bpl
		pop r8
		add rbp, rsp
		sal r10b, 0xe4
		je 0x7ffb72a5292e
984: UB addr = 7ffb72a5292e with ID: 309 yields:
		mov rdx, qword ptr [rbp + r10]
		inc ebx
		mov qword ptr [rsi + r10 - 6], rdx
		call 0x7ffb72e9ab9b
985: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
986: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
987: UB addr = 7ffb72a524f0 with ID: 310 yields:
		mov ebx, dword ptr [r11 - 4]
		mov r8d, 0x593a3e09
		movzx r10d, r8w
		xor ebx, r9d
		push r8
		rol word ptr [rsp + r10*2 - 0x7c0d], 0x29
		xor ebx, 0xe510688e
		inc ebx
		lea rdx, [r8 + r8*8 - 0x124729db]
		call 0x7ffb72c12ee4
988: UB addr = 7ffb72b71aef with ID: 276 yields:
		mov edx, 0x200f6b0d
		lea r8, [rdx + rdx*8 + 0x77257aa0]
		movzx ecx, dx
		lea rax, [rcx + rcx*2 - 0x25c4edc]
		and cx, 0x1730
		lea r10, [rdx + r10 + 0x353d58b6]
		sal r8d, 0x6a
		xor r9, r10
		sar dl, 4
		lea rbp, [r8 + rax*4 + 0x5a92ba5]
		mov qword ptr [rsi + rdx*2 - 0x401ed608], r10
		mov r10d, dword ptr [r11 + rdx*2 - 0x401ed60c]
		xor eax, eax
		shr bp, 0x43
		dec rdx
		xor r10d, r9d
		ror r10d, 3
		xadd al, dl
		sal rax, 0xa1
		bswap r10d
		movzx ebx, ax
		sal rbp, 0x28
		jb 0x7ffb72ce03ed
989: UB addr = 7ffb72ba4f40 with ID: 277 yields:
		rol rbx, 0x34
		add rdi, r10
		mov qword ptr [rsp + rdx], rdx
		inc bl
		je 0x7ffb72b801d7
990: UB addr = 7ffb72ba4f53 with ID: 278 yields:
		mov rax, qword ptr [r11 + rdx - 0x14]
		lea r11, [r11 + rdx*2 - 0x14]
		dec cl
		or word ptr [rsp + rdx + 2], bx
		xor rax, r9
		inc rax
		and ecx, 0x3a926d18
		pop rdx
		movsx r10d, dx
		not rax
		not r10
		rol rax, 1
		xchg r8d, r10d
		lea rax, [rax + rcx*2 - 0x73a60719]
		rol r8w, 0xee
		xor r9, rax
		lea r10, [rdx + 0x51a68029]
		lea rbx, [rbp + r10 - 0x3c4779ea]
		mov qword ptr [rcx + rsi - 0x4010], rax
		call 0x7ffb72e14c8d
991: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
992: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
993: UB addr = 7ffb72b8eb81 with ID: 282 yields:
		mov ebp, 0x638b56ae
		lea rdx, [rbp + rbp*4 + 0x24035c1a]
		lea r8, [rdx*4 - 0x4fde93f1]
		mov rcx, qword ptr [rsi + rbp - 0x638b56ae]
		shr dl, 0xa6
		lea rbx, [r8*8 - 0x6dc37fea]
		jnp 0x7ffb72c85968
994: UB addr = 7ffb72a3c3c4 with ID: 283 yields:
		neg edx
		lea edx, [rdx + rbp*2 + 0x4be269c6]
		bswap edx
		pop rcx
		inc r8w
		push r9
		xor dword ptr [rsp + rbp + 0x638b56ae], edx
		pop r9
		xor rcx, 0x4a8ee4af
		lea r10, [rbp + r8*8 - 0x7fcb6f73]
		movsxd rdx, edx
		xchg rbx, r10
		adc rdi, rdx
		sub ebp, 0xc09ee0a3
		mov rax, qword ptr [rsi + rax - 0x42357f8e]
		inc ebp
		mov rdx, qword ptr [rsi + rdx - 0x1ca939df]
		sal cx, 0x4d
		js 0x7ffb72b9c70a
995: UB addr = 7ffb72b9c70a with ID: 284 yields:
		add rax, rdx
		neg r8
		sar r10b, 0x47
		mov qword ptr [rsi + 8], rax
		adc rsi, 8
		call 0x7ffb72c0f627
996: UB addr = 7ffb72b71aef with ID: 276 yields:
		mov edx, 0x200f6b0d
		lea r8, [rdx + rdx*8 + 0x77257aa0]
		movzx ecx, dx
		lea rax, [rcx + rcx*2 - 0x25c4edc]
		and cx, 0x1730
		lea r10, [rdx + r10 + 0x353d58b6]
		sal r8d, 0x6a
		xor r9, r10
		sar dl, 4
		lea rbp, [r8 + rax*4 + 0x5a92ba5]
		mov qword ptr [rsi + rdx*2 - 0x401ed608], r10
		mov r10d, dword ptr [r11 + rdx*2 - 0x401ed60c]
		xor eax, eax
		shr bp, 0x43
		dec rdx
		xor r10d, r9d
		ror r10d, 3
		xadd al, dl
		sal rax, 0xa1
		bswap r10d
		movzx ebx, ax
		sal rbp, 0x28
		jb 0x7ffb72ce03ed
997: UB addr = 7ffb72ba4f40 with ID: 277 yields:
		rol rbx, 0x34
		add rdi, r10
		mov qword ptr [rsp + rdx], rdx
		inc bl
		je 0x7ffb72b801d7
998: UB addr = 7ffb72ba4f53 with ID: 278 yields:
		mov rax, qword ptr [r11 + rdx - 0x14]
		lea r11, [r11 + rdx*2 - 0x14]
		dec cl
		or word ptr [rsp + rdx + 2], bx
		xor rax, r9
		inc rax
		and ecx, 0x3a926d18
		pop rdx
		movsx r10d, dx
		not rax
		not r10
		rol rax, 1
		xchg r8d, r10d
		lea rax, [rax + rcx*2 - 0x73a60719]
		rol r8w, 0xee
		xor r9, rax
		lea r10, [rdx + 0x51a68029]
		lea rbx, [rbp + r10 - 0x3c4779ea]
		mov qword ptr [rcx + rsi - 0x4010], rax
		call 0x7ffb72e14c8d
999: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
1000: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
1001: UB addr = 7ffb7299c8dd with ID: 311 yields:
		mov edx, dword ptr [r11 - 4]
		mov ebp, 0x34997e3b
		mov ecx, 0x160090a2
		movsx r10d, bp
		xor edx, r9d
		rol edx, 1
		add rbp, -0x615681cb
		jb 0x7ffb72c1302b
1002: UB addr = 7ffb7299c905 with ID: 312 yields:
		movzx eax, bp
		inc edx
		ror edx, 1
		add bp, 0x4821
		sete al
		dec edx
		neg r10w
		not ebp
		neg edx
		push r9
		xor dword ptr [rsp + rbp - 0x2cbdbb6e], edx
		movzx ebx, bpl
		sal ebx, 0x12
		pop r9
		movsxd rdx, edx
		sar bp, cl
		adc rdi, rdx
		btr ax, cx
		btc ecx, eax
		cmovae bp, bx
		movzx ecx, byte ptr [r11 + rbp*2 - 0x597a0005]
		jae 0x7ffb72cedc30
1003: UB addr = 7ffb72a04f5f with ID: 313 yields:
		rol cl, 1
		xor cl, bl
		xor r9b, cl
		add rcx, rsp
		cwde
		mov r8, qword ptr [rcx + rbp*2 - 0x597a018a]
		mov rbx, r8
		dec eax
		movzx r10d, byte ptr [r11 + rbp - 0x2cbd00cb]
		cqo
		rol dx, 0xce
		movzx r8d, dl
		lea r11, [r11 + rbp*2 - 0x597a0190]
		xor r10b, r9b
		sub r10b, 0x90
		sar eax, 7
		add rdx, -0x1cc6b3f5
		rol r10b, 1
		lea rcx, [r8*4 - 0x28661b77]
		call 0x7ffb72b99623
1004: UB addr = 7ffb72b99623 with ID: 314 yields:
		xor r10b, 0xa4
		mov qword ptr [rsp + rbp - 0x2cbd00c5], rcx
		or qword ptr [rsp + rbp*2 - 0x597a018a], rcx
		sal r8, 0xc7
		ror r10b, 1
		xor r9b, r10b
		call 0x7ffb72bec884
1005: UB addr = 7ffb72b8eb81 with ID: 282 yields:
		mov ebp, 0x638b56ae
		lea rdx, [rbp + rbp*4 + 0x24035c1a]
		lea r8, [rdx*4 - 0x4fde93f1]
		mov rcx, qword ptr [rsi + rbp - 0x638b56ae]
		shr dl, 0xa6
		lea rbx, [r8*8 - 0x6dc37fea]
		jnp 0x7ffb72c85968
1006: UB addr = 7ffb72a3c3c4 with ID: 283 yields:
		neg edx
		lea edx, [rdx + rbp*2 + 0x4be269c6]
		bswap edx
		pop rcx
		inc r8w
		push r9
		xor dword ptr [rsp + rbp + 0x638b56ae], edx
		pop r9
		xor rcx, 0x4a8ee4af
		lea r10, [rbp + r8*8 - 0x7fcb6f73]
		movsxd rdx, edx
		xchg rbx, r10
		adc rdi, rdx
		sub ebp, 0xc09ee0a3
		mov rax, qword ptr [rsi + rax - 0x42357f8e]
		inc ebp
		mov rdx, qword ptr [rsi + rdx - 0x1ca939df]
		sal cx, 0x4d
		js 0x7ffb72b9c70a
1007: UB addr = 7ffb72b9c70a with ID: 284 yields:
		add rax, rdx
		neg r8
		sar r10b, 0x47
		mov qword ptr [rsi + 8], rax
		adc rsi, 8
		call 0x7ffb72c0f627
1008: UB addr = 7ffb72a07461 with ID: 315 yields:
		cqo
		mov rbx, rsi
		mov qword ptr [rsp + rdx*8], rdx
		mov r10d, 0xf9b3ba4
		mov qword ptr [rsi + rdx*2 - 8], rbx
		mov eax, dword ptr [r11 + rdx*4 - 4]
		lea r8, [rdx + rdx - 0x475f36b]
		xor eax, r9d
		dec eax
		xadd byte ptr [rsp + rdx + 2], dh
		jp 0x7ffb72ea68b7
1009: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
1010: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
1011: UB addr = 7ffb72935887 with ID: 300 yields:
		mov r8, qword ptr [rbp]
		dec rcx
		xadd dword ptr [rsp + 0x25], r10d
		mov qword ptr [rsi], r8
		add r10, rdx
		pop rdx
		pop rbp
		pop r10
		pop rax
		pop r10
		pop rbx
		jmp rdi
1012: UB addr = 7ffb72935887 with ID: 300 yields:
		mov r8, qword ptr [rbp]
		dec rcx
		xadd dword ptr [rsp + 0x25], r10d
		mov qword ptr [rsi], r8
		add r10, rdx
		pop rdx
		pop rbp
		pop r10
		pop rax
		pop r10
		pop rbx
		jmp rdi
1013: UB addr = 7ffb72935887 with ID: 300 yields:
		mov r8, qword ptr [rbp]
		dec rcx
		xadd dword ptr [rsp + 0x25], r10d
		mov qword ptr [rsi], r8
		add r10, rdx
		pop rdx
		pop rbp
		pop r10
		pop rax
		pop r10
		pop rbx
		jmp rdi
1014: UB addr = 7ffb729d2b11 with ID: 275 yields:
		bts r10, 1
		add r10w, dx
		xor r8w, 0x3c05
		xor r9w, r8w
		lea rcx, [rdx*4 - 0x5e52b7d5]
		not cl
		add ebp, edx
		lea r8, [rsp + r8 + 8]
		bts bp, 0x38
		movzx ebx, dl
		mov qword ptr [r8 + rbx*8 - 0x370], rax
		mov qword ptr [rsp + rbp - 0x723adb5], rdx
		mov edx, dword ptr [r11 + rbp*4 - 0x1c8eb6da]
		cmovae rcx, qword ptr [rsp + rbp*4 - 0x1c8eb6d4]
		xor edx, r9d
		mov qword ptr [rsp + rbp*4 - 0x1c0eb6d4], 0x5000e68a
		lea edx, [rdx + r10*2 - 0x6b62e4bb]
		bswap edx
		dec edx
		inc byte ptr [rsp + rbx - 0x67]
		jnp 0x7ffb72d24068
1015: UB addr = 7ffb729ab6ab with ID: 293 yields:
		mov qword ptr [rsp + rbx - 0x1d4ded], r8
		add bpl, 0x31
		sal ax, 8
		xadd dword ptr [rsp + rbx*4 - 0x7537b4], eax
		call 0x7ffb72bf3ace
1016: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
1017: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
1018: UB addr = 7ffb72b8fb00 with ID: 292 yields:
		mov ecx, 0xe10e46ac
		movzx r8d, cl
		movzx ebp, word ptr [r8 + r11 - 0xae]
		call 0x7ffb72d0f014
1019: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
1020: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
1021: UB addr = 7ffb729ab6ab with ID: 293 yields:
		mov qword ptr [rsp + rbx - 0x1d4ded], r8
		add bpl, 0x31
		sal ax, 8
		xadd dword ptr [rsp + rbx*4 - 0x7537b4], eax
		call 0x7ffb72bf3ace
1022: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
1023: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
1024: UB addr = 7ffb72b8fb00 with ID: 292 yields:
		mov ecx, 0xe10e46ac
		movzx r8d, cl
		movzx ebp, word ptr [r8 + r11 - 0xae]
		call 0x7ffb72d0f014
1025: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
1026: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
1027: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
1028: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
1029: UB addr = 7ffb72b8fb00 with ID: 292 yields:
		mov ecx, 0xe10e46ac
		movzx r8d, cl
		movzx ebp, word ptr [r8 + r11 - 0xae]
		call 0x7ffb72d0f014
1030: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
1031: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
1032: UB addr = 7ffb729ab6ab with ID: 293 yields:
		mov qword ptr [rsp + rbx - 0x1d4ded], r8
		add bpl, 0x31
		sal ax, 8
		xadd dword ptr [rsp + rbx*4 - 0x7537b4], eax
		call 0x7ffb72bf3ace
1033: UB addr = 7ffb72a83ef6 with ID: 279 yields:
		lea rax, [rsp + 0x1f8]
		call 0x7ffb72cf3ab7
1034: UB addr = 7ffb72b1e997 with ID: 280 yields:
		call 0x7ffb72cf7430
1035: UB addr = 7ffb72a6c01d with ID: 316 yields:
		call 0x7ffb72d55a5d
1036: UB addr = 7ffb729f862a with ID: 317 yields:
		xor rbp, rbx
		mov eax, edx
		sub rax, -0x6bd150
		mov qword ptr [rsp + rbx - 0x56168001], rbp
		lea rcx, [rsp + rcx + 0x10]
		add rax, qword ptr [rsp + rbp - 0x1a]
		add byte ptr [rsp + rbx - 0x56167ffa], ah
		or eax, dword ptr [rsp + rbp*4 - 0x67]
		mov rbx, qword ptr [rbx + rcx - 0x56168001]
		mov qword ptr [rsp + rbp - 0x12], rax
		mov r11, rbx
		sal word ptr [rsp + rbp - 0x18], 0xe1
		xadd r9d, ebp
		mov r9, rsi
		setnp al
		pop rcx
		pop rdi
		jle 0x7ffb72ad1e3f
1037: UB addr = 7ffb72ad1e3f with ID: 318 yields:
		push -0x6b5645d1
		mov ebp, dword ptr [rsp + 2]
		mov edi, 0x37064a29
		mov r10, r11
		inc byte ptr [rsp + rdi*2 - 0x6e0c9452]
		push rdi
		mov ecx, 0x7da1230d
		movabs rdi, 0x7ff9e7130000
		shl dword ptr [rsp + rcx - 0x7da1230d], 0xb8
		call 0x7ffb72bc5400
1038: UB addr = 7ffb728d7879 with ID: 319 yields:
		mov r8d, 0xa005a437
		mov rcx, qword ptr [r9]
		lea rsi, [r8*4 + 0x618344a4]
		movsx edi, r8w
		movzx edx, byte ptr [r11]
		neg rdi
		xor dl, r10b
		movsx eax, sil
		sub eax, 0x433a0c1f
		rol dl, 1
		dec esi
		movzx ebp, di
		inc dl
		xor dl, 0x1a
		sub r8w, di
		sbb dl, 0x91
		call 0x7ffb72c2c311
1039: UB addr = 7ffb72a28a01 with ID: 320 yields:
		rol dword ptr [rsp + rbp - 0x5bc0], 0x85
		cdqe
		mov qword ptr [rdx + rax + 0x433a0c9f], rcx
		mov qword ptr [rsp + rax + 0x433a0c9f], rax
		bts eax, ebp
		mov rdx, qword ptr [rbp + r9 - 0x5bc1]
		xor byte ptr [rsp + rbp - 0x5bbd], al
		bts esi, 1
		push rdi
		movzx r8d, byte ptr [r11 + rbp - 0x5bc8]
		sub rax, rax
		xor r8b, r10b
		dec eax
		sbb r8b, al
		rol r8b, 1
		xor r8b, al
		neg r8b
		add bp, 0x8a2
		xor r10b, r8b
		lea r8, [rsp + r8 + 0x18]
		dec esi
		dec dword ptr [rsp + rbp - 0x645e]
		mov qword ptr [r8 + rbp - 0x646b], rdx
		sal rax, 0xd2
		lea r8, [rdi + rsi*8 + 0x1f94548b]
		sar r8b, 0xe4
		mov rsi, qword ptr [r9 + rbp*2 - 0xc8c6]
		movsx edx, word ptr [rsp + rbp*2 - 0xc8d0]
		lea r9, [rbp + r9 - 0x6453]
		xchg ecx, edi
		call 0x7ffb72bda643
1040: UB addr = 7ffb7290de42 with ID: 321 yields:
		xor dword ptr [rsp + rdx*2 + 0x10], r8d
		mov r10, qword ptr [rsp + rdx*2 + 0x10]
		call 0x7ffb72d48e47
1041: UB addr = 7ffb728d7879 with ID: 319 yields:
		mov r8d, 0xa005a437
		mov rcx, qword ptr [r9]
		lea rsi, [r8*4 + 0x618344a4]
		movsx edi, r8w
		movzx edx, byte ptr [r11]
		neg rdi
		xor dl, r10b
		movsx eax, sil
		sub eax, 0x433a0c1f
		rol dl, 1
		dec esi
		movzx ebp, di
		inc dl
		xor dl, 0x1a
		sub r8w, di
		sbb dl, 0x91
		call 0x7ffb72c2c311
1042: UB addr = 7ffb72a28a01 with ID: 320 yields:
		rol dword ptr [rsp + rbp - 0x5bc0], 0x85
		cdqe
		mov qword ptr [rdx + rax + 0x433a0c9f], rcx
		mov qword ptr [rsp + rax + 0x433a0c9f], rax
		bts eax, ebp
		mov rdx, qword ptr [rbp + r9 - 0x5bc1]
		xor byte ptr [rsp + rbp - 0x5bbd], al
		bts esi, 1
		push rdi
		movzx r8d, byte ptr [r11 + rbp - 0x5bc8]
		sub rax, rax
		xor r8b, r10b
		dec eax
		sbb r8b, al
		rol r8b, 1
		xor r8b, al
		neg r8b
		add bp, 0x8a2
		xor r10b, r8b
		lea r8, [rsp + r8 + 0x18]
		dec esi
		dec dword ptr [rsp + rbp - 0x645e]
		mov qword ptr [r8 + rbp - 0x646b], rdx
		sal rax, 0xd2
		lea r8, [rdi + rsi*8 + 0x1f94548b]
		sar r8b, 0xe4
		mov rsi, qword ptr [r9 + rbp*2 - 0xc8c6]
		movsx edx, word ptr [rsp + rbp*2 - 0xc8d0]
		lea r9, [rbp + r9 - 0x6453]
		xchg ecx, edi
		call 0x7ffb72bda643
1043: UB addr = 7ffb7290de42 with ID: 321 yields:
		xor dword ptr [rsp + rdx*2 + 0x10], r8d
		mov r10, qword ptr [rsp + rdx*2 + 0x10]
		call 0x7ffb72d48e47
1044: UB addr = 7ffb728d7879 with ID: 319 yields:
		mov r8d, 0xa005a437
		mov rcx, qword ptr [r9]
		lea rsi, [r8*4 + 0x618344a4]
		movsx edi, r8w
		movzx edx, byte ptr [r11]
		neg rdi
		xor dl, r10b
		movsx eax, sil
		sub eax, 0x433a0c1f
		rol dl, 1
		dec esi
		movzx ebp, di
		inc dl
		xor dl, 0x1a
		sub r8w, di
		sbb dl, 0x91
		call 0x7ffb72c2c311
1045: UB addr = 7ffb72a28a01 with ID: 320 yields:
		rol dword ptr [rsp + rbp - 0x5bc0], 0x85
		cdqe
		mov qword ptr [rdx + rax + 0x433a0c9f], rcx
		mov qword ptr [rsp + rax + 0x433a0c9f], rax
		bts eax, ebp
		mov rdx, qword ptr [rbp + r9 - 0x5bc1]
		xor byte ptr [rsp + rbp - 0x5bbd], al
		bts esi, 1
		push rdi
		movzx r8d, byte ptr [r11 + rbp - 0x5bc8]
		sub rax, rax
		xor r8b, r10b
		dec eax
		sbb r8b, al
		rol r8b, 1
		xor r8b, al
		neg r8b
		add bp, 0x8a2
		xor r10b, r8b
		lea r8, [rsp + r8 + 0x18]
		dec esi
		dec dword ptr [rsp + rbp - 0x645e]
		mov qword ptr [r8 + rbp - 0x646b], rdx
		sal rax, 0xd2
		lea r8, [rdi + rsi*8 + 0x1f94548b]
		sar r8b, 0xe4
		mov rsi, qword ptr [r9 + rbp*2 - 0xc8c6]
		movsx edx, word ptr [rsp + rbp*2 - 0xc8d0]
		lea r9, [rbp + r9 - 0x6453]
		xchg ecx, edi
		call 0x7ffb72bda643
1046: UB addr = 7ffb7290de42 with ID: 321 yields:
		xor dword ptr [rsp + rdx*2 + 0x10], r8d
		mov r10, qword ptr [rsp + rdx*2 + 0x10]
		call 0x7ffb72d48e47
1047: UB addr = 7ffb728d7879 with ID: 319 yields:
		mov r8d, 0xa005a437
		mov rcx, qword ptr [r9]
		lea rsi, [r8*4 + 0x618344a4]
		movsx edi, r8w
		movzx edx, byte ptr [r11]
		neg rdi
		xor dl, r10b
		movsx eax, sil
		sub eax, 0x433a0c1f
		rol dl, 1
		dec esi
		movzx ebp, di
		inc dl
		xor dl, 0x1a
		sub r8w, di
		sbb dl, 0x91
		call 0x7ffb72c2c311
1048: UB addr = 7ffb72a28a01 with ID: 320 yields:
		rol dword ptr [rsp + rbp - 0x5bc0], 0x85
		cdqe
		mov qword ptr [rdx + rax + 0x433a0c9f], rcx
		mov qword ptr [rsp + rax + 0x433a0c9f], rax
		bts eax, ebp
		mov rdx, qword ptr [rbp + r9 - 0x5bc1]
		xor byte ptr [rsp + rbp - 0x5bbd], al
		bts esi, 1
		push rdi
		movzx r8d, byte ptr [r11 + rbp - 0x5bc8]
		sub rax, rax
		xor r8b, r10b
		dec eax
		sbb r8b, al
		rol r8b, 1
		xor r8b, al
		neg r8b
		add bp, 0x8a2
		xor r10b, r8b
		lea r8, [rsp + r8 + 0x18]
		dec esi
		dec dword ptr [rsp + rbp - 0x645e]
		mov qword ptr [r8 + rbp - 0x646b], rdx
		sal rax, 0xd2
		lea r8, [rdi + rsi*8 + 0x1f94548b]
		sar r8b, 0xe4
		mov rsi, qword ptr [r9 + rbp*2 - 0xc8c6]
		movsx edx, word ptr [rsp + rbp*2 - 0xc8d0]
		lea r9, [rbp + r9 - 0x6453]
		xchg ecx, edi
		call 0x7ffb72bda643
1049: UB addr = 7ffb7290de42 with ID: 321 yields:
		xor dword ptr [rsp + rdx*2 + 0x10], r8d
		mov r10, qword ptr [rsp + rdx*2 + 0x10]
		call 0x7ffb72d48e47
1050: UB addr = 7ffb72a326ab with ID: 322 yields:
		sbb cx, dx
		call 0x7ffb72ecd8d1
1051: UB addr = 7ffb72966f89 with ID: 323 yields:
		sal r8b, 0x87
		xor r10, rbp
		mov qword ptr [rsp + r8*2 - 0x1a400], 0x2396a3b1
		mov qword ptr [r9 + rdi*2 + 0x4f5d8062], rbp
		xchg esi, edi
		shl byte ptr [rsp + r8*2 - 0x1a400], 2
		not di
		lea r9, [r9 + r8 - 0xd1f8]
		adc word ptr [rsp + r8*2 - 0x1a3fb], 0xb69b
		mov ebp, r8d
		mov ecx, dword ptr [r8 + r11 - 0xd1f6]
		pop rax
		lea r11, [r11 + r8*2 - 0x1a3f2]
		xor di, 0x4803
		xor ecx, r10d
		neg ecx
		ror si, 0xc1
		adc edx, 0xe528b814
		xchg eax, ebp
		dec ecx
		bswap ecx
		xchg bpl, al
		xor di, 0x1b28
		btc dx, bp
		ror ecx, 1
		push rdi
		push r8
		inc ecx
		add word ptr [rsp + rax*2 - 0x1a445], si
		btc r8w, 0x1e
		mov qword ptr [rsp + r8*2 - 0x123f8], r10
		sbb dword ptr [rsp + r8*2 - 0x123ff], eax
		xor dword ptr [rsp + r8 - 0x91f8], ecx
		cdqe
		mov r10, qword ptr [rsp + r8*2 - 0x123f8]
		mov qword ptr [rsp + r8 - 0x91f8], rsi
		or r8w, dx
		movsxd rcx, ecx
		adc rbx, rcx
		mov qword ptr [rsp + rax - 0xd223], rbx
		ret 8
1052: UB addr = 7ffb729cd08c with ID: 324 yields:
		lea rdi, [rsi + rsi - 0x267283c4]
		rol rdx, 3
		ror sil, 1
		inc byte ptr [rsp + rsi - 0x3f87610e]
		jno 0x7ffb72c71a8b
1053: UB addr = 7ffb72ab785c with ID: 325 yields:
		movsxd rdi, edi
		add rbx, rdi
		mov qword ptr [rsp + rax + 0x4c69], rbp
		movzx esi, byte ptr [r11 + rdx*2 - 0x1fff2]
		inc al
		lea r11, [rbp + r11 - 0x589c1ff3]
		xor sil, r10b
		add sil, dl
		dec byte ptr [rsp + rax*2 + 0x98cf]
		rol sil, 1
		and dl, 5
		cdqe
		mov edi, dword ptr [rsp + rbp - 0x589c1ffb]
		inc sil
		lea r8, [rbp*2 - 0x3bc483fa]
		and dword ptr [rsp + rax + 0x4c6a], r8d
		not sil
		push r8
		dec word ptr [rsp + rax*2 + 0x98c0]
		shr qword ptr [rsp + rax + 0x4c65], cl
		ror sil, 1
		ror byte ptr [rsp + rax*2 + 0x98d4], 4
		ror r8, cl
		xor sil, 0x94
		xadd r8d, eax
		inc rbp
		rol bp, 0x62
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x18]
		shl bpl, 0xc3
		xadd dword ptr [rsp + rax*4 - 0x756e], edx
		mov rax, qword ptr [rbp + rsi - 0x589c8020]
		dec rcx
		mov qword ptr [r9 + rcx - 0x6121], rax
		sal edx, cl
		lea r9, [rcx + r9 - 0x6121]
		jp 0x7ffb72ac5884
1054: UB addr = 7ffb72ac5884 with ID: 326 yields:
		adc ebp, ecx
		pop rax
		pop rax
		pop rsi
		jns 0x7ffb72acc73a
1055: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1056: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1057: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1058: UB addr = 7ffb72bad289 with ID: 330 yields:
		mov r8, qword ptr [r9]
		mov edi, 0x5a36a639
		mov rax, qword ptr [rdi + r9 - 0x5a36a631]
		add r8, rax
		mov qword ptr [r9 + rdi - 0x5a36a631], r8
		mov r8d, dword ptr [rdi + r11 - 0x5a36a639]
		lea r11, [rdi + r11 - 0x5a36a635]
		push rdi
		lea rax, [rdi + rdi + 0x5313b7a5]
		xor r8d, r10d
		dec word ptr [rsp + rdi - 0x5a36a638]
		jle 0x7ffb72955210
1059: UB addr = 7ffb72a41339 with ID: 401 yields:
		lea r8d, [r8 + rdi - 0x62f26b46]
		rol r8d, 3
		cdqe
		neg dil
		neg r8d
		sar word ptr [rsp + rdi - 0x5a36a6c6], 0xc
		not r8d
		mov qword ptr [rsp + rax - 0x7810417], r10
		xor dword ptr [rsp + rdi - 0x5a36a6c7], r8d
		pop r10
		movsxd r8, r8d
		add rbx, r8
		mov eax, 0x529dcf2f
		mov rax, qword ptr [rax + r9 - 0x529dcf2f]
		mov rdx, qword ptr [r9 + 8]
		mov r8d, 0x7927a78a
		add rax, rdx
		mov qword ptr [r9 + r8 - 0x7927a782], rax
		movsx esi, r8b
		lea rcx, [rsi*4 + 0x6a3dcfab]
		mov esi, dword ptr [r8 + r11 - 0x7927a78a]
		ror r8b, 0x65
		lea rbp, [rcx - 0x40cd14ff]
		not r8w
		lea r11, [r11 + r8 - 0x792758a7]
		xor esi, r10d
		sub esi, 0x8bbc50d
		sal ebp, cl
		sal cl, 0x61
		rol esi, 3
		btr ebp, r8d
		movzx edx, cl
		mov eax, 0xd1bb53b3
		neg esi
		bts eax, r8d
		ror eax, 0xab
		push rax
		not esi
		movsx edi, cl
		and qword ptr [rsp + rdx - 0xa6], rcx
		mov qword ptr [rsp + r8 - 0x792758ab], r10
		xor dword ptr [rsp + r8 - 0x792758ab], esi
		pop r10
		movsxd rsi, esi
		lea rcx, [rsi + rsi*8 + 0x509170b5]
		xor ebp, r10d
		pop rsi
		add rsi, -0x124b87
		jmp rsi
1060: UB addr = 7ffb72b9687a with ID: 332 yields:
		and ecx, 0x7830933
		sbb r8b, 0x8f
		and bp, 0x7b5
		cmovo edi, esi
		neg r8b
		adc r8b, 0x2d
		sar si, 2
		shr rdi, 0x8f
		sbb si, 0xe938
		ror r8b, 1
		shr rsi, cl
		xor r10b, r8b
		sub di, 0x38a6
		add r8, rsp
		mov rbp, qword ptr [r8 + rdi - 0xc75a]
		btr edi, 0x94
		xchg ax, si
		mov qword ptr [r9 + rdi*2 - 0x18eb4], rbp
		xchg di, cx
		xor rsi, rdi
		shl ecx, 0xba
		xor rdi, rbx
		jmp rdi
1061: UB addr = 7ffb72b9d84a with ID: 333 yields:
		xor r10w, si
		xor rdx, rdi
		lea rsi, [rsp + rsi + 8]
		mov qword ptr [rsi + rdi*2 - 0x298ca0d8], rax
		call 0x7ffb729840d1
1062: UB addr = 7ffb729840d1 with ID: 334 yields:
		sbb byte ptr [rsp + rdi - 0x14c65064], r8b
		mov ebp, dword ptr [r11 + rdi - 0x14c6506a]
		sub word ptr [rsp + rdi - 0x14c6505f], 0xfb6
		movsx eax, cx
		lea r11, [r11 + rdi*2 - 0x298ca0d2]
		inc al
		ror r8d, cl
		mov qword ptr [rsp + rdi*4 - 0x531941b0], r8
		xor ebp, r10d
		not ebp
		shr r8b, 0x47
		lea ebp, [rbp + rdi + 0x5150c997]
		ror cl, 0xc7
		or byte ptr [rsp + rdi*2 - 0x298ca0c9], dh
		bswap ebp
		xor dl, r8b
		not ebp
		sbb r8d, ecx
		shl dil, 0x65
		adc ecx, 0x1da6610b
		bswap ebp
		xor ebp, 0x95b4bb9e
		push r8
		or rdi, rax
		push r8
		rol ebp, 1
		movzx esi, cl
		not ebp
		mov qword ptr [rsp + rdi - 0x14c67f92], r10
		xor dword ptr [rsp + rdi*2 - 0x298cff3c], ebp
		mov r10, qword ptr [rsp + rdi*2 - 0x298cff3c]
		mov qword ptr [rsp + rdi - 0x14c67f92], rdx
		xor rcx, 0x7f386c81
		movsxd rbp, ebp
		rol sil, 0x46
		sub byte ptr [rsp + rdi*4 - 0x5319fe99], 0x99
		add rbx, rbp
		mov qword ptr [rsp + rdi*2 - 0x298cff54], rbx
		ret 0x18
1063: UB addr = 7ffb72aff675 with ID: 335 yields:
		lea r9, [rsi + r9 - 0x80449b]
		sar si, 0xa6
		mov qword ptr [r9 + rsi*2 - 0x1000224], rbp
		mov qword ptr [rsp + rcx - 0x2597e9ef], rsi
		jns 0x7ffb72c08dff
1064: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1065: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1066: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1067: UB addr = 7ffb72a7683d with ID: 336 yields:
		inc sil
		lea rdi, [rbp + r8*2 - 0x5f63b048]
		shr rbp, 0xb1
		xor sil, 0x1a
		xor bpl, r8b
		sal rbp, 0x22
		sbb sil, 0x91
		push rbp
		xor r10b, sil
		and edi, dword ptr [rsp + 1]
		inc di
		add r8, -0x4566276a
		lea rsi, [rsp + rsi + 8]
		lea rdx, [r8*8 - 0x63c6a27b]
		mov qword ptr [rsi], rax
		mov eax, dword ptr [r11 + 1]
		xor eax, r10d
		neg eax
		or dl, 0xac
		dec eax
		bswap eax
		ror eax, 1
		bts dx, di
		xadd dword ptr [rsp + 3], r8d
		inc eax
		mov qword ptr [rsp + r8*2 - 0x30800], r10
		inc rbp
		push r8
		sub bp, 0xca7
		xor dword ptr [rsp + r8 - 0x183f8], eax
		mov r10, qword ptr [rsp + r8 - 0x183f8]
		movsxd rax, eax
		push rdx
		add rbx, rax
		pop rcx
		mov qword ptr [rsp + r8*4 - 0x60ff8], r8
		mov rdi, qword ptr [r11 + r8*2 - 0x307fb]
		lea r11, [r11 + r8*2 - 0x307f3]
		movzx esi, word ptr [rsp + r8 - 0x183f8]
		xor rdi, r10
		btc rcx, rsi
		lea rdi, [rdi + r8*4 - 0x5a934783]
		setb dl
		btr ecx, r8d
		not rdi
		push rdx
		shr dword ptr [rsp + r8 - 0x183fe], 0xd8
		xor rdi, 0xffffffffb52dfabc
		neg rdi
		sal dx, 0x6c
		and rcx, 0xffffffffef21d6a6
		pop r8
		xor rdi, 0x594c00b
		neg byte ptr [rsp + r8 - 0x6cff]
		lea rdi, [rdi + r8*8 - 0x63d122f8]
		setl byte ptr [rsp + r8 - 0x6cf3]
		rol bp, cl
		btr rbp, rcx
		xor r10, rdi
		mov qword ptr [r9 + r8*2 - 0xda02], rdi
		not qword ptr [rsp + r8 - 0x6cfe]
		mov qword ptr [rsp + r8 - 0x6d01], rbx
		ret 8
1068: UB addr = 7ffb729cd08c with ID: 324 yields:
		lea rdi, [rsi + rsi - 0x267283c4]
		rol rdx, 3
		ror sil, 1
		inc byte ptr [rsp + rsi - 0x3f87610e]
		jno 0x7ffb72c71a8b
1069: UB addr = 7ffb72ab785c with ID: 325 yields:
		movsxd rdi, edi
		add rbx, rdi
		mov qword ptr [rsp + rax + 0x4c69], rbp
		movzx esi, byte ptr [r11 + rdx*2 - 0x1fff2]
		inc al
		lea r11, [rbp + r11 - 0x589c1ff3]
		xor sil, r10b
		add sil, dl
		dec byte ptr [rsp + rax*2 + 0x98cf]
		rol sil, 1
		and dl, 5
		cdqe
		mov edi, dword ptr [rsp + rbp - 0x589c1ffb]
		inc sil
		lea r8, [rbp*2 - 0x3bc483fa]
		and dword ptr [rsp + rax + 0x4c6a], r8d
		not sil
		push r8
		dec word ptr [rsp + rax*2 + 0x98c0]
		shr qword ptr [rsp + rax + 0x4c65], cl
		ror sil, 1
		ror byte ptr [rsp + rax*2 + 0x98d4], 4
		ror r8, cl
		xor sil, 0x94
		xadd r8d, eax
		inc rbp
		rol bp, 0x62
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x18]
		shl bpl, 0xc3
		xadd dword ptr [rsp + rax*4 - 0x756e], edx
		mov rax, qword ptr [rbp + rsi - 0x589c8020]
		dec rcx
		mov qword ptr [r9 + rcx - 0x6121], rax
		sal edx, cl
		lea r9, [rcx + r9 - 0x6121]
		jp 0x7ffb72ac5884
1070: UB addr = 7ffb72ac5884 with ID: 326 yields:
		adc ebp, ecx
		pop rax
		pop rax
		pop rsi
		jns 0x7ffb72acc73a
1071: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1072: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1073: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1074: UB addr = 7ffb72bad289 with ID: 330 yields:
		mov r8, qword ptr [r9]
		mov edi, 0x5a36a639
		mov rax, qword ptr [rdi + r9 - 0x5a36a631]
		add r8, rax
		mov qword ptr [r9 + rdi - 0x5a36a631], r8
		mov r8d, dword ptr [rdi + r11 - 0x5a36a639]
		lea r11, [rdi + r11 - 0x5a36a635]
		push rdi
		lea rax, [rdi + rdi + 0x5313b7a5]
		xor r8d, r10d
		dec word ptr [rsp + rdi - 0x5a36a638]
		jle 0x7ffb72955210
1075: UB addr = 7ffb72a41339 with ID: 401 yields:
		lea r8d, [r8 + rdi - 0x62f26b46]
		rol r8d, 3
		cdqe
		neg dil
		neg r8d
		sar word ptr [rsp + rdi - 0x5a36a6c6], 0xc
		not r8d
		mov qword ptr [rsp + rax - 0x7810417], r10
		xor dword ptr [rsp + rdi - 0x5a36a6c7], r8d
		pop r10
		movsxd r8, r8d
		add rbx, r8
		mov eax, 0x529dcf2f
		mov rax, qword ptr [rax + r9 - 0x529dcf2f]
		mov rdx, qword ptr [r9 + 8]
		mov r8d, 0x7927a78a
		add rax, rdx
		mov qword ptr [r9 + r8 - 0x7927a782], rax
		movsx esi, r8b
		lea rcx, [rsi*4 + 0x6a3dcfab]
		mov esi, dword ptr [r8 + r11 - 0x7927a78a]
		ror r8b, 0x65
		lea rbp, [rcx - 0x40cd14ff]
		not r8w
		lea r11, [r11 + r8 - 0x792758a7]
		xor esi, r10d
		sub esi, 0x8bbc50d
		sal ebp, cl
		sal cl, 0x61
		rol esi, 3
		btr ebp, r8d
		movzx edx, cl
		mov eax, 0xd1bb53b3
		neg esi
		bts eax, r8d
		ror eax, 0xab
		push rax
		not esi
		movsx edi, cl
		and qword ptr [rsp + rdx - 0xa6], rcx
		mov qword ptr [rsp + r8 - 0x792758ab], r10
		xor dword ptr [rsp + r8 - 0x792758ab], esi
		pop r10
		movsxd rsi, esi
		lea rcx, [rsi + rsi*8 + 0x509170b5]
		xor ebp, r10d
		pop rsi
		add rsi, -0x124b87
		jmp rsi
1076: UB addr = 7ffb72b9687a with ID: 332 yields:
		and ecx, 0x7830933
		sbb r8b, 0x8f
		and bp, 0x7b5
		cmovo edi, esi
		neg r8b
		adc r8b, 0x2d
		sar si, 2
		shr rdi, 0x8f
		sbb si, 0xe938
		ror r8b, 1
		shr rsi, cl
		xor r10b, r8b
		sub di, 0x38a6
		add r8, rsp
		mov rbp, qword ptr [r8 + rdi - 0xc75a]
		btr edi, 0x94
		xchg ax, si
		mov qword ptr [r9 + rdi*2 - 0x18eb4], rbp
		xchg di, cx
		xor rsi, rdi
		shl ecx, 0xba
		xor rdi, rbx
		jmp rdi
1077: UB addr = 7ffb72b9d84a with ID: 333 yields:
		xor r10w, si
		xor rdx, rdi
		lea rsi, [rsp + rsi + 8]
		mov qword ptr [rsi + rdi*2 - 0x298ca0d8], rax
		call 0x7ffb729840d1
1078: UB addr = 7ffb729840d1 with ID: 334 yields:
		sbb byte ptr [rsp + rdi - 0x14c65064], r8b
		mov ebp, dword ptr [r11 + rdi - 0x14c6506a]
		sub word ptr [rsp + rdi - 0x14c6505f], 0xfb6
		movsx eax, cx
		lea r11, [r11 + rdi*2 - 0x298ca0d2]
		inc al
		ror r8d, cl
		mov qword ptr [rsp + rdi*4 - 0x531941b0], r8
		xor ebp, r10d
		not ebp
		shr r8b, 0x47
		lea ebp, [rbp + rdi + 0x5150c997]
		ror cl, 0xc7
		or byte ptr [rsp + rdi*2 - 0x298ca0c9], dh
		bswap ebp
		xor dl, r8b
		not ebp
		sbb r8d, ecx
		shl dil, 0x65
		adc ecx, 0x1da6610b
		bswap ebp
		xor ebp, 0x95b4bb9e
		push r8
		or rdi, rax
		push r8
		rol ebp, 1
		movzx esi, cl
		not ebp
		mov qword ptr [rsp + rdi - 0x14c67f92], r10
		xor dword ptr [rsp + rdi*2 - 0x298cff3c], ebp
		mov r10, qword ptr [rsp + rdi*2 - 0x298cff3c]
		mov qword ptr [rsp + rdi - 0x14c67f92], rdx
		xor rcx, 0x7f386c81
		movsxd rbp, ebp
		rol sil, 0x46
		sub byte ptr [rsp + rdi*4 - 0x5319fe99], 0x99
		add rbx, rbp
		mov qword ptr [rsp + rdi*2 - 0x298cff54], rbx
		ret 0x18
1079: UB addr = 7ffb7297abdd with ID: 337 yields:
		mov esi, 0xe23a8007
		mov ecx, esi
		mov edi, ecx
		mov ebp, dword ptr [r11]
		lea rdx, [rcx - 0x276cba61]
		xor ebp, r10d
		mov eax, 0x42891739
		call 0x7ffb72b980c4
1080: UB addr = 7ffb72b980c4 with ID: 338 yields:
		sub ebp, 0xa388371a
		ror ebp, 1
		btr rax, rdi
		neg ebp
		sub ebp, 0x4aa05d04
		mov qword ptr [rsp + rax - 0x42891739], -0x71580247
		dec word ptr [rsp + rax - 0x42891734]
		bswap ebp
		sal word ptr [rsp + rax - 0x42891735], 0x68
		and dword ptr [rsp + rax - 0x42891736], ecx
		mov qword ptr [rsp + rax - 0x42891739], r10
		sal al, cl
		not rax
		adc ecx, edi
		xor dword ptr [rsp + rax + 0x42891781], ebp
		pop r10
		cdq
		add cx, 0x5925
		movsxd rbp, ebp
		add rbx, rbp
		neg eax
		inc ecx
		movzx r8d, byte ptr [rax + r11 - 0x4289177d]
		xor r8b, r10b
		sbb r8b, 0xb4
		sal ax, 0x8a
		xor r8b, dl
		sub r8b, 0x97
		xor r8b, dl
		movzx ebp, cl
		neg r8b
		inc rdx
		add r8b, 0x94
		xor r10b, r8b
		add r8, rsp
		mov rdi, qword ptr [rbp + r8 - 0x34]
		mov qword ptr [r9 + rbp*4 - 0xd8], rdi
		lea rbp, [rcx*4 - 0xeccd278]
		movzx esi, byte ptr [rax + r11 - 0x428903fb]
		call 0x7ffb72bf98c9
1081: UB addr = 7ffb72a9cc67 with ID: 339 yields:
		xor sil, r10b
		inc dil
		setl dl
		sal rdi, cl
		sbb sil, 2
		sar ax, 0x61
		mov qword ptr [rsp + r8 - 0x1d], rcx
		not sil
		xor dl, 0xb5
		inc qword ptr [rsp + rax - 0x4289007d]
		setno byte ptr [rsp + r8 - 0x11]
		neg sil
		btr edi, eax
		lea rcx, [rax*4 - 0x174ebb43]
		dec sil
		or qword ptr [rsp + rax - 0x4289007d], rdx
		shl word ptr [rsp + r8*2 - 0x30], 0x25
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x10]
		mov rdx, qword ptr [rax + rsi - 0x42890080]
		inc dword ptr [rsp + r8 - 0x13]
		xadd r8, rbp
		mov qword ptr [rax + r9 - 0x42890090], rdx
		lea rsi, [rdi*2 - 0x1dfee179]
		lea r9, [rbp + r9 - 0x2d]
		pop rax
		pop r8
		jne 0x7ffb72acc73a
1082: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1083: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1084: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1085: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1086: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1087: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1088: UB addr = 7ffb72a6cac7 with ID: 340 yields:
		movzx edi, byte ptr [r11]
		xor dil, r10b
		mov edx, 0xa990bf83
		call 0x7ffb72e642b5
1089: UB addr = 7ffb72b784d9 with ID: 341 yields:
		mov r8, qword ptr [r9 + 0x10]
		lea rdi, [rbp + 0x33a7b522]
		sbb rcx, rbp
		jne 0x7ffb72e452b1
1090: UB addr = 7ffb72a0054b with ID: 342 yields:
		mov edx, 0xeb278a02
		movsx ebp, dl
		sal bp, 0xc
		mov ebp, dword ptr [rbp + r11 - 0x2000]
		mov esi, edx
		xor ebp, r10d
		mov eax, esi
		neg sil
		mov ecx, 0xa3bc680b
		xor ebp, 0x42131d35
		movzx r8d, dx
		btr dx, r8w
		neg ebp
		or dl, sil
		seta r8b
		bswap eax
		ror ebp, 1
		call 0x7ffb72975471
1091: UB addr = 7ffb72975471 with ID: 343 yields:
		inc ebp
		mov qword ptr [rsp + rax*8 - 0x14513f58], r10
		xor dword ptr [rsp + r8 - 0x8a01], ebp
		cwde
		pop r10
		ror rsi, cl
		inc rsi
		movsxd rbp, ebp
		sar rax, cl
		cqo
		add rbx, rbp
		mov rbp, qword ptr [rdx + r9]
		lea rdi, [rsi + rsi - 0x267283c4]
		rol rdx, 3
		ror sil, 1
		inc byte ptr [rsp + rsi - 0x3f87610e]
		jno 0x7ffb72c71a8b
1092: UB addr = 7ffb72ab785c with ID: 325 yields:
		movsxd rdi, edi
		add rbx, rdi
		mov qword ptr [rsp + rax + 0x4c69], rbp
		movzx esi, byte ptr [r11 + rdx*2 - 0x1fff2]
		inc al
		lea r11, [rbp + r11 - 0x589c1ff3]
		xor sil, r10b
		add sil, dl
		dec byte ptr [rsp + rax*2 + 0x98cf]
		rol sil, 1
		and dl, 5
		cdqe
		mov edi, dword ptr [rsp + rbp - 0x589c1ffb]
		inc sil
		lea r8, [rbp*2 - 0x3bc483fa]
		and dword ptr [rsp + rax + 0x4c6a], r8d
		not sil
		push r8
		dec word ptr [rsp + rax*2 + 0x98c0]
		shr qword ptr [rsp + rax + 0x4c65], cl
		ror sil, 1
		ror byte ptr [rsp + rax*2 + 0x98d4], 4
		ror r8, cl
		xor sil, 0x94
		xadd r8d, eax
		inc rbp
		rol bp, 0x62
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x18]
		shl bpl, 0xc3
		xadd dword ptr [rsp + rax*4 - 0x756e], edx
		mov rax, qword ptr [rbp + rsi - 0x589c8020]
		dec rcx
		mov qword ptr [r9 + rcx - 0x6121], rax
		sal edx, cl
		lea r9, [rcx + r9 - 0x6121]
		jp 0x7ffb72ac5884
1093: UB addr = 7ffb72ac5884 with ID: 326 yields:
		adc ebp, ecx
		pop rax
		pop rax
		pop rsi
		jns 0x7ffb72acc73a
1094: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1095: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1096: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1097: UB addr = 7ffb72bad289 with ID: 330 yields:
		mov r8, qword ptr [r9]
		mov edi, 0x5a36a639
		mov rax, qword ptr [rdi + r9 - 0x5a36a631]
		add r8, rax
		mov qword ptr [r9 + rdi - 0x5a36a631], r8
		mov r8d, dword ptr [rdi + r11 - 0x5a36a639]
		lea r11, [rdi + r11 - 0x5a36a635]
		push rdi
		lea rax, [rdi + rdi + 0x5313b7a5]
		xor r8d, r10d
		dec word ptr [rsp + rdi - 0x5a36a638]
		jle 0x7ffb72955210
1098: UB addr = 7ffb72a41339 with ID: 401 yields:
		lea r8d, [r8 + rdi - 0x62f26b46]
		rol r8d, 3
		cdqe
		neg dil
		neg r8d
		sar word ptr [rsp + rdi - 0x5a36a6c6], 0xc
		not r8d
		mov qword ptr [rsp + rax - 0x7810417], r10
		xor dword ptr [rsp + rdi - 0x5a36a6c7], r8d
		pop r10
		movsxd r8, r8d
		add rbx, r8
		mov eax, 0x529dcf2f
		mov rax, qword ptr [rax + r9 - 0x529dcf2f]
		mov rdx, qword ptr [r9 + 8]
		mov r8d, 0x7927a78a
		add rax, rdx
		mov qword ptr [r9 + r8 - 0x7927a782], rax
		movsx esi, r8b
		lea rcx, [rsi*4 + 0x6a3dcfab]
		mov esi, dword ptr [r8 + r11 - 0x7927a78a]
		ror r8b, 0x65
		lea rbp, [rcx - 0x40cd14ff]
		not r8w
		lea r11, [r11 + r8 - 0x792758a7]
		xor esi, r10d
		sub esi, 0x8bbc50d
		sal ebp, cl
		sal cl, 0x61
		rol esi, 3
		btr ebp, r8d
		movzx edx, cl
		mov eax, 0xd1bb53b3
		neg esi
		bts eax, r8d
		ror eax, 0xab
		push rax
		not esi
		movsx edi, cl
		and qword ptr [rsp + rdx - 0xa6], rcx
		mov qword ptr [rsp + r8 - 0x792758ab], r10
		xor dword ptr [rsp + r8 - 0x792758ab], esi
		pop r10
		movsxd rsi, esi
		lea rcx, [rsi + rsi*8 + 0x509170b5]
		xor ebp, r10d
		pop rsi
		add rsi, -0x124b87
		jmp rsi
1099: UB addr = 7ffb72b9687a with ID: 332 yields:
		and ecx, 0x7830933
		sbb r8b, 0x8f
		and bp, 0x7b5
		cmovo edi, esi
		neg r8b
		adc r8b, 0x2d
		sar si, 2
		shr rdi, 0x8f
		sbb si, 0xe938
		ror r8b, 1
		shr rsi, cl
		xor r10b, r8b
		sub di, 0x38a6
		add r8, rsp
		mov rbp, qword ptr [r8 + rdi - 0xc75a]
		btr edi, 0x94
		xchg ax, si
		mov qword ptr [r9 + rdi*2 - 0x18eb4], rbp
		xchg di, cx
		xor rsi, rdi
		shl ecx, 0xba
		xor rdi, rbx
		jmp rdi
1100: UB addr = 7ffb72b9d84a with ID: 333 yields:
		xor r10w, si
		xor rdx, rdi
		lea rsi, [rsp + rsi + 8]
		mov qword ptr [rsi + rdi*2 - 0x298ca0d8], rax
		call 0x7ffb729840d1
1101: UB addr = 7ffb729840d1 with ID: 334 yields:
		sbb byte ptr [rsp + rdi - 0x14c65064], r8b
		mov ebp, dword ptr [r11 + rdi - 0x14c6506a]
		sub word ptr [rsp + rdi - 0x14c6505f], 0xfb6
		movsx eax, cx
		lea r11, [r11 + rdi*2 - 0x298ca0d2]
		inc al
		ror r8d, cl
		mov qword ptr [rsp + rdi*4 - 0x531941b0], r8
		xor ebp, r10d
		not ebp
		shr r8b, 0x47
		lea ebp, [rbp + rdi + 0x5150c997]
		ror cl, 0xc7
		or byte ptr [rsp + rdi*2 - 0x298ca0c9], dh
		bswap ebp
		xor dl, r8b
		not ebp
		sbb r8d, ecx
		shl dil, 0x65
		adc ecx, 0x1da6610b
		bswap ebp
		xor ebp, 0x95b4bb9e
		push r8
		or rdi, rax
		push r8
		rol ebp, 1
		movzx esi, cl
		not ebp
		mov qword ptr [rsp + rdi - 0x14c67f92], r10
		xor dword ptr [rsp + rdi*2 - 0x298cff3c], ebp
		mov r10, qword ptr [rsp + rdi*2 - 0x298cff3c]
		mov qword ptr [rsp + rdi - 0x14c67f92], rdx
		xor rcx, 0x7f386c81
		movsxd rbp, ebp
		rol sil, 0x46
		sub byte ptr [rsp + rdi*4 - 0x5319fe99], 0x99
		add rbx, rbp
		mov qword ptr [rsp + rdi*2 - 0x298cff54], rbx
		ret 0x18
1102: UB addr = 7ffb729b9e29 with ID: 344 yields:
		mov edx, dword ptr [r11]
		mov esi, 0x9c2c0598
		mov ebp, 0xd0b1cf31
		xor edx, r10d
		call 0x7ffb72e16115
1103: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1104: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1105: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1106: UB addr = 7ffb728f8a29 with ID: 345 yields:
		xor r8, r10
		and ebp, 0xbba4f58f
		dec r8
		xadd word ptr [rsp + rdx + 6], dx
		add cx, di
		xchg word ptr [rsp + rdx + 3], di
		bswap r8
		bts bp, 0x82
		pop rdx
		sal rcx, cl
		lea r8, [r8 + rdx*2 - 0x211e3693]
		jb 0x7ffb72b59755
1107: UB addr = 7ffb728f8a5d with ID: 346 yields:
		ror r8, 3
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1108: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1109: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1110: UB addr = 7ffb72a6cac7 with ID: 340 yields:
		movzx edi, byte ptr [r11]
		xor dil, r10b
		mov edx, 0xa990bf83
		call 0x7ffb72e642b5
1111: UB addr = 7ffb728f1562 with ID: 347 yields:
		mov ecx, 0xe40ad73b
		mov r8d, dword ptr [r11]
		movsx edi, cl
		xor r8d, r10d
		lea r8d, [r8 + rdi - 0x8bbc548]
		lea rdx, [rdi*8 + 0x77050505]
		rol r8d, 3
		xadd rdx, rcx
		sal dx, 0x2e
		neg r8d
		mov eax, edi
		lea rsi, [rdx*2 + 0x289ba4ab]
		not r8d
		push r10
		sal rsi, 0x68
		xor dword ptr [rsp + rcx - 0x770506dd], r8d
		pop r10
		call 0x7ffb72c1e6e7
1112: UB addr = 7ffb72b9687a with ID: 332 yields:
		and ecx, 0x7830933
		sbb r8b, 0x8f
		and bp, 0x7b5
		cmovo edi, esi
		neg r8b
		adc r8b, 0x2d
		sar si, 2
		shr rdi, 0x8f
		sbb si, 0xe938
		ror r8b, 1
		shr rsi, cl
		xor r10b, r8b
		sub di, 0x38a6
		add r8, rsp
		mov rbp, qword ptr [r8 + rdi - 0xc75a]
		btr edi, 0x94
		xchg ax, si
		mov qword ptr [r9 + rdi*2 - 0x18eb4], rbp
		xchg di, cx
		xor rsi, rdi
		shl ecx, 0xba
		xor rdi, rbx
		jmp rdi
1113: UB addr = 7ffb72b9d84a with ID: 333 yields:
		xor r10w, si
		xor rdx, rdi
		lea rsi, [rsp + rsi + 8]
		mov qword ptr [rsi + rdi*2 - 0x298ca0d8], rax
		call 0x7ffb729840d1
1114: UB addr = 7ffb729840d1 with ID: 334 yields:
		sbb byte ptr [rsp + rdi - 0x14c65064], r8b
		mov ebp, dword ptr [r11 + rdi - 0x14c6506a]
		sub word ptr [rsp + rdi - 0x14c6505f], 0xfb6
		movsx eax, cx
		lea r11, [r11 + rdi*2 - 0x298ca0d2]
		inc al
		ror r8d, cl
		mov qword ptr [rsp + rdi*4 - 0x531941b0], r8
		xor ebp, r10d
		not ebp
		shr r8b, 0x47
		lea ebp, [rbp + rdi + 0x5150c997]
		ror cl, 0xc7
		or byte ptr [rsp + rdi*2 - 0x298ca0c9], dh
		bswap ebp
		xor dl, r8b
		not ebp
		sbb r8d, ecx
		shl dil, 0x65
		adc ecx, 0x1da6610b
		bswap ebp
		xor ebp, 0x95b4bb9e
		push r8
		or rdi, rax
		push r8
		rol ebp, 1
		movzx esi, cl
		not ebp
		mov qword ptr [rsp + rdi - 0x14c67f92], r10
		xor dword ptr [rsp + rdi*2 - 0x298cff3c], ebp
		mov r10, qword ptr [rsp + rdi*2 - 0x298cff3c]
		mov qword ptr [rsp + rdi - 0x14c67f92], rdx
		xor rcx, 0x7f386c81
		movsxd rbp, ebp
		rol sil, 0x46
		sub byte ptr [rsp + rdi*4 - 0x5319fe99], 0x99
		add rbx, rbp
		mov qword ptr [rsp + rdi*2 - 0x298cff54], rbx
		ret 0x18
1115: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1116: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1117: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1118: UB addr = 7ffb72a6cac7 with ID: 340 yields:
		movzx edi, byte ptr [r11]
		xor dil, r10b
		mov edx, 0xa990bf83
		call 0x7ffb72e642b5
1119: UB addr = 7ffb72b7bf70 with ID: 348 yields:
		mov ecx, 0xe1b9143d
		movzx edi, cx
		lea rdx, [rdi + rcx - 0x3ac2e376]
		mov eax, dword ptr [rdi + r11 - 0x143d]
		lea r11, [rdi + r11 - 0x1439]
		mov r8d, 0x8a2a3c16
		ror r8, cl
		ror rdx, cl
		xor eax, r10d
		lea eax, [rax + rdi*2 - 0x8bbed87]
		rol eax, 3
		not ecx
		bts edx, edi
		jb 0x7ffb72b9f3a3
1120: UB addr = 7ffb72b9f3a3 with ID: 349 yields:
		neg eax
		sar edx, 0x36
		movzx esi, r8b
		not eax
		jb 0x7ffb72dfed18
1121: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1122: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1123: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1124: UB addr = 7ffb72a6cac7 with ID: 340 yields:
		movzx edi, byte ptr [r11]
		xor dil, r10b
		mov edx, 0xa990bf83
		call 0x7ffb72e642b5
1125: UB addr = 7ffb72b784d9 with ID: 341 yields:
		mov r8, qword ptr [r9 + 0x10]
		lea rdi, [rbp + 0x33a7b522]
		sbb rcx, rbp
		jne 0x7ffb72e452b1
1126: UB addr = 7ffb729af031 with ID: 350 yields:
		push -0x849a358
		mov r8, r9
		inc dword ptr [rsp + 4]
		mov qword ptr [r9 - 8], r8
		mov rsi, qword ptr [r11]
		shl dword ptr [rsp + 4], 0x6d
		xor rsi, r10
		mov edi, 0x56200cae
		pop r8
		dec rsi
		shr edi, 0xb7
		not r8w
		ja 0x7ffb72b9ec73
1127: UB addr = 7ffb72b9ec73 with ID: 351 yields:
		not rsi
		call 0x7ffb72bd7e0b
1128: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1129: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1130: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1131: UB addr = 7ffb72a6cac7 with ID: 340 yields:
		movzx edi, byte ptr [r11]
		xor dil, r10b
		mov edx, 0xa990bf83
		call 0x7ffb72e642b5
1132: UB addr = 7ffb72b784d9 with ID: 341 yields:
		mov r8, qword ptr [r9 + 0x10]
		lea rdi, [rbp + 0x33a7b522]
		sbb rcx, rbp
		jne 0x7ffb72e452b1
1133: UB addr = 7ffb7298c261 with ID: 352 yields:
		sar word ptr [rsp + rax - 0xb1], 0x4f
		sub dl, dil
		rol ecx, 1
		sal dword ptr [rsp + rax - 0xb6], 0x2d
		and byte ptr [rsp + rdx*2 - 0x71599e52], 0x80
		not ecx
		mov qword ptr [rsp + rdx - 0x38accf25], r10
		xor dword ptr [rsp + rdx - 0x38accf25], ecx
		lea rbp, [rsi + rdx*2 + 0x238cd51f]
		mov r10, qword ptr [rsp + rax - 0xb6]
		lea r8, [rdx + rax*2 - 0x3e535742]
		movsxd rcx, ecx
		rol dl, 0xe4
		mov qword ptr [rsp + rdx - 0x38accfd2], -0x3a45c268
		adc rbx, rcx
		mov rdi, r9
		shr sil, 0x43
		jae 0x7ffb72bd2332
1134: UB addr = 7ffb7298c2ca with ID: 353 yields:
		mov rcx, rdi
		sub r8b, al
		pop rbp
		mov rdi, qword ptr ss:[rcx + rdx*2 - 0x71599fa4]
		mov qword ptr [rax + r9 - 0xc6], rdi
		push rbp
		lea r9, [rdx + r9 - 0x38accfda]
		mov qword ptr [rsp + rdx*2 - 0x71599f9c], 0x19a37212
		and bpl, 0x2b
		pop rcx
		pop rdx
		ja 0x7ffb72acc73a
1135: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1136: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1137: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1138: UB addr = 7ffb7291264b with ID: 354 yields:
		mov edx, 0xac38f594
		lea rdi, [rdx + 0x2c3b29b4]
		movzx ebp, dil
		mov rbp, qword ptr [rbp + r9 - 0x48]
		call 0x7ffb728b8833
1139: UB addr = 7ffb728b8833 with ID: 355 yields:
		mov qword ptr [rsp], rdi
		rol word ptr [rsp + 3], 0x88
		mov rdx, qword ptr [r9 + 8]
		jb 0x7ffb72bce792
1140: UB addr = 7ffb728b8849 with ID: 356 yields:
		setae dil
		and rbp, rdx
		sub qword ptr [rsp], 0x12b4b7bc
		not rbp
		sub dword ptr [rsp + 3], 0x2eb78e1d
		lea rsi, [rdi + rdi + 0x4d913039]
		jp 0x7ffb72c607b6
1141: UB addr = 7ffb728b8875 with ID: 357 yields:
		mov qword ptr [r9 + 8], rbp
		mov eax, dword ptr [r11 + rax*2 - 0x7c04]
		push rdi
		add si, 0xf281
		sbb r11, -5
		mov edx, esi
		dec byte ptr [rsp + 1]
		setg byte ptr [rsp + 4]
		inc byte ptr [rsp + 0xc]
		movzx r8d, byte ptr [rsp + 0xc]
		xor byte ptr [rsp + r8*2 - 0x91], 0x29
		movzx ecx, di
		lea eax, [r8 + rax + 0x1a30afcf]
		rol eax, cl
		sar rdi, 0x9a
		mov qword ptr [rsp + rdi - 0x2e], r10
		pop r8
		xor dword ptr [rsp + rdi*8 - 0x1b0], eax
		shr r8w, 0x62
		pop r10
		inc sil
		movsxd rax, eax
		add rbx, rax
		xchg rbp, rcx
		mov eax, edx
		neg ecx
		mov r9, qword ptr [r9 + rdi*8 - 0x1a8]
		jne 0x7ffb72acc73a
1142: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1143: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1144: UB addr = 7ffb72b0cf99 with ID: 358 yields:
		mov edi, 0x26a3f7b3
		mov rax, rsp
		lea rsi, [rdi + rdi + 0x2194f7b5]
		lea ecx, [rsi - 0x6edce5a3]
		sub edi, 0x3f31a631
		lea rdx, [r9 + rsi - 0x6edce79b]
		dec si
		and rdx, 0xfffffffffffffff0
		sub rdx, rcx
		bswap rsi
		mov rsp, rdx
		push 0x6632cf04
		push qword ptr [rsp + 8]
		popfq
		lea rsp, [rsp + 0x10]
		jmp rbx
1145: UB addr = 7ffb729e779c with ID: 359 yields:
		xor edx, r10d
		bswap r8d
		movzx eax, bp
		xor edx, 0xbca3de00
		sar r8b, 0xe6
		mov edi, esi
		and rsi, r8
		inc edx
		shl eax, 0x5a
		rol edx, 1
		rol eax, 0x4c
		sal r8d, 0x61
		not edx
		xor rdi, rcx
		push rbp
		mov qword ptr [rsp + rsi - 4], r10
		xor dword ptr [rsp + rsi - 4], edx
		sub dil, cl
		pop r10
		shr eax, 0xcf
		movsxd rdx, edx
		rol rdi, 0xde
		adc rbx, rdx
		or rax, r9
		movzx edx, di
		mov rsi, rax
		lea rbp, [rsp + rcx*2 - 0x2abfc0]
		mov qword ptr [rbp + rcx*2 - 0x2ac100], rsi
		add rdx, rbx
		jmp rdx
1146: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1147: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1148: UB addr = 7ffb72b0cf99 with ID: 358 yields:
		mov edi, 0x26a3f7b3
		mov rax, rsp
		lea rsi, [rdi + rdi + 0x2194f7b5]
		lea ecx, [rsi - 0x6edce5a3]
		sub edi, 0x3f31a631
		lea rdx, [r9 + rsi - 0x6edce79b]
		dec si
		and rdx, 0xfffffffffffffff0
		sub rdx, rcx
		bswap rsi
		mov rsp, rdx
		push 0x6632cf04
		push qword ptr [rsp + 8]
		popfq
		lea rsp, [rsp + 0x10]
		jmp rbx
1149: UB addr = 7ffb72a6cac7 with ID: 340 yields:
		movzx edi, byte ptr [r11]
		xor dil, r10b
		mov edx, 0xa990bf83
		call 0x7ffb72e642b5
1150: UB addr = 7ffb728f1562 with ID: 347 yields:
		mov ecx, 0xe40ad73b
		mov r8d, dword ptr [r11]
		movsx edi, cl
		xor r8d, r10d
		lea r8d, [r8 + rdi - 0x8bbc548]
		lea rdx, [rdi*8 + 0x77050505]
		rol r8d, 3
		xadd rdx, rcx
		sal dx, 0x2e
		neg r8d
		mov eax, edi
		lea rsi, [rdx*2 + 0x289ba4ab]
		not r8d
		push r10
		sal rsi, 0x68
		xor dword ptr [rsp + rcx - 0x770506dd], r8d
		pop r10
		call 0x7ffb72c1e6e7
1151: UB addr = 7ffb72b9687a with ID: 332 yields:
		and ecx, 0x7830933
		sbb r8b, 0x8f
		and bp, 0x7b5
		cmovo edi, esi
		neg r8b
		adc r8b, 0x2d
		sar si, 2
		shr rdi, 0x8f
		sbb si, 0xe938
		ror r8b, 1
		shr rsi, cl
		xor r10b, r8b
		sub di, 0x38a6
		add r8, rsp
		mov rbp, qword ptr [r8 + rdi - 0xc75a]
		btr edi, 0x94
		xchg ax, si
		mov qword ptr [r9 + rdi*2 - 0x18eb4], rbp
		xchg di, cx
		xor rsi, rdi
		shl ecx, 0xba
		xor rdi, rbx
		jmp rdi
1152: UB addr = 7ffb72b9d84a with ID: 333 yields:
		xor r10w, si
		xor rdx, rdi
		lea rsi, [rsp + rsi + 8]
		mov qword ptr [rsi + rdi*2 - 0x298ca0d8], rax
		call 0x7ffb729840d1
1153: UB addr = 7ffb729840d1 with ID: 334 yields:
		sbb byte ptr [rsp + rdi - 0x14c65064], r8b
		mov ebp, dword ptr [r11 + rdi - 0x14c6506a]
		sub word ptr [rsp + rdi - 0x14c6505f], 0xfb6
		movsx eax, cx
		lea r11, [r11 + rdi*2 - 0x298ca0d2]
		inc al
		ror r8d, cl
		mov qword ptr [rsp + rdi*4 - 0x531941b0], r8
		xor ebp, r10d
		not ebp
		shr r8b, 0x47
		lea ebp, [rbp + rdi + 0x5150c997]
		ror cl, 0xc7
		or byte ptr [rsp + rdi*2 - 0x298ca0c9], dh
		bswap ebp
		xor dl, r8b
		not ebp
		sbb r8d, ecx
		shl dil, 0x65
		adc ecx, 0x1da6610b
		bswap ebp
		xor ebp, 0x95b4bb9e
		push r8
		or rdi, rax
		push r8
		rol ebp, 1
		movzx esi, cl
		not ebp
		mov qword ptr [rsp + rdi - 0x14c67f92], r10
		xor dword ptr [rsp + rdi*2 - 0x298cff3c], ebp
		mov r10, qword ptr [rsp + rdi*2 - 0x298cff3c]
		mov qword ptr [rsp + rdi - 0x14c67f92], rdx
		xor rcx, 0x7f386c81
		movsxd rbp, ebp
		rol sil, 0x46
		sub byte ptr [rsp + rdi*4 - 0x5319fe99], 0x99
		add rbx, rbp
		mov qword ptr [rsp + rdi*2 - 0x298cff54], rbx
		ret 0x18
1154: UB addr = 7ffb72a4f318 with ID: 360 yields:
		mov ebp, 0x8a21c3ad
		lea rbp, [rbp*2 - 0x24ff625f]
		movzx eax, byte ptr [r11]
		movsx esi, bp
		ror sil, 0xa4
		lea rdi, [rbp + 0x133f12b3]
		lea r11, [r11 + rsi*4 - 0x92fb]
		jae 0x7ffb729119e3
1155: UB addr = 7ffb72a4f346 with ID: 361 yields:
		movsx r8d, si
		add bpl, r8b
		xor al, r10b
		xor al, 0x22
		mov ecx, edi
		sub al, 0x38
		push rsi
		pop rsi
		not sil
		xor al, 0x15
		xor ebp, r8d
		jae 0x7ffb72c2c22e
1156: UB addr = 7ffb72b632e3 with ID: 362 yields:
		xor ecx, r10d
		xadd bp, r8w
		btr di, si
		lea ecx, [rcx + rax - 0x2b104328]
		cdq
		jb 0x7ffb72aefb2c
1157: UB addr = 7ffb72aefb2c with ID: 363 yields:
		bswap ecx
		neg ecx
		neg rax
		neg rdx
		sub bp, 0xa12b
		adc ecx, edx
		add ax, r8w
		bts di, dx
		cmovb edx, r8d
		push r10
		call 0x7ffb72d38732
1158: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1159: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1160: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1161: UB addr = 7ffb7299158b with ID: 364 yields:
		and r8d, eax
		xor r8, rdx
		rol eax, 0xb2
		btr eax, edi
		call 0x7ffb7299b2fd
1162: UB addr = 7ffb7299b2fd with ID: 365 yields:
		movzx eax, byte ptr [r11 + rcx*2 - 0x400005]
		mov qword ptr [rsp + rdi + 0x1fc8ea6b], rcx
		mov edx, ecx
		cmovb edx, edi
		xor al, r10b
		xor rdx, rdi
		call 0x7ffb72ac31ec
1163: UB addr = 7ffb72ac31ec with ID: 366 yields:
		rol al, 1
		inc al
		mov qword ptr [rsp + rcx*2 - 0x3ffffe], -0x6ac4d86e
		movzx esi, byte ptr [rsp + rdi + 0x1fc8ea77]
		xadd esi, edx
		xor al, 0x1a
		bts rdx, rcx
		sbb al, 0x91
		shl di, 0xc5
		rol di, cl
		xor r10b, al
		push rdx
		lea rax, [rsp + rax + 0x20]
		bts edi, 0x8b
		mov qword ptr [rsp + rcx*4 - 0x800004], 0x11a5b60f
		adc sil, byte ptr [rsp + rcx*2 - 0x3fffed]
		mov qword ptr [rax + rcx*2 - 0x400006], r8
		mov eax, dword ptr [rcx + r11 - 0x200001]
		lea r11, [r11 + rcx - 0x1ffffd]
		shr rcx, 0xed
		and rsi, 0xb2af484
		xor eax, r10d
		movzx r8d, byte ptr [rsp + rcx + 0x18]
		neg eax
		dec eax
		neg eax
		btc rdi, rsi
		ror di, 0xe1
		rol word ptr [rsp + rcx + 0x1e], 0xe4
		bswap eax
		or edx, 0x3d06921e
		or di, 0x4e8f
		lea eax, [rax + rcx*8 + 0x57301ebc]
		call 0x7ffb72d07de2
1164: UB addr = 7ffb72ab376c with ID: 367 yields:
		mov esi, eax
		xor dl, r10b
		mov ebp, eax
		inc ebp
		not dl
		add dl, 0x2e
		rol dl, 1
		call 0x7ffb72d80223
1165: UB addr = 7ffb72a3020e with ID: 368 yields:
		mov ecx, 0x27a7a481
		movsx esi, cx
		shr esi, 0xd9
		movsx edi, cx
		lea r8, [rcx - 0x6bd804c8]
		xor esi, 0x8b86f29
		adc cl, r8b
		inc edi
		lea edx, [rcx + rdx + 0x2a8c504c]
		or edi, esi
		ja 0x7ffb72c4d2fe
1166: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1167: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1168: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1169: UB addr = 7ffb72bad1df with ID: 369 yields:
		and rdx, 0xffffffffcd36bfb6
		mov esi, dword ptr [rdx + r9 - 0x10a2]
		not r8d
		shl ecx, cl
		push rcx
		not esi
		cwd
		setbe dl
		or r8d, esi
		mov eax, r8d
		mov edx, dword ptr [rdx + r9 - 0xfef9]
		neg edi
		lea rsi, [rdi*4 + 0x193e6280]
		not eax
		pop r8
		sal rdi, 0xf3
		mov qword ptr [rsp + rbp - 0x10ee], rbp
		not edx
		or eax, edx
		neg bpl
		mov dword ptr [r9 + rbp - 0x100a], eax
		setnp r8b
		lea r9, [rbp + r9 - 0x100a]
		bts rbp, 0x28
		movsx edx, word ptr [rsp + rsi - 0x193e63b9]
		shl dword ptr [rsp + rsi - 0x193e63bb], 0x30
		mov qword ptr [rsp + rsi*4 - 0x64f98ef0], rbx
		ret
1170: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1171: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1172: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1173: UB addr = 7ffb72ab89d2 with ID: 370 yields:
		adc byte ptr [rsp + rsi - 0x38], al
		and dl, cl
		mov word ptr [r9 + rsi*8 - 0x1e6], dx
		cbw
		not rbp
		mov edi, dword ptr [r11 + rsi*2 - 0x7a]
		xor edi, r10d
		lea rcx, [rsi + rsi*2 - 0x5664d6ee]
		lea edi, [rdi + rcx - 0x3bcf2b56]
		push rbp
		mov qword ptr [rsp + rsi*2 - 0x72], r8
		rol edi, 3
		inc edi
		movzx edx, byte ptr [rsp + rsi - 0x37]
		xchg byte ptr [rsp + rsi*2 - 0x77], ah
		rol edi, 1
		xadd byte ptr [rsp + rsi*4 - 0xf0], ah
		not dx
		mov qword ptr [rsp + rsi - 0x35], r10
		xor dword ptr [rsp + rsi*2 - 0x72], edi
		mov r10, qword ptr [rsp + rsi*2 - 0x72]
		pop r8
		mov qword ptr [rsp + rsi*2 - 0x7a], rsi
		push rcx
		movsxd rdi, edi
		ror qword ptr [rsp + rsi - 0x38], cl
		add rbx, rdi
		sal qword ptr [rsp + rsi - 0x35], cl
		dec qword ptr [rsp + rsi - 0x39]
		mov r8w, word ptr [rsi + r9 - 0x3b]
		lea r9, [r9 + rbp + 0x42]
		sal dx, 0x42
		movsx edi, bpl
		movzx eax, byte ptr [r11 + rsi*2 - 0x76]
		push rsi
		push rdi
		shr rdi, 0x58
		lea r11, [rsi + r11 - 0x38]
		shl dil, 0xe1
		adc rbp, rsi
		xor al, r10b
		dec al
		btr di, 0x99
		rol al, 1
		sub al, 0x30
		neg al
		sub dword ptr [rsp + rbp], ebp
		jle 0x7ffb728b12c1
1174: UB addr = 7ffb728b12c1 with ID: 371 yields:
		push rsi
		xor r10b, al
		lea rax, [rsp + rax + 0x28]
		mov byte ptr [rax + rsi*2 - 0x7a], r8b
		add rbp, qword ptr [rsp + rsi - 0x1d]
		shl edx, 0xeb
		mov qword ptr [rsp + rsi - 0x3d], rbx
		ret 0x20
1175: UB addr = 7ffb72b74a49 with ID: 372 yields:
		xor r10b, al
		mov qword ptr [rsp + r8 - 1], rsi
		xor rdi, qword ptr [rsp + r8*8 - 8]
		ror word ptr [rsp + r8], 0x6b
		lea rax, [rsp + rax + 8]
		and rbp, rbp
		jnp 0x7ffb72c4718d
1176: UB addr = 7ffb72b74a6a with ID: 373 yields:
		mov dword ptr [rax + r8 - 1], edx
		ja 0x7ffb729a33c6
1177: UB addr = 7ffb729a33c6 with ID: 374 yields:
		xchg qword ptr [rsp + r8 - 1], rbp
		ja 0x7ffb72b84fca
1178: UB addr = 7ffb72b84fca with ID: 375 yields:
		mov eax, dword ptr [r11 + r8*8 - 7]
		rol r8w, 0x88
		lea rdx, [rsi*2 - 0xc5a6174]
		or bpl, sil
		xor eax, r10d
		dec dword ptr [rsp + r8 - 0xfc]
		lea eax, [rax + rdi*2 - 0x20dd378]
		btc r8, rdx
		push rbp
		bswap eax
		neg eax
		xor sil, sil
		bswap eax
		inc eax
		mov qword ptr [rsp + r8*2 - 0x20001f8], r10
		xor dword ptr [rsp + r8 - 0x10000f8], eax
		dec bp
		mov r10, qword ptr [rsp + r8*8 - 0x80007f8]
		jge 0x7ffb729b29d0
1179: UB addr = 7ffb72b8502c with ID: 376 yields:
		mov qword ptr [rsp + r8*8 - 0x80007f8], rsi
		mov dword ptr [r9 + r8 - 0x1000100], eax
		ror qword ptr [rsp + r8*2 - 0x20001f8], 0x4b
		shl si, 0x87
		mov rax, qword ptr [r11 + r8 - 0x10000fb]
		xor rax, r10
		xadd cx, bp
		call 0x7ffb72c1a846
1180: UB addr = 7ffb728caadc with ID: 377 yields:
		ror esi, 1
		mov qword ptr [rsp + r8*8 - 0x2000000], 0x13001993
		pop rbp
		inc esi
		shl qword ptr [rsp + r8*4 - 0x1000000], 0xa4
		rol r8b, cl
		mov qword ptr [rsp + r8*4 - 0x1000000], r10
		movsx r10d, dil
		mov eax, 0x13843815
		not edi
		xor dword ptr [rsp + r8*4 - 0x1000000], esi
		or rbp, rcx
		jge 0x7ffb72bb9bb0
1181: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1182: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1183: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1184: UB addr = 7ffb728fd14e with ID: 378 yields:
		neg esi
		sar word ptr [rsp + rbp - 0x14f3], 0x44
		lea esi, [rsi + rbp*4 - 0x4aa0b124]
		lea r8, [rcx - 0xd499871]
		bswap esi
		neg cl
		mov qword ptr [rsp + r8*2 + 0x1a921612], r10
		xor dword ptr [rsp + r8 + 0xd490b11], esi
		shl dword ptr [rsp + r8*4 + 0x35242c10], cl
		mov r10, qword ptr [rsp + r8*4 + 0x35242c14]
		pop rbp
		adc rbp, 0x18e6d
		jmp rbp
1185: UB addr = 7ffb72a8fb5d with ID: 379 yields:
		call 0x7ffb72d1b0cd
1186: UB addr = 7ffb72ba2c63 with ID: 380 yields:
		xor eax, r10d
		mov r8d, 0x5183adb8
		movsx ebp, r8w
		lea eax, [rax + r8 - 0x39757184]
		mov qword ptr [rsp + r8 - 0x5183adb8], 0x480f5ba9
		rol word ptr [rsp + r8 - 0x5183adb7], 0x4e
		pop rcx
		neg eax
		lea rsi, [rbp + rcx*8 - 0x436f074c]
		dec eax
		sub rbp, 0x18af0730
		mov qword ptr [rsp + r8 - 0x5183adb8], rsi
		lea rdx, [rsi + rbp*4 - 0x74d6f6da]
		not eax
		btc rbp, rdx
		call 0x7ffb72c4e259
1187: UB addr = 7ffb72a87dfc with ID: 381 yields:
		mov r8d, dword ptr [r11]
		mov edi, 0xf2093502
		mov esi, edi
		lea rcx, [rdi + rsi*8 + 0x6091f12c]
		xor r8d, r10d
		bswap r8d
		xchg al, dil
		lea r8d, [r8 + rax - 0x335012d5]
		add ecx, eax
		ror r8d, 1
		mov ebp, 0x1b836710
		or rdi, rsi
		call 0x7ffb72d889e2
1188: UB addr = 7ffb72baadd0 with ID: 382 yields:
		mov r10, qword ptr [rsp + rcx - 0xd4edfc]
		movsxd r8, r8d
		cdqe
		pop rdx
		add rbx, r8
		cdq
		mov edi, dword ptr [r9 + rcx - 0xd4ee04]
		movzx r8d, byte ptr [r11 + rax*2 + 0x1bed9600]
		neg cx
		dec sil
		xor r8b, r10b
		ror r8b, 1
		xor r8b, dl
		mov qword ptr [rsp + rcx*2 - 0x1a823f8], rax
		add r8b, sil
		ror r8b, 1
		inc dx
		cwde
		xor r8b, 0xac
		rol rcx, 0x10
		rol r8b, 1
		call 0x7ffb72e82dab
1189: UB addr = 7ffb728d3864 with ID: 383 yields:
		lea rcx, [rax + rdx + 0x3f8a6c3f]
		mov qword ptr [rsp + rax*2], rcx
		pop rax
		pop rsi
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1190: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1191: UB addr = 7ffb72b0cf99 with ID: 358 yields:
		mov edi, 0x26a3f7b3
		mov rax, rsp
		lea rsi, [rdi + rdi + 0x2194f7b5]
		lea ecx, [rsi - 0x6edce5a3]
		sub edi, 0x3f31a631
		lea rdx, [r9 + rsi - 0x6edce79b]
		dec si
		and rdx, 0xfffffffffffffff0
		sub rdx, rcx
		bswap rsi
		mov rsp, rdx
		push 0x6632cf04
		push qword ptr [rsp + 8]
		popfq
		lea rsp, [rsp + 0x10]
		jmp rbx
1192: UB addr = 7ffb72a6cac7 with ID: 340 yields:
		movzx edi, byte ptr [r11]
		xor dil, r10b
		mov edx, 0xa990bf83
		call 0x7ffb72e642b5
1193: UB addr = 7ffb72b98261 with ID: 384 yields:
		mov rsi, qword ptr [r9]
		mov ecx, 0x4b05383f
		movzx eax, cl
		mov rcx, qword ptr [r9 + rax - 0x37]
		mov r8d, 0x6b61b93
		call 0x7ffb72bf81de
1194: UB addr = 7ffb72b9b164 with ID: 385 yields:
		sub sil, r8b
		xor dword ptr [rsp + rax - 0x3f], edx
		inc al
		movsx ebp, ax
		pop r10
		movsxd rdx, edx
		lea rcx, [rbp + rdi + 0x3b45f88]
		add rbx, rdx
		mov rdi, qword ptr [rax + r11 - 0x3c]
		lea r11, [r11 + rax - 0x34]
		xor rdi, r10
		cdqe
		shl al, 6
		inc rbp
		xor rdi, 0x1195460c
		lea rdi, [rdi + rax*4 - 0x547c2dd7]
		call 0x7ffb72da24c0
1195: UB addr = 7ffb729cd08c with ID: 324 yields:
		lea rdi, [rsi + rsi - 0x267283c4]
		rol rdx, 3
		ror sil, 1
		inc byte ptr [rsp + rsi - 0x3f87610e]
		jno 0x7ffb72c71a8b
1196: UB addr = 7ffb72ab785c with ID: 325 yields:
		movsxd rdi, edi
		add rbx, rdi
		mov qword ptr [rsp + rax + 0x4c69], rbp
		movzx esi, byte ptr [r11 + rdx*2 - 0x1fff2]
		inc al
		lea r11, [rbp + r11 - 0x589c1ff3]
		xor sil, r10b
		add sil, dl
		dec byte ptr [rsp + rax*2 + 0x98cf]
		rol sil, 1
		and dl, 5
		cdqe
		mov edi, dword ptr [rsp + rbp - 0x589c1ffb]
		inc sil
		lea r8, [rbp*2 - 0x3bc483fa]
		and dword ptr [rsp + rax + 0x4c6a], r8d
		not sil
		push r8
		dec word ptr [rsp + rax*2 + 0x98c0]
		shr qword ptr [rsp + rax + 0x4c65], cl
		ror sil, 1
		ror byte ptr [rsp + rax*2 + 0x98d4], 4
		ror r8, cl
		xor sil, 0x94
		xadd r8d, eax
		inc rbp
		rol bp, 0x62
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x18]
		shl bpl, 0xc3
		xadd dword ptr [rsp + rax*4 - 0x756e], edx
		mov rax, qword ptr [rbp + rsi - 0x589c8020]
		dec rcx
		mov qword ptr [r9 + rcx - 0x6121], rax
		sal edx, cl
		lea r9, [rcx + r9 - 0x6121]
		jp 0x7ffb72ac5884
1197: UB addr = 7ffb72ac5884 with ID: 326 yields:
		adc ebp, ecx
		pop rax
		pop rax
		pop rsi
		jns 0x7ffb72acc73a
1198: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1199: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1200: UB addr = 7ffb72b0cf99 with ID: 358 yields:
		mov edi, 0x26a3f7b3
		mov rax, rsp
		lea rsi, [rdi + rdi + 0x2194f7b5]
		lea ecx, [rsi - 0x6edce5a3]
		sub edi, 0x3f31a631
		lea rdx, [r9 + rsi - 0x6edce79b]
		dec si
		and rdx, 0xfffffffffffffff0
		sub rdx, rcx
		bswap rsi
		mov rsp, rdx
		push 0x6632cf04
		push qword ptr [rsp + 8]
		popfq
		lea rsp, [rsp + 0x10]
		jmp rbx
1201: UB addr = 7ffb72bad289 with ID: 330 yields:
		mov r8, qword ptr [r9]
		mov edi, 0x5a36a639
		mov rax, qword ptr [rdi + r9 - 0x5a36a631]
		add r8, rax
		mov qword ptr [r9 + rdi - 0x5a36a631], r8
		mov r8d, dword ptr [rdi + r11 - 0x5a36a639]
		lea r11, [rdi + r11 - 0x5a36a635]
		push rdi
		lea rax, [rdi + rdi + 0x5313b7a5]
		xor r8d, r10d
		dec word ptr [rsp + rdi - 0x5a36a638]
		jle 0x7ffb72955210
1202: UB addr = 7ffb72a41339 with ID: 401 yields:
		lea r8d, [r8 + rdi - 0x62f26b46]
		rol r8d, 3
		cdqe
		neg dil
		neg r8d
		sar word ptr [rsp + rdi - 0x5a36a6c6], 0xc
		not r8d
		mov qword ptr [rsp + rax - 0x7810417], r10
		xor dword ptr [rsp + rdi - 0x5a36a6c7], r8d
		pop r10
		movsxd r8, r8d
		add rbx, r8
		mov eax, 0x529dcf2f
		mov rax, qword ptr [rax + r9 - 0x529dcf2f]
		mov rdx, qword ptr [r9 + 8]
		mov r8d, 0x7927a78a
		add rax, rdx
		mov qword ptr [r9 + r8 - 0x7927a782], rax
		movsx esi, r8b
		lea rcx, [rsi*4 + 0x6a3dcfab]
		mov esi, dword ptr [r8 + r11 - 0x7927a78a]
		ror r8b, 0x65
		lea rbp, [rcx - 0x40cd14ff]
		not r8w
		lea r11, [r11 + r8 - 0x792758a7]
		xor esi, r10d
		sub esi, 0x8bbc50d
		sal ebp, cl
		sal cl, 0x61
		rol esi, 3
		btr ebp, r8d
		movzx edx, cl
		mov eax, 0xd1bb53b3
		neg esi
		bts eax, r8d
		ror eax, 0xab
		push rax
		not esi
		movsx edi, cl
		and qword ptr [rsp + rdx - 0xa6], rcx
		mov qword ptr [rsp + r8 - 0x792758ab], r10
		xor dword ptr [rsp + r8 - 0x792758ab], esi
		pop r10
		movsxd rsi, esi
		lea rcx, [rsi + rsi*8 + 0x509170b5]
		xor ebp, r10d
		pop rsi
		add rsi, -0x124b87
		jmp rsi
1203: UB addr = 7ffb72b9f3a3 with ID: 349 yields:
		neg eax
		sar edx, 0x36
		movzx esi, r8b
		not eax
		jb 0x7ffb72dfed18
1204: UB addr = 7ffb72b8b217 with ID: 387 yields:
		neg r8w
		call 0x7ffb72db6ff2
1205: UB addr = 7ffb728ac813 with ID: 388 yields:
		sbb eax, 0xa388371a
		ror eax, 1
		neg eax
		xor edx, ebp
		lea eax, [rax + rdi - 0x72c6fb58]
		call 0x7ffb72bf1157
1206: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1207: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1208: UB addr = 7ffb72b0cf99 with ID: 358 yields:
		mov edi, 0x26a3f7b3
		mov rax, rsp
		lea rsi, [rdi + rdi + 0x2194f7b5]
		lea ecx, [rsi - 0x6edce5a3]
		sub edi, 0x3f31a631
		lea rdx, [r9 + rsi - 0x6edce79b]
		dec si
		and rdx, 0xfffffffffffffff0
		sub rdx, rcx
		bswap rsi
		mov rsp, rdx
		push 0x6632cf04
		push qword ptr [rsp + 8]
		popfq
		lea rsp, [rsp + 0x10]
		jmp rbx
1209: UB addr = 7ffb72991eea with ID: 389 yields:
		mov edx, dword ptr [r11]
		add r11, 4
		mov edi, 0x9f27e08c
		call 0x7ffb72c164d7
1210: UB addr = 7ffb72b7cf89 with ID: 390 yields:
		sal cx, 0x61
		mov r8d, edi
		mov word ptr [r9 + rcx - 0x64e46342], dx
		btr rcx, r8
		mov qword ptr [rsp + rcx - 0x64e46350], rcx
		lea r9, [rcx + r9 - 0x64e46342]
		mov ebp, edi
		mov qword ptr [rsp + rcx - 0x64e46350], rbx
		ret
1211: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1212: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1213: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1214: UB addr = 7ffb728fd14e with ID: 378 yields:
		neg esi
		sar word ptr [rsp + rbp - 0x14f3], 0x44
		lea esi, [rsi + rbp*4 - 0x4aa0b124]
		lea r8, [rcx - 0xd499871]
		bswap esi
		neg cl
		mov qword ptr [rsp + r8*2 + 0x1a921612], r10
		xor dword ptr [rsp + r8 + 0xd490b11], esi
		shl dword ptr [rsp + r8*4 + 0x35242c10], cl
		mov r10, qword ptr [rsp + r8*4 + 0x35242c14]
		pop rbp
		adc rbp, 0x18e6d
		jmp rbp
1215: UB addr = 7ffb72b9130b with ID: 391 yields:
		mov ecx, 0xd8859106
		mov r8d, 0x6ea670bf
		mov rdi, qword ptr [r9 + r8 - 0x6ea670bf]
		movsx ebp, cl
		lea rsi, [r8 + rcx*4 + 0x2d001a91]
		mov ax, word ptr [rdi + rbp*4 - 0x18]
		xadd r8w, bp
		shr sil, 0xa7
		push rbp
		mov di, ax
		call 0x7ffb72d0156c
1216: UB addr = 7ffb729cd08c with ID: 324 yields:
		lea rdi, [rsi + rsi - 0x267283c4]
		rol rdx, 3
		ror sil, 1
		inc byte ptr [rsp + rsi - 0x3f87610e]
		jno 0x7ffb72c71a8b
1217: UB addr = 7ffb72ab785c with ID: 325 yields:
		movsxd rdi, edi
		add rbx, rdi
		mov qword ptr [rsp + rax + 0x4c69], rbp
		movzx esi, byte ptr [r11 + rdx*2 - 0x1fff2]
		inc al
		lea r11, [rbp + r11 - 0x589c1ff3]
		xor sil, r10b
		add sil, dl
		dec byte ptr [rsp + rax*2 + 0x98cf]
		rol sil, 1
		and dl, 5
		cdqe
		mov edi, dword ptr [rsp + rbp - 0x589c1ffb]
		inc sil
		lea r8, [rbp*2 - 0x3bc483fa]
		and dword ptr [rsp + rax + 0x4c6a], r8d
		not sil
		push r8
		dec word ptr [rsp + rax*2 + 0x98c0]
		shr qword ptr [rsp + rax + 0x4c65], cl
		ror sil, 1
		ror byte ptr [rsp + rax*2 + 0x98d4], 4
		ror r8, cl
		xor sil, 0x94
		xadd r8d, eax
		inc rbp
		rol bp, 0x62
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x18]
		shl bpl, 0xc3
		xadd dword ptr [rsp + rax*4 - 0x756e], edx
		mov rax, qword ptr [rbp + rsi - 0x589c8020]
		dec rcx
		mov qword ptr [r9 + rcx - 0x6121], rax
		sal edx, cl
		lea r9, [rcx + r9 - 0x6121]
		jp 0x7ffb72ac5884
1218: UB addr = 7ffb72ac5884 with ID: 326 yields:
		adc ebp, ecx
		pop rax
		pop rax
		pop rsi
		jns 0x7ffb72acc73a
1219: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1220: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1221: UB addr = 7ffb72b0cf99 with ID: 358 yields:
		mov edi, 0x26a3f7b3
		mov rax, rsp
		lea rsi, [rdi + rdi + 0x2194f7b5]
		lea ecx, [rsi - 0x6edce5a3]
		sub edi, 0x3f31a631
		lea rdx, [r9 + rsi - 0x6edce79b]
		dec si
		and rdx, 0xfffffffffffffff0
		sub rdx, rcx
		bswap rsi
		mov rsp, rdx
		push 0x6632cf04
		push qword ptr [rsp + 8]
		popfq
		lea rsp, [rsp + 0x10]
		jmp rbx
1222: UB addr = 7ffb728b4210 with ID: 392 yields:
		inc bpl
		btc rax, r8
		xor bpl, 0x19
		btc rcx, r8
		sub cx, r8w
		adc bpl, 0xbd
		push rsi
		neg bpl
		sal dil, 0xc3
		call 0x7ffb72ede580
1223: UB addr = 7ffb729447be with ID: 393 yields:
		xor dword ptr [rsp + rdi - 0xffb1], edx
		xchg eax, r8d
		sal edi, cl
		pop r10
		sbb dil, 0xa7
		btr si, r8w
		mov ebp, edi
		movsxd rdx, edx
		adc r8d, eax
		jbe 0x7ffb72c6e981
1224: UB addr = 7ffb7296dad5 with ID: 394 yields:
		mov dl, byte ptr [r9 + 2]
		adc dil, dl
		xadd r8w, bp
		mov edx, 0xcc233791
		ja 0x7ffb72cfa182
1225: UB addr = 7ffb7292ad06 with ID: 395 yields:
		dec dword ptr [rsp + r8*2 - 0x8289]
		ror word ptr [rsp + r8 - 0x4143], 0x6d
		mov qword ptr [rsp + r8 - 0x4152], rbx
		ret 0x18
1226: UB addr = 7ffb728fe7e1 with ID: 396 yields:
		movsxd rsi, esi
		adc rbx, rsi
		mov dl, byte ptr [r11 + rdi + 4]
		lea r11, [r11 + rdi*8 + 5]
		push rcx
		mov esi, ecx
		dec byte ptr [rsp + rdi + 9]
		xor dl, r10b
		xor dl, 0x3f
		sar qword ptr [rsp + rdi + 8], cl
		xadd dword ptr [rsp + rdi + 6], ebp
		adc dl, 0xaf
		mov qword ptr [rsp + rdi + 0x10], rcx
		dec word ptr [rsp + rdi*2 + 0xa]
		not dl
		or dil, 0xa2
		ror dl, 1
		xor dl, 0x2e
		add dl, 0xb2
		call 0x7ffb72c72e52
1227: UB addr = 7ffb728b20e3 with ID: 419 yields:
		mov eax, 0xd2eba93
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1228: UB addr = 7ffb728ac813 with ID: 388 yields:
		sbb eax, 0xa388371a
		ror eax, 1
		neg eax
		xor edx, ebp
		lea eax, [rax + rdi - 0x72c6fb58]
		call 0x7ffb72bf1157
1229: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1230: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1231: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1232: UB addr = 7ffb72991eea with ID: 389 yields:
		mov edx, dword ptr [r11]
		add r11, 4
		mov edi, 0x9f27e08c
		call 0x7ffb72c164d7
1233: UB addr = 7ffb72b7cf89 with ID: 390 yields:
		sal cx, 0x61
		mov r8d, edi
		mov word ptr [r9 + rcx - 0x64e46342], dx
		btr rcx, r8
		mov qword ptr [rsp + rcx - 0x64e46350], rcx
		lea r9, [rcx + r9 - 0x64e46342]
		mov ebp, edi
		mov qword ptr [rsp + rcx - 0x64e46350], rbx
		ret
1234: UB addr = 7ffb72a56d31 with ID: 398 yields:
		xor dword ptr [rsp + rax - 4], ecx
		pop r10
		sub dx, ax
		movsxd rcx, ecx
		bts edx, esi
		adc rbx, rcx
		sub rax, rbp
		sar si, 0x41
		mov r8d, 0xa3a9c738
		mov di, word ptr [rax + r9 - 4]
		jnp 0x7ffb72c21323
1235: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1236: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1237: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1238: UB addr = 7ffb72b9488f with ID: 399 yields:
		mov r8d, 0x5fa9ac99
		mov rax, qword ptr [r9 + r8 - 0x5fa9ac99]
		dec r8d
		mov cl, byte ptr [r8 + r9 - 0x5fa9ac90]
		mov edi, r8d
		shr rax, cl
		call 0x7ffb72e81f1a
1239: UB addr = 7ffb7297063b with ID: 400 yields:
		bswap r8
		xor r10, r8
		cdq
		mov qword ptr [rsp + rcx - 0x57], 0x34aa7612
		mov qword ptr [rcx + r9 - 0x5d], r8
		lea rsi, [rdx + rdi*4 + 0x5519d6a6]
		lea r9, [r9 + rcx - 0x5d]
		mov r8d, dword ptr [rcx + r11 - 0x4f]
		bts bp, si
		sbb byte ptr [rsp + rcx*8 - 0x2ad], ah
		lea r11, [rcx + r11 - 0x4b]
		sal eax, 0x8b
		xor r8d, r10d
		neg qword ptr [rsp + rcx - 0x51]
		call 0x7ffb72da5903
1240: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1241: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1242: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1243: UB addr = 7ffb729cd08c with ID: 324 yields:
		lea rdi, [rsi + rsi - 0x267283c4]
		rol rdx, 3
		ror sil, 1
		inc byte ptr [rsp + rsi - 0x3f87610e]
		jno 0x7ffb72c71a8b
1244: UB addr = 7ffb72ab785c with ID: 325 yields:
		movsxd rdi, edi
		add rbx, rdi
		mov qword ptr [rsp + rax + 0x4c69], rbp
		movzx esi, byte ptr [r11 + rdx*2 - 0x1fff2]
		inc al
		lea r11, [rbp + r11 - 0x589c1ff3]
		xor sil, r10b
		add sil, dl
		dec byte ptr [rsp + rax*2 + 0x98cf]
		rol sil, 1
		and dl, 5
		cdqe
		mov edi, dword ptr [rsp + rbp - 0x589c1ffb]
		inc sil
		lea r8, [rbp*2 - 0x3bc483fa]
		and dword ptr [rsp + rax + 0x4c6a], r8d
		not sil
		push r8
		dec word ptr [rsp + rax*2 + 0x98c0]
		shr qword ptr [rsp + rax + 0x4c65], cl
		ror sil, 1
		ror byte ptr [rsp + rax*2 + 0x98d4], 4
		ror r8, cl
		xor sil, 0x94
		xadd r8d, eax
		inc rbp
		rol bp, 0x62
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x18]
		shl bpl, 0xc3
		xadd dword ptr [rsp + rax*4 - 0x756e], edx
		mov rax, qword ptr [rbp + rsi - 0x589c8020]
		dec rcx
		mov qword ptr [r9 + rcx - 0x6121], rax
		sal edx, cl
		lea r9, [rcx + r9 - 0x6121]
		jp 0x7ffb72ac5884
1245: UB addr = 7ffb72ac5884 with ID: 326 yields:
		adc ebp, ecx
		pop rax
		pop rax
		pop rsi
		jns 0x7ffb72acc73a
1246: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1247: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1248: UB addr = 7ffb72b0cf99 with ID: 358 yields:
		mov edi, 0x26a3f7b3
		mov rax, rsp
		lea rsi, [rdi + rdi + 0x2194f7b5]
		lea ecx, [rsi - 0x6edce5a3]
		sub edi, 0x3f31a631
		lea rdx, [r9 + rsi - 0x6edce79b]
		dec si
		and rdx, 0xfffffffffffffff0
		sub rdx, rcx
		bswap rsi
		mov rsp, rdx
		push 0x6632cf04
		push qword ptr [rsp + 8]
		popfq
		lea rsp, [rsp + 0x10]
		jmp rbx
1249: UB addr = 7ffb72bad289 with ID: 330 yields:
		mov r8, qword ptr [r9]
		mov edi, 0x5a36a639
		mov rax, qword ptr [rdi + r9 - 0x5a36a631]
		add r8, rax
		mov qword ptr [r9 + rdi - 0x5a36a631], r8
		mov r8d, dword ptr [rdi + r11 - 0x5a36a639]
		lea r11, [rdi + r11 - 0x5a36a635]
		push rdi
		lea rax, [rdi + rdi + 0x5313b7a5]
		xor r8d, r10d
		dec word ptr [rsp + rdi - 0x5a36a638]
		jle 0x7ffb72955210
1250: UB addr = 7ffb72a41339 with ID: 401 yields:
		lea r8d, [r8 + rdi - 0x62f26b46]
		rol r8d, 3
		cdqe
		neg dil
		neg r8d
		sar word ptr [rsp + rdi - 0x5a36a6c6], 0xc
		not r8d
		mov qword ptr [rsp + rax - 0x7810417], r10
		xor dword ptr [rsp + rdi - 0x5a36a6c7], r8d
		pop r10
		movsxd r8, r8d
		add rbx, r8
		mov eax, 0x529dcf2f
		mov rax, qword ptr [rax + r9 - 0x529dcf2f]
		mov rdx, qword ptr [r9 + 8]
		mov r8d, 0x7927a78a
		add rax, rdx
		mov qword ptr [r9 + r8 - 0x7927a782], rax
		movsx esi, r8b
		lea rcx, [rsi*4 + 0x6a3dcfab]
		mov esi, dword ptr [r8 + r11 - 0x7927a78a]
		ror r8b, 0x65
		lea rbp, [rcx - 0x40cd14ff]
		not r8w
		lea r11, [r11 + r8 - 0x792758a7]
		xor esi, r10d
		sub esi, 0x8bbc50d
		sal ebp, cl
		sal cl, 0x61
		rol esi, 3
		btr ebp, r8d
		movzx edx, cl
		mov eax, 0xd1bb53b3
		neg esi
		bts eax, r8d
		ror eax, 0xab
		push rax
		not esi
		movsx edi, cl
		and qword ptr [rsp + rdx - 0xa6], rcx
		mov qword ptr [rsp + r8 - 0x792758ab], r10
		xor dword ptr [rsp + r8 - 0x792758ab], esi
		pop r10
		movsxd rsi, esi
		lea rcx, [rsi + rsi*8 + 0x509170b5]
		xor ebp, r10d
		pop rsi
		add rsi, -0x124b87
		jmp rsi
1251: UB addr = 7ffb72a966fe with ID: 402 yields:
		ror r8w, 0xc6
		btr r8, rdx
		sbb ebp, edx
		xor ebp, 0xb337be9f
		ror ecx, 3
		push rcx
		mov eax, 0x997d818
		not ebp
		ror eax, 0xe4
		inc r8
		shl dword ptr [rsp + r8 - 0x5071daff], 0x8e
		xor ebp, 0x71ae42aa
		or dword ptr [rsp + rdi*2 + 4], edx
		sbb ax, di
		jp 0x7ffb7298c8ee
1252: UB addr = 7ffb7298c8ee with ID: 403 yields:
		bswap ebp
		movsx esi, di
		add dword ptr [rsp + r8 - 0x5071dafe], edi
		rol ebp, 2
		lea ebp, [rbp + r8*2 + 0x2cdb5598]
		rol ebp, 1
		bswap ebp
		and edi, ecx
		shl word ptr [rsp + r8 - 0x5071dafb], 0x6a
		ror ebp, 3
		lea r8, [rcx*8 - 0x1ccdd0f1]
		dec ebp
		not qword ptr [rsp + rdi]
		btc r8d, esi
		xor esi, ecx
		mov qword ptr [rsp + r8 - 0x7c363e6], r10
		bts si, cx
		xor dword ptr [rsp + r8*2 - 0xf86c7cc], ebp
		pop r10
		not si
		sar edx, cl
		movsxd rbp, ebp
		adc rbx, rbp
		neg edx
		mov rcx, qword ptr [rdx + r9]
		lea rbp, [rsi*4 - 0x556f884e]
		shl r8b, 0xc3
		mov rax, qword ptr [r9 + rdx*2 + 8]
		inc dx
		ror r8, 0xd8
		not rcx
		sar r8w, 0xcc
		sub dil, bpl
		jb 0x7ffb72c48310
1253: UB addr = 7ffb7298c98a with ID: 404 yields:
		not rax
		btr bp, 0xa4
		inc dl
		adc r8d, 0xe30e882
		or rcx, rax
		mov qword ptr [r9 + rdx*8 - 8], rcx
		lea r9, [rdx + r9 + 6]
		neg rdx
		jmp rbx
1254: UB addr = 7ffb728affe2 with ID: 405 yields:
		xor dword ptr [rsp + rdx*2], esi
		add di, bp
		pop r10
		xadd bp, cx
		cqo
		lea rax, [rbp + rbp*4 + 0x549317a4]
		movsxd rsi, esi
		btr ebp, edi
		sar rax, cl
		jns 0x7ffb7292013b
1255: UB addr = 7ffb7292013b with ID: 406 yields:
		adc rbx, rsi
		mov rdi, qword ptr [rdx + r9 + 8]
		push rax
		call 0x7ffb72c61146
1256: UB addr = 7ffb72a14907 with ID: 407 yields:
		mov ecx, 0x1eb81b2c
		lea rdi, [rcx + rcx - 0x14d5b7d3]
		mov ecx, dword ptr [r11 + rcx - 0x1eb81b2c]
		movsx eax, di
		xor ecx, r10d
		bts edi, eax
		movsx r8d, di
		neg ecx
		mov qword ptr [rsp + rdi*2 - 0x5134fd4a], 0x9b64316
		sub r8, qword ptr [rsp + rdi - 0x289a7ea5]
		dec ecx
		neg ecx
		mov edx, dword ptr [rsp + rdi*2 - 0x5134fd47]
		not dword ptr [rsp + rdi*2 - 0x5134fd48]
		bswap ecx
		add ax, word ptr [rsp + rax*4 - 0x1fa10]
		mov ebp, 0x23bd19a8
		shl di, 0x84
		lea ecx, [rcx + rdi*2 + 0x5fa4a1c]
		mov qword ptr [rsp + rdi - 0x289aea50], r10
		inc r8b
		movsx esi, di
		xor dword ptr [rsp + rax - 0x7e84], ecx
		pop r10
		bts eax, r8d
		neg bpl
		bswap esi
		movsxd rcx, ecx
		add rbx, rcx
		mov rdi, qword ptr [r9 + rdi - 0x289aea50]
		cwde
		mov ecx, 0xc6318c2f
		not eax
		movzx r8d, byte ptr [r11 + rdx*2 - 0xe]
		push rdx
		sub dx, 0xc027
		xor r8b, r10b
		xor r8b, 0x2a
		ror r8b, 1
		sub r8b, sil
		and bp, dx
		rol r8b, 1
		ror dword ptr [rsp + rdx - 0x3fe0], 0xc1
		adc r8b, 0x93
		xor r10b, r8b
		neg rax
		setno byte ptr [rsp + rdx*4 - 0xff88]
		lea r8, [rsp + r8 + 8]
		add word ptr [rsp + rdx*4 - 0xff86], 0x49b9
		call 0x7ffb72c31e65
1257: UB addr = 7ffb729f2dd8 with ID: 408 yields:
		setnp byte ptr [rsp + rdx*2 - 0x7fc4]
		push rsi
		lea r11, [r11 + rdx*2 - 0x7fbd]
		not byte ptr [rsp + rdx - 0x3fdc]
		not eax
		mov edi, esi
		xor r8w, r10w
		btc edx, ebp
		xchg sil, dil
		neg si
		rol r8w, 1
		and bpl, dil
		bswap rdi
		not r8w
		xor r8w, 0xb1a4
		dec dx
		shl word ptr [rsp + rdx - 0x3fe1], 0x25
		xchg dword ptr [rsp + rdx - 0x3fd6], eax
		sub r8w, si
		cbw
		xor r8w, 0x7b88
		xor r10w, r8w
		push rdx
		lea r8, [rsp + r8 + 0x18]
		mov qword ptr [r8 + rdx*8 - 0x1ff10], rcx
		inc dword ptr [rsp + rdx*4 - 0xff83]
		mov qword ptr [rsp + rdx*2 - 0x7fc4], rbx
		ret 0x10
1258: UB addr = 7ffb72b951b2 with ID: 409 yields:
		mov rcx, qword ptr [rdi + rbp - 0x3fad]
		mov qword ptr [r9 + r8*4 - 0x3ffd4], rcx
		lea r9, [r9 + rdi - 0x3fbd]
		xor rax, rsi
		xor r8w, 0xe202
		jae 0x7ffb72acc73a
1259: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1260: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1261: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1262: UB addr = 7ffb72b9d84a with ID: 333 yields:
		xor r10w, si
		xor rdx, rdi
		lea rsi, [rsp + rsi + 8]
		mov qword ptr [rsi + rdi*2 - 0x298ca0d8], rax
		call 0x7ffb729840d1
1263: UB addr = 7ffb729840d1 with ID: 334 yields:
		sbb byte ptr [rsp + rdi - 0x14c65064], r8b
		mov ebp, dword ptr [r11 + rdi - 0x14c6506a]
		sub word ptr [rsp + rdi - 0x14c6505f], 0xfb6
		movsx eax, cx
		lea r11, [r11 + rdi*2 - 0x298ca0d2]
		inc al
		ror r8d, cl
		mov qword ptr [rsp + rdi*4 - 0x531941b0], r8
		xor ebp, r10d
		not ebp
		shr r8b, 0x47
		lea ebp, [rbp + rdi + 0x5150c997]
		ror cl, 0xc7
		or byte ptr [rsp + rdi*2 - 0x298ca0c9], dh
		bswap ebp
		xor dl, r8b
		not ebp
		sbb r8d, ecx
		shl dil, 0x65
		adc ecx, 0x1da6610b
		bswap ebp
		xor ebp, 0x95b4bb9e
		push r8
		or rdi, rax
		push r8
		rol ebp, 1
		movzx esi, cl
		not ebp
		mov qword ptr [rsp + rdi - 0x14c67f92], r10
		xor dword ptr [rsp + rdi*2 - 0x298cff3c], ebp
		mov r10, qword ptr [rsp + rdi*2 - 0x298cff3c]
		mov qword ptr [rsp + rdi - 0x14c67f92], rdx
		xor rcx, 0x7f386c81
		movsxd rbp, ebp
		rol sil, 0x46
		sub byte ptr [rsp + rdi*4 - 0x5319fe99], 0x99
		add rbx, rbp
		mov qword ptr [rsp + rdi*2 - 0x298cff54], rbx
		ret 0x18
1264: UB addr = 7ffb7297abdd with ID: 337 yields:
		mov esi, 0xe23a8007
		mov ecx, esi
		mov edi, ecx
		mov ebp, dword ptr [r11]
		lea rdx, [rcx - 0x276cba61]
		xor ebp, r10d
		mov eax, 0x42891739
		call 0x7ffb72b980c4
1265: UB addr = 7ffb72b980c4 with ID: 338 yields:
		sub ebp, 0xa388371a
		ror ebp, 1
		btr rax, rdi
		neg ebp
		sub ebp, 0x4aa05d04
		mov qword ptr [rsp + rax - 0x42891739], -0x71580247
		dec word ptr [rsp + rax - 0x42891734]
		bswap ebp
		sal word ptr [rsp + rax - 0x42891735], 0x68
		and dword ptr [rsp + rax - 0x42891736], ecx
		mov qword ptr [rsp + rax - 0x42891739], r10
		sal al, cl
		not rax
		adc ecx, edi
		xor dword ptr [rsp + rax + 0x42891781], ebp
		pop r10
		cdq
		add cx, 0x5925
		movsxd rbp, ebp
		add rbx, rbp
		neg eax
		inc ecx
		movzx r8d, byte ptr [rax + r11 - 0x4289177d]
		xor r8b, r10b
		sbb r8b, 0xb4
		sal ax, 0x8a
		xor r8b, dl
		sub r8b, 0x97
		xor r8b, dl
		movzx ebp, cl
		neg r8b
		inc rdx
		add r8b, 0x94
		xor r10b, r8b
		add r8, rsp
		mov rdi, qword ptr [rbp + r8 - 0x34]
		mov qword ptr [r9 + rbp*4 - 0xd8], rdi
		lea rbp, [rcx*4 - 0xeccd278]
		movzx esi, byte ptr [rax + r11 - 0x428903fb]
		call 0x7ffb72bf98c9
1266: UB addr = 7ffb72a9cc67 with ID: 339 yields:
		xor sil, r10b
		inc dil
		setl dl
		sal rdi, cl
		sbb sil, 2
		sar ax, 0x61
		mov qword ptr [rsp + r8 - 0x1d], rcx
		not sil
		xor dl, 0xb5
		inc qword ptr [rsp + rax - 0x4289007d]
		setno byte ptr [rsp + r8 - 0x11]
		neg sil
		btr edi, eax
		lea rcx, [rax*4 - 0x174ebb43]
		dec sil
		or qword ptr [rsp + rax - 0x4289007d], rdx
		shl word ptr [rsp + r8*2 - 0x30], 0x25
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x10]
		mov rdx, qword ptr [rax + rsi - 0x42890080]
		inc dword ptr [rsp + r8 - 0x13]
		xadd r8, rbp
		mov qword ptr [rax + r9 - 0x42890090], rdx
		lea rsi, [rdi*2 - 0x1dfee179]
		lea r9, [rbp + r9 - 0x2d]
		pop rax
		pop r8
		jne 0x7ffb72acc73a
1267: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1268: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1269: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1270: UB addr = 7ffb7297abdd with ID: 337 yields:
		mov esi, 0xe23a8007
		mov ecx, esi
		mov edi, ecx
		mov ebp, dword ptr [r11]
		lea rdx, [rcx - 0x276cba61]
		xor ebp, r10d
		mov eax, 0x42891739
		call 0x7ffb72b980c4
1271: UB addr = 7ffb72b980c4 with ID: 338 yields:
		sub ebp, 0xa388371a
		ror ebp, 1
		btr rax, rdi
		neg ebp
		sub ebp, 0x4aa05d04
		mov qword ptr [rsp + rax - 0x42891739], -0x71580247
		dec word ptr [rsp + rax - 0x42891734]
		bswap ebp
		sal word ptr [rsp + rax - 0x42891735], 0x68
		and dword ptr [rsp + rax - 0x42891736], ecx
		mov qword ptr [rsp + rax - 0x42891739], r10
		sal al, cl
		not rax
		adc ecx, edi
		xor dword ptr [rsp + rax + 0x42891781], ebp
		pop r10
		cdq
		add cx, 0x5925
		movsxd rbp, ebp
		add rbx, rbp
		neg eax
		inc ecx
		movzx r8d, byte ptr [rax + r11 - 0x4289177d]
		xor r8b, r10b
		sbb r8b, 0xb4
		sal ax, 0x8a
		xor r8b, dl
		sub r8b, 0x97
		xor r8b, dl
		movzx ebp, cl
		neg r8b
		inc rdx
		add r8b, 0x94
		xor r10b, r8b
		add r8, rsp
		mov rdi, qword ptr [rbp + r8 - 0x34]
		mov qword ptr [r9 + rbp*4 - 0xd8], rdi
		lea rbp, [rcx*4 - 0xeccd278]
		movzx esi, byte ptr [rax + r11 - 0x428903fb]
		call 0x7ffb72bf98c9
1272: UB addr = 7ffb72a9cc67 with ID: 339 yields:
		xor sil, r10b
		inc dil
		setl dl
		sal rdi, cl
		sbb sil, 2
		sar ax, 0x61
		mov qword ptr [rsp + r8 - 0x1d], rcx
		not sil
		xor dl, 0xb5
		inc qword ptr [rsp + rax - 0x4289007d]
		setno byte ptr [rsp + r8 - 0x11]
		neg sil
		btr edi, eax
		lea rcx, [rax*4 - 0x174ebb43]
		dec sil
		or qword ptr [rsp + rax - 0x4289007d], rdx
		shl word ptr [rsp + r8*2 - 0x30], 0x25
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x10]
		mov rdx, qword ptr [rax + rsi - 0x42890080]
		inc dword ptr [rsp + r8 - 0x13]
		xadd r8, rbp
		mov qword ptr [rax + r9 - 0x42890090], rdx
		lea rsi, [rdi*2 - 0x1dfee179]
		lea r9, [rbp + r9 - 0x2d]
		pop rax
		pop r8
		jne 0x7ffb72acc73a
1273: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1274: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1275: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1276: UB addr = 7ffb7297abdd with ID: 337 yields:
		mov esi, 0xe23a8007
		mov ecx, esi
		mov edi, ecx
		mov ebp, dword ptr [r11]
		lea rdx, [rcx - 0x276cba61]
		xor ebp, r10d
		mov eax, 0x42891739
		call 0x7ffb72b980c4
1277: UB addr = 7ffb72b980c4 with ID: 338 yields:
		sub ebp, 0xa388371a
		ror ebp, 1
		btr rax, rdi
		neg ebp
		sub ebp, 0x4aa05d04
		mov qword ptr [rsp + rax - 0x42891739], -0x71580247
		dec word ptr [rsp + rax - 0x42891734]
		bswap ebp
		sal word ptr [rsp + rax - 0x42891735], 0x68
		and dword ptr [rsp + rax - 0x42891736], ecx
		mov qword ptr [rsp + rax - 0x42891739], r10
		sal al, cl
		not rax
		adc ecx, edi
		xor dword ptr [rsp + rax + 0x42891781], ebp
		pop r10
		cdq
		add cx, 0x5925
		movsxd rbp, ebp
		add rbx, rbp
		neg eax
		inc ecx
		movzx r8d, byte ptr [rax + r11 - 0x4289177d]
		xor r8b, r10b
		sbb r8b, 0xb4
		sal ax, 0x8a
		xor r8b, dl
		sub r8b, 0x97
		xor r8b, dl
		movzx ebp, cl
		neg r8b
		inc rdx
		add r8b, 0x94
		xor r10b, r8b
		add r8, rsp
		mov rdi, qword ptr [rbp + r8 - 0x34]
		mov qword ptr [r9 + rbp*4 - 0xd8], rdi
		lea rbp, [rcx*4 - 0xeccd278]
		movzx esi, byte ptr [rax + r11 - 0x428903fb]
		call 0x7ffb72bf98c9
1278: UB addr = 7ffb72a9cc67 with ID: 339 yields:
		xor sil, r10b
		inc dil
		setl dl
		sal rdi, cl
		sbb sil, 2
		sar ax, 0x61
		mov qword ptr [rsp + r8 - 0x1d], rcx
		not sil
		xor dl, 0xb5
		inc qword ptr [rsp + rax - 0x4289007d]
		setno byte ptr [rsp + r8 - 0x11]
		neg sil
		btr edi, eax
		lea rcx, [rax*4 - 0x174ebb43]
		dec sil
		or qword ptr [rsp + rax - 0x4289007d], rdx
		shl word ptr [rsp + r8*2 - 0x30], 0x25
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x10]
		mov rdx, qword ptr [rax + rsi - 0x42890080]
		inc dword ptr [rsp + r8 - 0x13]
		xadd r8, rbp
		mov qword ptr [rax + r9 - 0x42890090], rdx
		lea rsi, [rdi*2 - 0x1dfee179]
		lea r9, [rbp + r9 - 0x2d]
		pop rax
		pop r8
		jne 0x7ffb72acc73a
1279: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1280: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1281: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1282: UB addr = 7ffb7297abdd with ID: 337 yields:
		mov esi, 0xe23a8007
		mov ecx, esi
		mov edi, ecx
		mov ebp, dword ptr [r11]
		lea rdx, [rcx - 0x276cba61]
		xor ebp, r10d
		mov eax, 0x42891739
		call 0x7ffb72b980c4
1283: UB addr = 7ffb72b980c4 with ID: 338 yields:
		sub ebp, 0xa388371a
		ror ebp, 1
		btr rax, rdi
		neg ebp
		sub ebp, 0x4aa05d04
		mov qword ptr [rsp + rax - 0x42891739], -0x71580247
		dec word ptr [rsp + rax - 0x42891734]
		bswap ebp
		sal word ptr [rsp + rax - 0x42891735], 0x68
		and dword ptr [rsp + rax - 0x42891736], ecx
		mov qword ptr [rsp + rax - 0x42891739], r10
		sal al, cl
		not rax
		adc ecx, edi
		xor dword ptr [rsp + rax + 0x42891781], ebp
		pop r10
		cdq
		add cx, 0x5925
		movsxd rbp, ebp
		add rbx, rbp
		neg eax
		inc ecx
		movzx r8d, byte ptr [rax + r11 - 0x4289177d]
		xor r8b, r10b
		sbb r8b, 0xb4
		sal ax, 0x8a
		xor r8b, dl
		sub r8b, 0x97
		xor r8b, dl
		movzx ebp, cl
		neg r8b
		inc rdx
		add r8b, 0x94
		xor r10b, r8b
		add r8, rsp
		mov rdi, qword ptr [rbp + r8 - 0x34]
		mov qword ptr [r9 + rbp*4 - 0xd8], rdi
		lea rbp, [rcx*4 - 0xeccd278]
		movzx esi, byte ptr [rax + r11 - 0x428903fb]
		call 0x7ffb72bf98c9
1284: UB addr = 7ffb72a9cc67 with ID: 339 yields:
		xor sil, r10b
		inc dil
		setl dl
		sal rdi, cl
		sbb sil, 2
		sar ax, 0x61
		mov qword ptr [rsp + r8 - 0x1d], rcx
		not sil
		xor dl, 0xb5
		inc qword ptr [rsp + rax - 0x4289007d]
		setno byte ptr [rsp + r8 - 0x11]
		neg sil
		btr edi, eax
		lea rcx, [rax*4 - 0x174ebb43]
		dec sil
		or qword ptr [rsp + rax - 0x4289007d], rdx
		shl word ptr [rsp + r8*2 - 0x30], 0x25
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x10]
		mov rdx, qword ptr [rax + rsi - 0x42890080]
		inc dword ptr [rsp + r8 - 0x13]
		xadd r8, rbp
		mov qword ptr [rax + r9 - 0x42890090], rdx
		lea rsi, [rdi*2 - 0x1dfee179]
		lea r9, [rbp + r9 - 0x2d]
		pop rax
		pop r8
		jne 0x7ffb72acc73a
1285: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1286: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1287: UB addr = 7ffb72b0cf99 with ID: 358 yields:
		mov edi, 0x26a3f7b3
		mov rax, rsp
		lea rsi, [rdi + rdi + 0x2194f7b5]
		lea ecx, [rsi - 0x6edce5a3]
		sub edi, 0x3f31a631
		lea rdx, [r9 + rsi - 0x6edce79b]
		dec si
		and rdx, 0xfffffffffffffff0
		sub rdx, rcx
		bswap rsi
		mov rsp, rdx
		push 0x6632cf04
		push qword ptr [rsp + 8]
		popfq
		lea rsp, [rsp + 0x10]
		jmp rbx
1288: UB addr = 7ffb7297abdd with ID: 337 yields:
		mov esi, 0xe23a8007
		mov ecx, esi
		mov edi, ecx
		mov ebp, dword ptr [r11]
		lea rdx, [rcx - 0x276cba61]
		xor ebp, r10d
		mov eax, 0x42891739
		call 0x7ffb72b980c4
1289: UB addr = 7ffb72b980c4 with ID: 338 yields:
		sub ebp, 0xa388371a
		ror ebp, 1
		btr rax, rdi
		neg ebp
		sub ebp, 0x4aa05d04
		mov qword ptr [rsp + rax - 0x42891739], -0x71580247
		dec word ptr [rsp + rax - 0x42891734]
		bswap ebp
		sal word ptr [rsp + rax - 0x42891735], 0x68
		and dword ptr [rsp + rax - 0x42891736], ecx
		mov qword ptr [rsp + rax - 0x42891739], r10
		sal al, cl
		not rax
		adc ecx, edi
		xor dword ptr [rsp + rax + 0x42891781], ebp
		pop r10
		cdq
		add cx, 0x5925
		movsxd rbp, ebp
		add rbx, rbp
		neg eax
		inc ecx
		movzx r8d, byte ptr [rax + r11 - 0x4289177d]
		xor r8b, r10b
		sbb r8b, 0xb4
		sal ax, 0x8a
		xor r8b, dl
		sub r8b, 0x97
		xor r8b, dl
		movzx ebp, cl
		neg r8b
		inc rdx
		add r8b, 0x94
		xor r10b, r8b
		add r8, rsp
		mov rdi, qword ptr [rbp + r8 - 0x34]
		mov qword ptr [r9 + rbp*4 - 0xd8], rdi
		lea rbp, [rcx*4 - 0xeccd278]
		movzx esi, byte ptr [rax + r11 - 0x428903fb]
		call 0x7ffb72bf98c9
1290: UB addr = 7ffb72a9cc67 with ID: 339 yields:
		xor sil, r10b
		inc dil
		setl dl
		sal rdi, cl
		sbb sil, 2
		sar ax, 0x61
		mov qword ptr [rsp + r8 - 0x1d], rcx
		not sil
		xor dl, 0xb5
		inc qword ptr [rsp + rax - 0x4289007d]
		setno byte ptr [rsp + r8 - 0x11]
		neg sil
		btr edi, eax
		lea rcx, [rax*4 - 0x174ebb43]
		dec sil
		or qword ptr [rsp + rax - 0x4289007d], rdx
		shl word ptr [rsp + r8*2 - 0x30], 0x25
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x10]
		mov rdx, qword ptr [rax + rsi - 0x42890080]
		inc dword ptr [rsp + r8 - 0x13]
		xadd r8, rbp
		mov qword ptr [rax + r9 - 0x42890090], rdx
		lea rsi, [rdi*2 - 0x1dfee179]
		lea r9, [rbp + r9 - 0x2d]
		pop rax
		pop r8
		jne 0x7ffb72acc73a
1291: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1292: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1293: UB addr = 7ffb72b0cf99 with ID: 358 yields:
		mov edi, 0x26a3f7b3
		mov rax, rsp
		lea rsi, [rdi + rdi + 0x2194f7b5]
		lea ecx, [rsi - 0x6edce5a3]
		sub edi, 0x3f31a631
		lea rdx, [r9 + rsi - 0x6edce79b]
		dec si
		and rdx, 0xfffffffffffffff0
		sub rdx, rcx
		bswap rsi
		mov rsp, rdx
		push 0x6632cf04
		push qword ptr [rsp + 8]
		popfq
		lea rsp, [rsp + 0x10]
		jmp rbx
1294: UB addr = 7ffb7297abdd with ID: 337 yields:
		mov esi, 0xe23a8007
		mov ecx, esi
		mov edi, ecx
		mov ebp, dword ptr [r11]
		lea rdx, [rcx - 0x276cba61]
		xor ebp, r10d
		mov eax, 0x42891739
		call 0x7ffb72b980c4
1295: UB addr = 7ffb72b980c4 with ID: 338 yields:
		sub ebp, 0xa388371a
		ror ebp, 1
		btr rax, rdi
		neg ebp
		sub ebp, 0x4aa05d04
		mov qword ptr [rsp + rax - 0x42891739], -0x71580247
		dec word ptr [rsp + rax - 0x42891734]
		bswap ebp
		sal word ptr [rsp + rax - 0x42891735], 0x68
		and dword ptr [rsp + rax - 0x42891736], ecx
		mov qword ptr [rsp + rax - 0x42891739], r10
		sal al, cl
		not rax
		adc ecx, edi
		xor dword ptr [rsp + rax + 0x42891781], ebp
		pop r10
		cdq
		add cx, 0x5925
		movsxd rbp, ebp
		add rbx, rbp
		neg eax
		inc ecx
		movzx r8d, byte ptr [rax + r11 - 0x4289177d]
		xor r8b, r10b
		sbb r8b, 0xb4
		sal ax, 0x8a
		xor r8b, dl
		sub r8b, 0x97
		xor r8b, dl
		movzx ebp, cl
		neg r8b
		inc rdx
		add r8b, 0x94
		xor r10b, r8b
		add r8, rsp
		mov rdi, qword ptr [rbp + r8 - 0x34]
		mov qword ptr [r9 + rbp*4 - 0xd8], rdi
		lea rbp, [rcx*4 - 0xeccd278]
		movzx esi, byte ptr [rax + r11 - 0x428903fb]
		call 0x7ffb72bf98c9
1296: UB addr = 7ffb72a9cc67 with ID: 339 yields:
		xor sil, r10b
		inc dil
		setl dl
		sal rdi, cl
		sbb sil, 2
		sar ax, 0x61
		mov qword ptr [rsp + r8 - 0x1d], rcx
		not sil
		xor dl, 0xb5
		inc qword ptr [rsp + rax - 0x4289007d]
		setno byte ptr [rsp + r8 - 0x11]
		neg sil
		btr edi, eax
		lea rcx, [rax*4 - 0x174ebb43]
		dec sil
		or qword ptr [rsp + rax - 0x4289007d], rdx
		shl word ptr [rsp + r8*2 - 0x30], 0x25
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x10]
		mov rdx, qword ptr [rax + rsi - 0x42890080]
		inc dword ptr [rsp + r8 - 0x13]
		xadd r8, rbp
		mov qword ptr [rax + r9 - 0x42890090], rdx
		lea rsi, [rdi*2 - 0x1dfee179]
		lea r9, [rbp + r9 - 0x2d]
		pop rax
		pop r8
		jne 0x7ffb72acc73a
1297: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1298: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1299: UB addr = 7ffb72b0cf99 with ID: 358 yields:
		mov edi, 0x26a3f7b3
		mov rax, rsp
		lea rsi, [rdi + rdi + 0x2194f7b5]
		lea ecx, [rsi - 0x6edce5a3]
		sub edi, 0x3f31a631
		lea rdx, [r9 + rsi - 0x6edce79b]
		dec si
		and rdx, 0xfffffffffffffff0
		sub rdx, rcx
		bswap rsi
		mov rsp, rdx
		push 0x6632cf04
		push qword ptr [rsp + 8]
		popfq
		lea rsp, [rsp + 0x10]
		jmp rbx
1300: UB addr = 7ffb7297abdd with ID: 337 yields:
		mov esi, 0xe23a8007
		mov ecx, esi
		mov edi, ecx
		mov ebp, dword ptr [r11]
		lea rdx, [rcx - 0x276cba61]
		xor ebp, r10d
		mov eax, 0x42891739
		call 0x7ffb72b980c4
1301: UB addr = 7ffb72b980c4 with ID: 338 yields:
		sub ebp, 0xa388371a
		ror ebp, 1
		btr rax, rdi
		neg ebp
		sub ebp, 0x4aa05d04
		mov qword ptr [rsp + rax - 0x42891739], -0x71580247
		dec word ptr [rsp + rax - 0x42891734]
		bswap ebp
		sal word ptr [rsp + rax - 0x42891735], 0x68
		and dword ptr [rsp + rax - 0x42891736], ecx
		mov qword ptr [rsp + rax - 0x42891739], r10
		sal al, cl
		not rax
		adc ecx, edi
		xor dword ptr [rsp + rax + 0x42891781], ebp
		pop r10
		cdq
		add cx, 0x5925
		movsxd rbp, ebp
		add rbx, rbp
		neg eax
		inc ecx
		movzx r8d, byte ptr [rax + r11 - 0x4289177d]
		xor r8b, r10b
		sbb r8b, 0xb4
		sal ax, 0x8a
		xor r8b, dl
		sub r8b, 0x97
		xor r8b, dl
		movzx ebp, cl
		neg r8b
		inc rdx
		add r8b, 0x94
		xor r10b, r8b
		add r8, rsp
		mov rdi, qword ptr [rbp + r8 - 0x34]
		mov qword ptr [r9 + rbp*4 - 0xd8], rdi
		lea rbp, [rcx*4 - 0xeccd278]
		movzx esi, byte ptr [rax + r11 - 0x428903fb]
		call 0x7ffb72bf98c9
1302: UB addr = 7ffb72a9cc67 with ID: 339 yields:
		xor sil, r10b
		inc dil
		setl dl
		sal rdi, cl
		sbb sil, 2
		sar ax, 0x61
		mov qword ptr [rsp + r8 - 0x1d], rcx
		not sil
		xor dl, 0xb5
		inc qword ptr [rsp + rax - 0x4289007d]
		setno byte ptr [rsp + r8 - 0x11]
		neg sil
		btr edi, eax
		lea rcx, [rax*4 - 0x174ebb43]
		dec sil
		or qword ptr [rsp + rax - 0x4289007d], rdx
		shl word ptr [rsp + r8*2 - 0x30], 0x25
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x10]
		mov rdx, qword ptr [rax + rsi - 0x42890080]
		inc dword ptr [rsp + r8 - 0x13]
		xadd r8, rbp
		mov qword ptr [rax + r9 - 0x42890090], rdx
		lea rsi, [rdi*2 - 0x1dfee179]
		lea r9, [rbp + r9 - 0x2d]
		pop rax
		pop r8
		jne 0x7ffb72acc73a
1303: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1304: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1305: UB addr = 7ffb72b0cf99 with ID: 358 yields:
		mov edi, 0x26a3f7b3
		mov rax, rsp
		lea rsi, [rdi + rdi + 0x2194f7b5]
		lea ecx, [rsi - 0x6edce5a3]
		sub edi, 0x3f31a631
		lea rdx, [r9 + rsi - 0x6edce79b]
		dec si
		and rdx, 0xfffffffffffffff0
		sub rdx, rcx
		bswap rsi
		mov rsp, rdx
		push 0x6632cf04
		push qword ptr [rsp + 8]
		popfq
		lea rsp, [rsp + 0x10]
		jmp rbx
1306: UB addr = 7ffb728d3a5e with ID: 410 yields:
		movzx ecx, byte ptr [r11]
		xor cl, r10b
		mov ebp, 0x259de697
		lea rax, [rbp + rbp*2 + 0x6c880239]
		neg cl
		lea rsi, [rax + rax*8 + 0x70a83434]
		lea rax, [rbp + rbp*2 - 0x4cca4341]
		rol ax, 0xc6
		sbb cl, 0xaa
		push rax
		neg cl
		movsx r8d, bpl
		shl byte ptr [rsp + rbp*2 - 0x4b3bcd29], 0x25
		inc cl
		xor r10b, cl
		lea rcx, [rsp + rcx + 8]
		xor bpl, sil
		mov rbp, qword ptr [rcx + rbp - 0x259de6b5]
		cqo
		cbw
		call 0x7ffb72c885ee
1307: UB addr = 7ffb729a8bae with ID: 411 yields:
		and qword ptr [rsp + rax - 0x240f001c], 0xffffffffe0884ca0
		xor ebp, r10d
		neg ebp
		mov r8d, 0x4b053cbd
		push rsi
		dec ebp
		ror ebp, 1
		dec ebp
		not eax
		xchg cx, di
		mov qword ptr [rsp + rdx - 0xffffff0], r10
		xor dword ptr [rsp + rdx - 0xffffff0], ebp
		mov r10, qword ptr [rsp + rdx*4 - 0x3ffffff0]
		add ecx, edx
		jne 0x7ffb72de7ed5
1308: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1309: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1310: UB addr = 7ffb72b0cf99 with ID: 358 yields:
		mov edi, 0x26a3f7b3
		mov rax, rsp
		lea rsi, [rdi + rdi + 0x2194f7b5]
		lea ecx, [rsi - 0x6edce5a3]
		sub edi, 0x3f31a631
		lea rdx, [r9 + rsi - 0x6edce79b]
		dec si
		and rdx, 0xfffffffffffffff0
		sub rdx, rcx
		bswap rsi
		mov rsp, rdx
		push 0x6632cf04
		push qword ptr [rsp + 8]
		popfq
		lea rsp, [rsp + 0x10]
		jmp rbx
1311: UB addr = 7ffb728fd14e with ID: 378 yields:
		neg esi
		sar word ptr [rsp + rbp - 0x14f3], 0x44
		lea esi, [rsi + rbp*4 - 0x4aa0b124]
		lea r8, [rcx - 0xd499871]
		bswap esi
		neg cl
		mov qword ptr [rsp + r8*2 + 0x1a921612], r10
		xor dword ptr [rsp + r8 + 0xd490b11], esi
		shl dword ptr [rsp + r8*4 + 0x35242c10], cl
		mov r10, qword ptr [rsp + r8*4 + 0x35242c14]
		pop rbp
		adc rbp, 0x18e6d
		jmp rbp
1312: UB addr = 7ffb72b9130b with ID: 391 yields:
		mov ecx, 0xd8859106
		mov r8d, 0x6ea670bf
		mov rdi, qword ptr [r9 + r8 - 0x6ea670bf]
		movsx ebp, cl
		lea rsi, [r8 + rcx*4 + 0x2d001a91]
		mov ax, word ptr [rdi + rbp*4 - 0x18]
		xadd r8w, bp
		shr sil, 0xa7
		push rbp
		mov di, ax
		call 0x7ffb72d0156c
1313: UB addr = 7ffb729cd08c with ID: 324 yields:
		lea rdi, [rsi + rsi - 0x267283c4]
		rol rdx, 3
		ror sil, 1
		inc byte ptr [rsp + rsi - 0x3f87610e]
		jno 0x7ffb72c71a8b
1314: UB addr = 7ffb72ab785c with ID: 325 yields:
		movsxd rdi, edi
		add rbx, rdi
		mov qword ptr [rsp + rax + 0x4c69], rbp
		movzx esi, byte ptr [r11 + rdx*2 - 0x1fff2]
		inc al
		lea r11, [rbp + r11 - 0x589c1ff3]
		xor sil, r10b
		add sil, dl
		dec byte ptr [rsp + rax*2 + 0x98cf]
		rol sil, 1
		and dl, 5
		cdqe
		mov edi, dword ptr [rsp + rbp - 0x589c1ffb]
		inc sil
		lea r8, [rbp*2 - 0x3bc483fa]
		and dword ptr [rsp + rax + 0x4c6a], r8d
		not sil
		push r8
		dec word ptr [rsp + rax*2 + 0x98c0]
		shr qword ptr [rsp + rax + 0x4c65], cl
		ror sil, 1
		ror byte ptr [rsp + rax*2 + 0x98d4], 4
		ror r8, cl
		xor sil, 0x94
		xadd r8d, eax
		inc rbp
		rol bp, 0x62
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x18]
		shl bpl, 0xc3
		xadd dword ptr [rsp + rax*4 - 0x756e], edx
		mov rax, qword ptr [rbp + rsi - 0x589c8020]
		dec rcx
		mov qword ptr [r9 + rcx - 0x6121], rax
		sal edx, cl
		lea r9, [rcx + r9 - 0x6121]
		jp 0x7ffb72ac5884
1315: UB addr = 7ffb72ac5884 with ID: 326 yields:
		adc ebp, ecx
		pop rax
		pop rax
		pop rsi
		jns 0x7ffb72acc73a
1316: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1317: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1318: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1319: UB addr = 7ffb7298cb21 with ID: 412 yields:
		mov ecx, 0x942daa32
		mov edx, dword ptr [r11]
		movsx ebp, cx
		movsx eax, bpl
		xor edx, r10d
		push rbp
		inc edx
		call 0x7ffb72973ea0
1320: UB addr = 7ffb72973ea0 with ID: 413 yields:
		neg edx
		lea rsi, [rcx*4 + 0x6a999ea0]
		inc edx
		sub word ptr [rsp + rax - 0x24], si
		mov qword ptr [rsp + rax*2 - 0x64], rcx
		xor edx, 0x9321c286
		movsx r8d, byte ptr [rsp + rax - 0x30]
		mov qword ptr [rsp + rax*4 - 0xc0], r10
		sal rax, 0x93
		shr qword ptr [rsp + rax*8 - 0xc800000], 0x4b
		and r8d, dword ptr [rsp + rax - 0x18fffff]
		xor dword ptr [rsp + rax*2 - 0x31ffff8], edx
		mov r10, qword ptr [rsp + rax*2 - 0x31ffff8]
		movsxd rdx, edx
		dec bp
		mov qword ptr [rsp + rax - 0x18ffff8], rbp
		add rbx, rdx
		xchg dword ptr [rsp + rax*2 - 0x31ffff7], r8d
		movzx ebp, byte ptr [r11 + rax - 0x18ffffc]
		lea rdi, [rax*8 + 0x503ecd0c]
		xor bpl, r10b
		adc bpl, al
		ror bpl, 1
		neg bpl
		rol bpl, 1
		xor r10b, bpl
		xor qword ptr [rsp + rax*2 - 0x3200000], rcx
		rol word ptr [rsp + rax - 0x18ffff2], 0xa5
		lea rbp, [rsp + rbp + 0x10]
		cdq
		lea rsi, [rdx + rdi*8 + 0xaad6f89]
		and rdi, 0x88fed1c
		add dl, byte ptr [rax + rbp - 0x1900000]
		btc rax, rdi
		pop rbp
		pop rbp
		mov ax, dx
		cmovae edi, esi
		movzx ax, al
		mov r8b, byte ptr [r9 + rbp - 0x531]
		inc rbp
		not al
		movsx edx, di
		not r8b
		and al, r8b
		sal sil, 0xc3
		call 0x7ffb72a9c4e2
1321: UB addr = 7ffb72a9c4e2 with ID: 414 yields:
		mov qword ptr [rsp + rbp - 0x532], rsi
		mov word ptr [r9 + rbp - 0x532], ax
		lea rax, [rdi - 0x2ee1b7f7]
		movzx edx, byte ptr [rbp + r11 - 0x52d]
		lea r11, [r11 + rbp*4 - 0x14c2]
		xor dl, r10b
		rol dl, 1
		neg dl
		neg ebp
		setae byte ptr [rsp + 5]
		xor dl, 0x37
		sub sil, cl
		sbb dl, 0xbb
		or word ptr [rsp + 5], bp
		push rsi
		xor dl, 0x37
		push rbp
		call 0x7ffb72de7cbe
1322: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1323: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1324: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1325: UB addr = 7ffb728e3d78 with ID: 415 yields:
		movzx bp, byte ptr [r9]
		mov edi, 0x1c213b84
		mov dl, byte ptr [r9 + rdi*4 - 0x7084ee0e]
		or bpl, dl
		not bpl
		btr di, 0x1e
		xor rax, 0xffffffff981cb304
		mov word ptr [r9 + rdi - 0x1c213b82], bp
		lea r8, [rdi + rdi*2 - 0x49454f80]
		movzx eax, word ptr [r11 + rdi - 0x1c213b84]
		jae 0x7ffb7290c733
1326: UB addr = 7ffb7290c733 with ID: 416 yields:
		xor ax, r10w
		ror ax, 1
		lea rsi, [r8*8 + 0x10aa3e38]
		push rsi
		movsx ebp, r8w
		inc ax
		not ax
		rol ax, 1
		inc byte ptr [rsp + rdi*2 - 0x38427708]
		shl word ptr [rsp + rdi - 0x1c213b7e], 0xa
		xor r10w, ax
		xadd qword ptr [rsp + r8 - 0xb1e630c], rbp
		inc r8d
		mov word ptr [r9 + rdi*4 - 0x7084ee10], ax
		mov eax, dword ptr [r11 + rdi - 0x1c213b82]
		add dword ptr [rsp + rdi - 0x1c213b83], 0x53ad349c
		xor eax, r10d
		shl rbp, 0x3c
		btr di, 0xb0
		neg eax
		not bp
		pop rdx
		xor edx, 0x7422b91a
		dec eax
		xadd r8w, di
		movsx ecx, di
		ror eax, 1
		dec eax
		call 0x7ffb72e821ad
1327: UB addr = 7ffb7295b701 with ID: 417 yields:
		inc r8d
		add sil, r8b
		movsxd rax, eax
		neg rdi
		xchg dl, dil
		add edi, 0xe708d0b6
		add rbx, rax
		mov r8, qword ptr [r11 + r8*4 - 0x2c79fffe]
		mov eax, edi
		sub sil, bpl
		lea r11, [r11 + rsi - 0x699d41fc]
		ror bpl, 0xa1
		ror si, cl
		rol cx, 0xd
		sub bp, 0x2abf
		lea r8, [rdx + r8 - 0x7dff4d8f]
		rol rdi, 0x74
		not r8
		setb bpl
		xor r10, r8
		mov qword ptr [rsi + r9 - 0x699d105a], r8
		lea r9, [rsi + r9 - 0x699d105a]
		neg cx
		jne 0x7ffb72acc73a
1328: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1329: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1330: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1331: UB addr = 7ffb728fd14e with ID: 378 yields:
		neg esi
		sar word ptr [rsp + rbp - 0x14f3], 0x44
		lea esi, [rsi + rbp*4 - 0x4aa0b124]
		lea r8, [rcx - 0xd499871]
		bswap esi
		neg cl
		mov qword ptr [rsp + r8*2 + 0x1a921612], r10
		xor dword ptr [rsp + r8 + 0xd490b11], esi
		shl dword ptr [rsp + r8*4 + 0x35242c10], cl
		mov r10, qword ptr [rsp + r8*4 + 0x35242c14]
		pop rbp
		adc rbp, 0x18e6d
		jmp rbp
1332: UB addr = 7ffb72b8b217 with ID: 387 yields:
		neg r8w
		call 0x7ffb72db6ff2
1333: UB addr = 7ffb728ac813 with ID: 388 yields:
		sbb eax, 0xa388371a
		ror eax, 1
		neg eax
		xor edx, ebp
		lea eax, [rax + rdi - 0x72c6fb58]
		call 0x7ffb72bf1157
1334: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1335: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1336: UB addr = 7ffb72b0cf99 with ID: 358 yields:
		mov edi, 0x26a3f7b3
		mov rax, rsp
		lea rsi, [rdi + rdi + 0x2194f7b5]
		lea ecx, [rsi - 0x6edce5a3]
		sub edi, 0x3f31a631
		lea rdx, [r9 + rsi - 0x6edce79b]
		dec si
		and rdx, 0xfffffffffffffff0
		sub rdx, rcx
		bswap rsi
		mov rsp, rdx
		push 0x6632cf04
		push qword ptr [rsp + 8]
		popfq
		lea rsp, [rsp + 0x10]
		jmp rbx
1337: UB addr = 7ffb72991eea with ID: 389 yields:
		mov edx, dword ptr [r11]
		add r11, 4
		mov edi, 0x9f27e08c
		call 0x7ffb72c164d7
1338: UB addr = 7ffb72b7cf89 with ID: 390 yields:
		sal cx, 0x61
		mov r8d, edi
		mov word ptr [r9 + rcx - 0x64e46342], dx
		btr rcx, r8
		mov qword ptr [rsp + rcx - 0x64e46350], rcx
		lea r9, [rcx + r9 - 0x64e46342]
		mov ebp, edi
		mov qword ptr [rsp + rcx - 0x64e46350], rbx
		ret
1339: UB addr = 7ffb729018ca with ID: 418 yields:
		pop r8
		pop rcx
		jne 0x7ffb72acc73a
1340: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1341: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1342: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1343: UB addr = 7ffb728fd14e with ID: 378 yields:
		neg esi
		sar word ptr [rsp + rbp - 0x14f3], 0x44
		lea esi, [rsi + rbp*4 - 0x4aa0b124]
		lea r8, [rcx - 0xd499871]
		bswap esi
		neg cl
		mov qword ptr [rsp + r8*2 + 0x1a921612], r10
		xor dword ptr [rsp + r8 + 0xd490b11], esi
		shl dword ptr [rsp + r8*4 + 0x35242c10], cl
		mov r10, qword ptr [rsp + r8*4 + 0x35242c14]
		pop rbp
		adc rbp, 0x18e6d
		jmp rbp
1344: UB addr = 7ffb72a8fb5d with ID: 379 yields:
		call 0x7ffb72d1b0cd
1345: UB addr = 7ffb72ba2c63 with ID: 380 yields:
		xor eax, r10d
		mov r8d, 0x5183adb8
		movsx ebp, r8w
		lea eax, [rax + r8 - 0x39757184]
		mov qword ptr [rsp + r8 - 0x5183adb8], 0x480f5ba9
		rol word ptr [rsp + r8 - 0x5183adb7], 0x4e
		pop rcx
		neg eax
		lea rsi, [rbp + rcx*8 - 0x436f074c]
		dec eax
		sub rbp, 0x18af0730
		mov qword ptr [rsp + r8 - 0x5183adb8], rsi
		lea rdx, [rsi + rbp*4 - 0x74d6f6da]
		not eax
		btc rbp, rdx
		call 0x7ffb72c4e259
1346: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1347: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1348: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1349: UB addr = 7ffb729447be with ID: 393 yields:
		xor dword ptr [rsp + rdi - 0xffb1], edx
		xchg eax, r8d
		sal edi, cl
		pop r10
		sbb dil, 0xa7
		btr si, r8w
		mov ebp, edi
		movsxd rdx, edx
		adc r8d, eax
		jbe 0x7ffb72c6e981
1350: UB addr = 7ffb7296dad5 with ID: 394 yields:
		mov dl, byte ptr [r9 + 2]
		adc dil, dl
		xadd r8w, bp
		mov edx, 0xcc233791
		ja 0x7ffb72cfa182
1351: UB addr = 7ffb7292ad06 with ID: 395 yields:
		dec dword ptr [rsp + r8*2 - 0x8289]
		ror word ptr [rsp + r8 - 0x4143], 0x6d
		mov qword ptr [rsp + r8 - 0x4152], rbx
		ret 0x18
1352: UB addr = 7ffb728fe7e1 with ID: 396 yields:
		movsxd rsi, esi
		adc rbx, rsi
		mov dl, byte ptr [r11 + rdi + 4]
		lea r11, [r11 + rdi*8 + 5]
		push rcx
		mov esi, ecx
		dec byte ptr [rsp + rdi + 9]
		xor dl, r10b
		xor dl, 0x3f
		sar qword ptr [rsp + rdi + 8], cl
		xadd dword ptr [rsp + rdi + 6], ebp
		adc dl, 0xaf
		mov qword ptr [rsp + rdi + 0x10], rcx
		dec word ptr [rsp + rdi*2 + 0xa]
		not dl
		or dil, 0xa2
		ror dl, 1
		xor dl, 0x2e
		add dl, 0xb2
		call 0x7ffb72c72e52
1353: UB addr = 7ffb728b20e3 with ID: 419 yields:
		mov eax, 0xd2eba93
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1354: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1355: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1356: UB addr = 7ffb72a6cac7 with ID: 340 yields:
		movzx edi, byte ptr [r11]
		xor dil, r10b
		mov edx, 0xa990bf83
		call 0x7ffb72e642b5
1357: UB addr = 7ffb72b91045 with ID: 420 yields:
		mov eax, 0x529dcf2f
		mov rax, qword ptr [rax + r9 - 0x529dcf2f]
		mov rdx, qword ptr [r9 + 8]
		mov r8d, 0x7927a78a
		add rax, rdx
		mov qword ptr [r9 + r8 - 0x7927a782], rax
		movsx esi, r8b
		lea rcx, [rsi*4 + 0x6a3dcfab]
		mov esi, dword ptr [r8 + r11 - 0x7927a78a]
		ror r8b, 0x65
		not r8w
		lea r11, [r11 + r8 - 0x792758a7]
		xor esi, r10d
		sub esi, 0x8bbc50d
		sal cl, 0x61
		rol esi, 3
		movzx edx, cl
		mov eax, 0xd1bb53b3
		neg esi
		bts eax, r8d
		ror eax, 0xab
		push rax
		not esi
		and qword ptr [rsp + rdx - 0xa6], rcx
		mov qword ptr [rsp + r8 - 0x792758ab], r10
		xor dword ptr [rsp + r8 - 0x792758ab], esi
		pop r10
		mov ebp, 0x3706d088
		mov rax, qword ptr [rbp + r9 - 0x3706d088]
		lea rdx, [rbp*8 + 0x48261f37]
		mov rbp, qword ptr ss:[rax + rbp*2 - 0x6e0da110]
		mov edi, edx
		mov qword ptr [r9 + rdi*8 - 0x2e51bb8], rbp
		mov ebp, dword ptr [rdi + r11 - 0x5ca377]
		lea rax, [rdx + rdx*4 - 0x1ae173ed]
		lea r11, [r11 + rdi*2 - 0xb946ea]
		mov r8d, edx
		or di, r8w
		lea rsi, [rax*2 + 0x2ba2e831]
		xor ebp, r10d
		sal rsi, 0x3b
		ror ebp, 3
		and si, dx
		lea ebp, [rbp + rdi*4 + 0x633297e0]
		ror ebp, 1
		shl ax, 7
		bswap ebp
		push r10
		xor dword ptr [rsp + rdi*4 - 0x1728ddc], ebp
		pop r10
		xor rsi, 0x21927399
		movsxd rbp, ebp
		adc rbx, rbp
		shr edi, 0x94
		mov rcx, qword ptr [r9 + rdi - 5]
		shr eax, 0x45
		mov r8, qword ptr [r9 + rdi*4 - 0xc]
		adc dil, 0x1f
		shr rsi, 0x9f
		movzx ebp, al
		or rcx, r8
		rol ax, 0xe
		cwd
		not rcx
		cmovb rdi, rdx
		bswap esi
		mov qword ptr [rdi + r9 - 0x1c], rcx
		xor rdx, 0x4d16bfbb
		mov ecx, esi
		lea r9, [r9 + rdi*8 - 0x118]
		lea r8, [rcx*2 + 0x7407cc9c]
		jg 0x7ffb72bb866f
1358: UB addr = 7ffb7292b7a4 with ID: 421 yields:
		mov rdx, qword ptr [r9]
		mov esi, 0xcc956dbf
		and rsi, rsi
		mov rbp, qword ptr [r9 + 8]
		call 0x7ffb729d2e63
1359: UB addr = 7ffb729d2e63 with ID: 422 yields:
		mov qword ptr [rsp], 0x750496b2
		movzx eax, sil
		lea r9, [r9 + rax - 0xaf]
		adc rdx, rbp
		mov ecx, dword ptr [rsp + rax*8 - 0x5f6]
		shr qword ptr [rsp + rax - 0xbf], cl
		mov rax, rdx
		movzx edx, byte ptr [r11 + rcx - 0x7504]
		not byte ptr [rsp + rcx - 0x7504]
		movzx edi, cx
		pop r8
		xor dl, r10b
		sub ecx, esi
		btr rcx, rdi
		rol dl, 1
		lea rsi, [r8 + rsi*2 + 0x538bcc17]
		lea rbp, [rdi + rdi - 0x77c6adc7]
		neg dl
		xadd dil, cl
		not edi
		ror dl, 1
		neg dl
		inc rdi
		setge dil
		xor r10b, dl
		ror rdi, 0xbd
		adc rdx, rsp
		sar rbp, cl
		mov qword ptr [rdx + rcx - 0x336b0704], rax
		not ecx
		movsx edx, bp
		lea r11, [rbp + r11 + 0x77c5c41]
		sbb esi, ebp
		xchg bp, si
		bts edx, 0x9e
		sar edx, 0x8a
		movsx eax, bpl
		bts rdx, 0x30
		bts rdi, 0x15
		btr rdi, 0x38
		lea r8d, [rcx + r8 - 0x7564da3f]
		adc esi, 0xc3265c34
		push r10
		call 0x7ffb72bbd739
1360: UB addr = 7ffb7297abdd with ID: 337 yields:
		mov esi, 0xe23a8007
		mov ecx, esi
		mov edi, ecx
		mov ebp, dword ptr [r11]
		lea rdx, [rcx - 0x276cba61]
		xor ebp, r10d
		mov eax, 0x42891739
		call 0x7ffb72b980c4
1361: UB addr = 7ffb72b980c4 with ID: 338 yields:
		sub ebp, 0xa388371a
		ror ebp, 1
		btr rax, rdi
		neg ebp
		sub ebp, 0x4aa05d04
		mov qword ptr [rsp + rax - 0x42891739], -0x71580247
		dec word ptr [rsp + rax - 0x42891734]
		bswap ebp
		sal word ptr [rsp + rax - 0x42891735], 0x68
		and dword ptr [rsp + rax - 0x42891736], ecx
		mov qword ptr [rsp + rax - 0x42891739], r10
		sal al, cl
		not rax
		adc ecx, edi
		xor dword ptr [rsp + rax + 0x42891781], ebp
		pop r10
		cdq
		add cx, 0x5925
		movsxd rbp, ebp
		add rbx, rbp
		neg eax
		inc ecx
		movzx r8d, byte ptr [rax + r11 - 0x4289177d]
		xor r8b, r10b
		sbb r8b, 0xb4
		sal ax, 0x8a
		xor r8b, dl
		sub r8b, 0x97
		xor r8b, dl
		movzx ebp, cl
		neg r8b
		inc rdx
		add r8b, 0x94
		xor r10b, r8b
		add r8, rsp
		mov rdi, qword ptr [rbp + r8 - 0x34]
		mov qword ptr [r9 + rbp*4 - 0xd8], rdi
		lea rbp, [rcx*4 - 0xeccd278]
		movzx esi, byte ptr [rax + r11 - 0x428903fb]
		call 0x7ffb72bf98c9
1362: UB addr = 7ffb72a9cc67 with ID: 339 yields:
		xor sil, r10b
		inc dil
		setl dl
		sal rdi, cl
		sbb sil, 2
		sar ax, 0x61
		mov qword ptr [rsp + r8 - 0x1d], rcx
		not sil
		xor dl, 0xb5
		inc qword ptr [rsp + rax - 0x4289007d]
		setno byte ptr [rsp + r8 - 0x11]
		neg sil
		btr edi, eax
		lea rcx, [rax*4 - 0x174ebb43]
		dec sil
		or qword ptr [rsp + rax - 0x4289007d], rdx
		shl word ptr [rsp + r8*2 - 0x30], 0x25
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x10]
		mov rdx, qword ptr [rax + rsi - 0x42890080]
		inc dword ptr [rsp + r8 - 0x13]
		xadd r8, rbp
		mov qword ptr [rax + r9 - 0x42890090], rdx
		lea rsi, [rdi*2 - 0x1dfee179]
		lea r9, [rbp + r9 - 0x2d]
		pop rax
		pop r8
		jne 0x7ffb72acc73a
1363: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1364: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1365: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1366: UB addr = 7ffb72ad1e3f with ID: 318 yields:
		push -0x6b5645d1
		mov ebp, dword ptr [rsp + 2]
		mov edi, 0x37064a29
		mov r10, r11
		inc byte ptr [rsp + rdi*2 - 0x6e0c9452]
		push rdi
		mov ecx, 0x7da1230d
		movabs rdi, 0x7ff9e7130000
		shl dword ptr [rsp + rcx - 0x7da1230d], 0xb8
		call 0x7ffb72bc5400
1367: UB addr = 7ffb72a14907 with ID: 407 yields:
		mov ecx, 0x1eb81b2c
		lea rdi, [rcx + rcx - 0x14d5b7d3]
		mov ecx, dword ptr [r11 + rcx - 0x1eb81b2c]
		movsx eax, di
		xor ecx, r10d
		bts edi, eax
		movsx r8d, di
		neg ecx
		mov qword ptr [rsp + rdi*2 - 0x5134fd4a], 0x9b64316
		sub r8, qword ptr [rsp + rdi - 0x289a7ea5]
		dec ecx
		neg ecx
		mov edx, dword ptr [rsp + rdi*2 - 0x5134fd47]
		not dword ptr [rsp + rdi*2 - 0x5134fd48]
		bswap ecx
		add ax, word ptr [rsp + rax*4 - 0x1fa10]
		mov ebp, 0x23bd19a8
		shl di, 0x84
		lea ecx, [rcx + rdi*2 + 0x5fa4a1c]
		mov qword ptr [rsp + rdi - 0x289aea50], r10
		inc r8b
		movsx esi, di
		xor dword ptr [rsp + rax - 0x7e84], ecx
		pop r10
		bts eax, r8d
		neg bpl
		bswap esi
		movsxd rcx, ecx
		add rbx, rcx
		mov rdi, qword ptr [r9 + rdi - 0x289aea50]
		cwde
		mov ecx, 0xc6318c2f
		not eax
		movzx r8d, byte ptr [r11 + rdx*2 - 0xe]
		push rdx
		sub dx, 0xc027
		xor r8b, r10b
		xor r8b, 0x2a
		ror r8b, 1
		sub r8b, sil
		and bp, dx
		rol r8b, 1
		ror dword ptr [rsp + rdx - 0x3fe0], 0xc1
		adc r8b, 0x93
		xor r10b, r8b
		neg rax
		setno byte ptr [rsp + rdx*4 - 0xff88]
		lea r8, [rsp + r8 + 8]
		add word ptr [rsp + rdx*4 - 0xff86], 0x49b9
		call 0x7ffb72c31e65
1368: UB addr = 7ffb729f2dd8 with ID: 408 yields:
		setnp byte ptr [rsp + rdx*2 - 0x7fc4]
		push rsi
		lea r11, [r11 + rdx*2 - 0x7fbd]
		not byte ptr [rsp + rdx - 0x3fdc]
		not eax
		mov edi, esi
		xor r8w, r10w
		btc edx, ebp
		xchg sil, dil
		neg si
		rol r8w, 1
		and bpl, dil
		bswap rdi
		not r8w
		xor r8w, 0xb1a4
		dec dx
		shl word ptr [rsp + rdx - 0x3fe1], 0x25
		xchg dword ptr [rsp + rdx - 0x3fd6], eax
		sub r8w, si
		cbw
		xor r8w, 0x7b88
		xor r10w, r8w
		push rdx
		lea r8, [rsp + r8 + 0x18]
		mov qword ptr [r8 + rdx*8 - 0x1ff10], rcx
		inc dword ptr [rsp + rdx*4 - 0xff83]
		mov qword ptr [rsp + rdx*2 - 0x7fc4], rbx
		ret 0x10
1369: UB addr = 7ffb72aa6116 with ID: 423 yields:
		xor dil, 0x1a
		neg bp
		lea r8, [rax + rbp*2 + 0x771d288f]
		push rsi
		sbb dil, 0x90
		push rbp
		xor r10b, dil
		lea rdi, [rsp + rdi + 0x38]
		mov qword ptr [rdi + rdx], rcx
		mov qword ptr [rsp + rdx], rbx
		ret 0x30
1370: UB addr = 7ffb72934dee with ID: 424 yields:
		mov ecx, 0xc631d99a
		movsx edi, cx
		mov rsi, qword ptr [r9]
		movzx ecx, word ptr [r11]
		xor cx, r10w
		mov ebp, edi
		movzx eax, bp
		movsx r8d, di
		rol cx, 1
		call 0x7ffb72dbcfd7
1371: UB addr = 7ffb728d7879 with ID: 319 yields:
		mov r8d, 0xa005a437
		mov rcx, qword ptr [r9]
		lea rsi, [r8*4 + 0x618344a4]
		movsx edi, r8w
		movzx edx, byte ptr [r11]
		neg rdi
		xor dl, r10b
		movsx eax, sil
		sub eax, 0x433a0c1f
		rol dl, 1
		dec esi
		movzx ebp, di
		inc dl
		xor dl, 0x1a
		sub r8w, di
		sbb dl, 0x91
		call 0x7ffb72c2c311
1372: UB addr = 7ffb72a28a01 with ID: 320 yields:
		rol dword ptr [rsp + rbp - 0x5bc0], 0x85
		cdqe
		mov qword ptr [rdx + rax + 0x433a0c9f], rcx
		mov qword ptr [rsp + rax + 0x433a0c9f], rax
		bts eax, ebp
		mov rdx, qword ptr [rbp + r9 - 0x5bc1]
		xor byte ptr [rsp + rbp - 0x5bbd], al
		bts esi, 1
		push rdi
		movzx r8d, byte ptr [r11 + rbp - 0x5bc8]
		sub rax, rax
		xor r8b, r10b
		dec eax
		sbb r8b, al
		rol r8b, 1
		xor r8b, al
		neg r8b
		add bp, 0x8a2
		xor r10b, r8b
		lea r8, [rsp + r8 + 0x18]
		dec esi
		dec dword ptr [rsp + rbp - 0x645e]
		mov qword ptr [r8 + rbp - 0x646b], rdx
		sal rax, 0xd2
		lea r8, [rdi + rsi*8 + 0x1f94548b]
		sar r8b, 0xe4
		mov rsi, qword ptr [r9 + rbp*2 - 0xc8c6]
		movsx edx, word ptr [rsp + rbp*2 - 0xc8d0]
		lea r9, [rbp + r9 - 0x6453]
		xchg ecx, edi
		call 0x7ffb72bda643
1373: UB addr = 7ffb7290de42 with ID: 321 yields:
		xor dword ptr [rsp + rdx*2 + 0x10], r8d
		mov r10, qword ptr [rsp + rdx*2 + 0x10]
		call 0x7ffb72d48e47
1374: UB addr = 7ffb728d7879 with ID: 319 yields:
		mov r8d, 0xa005a437
		mov rcx, qword ptr [r9]
		lea rsi, [r8*4 + 0x618344a4]
		movsx edi, r8w
		movzx edx, byte ptr [r11]
		neg rdi
		xor dl, r10b
		movsx eax, sil
		sub eax, 0x433a0c1f
		rol dl, 1
		dec esi
		movzx ebp, di
		inc dl
		xor dl, 0x1a
		sub r8w, di
		sbb dl, 0x91
		call 0x7ffb72c2c311
1375: UB addr = 7ffb72a28a01 with ID: 320 yields:
		rol dword ptr [rsp + rbp - 0x5bc0], 0x85
		cdqe
		mov qword ptr [rdx + rax + 0x433a0c9f], rcx
		mov qword ptr [rsp + rax + 0x433a0c9f], rax
		bts eax, ebp
		mov rdx, qword ptr [rbp + r9 - 0x5bc1]
		xor byte ptr [rsp + rbp - 0x5bbd], al
		bts esi, 1
		push rdi
		movzx r8d, byte ptr [r11 + rbp - 0x5bc8]
		sub rax, rax
		xor r8b, r10b
		dec eax
		sbb r8b, al
		rol r8b, 1
		xor r8b, al
		neg r8b
		add bp, 0x8a2
		xor r10b, r8b
		lea r8, [rsp + r8 + 0x18]
		dec esi
		dec dword ptr [rsp + rbp - 0x645e]
		mov qword ptr [r8 + rbp - 0x646b], rdx
		sal rax, 0xd2
		lea r8, [rdi + rsi*8 + 0x1f94548b]
		sar r8b, 0xe4
		mov rsi, qword ptr [r9 + rbp*2 - 0xc8c6]
		movsx edx, word ptr [rsp + rbp*2 - 0xc8d0]
		lea r9, [rbp + r9 - 0x6453]
		xchg ecx, edi
		call 0x7ffb72bda643
1376: UB addr = 7ffb7290de42 with ID: 321 yields:
		xor dword ptr [rsp + rdx*2 + 0x10], r8d
		mov r10, qword ptr [rsp + rdx*2 + 0x10]
		call 0x7ffb72d48e47
1377: UB addr = 7ffb728d7879 with ID: 319 yields:
		mov r8d, 0xa005a437
		mov rcx, qword ptr [r9]
		lea rsi, [r8*4 + 0x618344a4]
		movsx edi, r8w
		movzx edx, byte ptr [r11]
		neg rdi
		xor dl, r10b
		movsx eax, sil
		sub eax, 0x433a0c1f
		rol dl, 1
		dec esi
		movzx ebp, di
		inc dl
		xor dl, 0x1a
		sub r8w, di
		sbb dl, 0x91
		call 0x7ffb72c2c311
1378: UB addr = 7ffb72a28a01 with ID: 320 yields:
		rol dword ptr [rsp + rbp - 0x5bc0], 0x85
		cdqe
		mov qword ptr [rdx + rax + 0x433a0c9f], rcx
		mov qword ptr [rsp + rax + 0x433a0c9f], rax
		bts eax, ebp
		mov rdx, qword ptr [rbp + r9 - 0x5bc1]
		xor byte ptr [rsp + rbp - 0x5bbd], al
		bts esi, 1
		push rdi
		movzx r8d, byte ptr [r11 + rbp - 0x5bc8]
		sub rax, rax
		xor r8b, r10b
		dec eax
		sbb r8b, al
		rol r8b, 1
		xor r8b, al
		neg r8b
		add bp, 0x8a2
		xor r10b, r8b
		lea r8, [rsp + r8 + 0x18]
		dec esi
		dec dword ptr [rsp + rbp - 0x645e]
		mov qword ptr [r8 + rbp - 0x646b], rdx
		sal rax, 0xd2
		lea r8, [rdi + rsi*8 + 0x1f94548b]
		sar r8b, 0xe4
		mov rsi, qword ptr [r9 + rbp*2 - 0xc8c6]
		movsx edx, word ptr [rsp + rbp*2 - 0xc8d0]
		lea r9, [rbp + r9 - 0x6453]
		xchg ecx, edi
		call 0x7ffb72bda643
1379: UB addr = 7ffb7290de42 with ID: 321 yields:
		xor dword ptr [rsp + rdx*2 + 0x10], r8d
		mov r10, qword ptr [rsp + rdx*2 + 0x10]
		call 0x7ffb72d48e47
1380: UB addr = 7ffb72a7683d with ID: 336 yields:
		inc sil
		lea rdi, [rbp + r8*2 - 0x5f63b048]
		shr rbp, 0xb1
		xor sil, 0x1a
		xor bpl, r8b
		sal rbp, 0x22
		sbb sil, 0x91
		push rbp
		xor r10b, sil
		and edi, dword ptr [rsp + 1]
		inc di
		add r8, -0x4566276a
		lea rsi, [rsp + rsi + 8]
		lea rdx, [r8*8 - 0x63c6a27b]
		mov qword ptr [rsi], rax
		mov eax, dword ptr [r11 + 1]
		xor eax, r10d
		neg eax
		or dl, 0xac
		dec eax
		bswap eax
		ror eax, 1
		bts dx, di
		xadd dword ptr [rsp + 3], r8d
		inc eax
		mov qword ptr [rsp + r8*2 - 0x30800], r10
		inc rbp
		push r8
		sub bp, 0xca7
		xor dword ptr [rsp + r8 - 0x183f8], eax
		mov r10, qword ptr [rsp + r8 - 0x183f8]
		movsxd rax, eax
		push rdx
		add rbx, rax
		pop rcx
		mov qword ptr [rsp + r8*4 - 0x60ff8], r8
		mov rdi, qword ptr [r11 + r8*2 - 0x307fb]
		lea r11, [r11 + r8*2 - 0x307f3]
		movzx esi, word ptr [rsp + r8 - 0x183f8]
		xor rdi, r10
		btc rcx, rsi
		lea rdi, [rdi + r8*4 - 0x5a934783]
		setb dl
		btr ecx, r8d
		not rdi
		push rdx
		shr dword ptr [rsp + r8 - 0x183fe], 0xd8
		xor rdi, 0xffffffffb52dfabc
		neg rdi
		sal dx, 0x6c
		and rcx, 0xffffffffef21d6a6
		pop r8
		xor rdi, 0x594c00b
		neg byte ptr [rsp + r8 - 0x6cff]
		lea rdi, [rdi + r8*8 - 0x63d122f8]
		setl byte ptr [rsp + r8 - 0x6cf3]
		rol bp, cl
		btr rbp, rcx
		xor r10, rdi
		mov qword ptr [r9 + r8*2 - 0xda02], rdi
		not qword ptr [rsp + r8 - 0x6cfe]
		mov qword ptr [rsp + r8 - 0x6d01], rbx
		ret 8
1381: UB addr = 7ffb72a6d865 with ID: 425 yields:
		mov r8, qword ptr [r11]
		mov edi, 0xa41e0b28
		mov esi, edi
		and edi, esi
		xor r8, r10
		xor r8, 0xffffffffc8bc4ab1
		xchg rcx, rdi
		mov edx, ecx
		rol r8, 7
		neg r8
		movsx eax, cx
		movsx ebp, dx
		xor r8, 0xfffffffff821cbaa
		neg esi
		call 0x7ffb72d7919f
1382: UB addr = 7ffb72987afb with ID: 426 yields:
		shl esi, 0x8a
		adc rdx, rbp
		shr cl, 4
		movsx ebp, word ptr [rsp + rdi*2 + 2]
		cmovp bp, di
		mov qword ptr [r9 + rdi - 8], rdx
		rol qword ptr [rsp + rdi], 0x4b
		adc si, cx
		lea r9, [r9 + rdi - 8]
		pop rax
		not rbp
		add edi, dword ptr [rdi + r11 + 8]
		btc cx, r8w
		lea rdx, [rcx + r8*2 - 0x7ed63ce3]
		lea r11, [r8 + r11 - 0x4f]
		xor edi, r10d
		btc rcx, r8
		lea edi, [rdi + r8 - 0x8bbc568]
		call 0x7ffb72d2f54a
1383: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1384: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1385: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1386: UB addr = 7ffb72b976ee with ID: 427 yields:
		mov eax, 0x3aac6396
		mov rsi, qword ptr [r9 + rax*2 - 0x7558c72c]
		ror eax, 0xef
		call 0x7ffb72cd13e1
1387: UB addr = 7ffb72a9fe9e with ID: 428 yields:
		lea ebp, [rdx + rbp - 0x8bbc582]
		rol ebp, 3
		neg ebp
		pop rax
		neg dil
		ror sil, 0x63
		not ebp
		mov qword ptr [rsp + rdx - 0x75], rsi
		mov qword ptr [rsp + rdx*4 - 0x1d4], r10
		dec r8b
		shl esi, 0x4d
		xor dword ptr [rsp + rdx*8 - 0x3a8], ebp
		pop r10
		lea rdx, [rsi*4 + 0xe1bf3be]
		movsxd rbp, ebp
		sub r8b, 0x9d
		add rbx, rbp
		xchg ax, dx
		jmp rbx
1388: UB addr = 7ffb72baa707 with ID: 429 yields:
		mov esi, r8d
		add rbp, qword ptr [rsp + rdx - 0xf1ea]
		ror al, 1
		pop rdi
		neg al
		inc ecx
		add al, cl
		and dword ptr [rsp + rcx*2 + 0xb], 0xfe81ffa7
		rol al, cl
		xor byte ptr [rsp + rcx*2 + 7], sil
		neg qword ptr [rsp + rcx + 0xd]
		not al
		sar rsi, 0xaf
		xor al, 0x13
		add edx, 0xa8abc80
		xor r10b, al
		lea rax, [rsp + rax + 0x18]
		dec sil
		sar byte ptr [rsp + rcx + 4], cl
		add dword ptr [rsp + rcx*4 + 4], r8d
		mov r8, qword ptr [rax + rcx*2 - 2]
		sar ecx, 2
		mov qword ptr [r9 + rcx], r8
		btr cx, si
		shl byte ptr [rsp + rcx*8 + 7], 0x87
		mov qword ptr [rsp + rcx], rbx
		ret 0x10
1389: UB addr = 7ffb7297abdd with ID: 337 yields:
		mov esi, 0xe23a8007
		mov ecx, esi
		mov edi, ecx
		mov ebp, dword ptr [r11]
		lea rdx, [rcx - 0x276cba61]
		xor ebp, r10d
		mov eax, 0x42891739
		call 0x7ffb72b980c4
1390: UB addr = 7ffb72b980c4 with ID: 338 yields:
		sub ebp, 0xa388371a
		ror ebp, 1
		btr rax, rdi
		neg ebp
		sub ebp, 0x4aa05d04
		mov qword ptr [rsp + rax - 0x42891739], -0x71580247
		dec word ptr [rsp + rax - 0x42891734]
		bswap ebp
		sal word ptr [rsp + rax - 0x42891735], 0x68
		and dword ptr [rsp + rax - 0x42891736], ecx
		mov qword ptr [rsp + rax - 0x42891739], r10
		sal al, cl
		not rax
		adc ecx, edi
		xor dword ptr [rsp + rax + 0x42891781], ebp
		pop r10
		cdq
		add cx, 0x5925
		movsxd rbp, ebp
		add rbx, rbp
		neg eax
		inc ecx
		movzx r8d, byte ptr [rax + r11 - 0x4289177d]
		xor r8b, r10b
		sbb r8b, 0xb4
		sal ax, 0x8a
		xor r8b, dl
		sub r8b, 0x97
		xor r8b, dl
		movzx ebp, cl
		neg r8b
		inc rdx
		add r8b, 0x94
		xor r10b, r8b
		add r8, rsp
		mov rdi, qword ptr [rbp + r8 - 0x34]
		mov qword ptr [r9 + rbp*4 - 0xd8], rdi
		lea rbp, [rcx*4 - 0xeccd278]
		movzx esi, byte ptr [rax + r11 - 0x428903fb]
		call 0x7ffb72bf98c9
1391: UB addr = 7ffb72a9cc67 with ID: 339 yields:
		xor sil, r10b
		inc dil
		setl dl
		sal rdi, cl
		sbb sil, 2
		sar ax, 0x61
		mov qword ptr [rsp + r8 - 0x1d], rcx
		not sil
		xor dl, 0xb5
		inc qword ptr [rsp + rax - 0x4289007d]
		setno byte ptr [rsp + r8 - 0x11]
		neg sil
		btr edi, eax
		lea rcx, [rax*4 - 0x174ebb43]
		dec sil
		or qword ptr [rsp + rax - 0x4289007d], rdx
		shl word ptr [rsp + r8*2 - 0x30], 0x25
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x10]
		mov rdx, qword ptr [rax + rsi - 0x42890080]
		inc dword ptr [rsp + r8 - 0x13]
		xadd r8, rbp
		mov qword ptr [rax + r9 - 0x42890090], rdx
		lea rsi, [rdi*2 - 0x1dfee179]
		lea r9, [rbp + r9 - 0x2d]
		pop rax
		pop r8
		jne 0x7ffb72acc73a
1392: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1393: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1394: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1395: UB addr = 7ffb7297abdd with ID: 337 yields:
		mov esi, 0xe23a8007
		mov ecx, esi
		mov edi, ecx
		mov ebp, dword ptr [r11]
		lea rdx, [rcx - 0x276cba61]
		xor ebp, r10d
		mov eax, 0x42891739
		call 0x7ffb72b980c4
1396: UB addr = 7ffb72b980c4 with ID: 338 yields:
		sub ebp, 0xa388371a
		ror ebp, 1
		btr rax, rdi
		neg ebp
		sub ebp, 0x4aa05d04
		mov qword ptr [rsp + rax - 0x42891739], -0x71580247
		dec word ptr [rsp + rax - 0x42891734]
		bswap ebp
		sal word ptr [rsp + rax - 0x42891735], 0x68
		and dword ptr [rsp + rax - 0x42891736], ecx
		mov qword ptr [rsp + rax - 0x42891739], r10
		sal al, cl
		not rax
		adc ecx, edi
		xor dword ptr [rsp + rax + 0x42891781], ebp
		pop r10
		cdq
		add cx, 0x5925
		movsxd rbp, ebp
		add rbx, rbp
		neg eax
		inc ecx
		movzx r8d, byte ptr [rax + r11 - 0x4289177d]
		xor r8b, r10b
		sbb r8b, 0xb4
		sal ax, 0x8a
		xor r8b, dl
		sub r8b, 0x97
		xor r8b, dl
		movzx ebp, cl
		neg r8b
		inc rdx
		add r8b, 0x94
		xor r10b, r8b
		add r8, rsp
		mov rdi, qword ptr [rbp + r8 - 0x34]
		mov qword ptr [r9 + rbp*4 - 0xd8], rdi
		lea rbp, [rcx*4 - 0xeccd278]
		movzx esi, byte ptr [rax + r11 - 0x428903fb]
		call 0x7ffb72bf98c9
1397: UB addr = 7ffb72a9cc67 with ID: 339 yields:
		xor sil, r10b
		inc dil
		setl dl
		sal rdi, cl
		sbb sil, 2
		sar ax, 0x61
		mov qword ptr [rsp + r8 - 0x1d], rcx
		not sil
		xor dl, 0xb5
		inc qword ptr [rsp + rax - 0x4289007d]
		setno byte ptr [rsp + r8 - 0x11]
		neg sil
		btr edi, eax
		lea rcx, [rax*4 - 0x174ebb43]
		dec sil
		or qword ptr [rsp + rax - 0x4289007d], rdx
		shl word ptr [rsp + r8*2 - 0x30], 0x25
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x10]
		mov rdx, qword ptr [rax + rsi - 0x42890080]
		inc dword ptr [rsp + r8 - 0x13]
		xadd r8, rbp
		mov qword ptr [rax + r9 - 0x42890090], rdx
		lea rsi, [rdi*2 - 0x1dfee179]
		lea r9, [rbp + r9 - 0x2d]
		pop rax
		pop r8
		jne 0x7ffb72acc73a
1398: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1399: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1400: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1401: UB addr = 7ffb7297abdd with ID: 337 yields:
		mov esi, 0xe23a8007
		mov ecx, esi
		mov edi, ecx
		mov ebp, dword ptr [r11]
		lea rdx, [rcx - 0x276cba61]
		xor ebp, r10d
		mov eax, 0x42891739
		call 0x7ffb72b980c4
1402: UB addr = 7ffb72b980c4 with ID: 338 yields:
		sub ebp, 0xa388371a
		ror ebp, 1
		btr rax, rdi
		neg ebp
		sub ebp, 0x4aa05d04
		mov qword ptr [rsp + rax - 0x42891739], -0x71580247
		dec word ptr [rsp + rax - 0x42891734]
		bswap ebp
		sal word ptr [rsp + rax - 0x42891735], 0x68
		and dword ptr [rsp + rax - 0x42891736], ecx
		mov qword ptr [rsp + rax - 0x42891739], r10
		sal al, cl
		not rax
		adc ecx, edi
		xor dword ptr [rsp + rax + 0x42891781], ebp
		pop r10
		cdq
		add cx, 0x5925
		movsxd rbp, ebp
		add rbx, rbp
		neg eax
		inc ecx
		movzx r8d, byte ptr [rax + r11 - 0x4289177d]
		xor r8b, r10b
		sbb r8b, 0xb4
		sal ax, 0x8a
		xor r8b, dl
		sub r8b, 0x97
		xor r8b, dl
		movzx ebp, cl
		neg r8b
		inc rdx
		add r8b, 0x94
		xor r10b, r8b
		add r8, rsp
		mov rdi, qword ptr [rbp + r8 - 0x34]
		mov qword ptr [r9 + rbp*4 - 0xd8], rdi
		lea rbp, [rcx*4 - 0xeccd278]
		movzx esi, byte ptr [rax + r11 - 0x428903fb]
		call 0x7ffb72bf98c9
1403: UB addr = 7ffb72a9cc67 with ID: 339 yields:
		xor sil, r10b
		inc dil
		setl dl
		sal rdi, cl
		sbb sil, 2
		sar ax, 0x61
		mov qword ptr [rsp + r8 - 0x1d], rcx
		not sil
		xor dl, 0xb5
		inc qword ptr [rsp + rax - 0x4289007d]
		setno byte ptr [rsp + r8 - 0x11]
		neg sil
		btr edi, eax
		lea rcx, [rax*4 - 0x174ebb43]
		dec sil
		or qword ptr [rsp + rax - 0x4289007d], rdx
		shl word ptr [rsp + r8*2 - 0x30], 0x25
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x10]
		mov rdx, qword ptr [rax + rsi - 0x42890080]
		inc dword ptr [rsp + r8 - 0x13]
		xadd r8, rbp
		mov qword ptr [rax + r9 - 0x42890090], rdx
		lea rsi, [rdi*2 - 0x1dfee179]
		lea r9, [rbp + r9 - 0x2d]
		pop rax
		pop r8
		jne 0x7ffb72acc73a
1404: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1405: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1406: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1407: UB addr = 7ffb7297abdd with ID: 337 yields:
		mov esi, 0xe23a8007
		mov ecx, esi
		mov edi, ecx
		mov ebp, dword ptr [r11]
		lea rdx, [rcx - 0x276cba61]
		xor ebp, r10d
		mov eax, 0x42891739
		call 0x7ffb72b980c4
1408: UB addr = 7ffb72b980c4 with ID: 338 yields:
		sub ebp, 0xa388371a
		ror ebp, 1
		btr rax, rdi
		neg ebp
		sub ebp, 0x4aa05d04
		mov qword ptr [rsp + rax - 0x42891739], -0x71580247
		dec word ptr [rsp + rax - 0x42891734]
		bswap ebp
		sal word ptr [rsp + rax - 0x42891735], 0x68
		and dword ptr [rsp + rax - 0x42891736], ecx
		mov qword ptr [rsp + rax - 0x42891739], r10
		sal al, cl
		not rax
		adc ecx, edi
		xor dword ptr [rsp + rax + 0x42891781], ebp
		pop r10
		cdq
		add cx, 0x5925
		movsxd rbp, ebp
		add rbx, rbp
		neg eax
		inc ecx
		movzx r8d, byte ptr [rax + r11 - 0x4289177d]
		xor r8b, r10b
		sbb r8b, 0xb4
		sal ax, 0x8a
		xor r8b, dl
		sub r8b, 0x97
		xor r8b, dl
		movzx ebp, cl
		neg r8b
		inc rdx
		add r8b, 0x94
		xor r10b, r8b
		add r8, rsp
		mov rdi, qword ptr [rbp + r8 - 0x34]
		mov qword ptr [r9 + rbp*4 - 0xd8], rdi
		lea rbp, [rcx*4 - 0xeccd278]
		movzx esi, byte ptr [rax + r11 - 0x428903fb]
		call 0x7ffb72bf98c9
1409: UB addr = 7ffb72a9cc67 with ID: 339 yields:
		xor sil, r10b
		inc dil
		setl dl
		sal rdi, cl
		sbb sil, 2
		sar ax, 0x61
		mov qword ptr [rsp + r8 - 0x1d], rcx
		not sil
		xor dl, 0xb5
		inc qword ptr [rsp + rax - 0x4289007d]
		setno byte ptr [rsp + r8 - 0x11]
		neg sil
		btr edi, eax
		lea rcx, [rax*4 - 0x174ebb43]
		dec sil
		or qword ptr [rsp + rax - 0x4289007d], rdx
		shl word ptr [rsp + r8*2 - 0x30], 0x25
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x10]
		mov rdx, qword ptr [rax + rsi - 0x42890080]
		inc dword ptr [rsp + r8 - 0x13]
		xadd r8, rbp
		mov qword ptr [rax + r9 - 0x42890090], rdx
		lea rsi, [rdi*2 - 0x1dfee179]
		lea r9, [rbp + r9 - 0x2d]
		pop rax
		pop r8
		jne 0x7ffb72acc73a
1410: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1411: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1412: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1413: UB addr = 7ffb7297abdd with ID: 337 yields:
		mov esi, 0xe23a8007
		mov ecx, esi
		mov edi, ecx
		mov ebp, dword ptr [r11]
		lea rdx, [rcx - 0x276cba61]
		xor ebp, r10d
		mov eax, 0x42891739
		call 0x7ffb72b980c4
1414: UB addr = 7ffb72b980c4 with ID: 338 yields:
		sub ebp, 0xa388371a
		ror ebp, 1
		btr rax, rdi
		neg ebp
		sub ebp, 0x4aa05d04
		mov qword ptr [rsp + rax - 0x42891739], -0x71580247
		dec word ptr [rsp + rax - 0x42891734]
		bswap ebp
		sal word ptr [rsp + rax - 0x42891735], 0x68
		and dword ptr [rsp + rax - 0x42891736], ecx
		mov qword ptr [rsp + rax - 0x42891739], r10
		sal al, cl
		not rax
		adc ecx, edi
		xor dword ptr [rsp + rax + 0x42891781], ebp
		pop r10
		cdq
		add cx, 0x5925
		movsxd rbp, ebp
		add rbx, rbp
		neg eax
		inc ecx
		movzx r8d, byte ptr [rax + r11 - 0x4289177d]
		xor r8b, r10b
		sbb r8b, 0xb4
		sal ax, 0x8a
		xor r8b, dl
		sub r8b, 0x97
		xor r8b, dl
		movzx ebp, cl
		neg r8b
		inc rdx
		add r8b, 0x94
		xor r10b, r8b
		add r8, rsp
		mov rdi, qword ptr [rbp + r8 - 0x34]
		mov qword ptr [r9 + rbp*4 - 0xd8], rdi
		lea rbp, [rcx*4 - 0xeccd278]
		movzx esi, byte ptr [rax + r11 - 0x428903fb]
		call 0x7ffb72bf98c9
1415: UB addr = 7ffb72a9cc67 with ID: 339 yields:
		xor sil, r10b
		inc dil
		setl dl
		sal rdi, cl
		sbb sil, 2
		sar ax, 0x61
		mov qword ptr [rsp + r8 - 0x1d], rcx
		not sil
		xor dl, 0xb5
		inc qword ptr [rsp + rax - 0x4289007d]
		setno byte ptr [rsp + r8 - 0x11]
		neg sil
		btr edi, eax
		lea rcx, [rax*4 - 0x174ebb43]
		dec sil
		or qword ptr [rsp + rax - 0x4289007d], rdx
		shl word ptr [rsp + r8*2 - 0x30], 0x25
		xor r10b, sil
		lea rsi, [rsp + rsi + 0x10]
		mov rdx, qword ptr [rax + rsi - 0x42890080]
		inc dword ptr [rsp + r8 - 0x13]
		xadd r8, rbp
		mov qword ptr [rax + r9 - 0x42890090], rdx
		lea rsi, [rdi*2 - 0x1dfee179]
		lea r9, [rbp + r9 - 0x2d]
		pop rax
		pop r8
		jne 0x7ffb72acc73a
1416: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1417: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1418: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1419: UB addr = 7ffb72b951b2 with ID: 409 yields:
		mov rcx, qword ptr [rdi + rbp - 0x3fad]
		mov qword ptr [r9 + r8*4 - 0x3ffd4], rcx
		lea r9, [r9 + rdi - 0x3fbd]
		xor rax, rsi
		xor r8w, 0xe202
		jae 0x7ffb72acc73a
1420: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1421: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1422: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1423: UB addr = 7ffb72a031b7 with ID: 430 yields:
		pop r8
		xor ax, r10w
		call 0x7ffb72df65d0
1424: UB addr = 7ffb72a8dd1e with ID: 431 yields:
		inc rsi
		lea rax, [rdx*4 - 0x466242c5]
		not bp
		dec sil
		xor byte ptr [rsp + rdi - 0xe725], dil
		dec bp
		xchg dil, sil
		sar word ptr [rsp + rdi - 0xe722], 0x41
		shl r8w, 0x85
		xor r10w, bp
		call 0x7ffb72c8de16
1425: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1426: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1427: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1428: UB addr = 7ffb72a54a67 with ID: 432 yields:
		lea rbp, [r8*8 - 0x1687a79]
		rol cx, 1
		and sil, 0x35
		mov qword ptr [rsp + rsi - 0x51a3925], rbp
		xor cx, 0xe222
		pop rdi
		lea rbp, [r8 + rsi*4 + 0x7b2b434]
		ror cx, 1
		shr r8d, 0x1c
		sal rsi, 0x7b
		sar di, 0x87
		not cx
		ror rsi, 0xbd
		movzx eax, si
		xor r10w, cx
		neg di
		btr rdi, rbp
		adc rcx, rsp
		bts bp, r8w
		dec r8b
		mov rsi, qword ptr [rcx + rsi*8 - 8]
		lea rcx, [rdi - 0x4a61564d]
		bswap r8d
		mov qword ptr [r9 + rbp*2 - 0x4fa6eb3a], rsi
		sub r8w, 0x3a95
		cwde
		movzx ebp, byte ptr [r11 + rbp*2 - 0x4fa6eb30]
		xor bpl, r10b
		add bpl, al
		movsx esi, cx
		rol bpl, 1
		sub eax, ecx
		cwd
		sbb bpl, 1
		rol bpl, 1
		ror r8b, 0x81
		dec si
		shl r8w, 0x48
		xor bpl, 0x85
		not r8
		xor r10b, bpl
		sal dl, 0xc7
		not eax
		je 0x7ffb72c2bd4f
1429: UB addr = 7ffb728fe36d with ID: 433 yields:
		xor dword ptr [rsp + r8 - 0x5aff4ba7], eax
		sar cl, 0x81
		mov r10, qword ptr [rsp + r8 - 0x5aff4ba7]
		movsxd rax, eax
		add rbx, rax
		pop rax
		add rax, 0x312cc
		jmp rax
1430: UB addr = 7ffb72b8b30c with ID: 434 yields:
		mov qword ptr [rsp + rdi - 0x5c56ff27], rdx
		xor r10b, sil
		sar r8w, 0x64
		lea rsi, [rsp + rsi + 0x18]
		xor dword ptr [rsp + rdx*2 - 0x1ffec], eax
		add rbp, qword ptr [rsi + rdx*2 - 0x1fffe]
		xchg dx, di
		neg r8w
		mov qword ptr [rdi + r9 - 0x5c570017], rbp
		jl 0x7ffb72cf22dc
1431: UB addr = 7ffb72acc73a with ID: 327 yields:
		dec rdx
		lea rdx, [rsp + rdx - 0x2021fab8]
		call 0x7ffb72bb57d1
1432: UB addr = 7ffb72b0cf8e with ID: 328 yields:
		lea rsp, [rsp + 0x10]
		ja 0x7ffb728bcf88
1433: UB addr = 7ffb728bcf88 with ID: 329 yields:
		jmp rbx
1434: UB addr = 7ffb72b9690e with ID: 435 yields:
		mov ecx, 0x3931f136
		push rcx
		mov rdx, qword ptr [r9 + rcx*2 - 0x7263e26c]
		sub rbp, rdx
		mov r10d, 0xda962391
		lea r8, [r10 + r10*8 + 0x4803c381]
		lea r9, [rip - 0x15]
		mov r10d, dword ptr [r11]
		movzx eax, r8b
		mov ecx, eax
		lea r11, [r11 + rax*4 - 0x264]
		xadd eax, r8d
		movzx edi, cx
		xor r10d, ebp
		push rcx
		bswap eax
		dec r10d
		shr byte ptr [rsp + r8*2 - 0x132], 6
		bswap r10d
		shl al, 0xc1
		shr rax, 0x16
		mov edx, r8d
		ror r10d, 3
		xor al, dil
		lea r10d, [r10 + r8*2 + 0x3228c97a]
		xchg qword ptr [rsp + r8*2 - 0x134], rcx
		lea rsi, [rcx + 0x7a6de21]
		xor r10d, 0xd7940b1e
		neg word ptr [rsp + r8*2 - 0x130]
		mov qword ptr [rsp + r8*2 - 0x134], rbp
		cmovg rcx, rsi
		shl r8, 0xb
		xor dword ptr [rsp + r8 - 0x4d000], r10d
		pop rbp
		push rax
		inc r8d
		movsxd r10, r10d
		add r9, r10
		mov qword ptr [rsp + r8 - 0x4d001], r9
		ret
1435: UB addr = 7ffb72b76087 with ID: 7 yields:
		adc dl, 0x31
		and word ptr [rsp + r10 + 0xc], r10w
		mov qword ptr [rsp + r10], rsi
		neg qword ptr [rsp + r10*2 + 9]
		xor bpl, dl
		shl qword ptr [rsp + r10 + 5], 0xbf
		lea rdx, [rsp + rdx + 0x18]
		mov byte ptr [rsp + r10*8 + 0xc], sil
		shr r10d, cl
		jne 0x7ffb72bc1057
1436: UB addr = 7ffb72b760b5 with ID: 8 yields:
		mov qword ptr [r10 + rdx], rax
		mov rdx, qword ptr [r10 + rbx + 8]
		lea rbx, [rbx + r10*4 + 0x10]
		setns sil
		or r10b, byte ptr [rsp + r10 + 0x16]
		movzx ecx, word ptr [r11 + r10 + 1]
		movzx eax, word ptr [rsp + r10 + 7]
		xor cx, bp
		shr dil, 0x87
		adc cx, 0xe297
		movsx r8d, byte ptr [rsp + rsi*2 + 0x11]
		not cx
		sub byte ptr [rsp + r10 + 0xd], 0x11
		sal r8d, 0xfc
		sbb cx, 0x4b88
		ror cx, 1
		xor bp, cx
		sal r8d, 0x7b
		call 0x7ffb72be9f6b
1437: UB addr = 7ffb72b47d9c with ID: 5 yields:
		movzx r8d, cx
		xor dl, bpl
		xor dword ptr [rsp + rsi*4 + 0xc], r8d
		pop r10
		not dl
		bts r10, 0x98
		lea rcx, [r10*4 - 0x6c5b2e6c]
		rol r8w, 0x2c
		inc dl
		mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]
		ror dl, 1
		xor word ptr [rsp + r10 - 0x4f1da1c1], r8w
		neg qword ptr [rsp + rsi]
		adc dl, sil
		sar r10d, 0x6b
		xadd qword ptr [rsp + r10 - 0x9e3b4], rdi
		neg dl
		inc r8d
		sub dl, 0xc
		neg rsi
		setl byte ptr [rsp + r10*4 - 0x278ecb]
		rol dl, 1
		xor bpl, dl
		lea rdx, [rsp + rdx + 8]
		mov qword ptr [rdx + r10*8 - 0x4f1da0], rax
		mov edi, dword ptr [r11 + r10 - 0x9e3b2]
		neg qword ptr [rsp + r10*2 - 0x13c768]
		xor edi, ebp
		xor edi, 0xe12e3f2d
		btc r8d, ecx
		rol edi, 1
		sub r8w, 0x64a7
		sal rcx, 0x87
		xor edi, 0x689d25ab
		neg edi
		sal r8w, 0xec
		mov qword ptr [rsp + r10 - 0x9e3b4], rbp
		movsx eax, cl
		btr esi, 0xa1
		xor dword ptr [rsp + r10 - 0x9e3b4], edi
		pop rbp
		xor r10, rax
		movsxd rdi, edi
		adc r9, rdi
		mov rdx, qword ptr [rbx + rsi*2 + 0x10]
		lea rbx, [r10 + rbx - 0x9e39c]
		dec si
		movzx edi, byte ptr [rsi + r11 - 0xfff9]
		lea r11, [r11 + r10 - 0x9e3ad]
		jno 0x7ffb72b7d536
1438: UB addr = 7ffb72b7d536 with ID: 6 yields:
		ror si, 0xf
		rol si, 0xc7
		xor dil, bpl
		lea rcx, [rax*8 + 0x3d3d7905]
		ror dil, 1
		sub rsi, -0x577b11cf
		xor dil, 0xa1
		xor r8d, r8d
		rol r10w, cl
		adc dil, 0x94
		sub cx, cx
		xor dil, 0x9c
		not r8d
		btr si, cx
		xor bpl, dil
		sar r10w, 0xc6
		add rdi, rsp
		xchg ax, r8w
		mov qword ptr [r10 + rdi - 0x9fed3], rdx
		dec si
		add ax, r10w
		sub sil, al
		jmp r9
1439: UB addr = 7ffb72b76087 with ID: 7 yields:
		adc dl, 0x31
		and word ptr [rsp + r10 + 0xc], r10w
		mov qword ptr [rsp + r10], rsi
		neg qword ptr [rsp + r10*2 + 9]
		xor bpl, dl
		shl qword ptr [rsp + r10 + 5], 0xbf
		lea rdx, [rsp + rdx + 0x18]
		mov byte ptr [rsp + r10*8 + 0xc], sil
		shr r10d, cl
		jne 0x7ffb72bc1057
1440: UB addr = 7ffb72b760b5 with ID: 8 yields:
		mov qword ptr [r10 + rdx], rax
		mov rdx, qword ptr [r10 + rbx + 8]
		lea rbx, [rbx + r10*4 + 0x10]
		setns sil
		or r10b, byte ptr [rsp + r10 + 0x16]
		movzx ecx, word ptr [r11 + r10 + 1]
		movzx eax, word ptr [rsp + r10 + 7]
		xor cx, bp
		shr dil, 0x87
		adc cx, 0xe297
		movsx r8d, byte ptr [rsp + rsi*2 + 0x11]
		not cx
		sub byte ptr [rsp + r10 + 0xd], 0x11
		sal r8d, 0xfc
		sbb cx, 0x4b88
		ror cx, 1
		xor bp, cx
		sal r8d, 0x7b
		call 0x7ffb72be9f6b
1441: UB addr = 7ffb72b76087 with ID: 7 yields:
		adc dl, 0x31
		and word ptr [rsp + r10 + 0xc], r10w
		mov qword ptr [rsp + r10], rsi
		neg qword ptr [rsp + r10*2 + 9]
		xor bpl, dl
		shl qword ptr [rsp + r10 + 5], 0xbf
		lea rdx, [rsp + rdx + 0x18]
		mov byte ptr [rsp + r10*8 + 0xc], sil
		shr r10d, cl
		jne 0x7ffb72bc1057
1442: UB addr = 7ffb72b760b5 with ID: 8 yields:
		mov qword ptr [r10 + rdx], rax
		mov rdx, qword ptr [r10 + rbx + 8]
		lea rbx, [rbx + r10*4 + 0x10]
		setns sil
		or r10b, byte ptr [rsp + r10 + 0x16]
		movzx ecx, word ptr [r11 + r10 + 1]
		movzx eax, word ptr [rsp + r10 + 7]
		xor cx, bp
		shr dil, 0x87
		adc cx, 0xe297
		movsx r8d, byte ptr [rsp + rsi*2 + 0x11]
		not cx
		sub byte ptr [rsp + r10 + 0xd], 0x11
		sal r8d, 0xfc
		sbb cx, 0x4b88
		ror cx, 1
		xor bp, cx
		sal r8d, 0x7b
		call 0x7ffb72be9f6b
1443: UB addr = 7ffb72a6dc74 with ID: 9 yields:
		mov qword ptr [rsp + rax*4 + 0x860000c], rbp
		shl r10, 0xf5
		sbb rsi, rdx
		xor dword ptr [rsp + rax*2 + 0x430000a], ecx
		add word ptr [rsp + rax*2 + 0x4300004], ax
		sal edx, 0xca
		btr edi, eax
		mov rbp, qword ptr [rsp + rdx*8 + 8]
		dec di
		mov qword ptr [rsp + rdx], rdx
		movsxd rcx, ecx
		mov r8d, 0x869b6ea2
		sbb r10, rdi
		add word ptr [rsp + rdx], di
		adc r9, rcx
		sal sil, 0x46
		mov rdi, qword ptr [rbx + rdx + 0x10]
		mov qword ptr [rsp + rdx*2 + 8], -0x6dd6a777
		jb 0x7ffb72dadbd6
1444: UB addr = 7ffb72a6dcd2 with ID: 10 yields:
		lea rbx, [rdx + rbx + 0x18]
		neg qword ptr [rsp + rdx*8 + 8]
		setb r8b
		movzx esi, word ptr [r11 + rax + 0x2180007]
		lea r11, [r11 + rdx + 8]
		push rdx
		xor si, bp
		call 0x7ffb72c3e2f2
1445: UB addr = 7ffb72b47d9c with ID: 5 yields:
		movzx r8d, cx
		xor dl, bpl
		xor dword ptr [rsp + rsi*4 + 0xc], r8d
		pop r10
		not dl
		bts r10, 0x98
		lea rcx, [r10*4 - 0x6c5b2e6c]
		rol r8w, 0x2c
		inc dl
		mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]
		ror dl, 1
		xor word ptr [rsp + r10 - 0x4f1da1c1], r8w
		neg qword ptr [rsp + rsi]
		adc dl, sil
		sar r10d, 0x6b
		xadd qword ptr [rsp + r10 - 0x9e3b4], rdi
		neg dl
		inc r8d
		sub dl, 0xc
		neg rsi
		setl byte ptr [rsp + r10*4 - 0x278ecb]
		rol dl, 1
		xor bpl, dl
		lea rdx, [rsp + rdx + 8]
		mov qword ptr [rdx + r10*8 - 0x4f1da0], rax
		mov edi, dword ptr [r11 + r10 - 0x9e3b2]
		neg qword ptr [rsp + r10*2 - 0x13c768]
		xor edi, ebp
		xor edi, 0xe12e3f2d
		btc r8d, ecx
		rol edi, 1
		sub r8w, 0x64a7
		sal rcx, 0x87
		xor edi, 0x689d25ab
		neg edi
		sal r8w, 0xec
		mov qword ptr [rsp + r10 - 0x9e3b4], rbp
		movsx eax, cl
		btr esi, 0xa1
		xor dword ptr [rsp + r10 - 0x9e3b4], edi
		pop rbp
		xor r10, rax
		movsxd rdi, edi
		adc r9, rdi
		mov rdx, qword ptr [rbx + rsi*2 + 0x10]
		lea rbx, [r10 + rbx - 0x9e39c]
		dec si
		movzx edi, byte ptr [rsi + r11 - 0xfff9]
		lea r11, [r11 + r10 - 0x9e3ad]
		jno 0x7ffb72b7d536
1446: UB addr = 7ffb72b7d536 with ID: 6 yields:
		ror si, 0xf
		rol si, 0xc7
		xor dil, bpl
		lea rcx, [rax*8 + 0x3d3d7905]
		ror dil, 1
		sub rsi, -0x577b11cf
		xor dil, 0xa1
		xor r8d, r8d
		rol r10w, cl
		adc dil, 0x94
		sub cx, cx
		xor dil, 0x9c
		not r8d
		btr si, cx
		xor bpl, dil
		sar r10w, 0xc6
		add rdi, rsp
		xchg ax, r8w
		mov qword ptr [r10 + rdi - 0x9fed3], rdx
		dec si
		add ax, r10w
		sub sil, al
		jmp r9
1447: UB addr = 7ffb72b9db35 with ID: 11 yields:
		xor rbp, r10
		mov qword ptr [rsp + rsi - 0xffae], rdx
		xor r8, rax
		btc esi, ecx
		mov qword ptr [rsi + rbx - 0xffb6], r10
		push rsi
		neg ecx
		xadd eax, esi
		movzx eax, byte ptr [rax + r11 - 0x2000ff91]
		shr di, 0xed
		or dx, 0xec87
		lea r11, [r11 + rdx*4 - 0x3f607]
		call 0x7ffb72c67c09
1448: UB addr = 7ffb728df27b with ID: 12 yields:
		mov rdi, qword ptr [rax + rdi + 0x5519fffd]
		pop rsi
		adc rsi, 0x18852e
		jmp rsi
1449: UB addr = 7ffb72b7261d with ID: 527 yields:
		mov r10d, 0x6980f73e
		movzx eax, r10b
		btc ax, 0xae
		mov rsi, qword ptr [rax + rbx - 0x403e]
		movsx ecx, al
		mov edi, ecx
		mov rcx, qword ptr [rbx + r10 - 0x6980f736]
		adc rsi, rcx
		btr di, 0xa7
		xor rax, rax
		mov qword ptr [rbx + r10 - 0x6980f736], rsi
		adc eax, dword ptr [r11 + rax*2]
		xor eax, ebp
		neg eax
		sal di, 0x84
		lea rcx, [r10 + rdi*4 - 0x4ef4cfdc]
		ror eax, 2
		btc di, 0x87
		sar r10, cl
		lea eax, [rax + rcx*8 + 0x1bdd2f38]
		push rcx
		not eax
		mov qword ptr [rsp + r10*4], rbp
		xchg r10, rdi
		xor dword ptr [rsp + r10*2 - 0x6c0], eax
		pop rbp
		push rcx
		movsxd rax, eax
		add r9, rax
		movzx edi, byte ptr [r11]
		mov edx, 0x8a286702
		lea rsi, [rdx + 0x219ed34]
		xor dil, bpl
		movzx r8d, sil
		or r8w, dx
		push rdx
		not dil
		mov r10d, r8d
		push r10
		dec dil
		rol dil, 1
		movsx eax, si
		rol r10b, 0xe5
		neg dil
		rol dx, 0x2e
		shr esi, 0x42
		movsx ecx, sil
		xor bpl, dil
		neg r8d
		shl word ptr [rsp + rsi - 0x231094ff], 1
		not cx
		lea rdi, [rsp + rdi + 0x10]
		cwde
		jbe 0x7ffb72efdfcf
1450: UB addr = 7ffb72b9db35 with ID: 11 yields:
		xor rbp, r10
		mov qword ptr [rsp + rsi - 0xffae], rdx
		xor r8, rax
		btc esi, ecx
		mov qword ptr [rsi + rbx - 0xffb6], r10
		push rsi
		neg ecx
		xadd eax, esi
		movzx eax, byte ptr [rax + r11 - 0x2000ff91]
		shr di, 0xed
		or dx, 0xec87
		lea r11, [r11 + rdx*4 - 0x3f607]
		call 0x7ffb72c67c09
1451: UB addr = 7ffb728df27b with ID: 12 yields:
		mov rdi, qword ptr [rax + rdi + 0x5519fffd]
		pop rsi
		adc rsi, 0x18852e
		jmp rsi
1452: UB addr = 7ffb728ec820 with ID: 66 yields:
		mov rdx, qword ptr [rbx]
		mov eax, 0x2e3e62ae
		dec eax
		mov r10, qword ptr [rbx + rax - 0x2e3e62a5]
		add rdx, r10
		push rax
		movsx edi, word ptr [rsp + rax - 0x2e3e62ab]
		add word ptr [rsp + rax*2 - 0x5c7cc556], di
		mov rsi, rdx
		jg 0x7ffb72d73526
1453: UB addr = 7ffb729be318 with ID: 67 yields:
		movsxd r8, r8d
		mov qword ptr [rsp + rax*2 - 0x5c7cc55a], rdi
		add eax, 0x3a96efa2
		pop rsi
		adc r9, r8
		btr esi, 0x1b
		movzx r8d, ax
		shr r10w, cl
		adc rdx, r9
		jmp rdx
1454: UB addr = 7ffb728b6aa3 with ID: 437 yields:
		mov rdi, qword ptr [rbx]
		mov rdx, qword ptr [rbx + 8]
		call 0x7ffb72c76055
1455: UB addr = 7ffb72b6e2b2 with ID: 36 yields:
		lea rcx, [r10 + rcx + 0x17d0c5d9]
		rol rcx, 1
		lea rcx, [rcx + r10 + 0x7f47f23b]
		xor rcx, 0xffffffffe31c4620
		xor rbp, rcx
		shr sil, 0x63
		mov qword ptr [rdi + rbx - 0xa801eb5], rcx
		neg al
		shr ax, 0x43
		movzx edx, byte ptr [r11 + rdi - 0xa801ea5]
		xor dl, bpl
		call 0x7ffb72c71f52
1456: UB addr = 7ffb729f9e35 with ID: 37 yields:
		neg dl
		mov qword ptr [rsp + rdi - 0xa801ea5], r8
		add r10d, eax
		xor dl, 0x2e
		mov qword ptr [rsp + rdi*2 - 0x15003d5a], 0x2cbd7b21
		cdqe
		xor bpl, dl
		lea rdx, [rsp + rdx + 0x18]
		sal rsi, 0x2c
		xor byte ptr [rsp + rdi*2 - 0x15003d4d], 0x95
		sar esi, 0x3c
		mov r10, qword ptr [rdi + rdx - 0xa801ead]
		add rsi, rax
		push rax
		mov qword ptr [rdi + rbx - 0xa801ebd], r10
		xchg qword ptr [rsp + rdi*8 - 0x5400f558], rsi
		mov r8d, dword ptr [r11 + rdi*4 - 0x2a007aab]
		xchg word ptr [rsp + rdi*4 - 0x2a007aa3], ax
		lea r11, [r11 + rdi*2 - 0x15003d4d]
		neg rax
		cqo
		xor r8d, ebp
		shl byte ptr [rsp + rdi - 0xa801e97], 0xa2
		and edi, 0xb49881a3
		movsx r10d, word ptr [rsp + rdi - 0x80008f]
		neg r8d
		push rdi
		ror r8d, 2
		neg r10b
		call 0x7ffb72e8304d
1457: UB addr = 7ffb72b59447 with ID: 46 yields:
		mov r8d, 0x818098a8
		ror al, 1
		movsx esi, r8w
		add al, 4
		not al
		shr r8d, 0x22
		sbb al, 0x9b
		neg al
		xor bpl, al
		shl word ptr [rsp + r8 - 0x20602626], 0xeb
		pop rdi
		adc rax, rsp
		mov rcx, qword ptr [r8 + rax - 0x2060262a]
		movzx eax, si
		mov qword ptr [rdi + rbx - 0x3695281e], rcx
		mov r10d, dword ptr [r8 + r11 - 0x20602629]
		xor rax, 0x4d9cb20a
		lea r11, [r11 + rdi*2 - 0x6d2a5027]
		bt r8, rax
		cdq
		jb 0x7ffb72e38308
1458: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
1459: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
1460: UB addr = 7ffb72b8da15 with ID: 22 yields:
		push 0x643f3989
		mov ecx, 0xe3a653b
		mov edx, dword ptr [rcx + r11 - 0xe3a653b]
		xor edx, ebp
		mov edi, ecx
		movsx r8d, word ptr [rsp + rcx - 0xe3a6538]
		not edx
		rol ecx, 0xb
		lea edx, [rdx + rdi + 0x7065c654]
		ror edx, 1
		not byte ptr [rsp + rdi*2 - 0x1c74ca71]
		bswap edx
		sub edi, 0x1931938f
		xor r8b, 0xa6
		rol edx, 3
		mov qword ptr [rsp + r8*2 - 0x184], rbp
		not r10w
		movzx esi, cx
		xor bp, r10w
		sub rcx, rsi
		lea r10, [rsp + r10 + 8]
		mov qword ptr [rsp + r8 - 0x80c2], rcx
		btc dx, 0x19
		cwde
		mov qword ptr [rcx + r10 - 0x67a40000], rdi
		jb 0x7ffb72c16290
1461: UB addr = 7ffb7295ce41 with ID: 23 yields:
		movzx esi, byte ptr [r8 + r11 - 0x80bc]
		call 0x7ffb72c0b213
1462: UB addr = 7ffb728f7da3 with ID: 24 yields:
		xor dl, ah
		xor sil, 0x2e
		xor bpl, sil
		lea rsi, [rsp + rsi + 0x18]
		inc cl
		shl cx, 3
		mov rax, qword ptr [rcx + rsi - 0x67a40008]
		push r10
		lea rsi, [rcx - 0x277439d4]
		mov qword ptr [rbx + r8*8 - 0x40610], rax
		adc si, word ptr [rsp + rcx - 0x67a3ffef]
		call 0x7ffb72932bc2
1463: UB addr = 7ffb72932bc2 with ID: 25 yields:
		push r8
		mov qword ptr [rsp + r8*2 - 0x10184], r9
		ret 0x28
1464: UB addr = 7ffb72ba220a with ID: 108 yields:
		dec dword ptr [rsp + r8 - 0x462c01fa]
		setne sil
		lea rcx, [r8 + rcx + 0x30c33446]
		neg rcx
		inc rcx
		ror r8b, 0xa1
		cmovno ax, word ptr [rsp + r8 - 0x462c01f2]
		cwde
		xor rcx, 0xffffffff95af2610
		neg rcx
		sal dil, 0xc3
		sar dx, 0xc1
		btr rdi, 0x9b
		xor rbp, rcx
		mov qword ptr [rbx + rax*4 - 0x410], rcx
		bts edx, esi
		mov eax, dword ptr [rax + r11 - 0xf7]
		sbb r8, -0x76f0d6d3
		or dword ptr [rsp + 7], r8d
		xor eax, ebp
		lea rcx, [rdx*4 + 0x333a9e34]
		shl dil, 0x87
		neg eax
		xor r8w, 0x3dbd
		setno dil
		lea eax, [rax + r8 - 0x23818e3e]
		call 0x7ffb72c53b73
1465: UB addr = 7ffb729dd783 with ID: 109 yields:
		push r8
		xor r10, 0xffffffff95af2610
		dec ax
		btr si, dx
		cwd
		neg r10
		xor rbp, r10
		pop rdi
		mov qword ptr [rbx + rax*8 - 0x380], r10
		lea rbx, [rbx + rax*4 - 0x1cc]
		or qword ptr [rsp + rax*4 - 0x19c], rax
		pop rcx
		pop rdi
		pop r10
		pop rcx
		jge 0x7ffb72eb83a2
1466: UB addr = 7ffb72b59447 with ID: 46 yields:
		mov r8d, 0x818098a8
		ror al, 1
		movsx esi, r8w
		add al, 4
		not al
		shr r8d, 0x22
		sbb al, 0x9b
		neg al
		xor bpl, al
		shl word ptr [rsp + r8 - 0x20602626], 0xeb
		pop rdi
		adc rax, rsp
		mov rcx, qword ptr [r8 + rax - 0x2060262a]
		movzx eax, si
		mov qword ptr [rdi + rbx - 0x3695281e], rcx
		mov r10d, dword ptr [r8 + r11 - 0x20602629]
		xor rax, 0x4d9cb20a
		lea r11, [r11 + rdi*2 - 0x6d2a5027]
		bt r8, rax
		cdq
		jb 0x7ffb72e38308
1467: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
1468: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
1469: UB addr = 7ffb7298f853 with ID: 33 yields:
		mov r8d, dword ptr [r11]
		xor edi, edi
		lea r11, [rdi + r11 + 4]
		mov esi, 0x529e369e
		movsx ecx, di
		xor r8d, ebp
		add ecx, esi
		sbb r8d, 0xd9bf8d9b
		call 0x7ffb72c0da85
1470: UB addr = 7ffb728b6aa3 with ID: 437 yields:
		mov rdi, qword ptr [rbx]
		mov rdx, qword ptr [rbx + 8]
		call 0x7ffb72c76055
1471: UB addr = 7ffb72b6e2b2 with ID: 36 yields:
		lea rcx, [r10 + rcx + 0x17d0c5d9]
		rol rcx, 1
		lea rcx, [rcx + r10 + 0x7f47f23b]
		xor rcx, 0xffffffffe31c4620
		xor rbp, rcx
		shr sil, 0x63
		mov qword ptr [rdi + rbx - 0xa801eb5], rcx
		neg al
		shr ax, 0x43
		movzx edx, byte ptr [r11 + rdi - 0xa801ea5]
		xor dl, bpl
		call 0x7ffb72c71f52
1472: UB addr = 7ffb729f9e35 with ID: 37 yields:
		neg dl
		mov qword ptr [rsp + rdi - 0xa801ea5], r8
		add r10d, eax
		xor dl, 0x2e
		mov qword ptr [rsp + rdi*2 - 0x15003d5a], 0x2cbd7b21
		cdqe
		xor bpl, dl
		lea rdx, [rsp + rdx + 0x18]
		sal rsi, 0x2c
		xor byte ptr [rsp + rdi*2 - 0x15003d4d], 0x95
		sar esi, 0x3c
		mov r10, qword ptr [rdi + rdx - 0xa801ead]
		add rsi, rax
		push rax
		mov qword ptr [rdi + rbx - 0xa801ebd], r10
		xchg qword ptr [rsp + rdi*8 - 0x5400f558], rsi
		mov r8d, dword ptr [r11 + rdi*4 - 0x2a007aab]
		xchg word ptr [rsp + rdi*4 - 0x2a007aa3], ax
		lea r11, [r11 + rdi*2 - 0x15003d4d]
		neg rax
		cqo
		xor r8d, ebp
		shl byte ptr [rsp + rdi - 0xa801e97], 0xa2
		and edi, 0xb49881a3
		movsx r10d, word ptr [rsp + rdi - 0x80008f]
		neg r8d
		push rdi
		ror r8d, 2
		neg r10b
		call 0x7ffb72e8304d
1473: UB addr = 7ffb72b59447 with ID: 46 yields:
		mov r8d, 0x818098a8
		ror al, 1
		movsx esi, r8w
		add al, 4
		not al
		shr r8d, 0x22
		sbb al, 0x9b
		neg al
		xor bpl, al
		shl word ptr [rsp + r8 - 0x20602626], 0xeb
		pop rdi
		adc rax, rsp
		mov rcx, qword ptr [r8 + rax - 0x2060262a]
		movzx eax, si
		mov qword ptr [rdi + rbx - 0x3695281e], rcx
		mov r10d, dword ptr [r8 + r11 - 0x20602629]
		xor rax, 0x4d9cb20a
		lea r11, [r11 + rdi*2 - 0x6d2a5027]
		bt r8, rax
		cdq
		jb 0x7ffb72e38308
1474: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
1475: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
1476: UB addr = 7ffb72b9db35 with ID: 11 yields:
		xor rbp, r10
		mov qword ptr [rsp + rsi - 0xffae], rdx
		xor r8, rax
		btc esi, ecx
		mov qword ptr [rsi + rbx - 0xffb6], r10
		push rsi
		neg ecx
		xadd eax, esi
		movzx eax, byte ptr [rax + r11 - 0x2000ff91]
		shr di, 0xed
		or dx, 0xec87
		lea r11, [r11 + rdx*4 - 0x3f607]
		call 0x7ffb72c67c09
1477: UB addr = 7ffb728df27b with ID: 12 yields:
		mov rdi, qword ptr [rax + rdi + 0x5519fffd]
		pop rsi
		adc rsi, 0x18852e
		jmp rsi
1478: UB addr = 7ffb728ec820 with ID: 66 yields:
		mov rdx, qword ptr [rbx]
		mov eax, 0x2e3e62ae
		dec eax
		mov r10, qword ptr [rbx + rax - 0x2e3e62a5]
		add rdx, r10
		push rax
		movsx edi, word ptr [rsp + rax - 0x2e3e62ab]
		add word ptr [rsp + rax*2 - 0x5c7cc556], di
		mov rsi, rdx
		jg 0x7ffb72d73526
1479: UB addr = 7ffb729be318 with ID: 67 yields:
		movsxd r8, r8d
		mov qword ptr [rsp + rax*2 - 0x5c7cc55a], rdi
		add eax, 0x3a96efa2
		pop rsi
		adc r9, r8
		btr esi, 0x1b
		movzx r8d, ax
		shr r10w, cl
		adc rdx, r9
		jmp rdx
1480: UB addr = 7ffb72b71663 with ID: 34 yields:
		mov edx, 0xb4a57380
		mov r10, qword ptr [rbx]
		movsx edi, dx
		sal edi, 0x6f
		xor dl, dil
		movzx eax, byte ptr [r11 + rdi*2 - 0x73800000]
		not dx
		xor al, bpl
		movzx r8d, dx
		btc si, 0x39
		xor dword ptr [rsp + rax*2 - 0xf520], ecx
		inc di
		mov rbp, qword ptr [rsp + rax*4 - 0x1ea48]
		ror r8b, 0xe1
		movsxd rcx, ecx
		add r9, rcx
		mov rcx, qword ptr [rax + r11 - 0xf523]
		lea r11, [r11 + rax - 0xf51b]
		xor rcx, rbp
		shl rsi, 0x4b
		ror dil, 0x46
		not rcx
		jae 0x7ffb72f12ace
1481: UB addr = 7ffb72aa2acd with ID: 35 yields:
		lea rcx, [rax + rcx - 0x42a3fed1]
		cwd
		push rdi
		xor al, r8b
		xor rbp, rcx
		shr r10d, 0x81
		mov qword ptr [rax + rbx - 0xf583], rcx
		mov qword ptr [rsp + rax - 0xf583], r9
		ret 0x18
1482: UB addr = 7ffb72b6e2b2 with ID: 36 yields:
		lea rcx, [r10 + rcx + 0x17d0c5d9]
		rol rcx, 1
		lea rcx, [rcx + r10 + 0x7f47f23b]
		xor rcx, 0xffffffffe31c4620
		xor rbp, rcx
		shr sil, 0x63
		mov qword ptr [rdi + rbx - 0xa801eb5], rcx
		neg al
		shr ax, 0x43
		movzx edx, byte ptr [r11 + rdi - 0xa801ea5]
		xor dl, bpl
		call 0x7ffb72c71f52
1483: UB addr = 7ffb729f9e35 with ID: 37 yields:
		neg dl
		mov qword ptr [rsp + rdi - 0xa801ea5], r8
		add r10d, eax
		xor dl, 0x2e
		mov qword ptr [rsp + rdi*2 - 0x15003d5a], 0x2cbd7b21
		cdqe
		xor bpl, dl
		lea rdx, [rsp + rdx + 0x18]
		sal rsi, 0x2c
		xor byte ptr [rsp + rdi*2 - 0x15003d4d], 0x95
		sar esi, 0x3c
		mov r10, qword ptr [rdi + rdx - 0xa801ead]
		add rsi, rax
		push rax
		mov qword ptr [rdi + rbx - 0xa801ebd], r10
		xchg qword ptr [rsp + rdi*8 - 0x5400f558], rsi
		mov r8d, dword ptr [r11 + rdi*4 - 0x2a007aab]
		xchg word ptr [rsp + rdi*4 - 0x2a007aa3], ax
		lea r11, [r11 + rdi*2 - 0x15003d4d]
		neg rax
		cqo
		xor r8d, ebp
		shl byte ptr [rsp + rdi - 0xa801e97], 0xa2
		and edi, 0xb49881a3
		movsx r10d, word ptr [rsp + rdi - 0x80008f]
		neg r8d
		push rdi
		ror r8d, 2
		neg r10b
		call 0x7ffb72e8304d
1484: UB addr = 7ffb729b7a13 with ID: 99 yields:
		mov r10d, 0x40b8f9a2
		mov rdi, qword ptr [rbx + r10 - 0x40b8f9a2]
		lea rdx, [r10*4 - 0x79dabbd0]
		or r10, 0xffffffffa523a11f
		movzx ecx, byte ptr [r11 + r10*4 + 0x69101904]
		not r10
		xor cl, bpl
		ror cl, 1
		ror edx, 0x33
		mov r8d, r10d
		movzx eax, r8w
		neg cl
		bswap rax
		add r10d, 0xe298ffa4
		xor cl, 0x28
		lea r8, [r8 + rdx*2 + 0x42278f03]
		or dx, 0x308b
		jge 0x7ffb72d56de2
1485: UB addr = 7ffb72b76798 with ID: 100 yields:
		bswap r10d
		cdqe
		btc si, ax
		not r10d
		btr dx, 0x85
		neg r10d
		btc rdx, 0x3c
		btc rdx, rsi
		push rbp
		rol dx, 0xc7
		xor dword ptr [rsp + rax], r10d
		rol dl, 0xc7
		and rsi, 0xffffffffeb87a49f
		sal al, 0x86
		pop rbp
		movsxd r10, r10d
		bswap rsi
		jp 0x7ffb72e71c68
1486: UB addr = 7ffb72b59447 with ID: 46 yields:
		mov r8d, 0x818098a8
		ror al, 1
		movsx esi, r8w
		add al, 4
		not al
		shr r8d, 0x22
		sbb al, 0x9b
		neg al
		xor bpl, al
		shl word ptr [rsp + r8 - 0x20602626], 0xeb
		pop rdi
		adc rax, rsp
		mov rcx, qword ptr [r8 + rax - 0x2060262a]
		movzx eax, si
		mov qword ptr [rdi + rbx - 0x3695281e], rcx
		mov r10d, dword ptr [r8 + r11 - 0x20602629]
		xor rax, 0x4d9cb20a
		lea r11, [r11 + rdi*2 - 0x6d2a5027]
		bt r8, rax
		cdq
		jb 0x7ffb72e38308
1487: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
1488: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
1489: UB addr = 7ffb72ab309a with ID: 101 yields:
		push rbp
		or cx, di
		xor dword ptr [rsp + rdi - 0x32bdfaf1], edx
		ror cx, 0x26
		pop rbp
		movsxd rdx, edx
		lea rdi, [r10 + rdi*2 - 0xae16671]
		neg r10d
		add r9, rdx
		mov rdx, qword ptr [rbx + rcx - 0x32bdffff]
		xchg r8d, ecx
		mov cx, word ptr [rdx + r8*2 - 0x657bfffe]
		mov di, cx
		movsx esi, r10b
		sar rsi, 0x8b
		movsx ecx, r8w
		mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]
		add di, r8w
		movzx r8d, r10w
		push r10
		mov word ptr [rsi + rbx - 0x1ffff7], di
		movsx edi, r10w
		lea rbx, [rbx + rsi - 0x1ffff7]
		mov qword ptr [rsp + rsi - 0x1fffff], r9
		ret
1490: UB addr = 7ffb72b9db35 with ID: 11 yields:
		xor rbp, r10
		mov qword ptr [rsp + rsi - 0xffae], rdx
		xor r8, rax
		btc esi, ecx
		mov qword ptr [rsi + rbx - 0xffb6], r10
		push rsi
		neg ecx
		xadd eax, esi
		movzx eax, byte ptr [rax + r11 - 0x2000ff91]
		shr di, 0xed
		or dx, 0xec87
		lea r11, [r11 + rdx*4 - 0x3f607]
		call 0x7ffb72c67c09
1491: UB addr = 7ffb728df27b with ID: 12 yields:
		mov rdi, qword ptr [rax + rdi + 0x5519fffd]
		pop rsi
		adc rsi, 0x18852e
		jmp rsi
1492: UB addr = 7ffb72b720bc with ID: 71 yields:
		rol rsi, 0x2e
		cqo
		lea rbx, [rbx + rax*2 + 0x1b6c07b0]
		jae 0x7ffb72bd0b16
1493: UB addr = 7ffb729401e6 with ID: 60 yields:
		add cx, 0xddb4
		not cx
		cqo
		rol dl, 0xe4
		movzx esi, r10w
		ror cx, 1
		ror rax, 0x23
		shl r10d, 0xa1
		shl rsi, 0x51
		xor cx, 0xe5b6
		cwde
		xor bp, cx
		xchg r8d, edi
		cdqe
		dec r10b
		add rcx, rsp
		btr edx, edi
		adc rsi, rdi
		call 0x7ffb72e1c459
1494: UB addr = 7ffb729f4df0 with ID: 61 yields:
		sal dx, 0xaa
		shl qword ptr [rsp + rdx*8 + 0x10], 0x90
		lea r8d, [r8 + rdx*2 - 0x7f8e038e]
		rol r8d, 2
		movsx edi, sil
		mov qword ptr [rsp + rdx], -0x714f95ee
		lea rcx, [rdi*8 + 0x4e0035a4]
		mov qword ptr [rsp + rdx + 0x10], rbp
		sub word ptr [rsp + rdx + 0xa], 0x5b8
		or si, 0x87ae
		xor dword ptr [rsp + rdx*2 + 0x10], r8d
		mov rbp, qword ptr [rsp + rdx + 0x10]
		ror rcx, 9
		movsxd r8, r8d
		ror dword ptr [rsp + rdx*2 + 0xa], 0x1f
		mov qword ptr [rsp + rdx + 0x10], 0x4fa44abb
		neg rsi
		add r9, r8
		sar dword ptr [rsp + rdx*2 + 6], cl
		mov qword ptr [rsp + rdx*2], r9
		ret 0x10
1495: UB addr = 7ffb72ac3ddd with ID: 438 yields:
		mov r10d, 0xa587bb20
		mov edx, dword ptr [r11]
		movsx esi, r10b
		lea rdi, [rsi*4 - 0x4afb744b]
		lea rcx, [r10*2 - 0x5a4bd6c1]
		xor edx, ebp
		mov eax, r10d
		xor word ptr [rsp + rsi*4 - 0x70], 0xefbf
		mov qword ptr [rsp + rsi - 0x10], rbp
		pop r10
		adc ecx, eax
		mov qword ptr [rsp + rsi*8 - 0x100], rsi
		xor dword ptr [rsp + rsi - 0x18], edx
		inc byte ptr [rsp + rsi - 0x1d]
		mov word ptr [rsp + rsi*4 - 0x7d], si
		sub si, word ptr [rsp + rsi - 0x1c]
		mov rbp, qword ptr [rsp + rdi*2 + 8]
		movsxd rdx, edx
		inc al
		mov r10d, 0x3b944b9a
		adc r9, rdx
		or di, word ptr [r11 + rdi + 4]
		cqo
		neg rcx
		jbe 0x7ffb72d07207
1496: UB addr = 7ffb729e9a8d with ID: 439 yields:
		lea rdi, [rsp + rdi + 0x18]
		mov rax, qword ptr [rax + rdi - 0x1b287b4]
		add dword ptr [rsp + rdx*4 - 0x76], 0x4597891b
		mov qword ptr [rbx + rdx*2 - 0x48], rax
		rol word ptr [rsp + rdx - 0xc], 0x63
		mov qword ptr [rsp + rdx - 0x20], 0x2d317236
		jnp 0x7ffb72d2d188
1497: UB addr = 7ffb729e9ac0 with ID: 440 yields:
		mov dl, byte ptr [r11 + rdx*2 - 0x3a]
		dec r8w
		mov eax, 0x88b65c05
		lea r11, [r11 + r8 - 0xfff8]
		sub r10d, 0xf4017e9c
		lea r8, [rsi + r8*4 - 0x1cec797d]
		mov edi, dword ptr [rsp + r10 - 0xbfe832e]
		xor dl, bpl
		call 0x7ffb72eeae63
1498: UB addr = 7ffb72b64a2e with ID: 441 yields:
		mov r10d, 0x6291040f
		lea r11, [r10 + r11 - 0x6291040b]
		movzx ecx, r10w
		movsx r8d, cl
		lea rdi, [r10 + r10*4 - 0x43c41f46]
		rol r10, 0x34
		lea esi, [rcx + rsi + 0x7ea02780]
		push r8
		neg qword ptr [rsp + rcx*4 - 0x103c]
		movsx eax, cl
		ror esi, 1
		bswap esi
		cqo
		push r10
		call 0x7ffb72b70412
1499: UB addr = 7ffb72b70412 with ID: 442 yields:
		rol esi, 3
		xor r10d, ecx
		push rdi
		mov qword ptr [rsp + r10 - 0x62d07], rbp
		mov qword ptr [rsp + r10*2 - 0xc5a36], rax
		inc byte ptr [rsp + r10*4 - 0x18b475]
		xor dword ptr [rsp + r10*2 - 0xc5a26], esi
		not byte ptr [rsp + r10 - 0x62d1c]
		mov rbp, qword ptr [rsp + r10*2 - 0xc5a26]
		movsxd rsi, esi
		dec qword ptr [rsp + r10 - 0x62d0f]
		add r9, rsi
		xchg dword ptr [rsp + r10 - 0x62d18], edi
		or rdx, qword ptr [rsp + r10 - 0x62d0f]
		shr cl, 0x61
		mov r10, qword ptr [rbx + r10 - 0x62d1f]
		xor di, 0xb9bb
		lea rbx, [rbx + rcx - 0x3ff]
		dec cl
		or eax, dword ptr [rsp + rcx - 0x400]
		mov qword ptr [rsp + rcx*2 - 0x7f4], rax
		mov r8w, word ptr [r11 + r8*2 - 0x1e]
		movsx esi, dil
		bts edi, 0xa9
		ror sil, 0x21
		lea r11, [rcx + r11 - 0x404]
		xor r8w, bp
		dec byte ptr [rsp + rcx*2 - 0x7fe]
		or al, cl
		ror r8w, 1
		neg r8w
		push rax
		not r8w
		inc esi
		inc r8w
		xchg qword ptr [rsp + rcx*4 - 0x104a], rdx
		ror cl, 0xe4
		xor bp, r8w
		shr edx, cl
		inc dword ptr [rsp + rdi*2 - 0x16d5c]
		lea r8, [rsp + r8 + 0x28]
		shl rax, cl
		xchg eax, edi
		mov qword ptr [r8 + rcx*2 - 0x1204], r10
		jae 0x7ffb72d744b2
1500: UB addr = 7ffb7290e916 with ID: 77 yields:
		mov r8, qword ptr [rbx + rcx]
		mov r10, qword ptr [rbx + rcx*4 + 8]
		movsx edx, cl
		lea rbx, [rbx + rcx + 0x10]
		mov edi, edx
		or r8, r10
		btr rdi, rdx
		not r8
		shl cx, 0x2f
		call 0x7ffb72a4af7b
1501: UB addr = 7ffb72a4af7b with ID: 78 yields:
		xor rdi, r8
		add cl, byte ptr [r11 + rcx*2]
		xor cl, bpl
		lea r10, [rdx*8 + 0x292eea03]
		push r10
		sar r10b, 0x41
		ror cl, 1
		add dl, 0xaf
		movsx r8d, dx
		neg cl
		mov qword ptr [rsp + rdx*4 - 0x2b4], r10
		bts r8w, 0x20
		adc cl, 0x90
		ror cl, 1
		xor bpl, cl
		lea rcx, [rsp + rcx + 0x10]
		or r8b, r10b
		mov qword ptr [rcx + rdx*2 - 0x15e], rdi
		neg qword ptr [rsp + rdx - 0xa7]
		movsx ecx, r10b
		rol word ptr [rsp + r10 - 0x292ee9fe], 0x85
		mov eax, dword ptr [rdx + r11 - 0xae]
		sar dl, cl
		jp 0x7ffb72d1c765
1502: UB addr = 7ffb7294972a with ID: 443 yields:
		push rax
		xor ecx, 0x689d25ab
		bswap ecx
		not ecx
		neg ecx
		pop rdi
		mov qword ptr [rsp + r8*4 - 0x1c1f4], rbp
		cbw
		xor dword ptr [rsp + r8 - 0x706b], ecx
		push rax
		mov rbp, qword ptr [rsp + r8*2 - 0xe0e6]
		movsxd rcx, ecx
		mov qword ptr [rsp + r8*2 - 0xe0f6], r8
		sar dword ptr [rsp + r8 - 0x7081], 0x6e
		adc r9, rcx
		push r8
		rol qword ptr [rsp + r8*2 - 0xe0fe], 0xd7
		push r10
		mov rsi, qword ptr [rbx + r8 - 0x708b]
		movzx edi, byte ptr [r11 + r8 - 0x707e]
		lea r11, [r11 + r8*8 - 0x38412]
		call 0x7ffb72a9aa4b
1503: UB addr = 7ffb72a9aa4b with ID: 444 yields:
		xadd r10, rax
		cmove rdx, rax
		xor dil, bpl
		xor dil, 0x80
		inc word ptr [rsp + r8 - 0x7066]
		lea rax, [r10 + 0x7a087083]
		rol dil, 1
		mov ecx, dword ptr [rsp + r8 - 0x7052]
		xchg r10, rcx
		not dil
		add dil, 0xa4
		inc rax
		rol ax, 6
		mov qword ptr [rsp + r8 - 0x7083], rcx
		xor bpl, dil
		mov qword ptr [rsp + r8*4 - 0x1c1ec], rdx
		sub r8, -0x157683ef
		lea rdi, [rsp + rdi + 0x40]
		mov qword ptr [rsp + r8*2 - 0x2aede8ac], rax
		mov qword ptr [rdi + r8*4 - 0x55dbd1c8], rsi
		mov esi, ecx
		mov qword ptr [rsp + r8*2 - 0x2aede8e4], r9
		ret 0x38
1504: UB addr = 7ffb72b59447 with ID: 46 yields:
		mov r8d, 0x818098a8
		ror al, 1
		movsx esi, r8w
		add al, 4
		not al
		shr r8d, 0x22
		sbb al, 0x9b
		neg al
		xor bpl, al
		shl word ptr [rsp + r8 - 0x20602626], 0xeb
		pop rdi
		adc rax, rsp
		mov rcx, qword ptr [r8 + rax - 0x2060262a]
		movzx eax, si
		mov qword ptr [rdi + rbx - 0x3695281e], rcx
		mov r10d, dword ptr [r8 + r11 - 0x20602629]
		xor rax, 0x4d9cb20a
		lea r11, [r11 + rdi*2 - 0x6d2a5027]
		bt r8, rax
		cdq
		jb 0x7ffb72e38308
1505: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
1506: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
1507: UB addr = 7ffb72b59447 with ID: 46 yields:
		mov r8d, 0x818098a8
		ror al, 1
		movsx esi, r8w
		add al, 4
		not al
		shr r8d, 0x22
		sbb al, 0x9b
		neg al
		xor bpl, al
		shl word ptr [rsp + r8 - 0x20602626], 0xeb
		pop rdi
		adc rax, rsp
		mov rcx, qword ptr [r8 + rax - 0x2060262a]
		movzx eax, si
		mov qword ptr [rdi + rbx - 0x3695281e], rcx
		mov r10d, dword ptr [r8 + r11 - 0x20602629]
		xor rax, 0x4d9cb20a
		lea r11, [r11 + rdi*2 - 0x6d2a5027]
		bt r8, rax
		cdq
		jb 0x7ffb72e38308
1508: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
1509: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
1510: UB addr = 7ffb729135ab with ID: 445 yields:
		movzx r8d, byte ptr [r11]
		mov ecx, 0x391268a6
		lea rdx, [rcx*8 - 0xa403771]
		lea rdi, [rcx + rdx*8 - 0x56dca8f2]
		xor r8b, bpl
		ror r8b, 1
		movsx esi, cl
		inc r8b
		mov eax, 0x54ac3cb9
		neg r8b
		ror r8b, 1
		xor r8b, 0x2c
		dec r8b
		lea rcx, [r10 + rcx + 0x17d0c5d9]
		rol rcx, 1
		lea rcx, [rcx + r10 + 0x7f47f23b]
		xor rcx, 0xffffffffe31c4620
		xor rbp, rcx
		shr sil, 0x63
		mov qword ptr [rdi + rbx - 0xa801eb5], rcx
		neg al
		shr ax, 0x43
		movzx edx, byte ptr [r11 + rdi - 0xa801ea5]
		xor dl, bpl
		call 0x7ffb72c71f52
1511: UB addr = 7ffb729f9e35 with ID: 37 yields:
		neg dl
		mov qword ptr [rsp + rdi - 0xa801ea5], r8
		add r10d, eax
		xor dl, 0x2e
		mov qword ptr [rsp + rdi*2 - 0x15003d5a], 0x2cbd7b21
		cdqe
		xor bpl, dl
		lea rdx, [rsp + rdx + 0x18]
		sal rsi, 0x2c
		xor byte ptr [rsp + rdi*2 - 0x15003d4d], 0x95
		sar esi, 0x3c
		mov r10, qword ptr [rdi + rdx - 0xa801ead]
		add rsi, rax
		push rax
		mov qword ptr [rdi + rbx - 0xa801ebd], r10
		xchg qword ptr [rsp + rdi*8 - 0x5400f558], rsi
		mov r8d, dword ptr [r11 + rdi*4 - 0x2a007aab]
		xchg word ptr [rsp + rdi*4 - 0x2a007aa3], ax
		lea r11, [r11 + rdi*2 - 0x15003d4d]
		neg rax
		cqo
		xor r8d, ebp
		shl byte ptr [rsp + rdi - 0xa801e97], 0xa2
		and edi, 0xb49881a3
		movsx r10d, word ptr [rsp + rdi - 0x80008f]
		neg r8d
		push rdi
		ror r8d, 2
		neg r10b
		call 0x7ffb72e8304d
1512: UB addr = 7ffb72b660a2 with ID: 98 yields:
		xor edx, ebp
		neg edx
		not qword ptr [rsp + r8*4 - 0x80f00]
		xor r8b, 0x37
		lea edx, [rdx + rdi*2 - 0x310c896c]
		bswap edx
		ror edx, 2
		bswap r8
		lea rcx, [rdi*2 + 0x729e9c18]
		lea edx, [rdx + rdi*4 - 0x35d193b3]
		sal word ptr [rsp + rdi - 0x469afb8a], 0xab
		mov qword ptr [rsp + rdi - 0x469afb8f], rbp
		xor dword ptr [rsp + rdi - 0x469afb8f], edx
		mov esi, 0x50a7d0bb
		inc dil
		xor rdi, 0xffffffffee22e83e
		pop rbp
		sal r10w, 0x83
		setnp sil
		movsxd rdx, edx
		adc r9, rdx
		lea rax, [rdi + rbx + 0x5747ec5a]
		push rcx
		mov r10, rax
		mov rdi, qword ptr ss:[r10 + rsi - 0x50a7d000]
		lea rdx, [r8*2 - 0x10c2d2d7]
		and dword ptr [rsp + rsi - 0x50a7cfff], edx
		mov qword ptr [rsi + rbx - 0x50a7d000], rdi
		mov qword ptr [rsp + rsi - 0x50a7d000], r9
		ret
1513: UB addr = 7ffb72a9cc1f with ID: 107 yields:
		sal rdx, 0xe
		inc r8d
		movzx eax, r10w
		not r8d
		push rax
		sub r8d, 0xe9243939
		btc rax, 0x2e
		pop rdi
		not r8d
		call 0x7ffb72c0360d
1514: UB addr = 7ffb72b59447 with ID: 46 yields:
		mov r8d, 0x818098a8
		ror al, 1
		movsx esi, r8w
		add al, 4
		not al
		shr r8d, 0x22
		sbb al, 0x9b
		neg al
		xor bpl, al
		shl word ptr [rsp + r8 - 0x20602626], 0xeb
		pop rdi
		adc rax, rsp
		mov rcx, qword ptr [r8 + rax - 0x2060262a]
		movzx eax, si
		mov qword ptr [rdi + rbx - 0x3695281e], rcx
		mov r10d, dword ptr [r8 + r11 - 0x20602629]
		xor rax, 0x4d9cb20a
		lea r11, [r11 + rdi*2 - 0x6d2a5027]
		bt r8, rax
		cdq
		jb 0x7ffb72e38308
1515: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
1516: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
1517: UB addr = 7ffb72ab309a with ID: 101 yields:
		push rbp
		or cx, di
		xor dword ptr [rsp + rdi - 0x32bdfaf1], edx
		ror cx, 0x26
		pop rbp
		movsxd rdx, edx
		lea rdi, [r10 + rdi*2 - 0xae16671]
		neg r10d
		add r9, rdx
		mov rdx, qword ptr [rbx + rcx - 0x32bdffff]
		xchg r8d, ecx
		mov cx, word ptr [rdx + r8*2 - 0x657bfffe]
		mov di, cx
		movsx esi, r10b
		sar rsi, 0x8b
		movsx ecx, r8w
		mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]
		add di, r8w
		movzx r8d, r10w
		push r10
		mov word ptr [rsi + rbx - 0x1ffff7], di
		movsx edi, r10w
		lea rbx, [rbx + rsi - 0x1ffff7]
		mov qword ptr [rsp + rsi - 0x1fffff], r9
		ret
1518: UB addr = 7ffb72ba220a with ID: 108 yields:
		dec dword ptr [rsp + r8 - 0x462c01fa]
		setne sil
		lea rcx, [r8 + rcx + 0x30c33446]
		neg rcx
		inc rcx
		ror r8b, 0xa1
		cmovno ax, word ptr [rsp + r8 - 0x462c01f2]
		cwde
		xor rcx, 0xffffffff95af2610
		neg rcx
		sal dil, 0xc3
		sar dx, 0xc1
		btr rdi, 0x9b
		xor rbp, rcx
		mov qword ptr [rbx + rax*4 - 0x410], rcx
		bts edx, esi
		mov eax, dword ptr [rax + r11 - 0xf7]
		sbb r8, -0x76f0d6d3
		or dword ptr [rsp + 7], r8d
		xor eax, ebp
		lea rcx, [rdx*4 + 0x333a9e34]
		shl dil, 0x87
		neg eax
		xor r8w, 0x3dbd
		setno dil
		lea eax, [rax + r8 - 0x23818e3e]
		call 0x7ffb72c53b73
1519: UB addr = 7ffb729dd783 with ID: 109 yields:
		push r8
		xor r10, 0xffffffff95af2610
		dec ax
		btr si, dx
		cwd
		neg r10
		xor rbp, r10
		pop rdi
		mov qword ptr [rbx + rax*8 - 0x380], r10
		lea rbx, [rbx + rax*4 - 0x1cc]
		or qword ptr [rsp + rax*4 - 0x19c], rax
		pop rcx
		pop rdi
		pop r10
		pop rcx
		jge 0x7ffb72eb83a2
1520: UB addr = 7ffb72b59447 with ID: 46 yields:
		mov r8d, 0x818098a8
		ror al, 1
		movsx esi, r8w
		add al, 4
		not al
		shr r8d, 0x22
		sbb al, 0x9b
		neg al
		xor bpl, al
		shl word ptr [rsp + r8 - 0x20602626], 0xeb
		pop rdi
		adc rax, rsp
		mov rcx, qword ptr [r8 + rax - 0x2060262a]
		movzx eax, si
		mov qword ptr [rdi + rbx - 0x3695281e], rcx
		mov r10d, dword ptr [r8 + r11 - 0x20602629]
		xor rax, 0x4d9cb20a
		lea r11, [r11 + rdi*2 - 0x6d2a5027]
		bt r8, rax
		cdq
		jb 0x7ffb72e38308
1521: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
1522: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
1523: UB addr = 7ffb72b660a2 with ID: 98 yields:
		xor edx, ebp
		neg edx
		not qword ptr [rsp + r8*4 - 0x80f00]
		xor r8b, 0x37
		lea edx, [rdx + rdi*2 - 0x310c896c]
		bswap edx
		ror edx, 2
		bswap r8
		lea rcx, [rdi*2 + 0x729e9c18]
		lea edx, [rdx + rdi*4 - 0x35d193b3]
		sal word ptr [rsp + rdi - 0x469afb8a], 0xab
		mov qword ptr [rsp + rdi - 0x469afb8f], rbp
		xor dword ptr [rsp + rdi - 0x469afb8f], edx
		mov esi, 0x50a7d0bb
		inc dil
		xor rdi, 0xffffffffee22e83e
		pop rbp
		sal r10w, 0x83
		setnp sil
		movsxd rdx, edx
		adc r9, rdx
		lea rax, [rdi + rbx + 0x5747ec5a]
		push rcx
		mov r10, rax
		mov rdi, qword ptr ss:[r10 + rsi - 0x50a7d000]
		lea rdx, [r8*2 - 0x10c2d2d7]
		and dword ptr [rsp + rsi - 0x50a7cfff], edx
		mov qword ptr [rsi + rbx - 0x50a7d000], rdi
		mov qword ptr [rsp + rsi - 0x50a7d000], r9
		ret
1524: UB addr = 7ffb72912a68 with ID: 446 yields:
		mov rdi, qword ptr [rbx]
		mov rcx, qword ptr [rbx + 8]
		mov r8d, 0x6fa7a31f
		mov esi, r8d
		lea r10, [r8*4 + 0x671d0402]
		add rdi, rcx
		mov qword ptr [r8 + rbx - 0x6fa7a317], rdi
		movzx edi, word ptr [r8 + r11 - 0x6fa7a31f]
		xor di, bp
		and r10b, 0xb8
		rol di, 1
		not di
		not r8w
		push r8
		add di, 0xf4af
		movzx ecx, word ptr [rsp + r8 - 0x6fa75cde]
		not di
		shl rsi, 0xe5
		xor word ptr [rsp + r8 - 0x6fa75cda], r8w
		mov eax, 0x2414098a
		sbb di, 0xa234
		xor di, 0xb437
		dec di
		or dword ptr [rsp + rcx - 0x6fa7], eax
		cqo
		ror di, 1
		ror r8d, 0x62
		pop rax
		call 0x7ffb729d998b
1525: UB addr = 7ffb729d998b with ID: 447 yields:
		xor bp, di
		bswap rdx
		lea rdi, [rsp + rdi + 8]
		mov qword ptr [rsp + r8*2 - 0x37d3ae70], rdx
		mov r10, qword ptr [rdi + rdx*2]
		sar eax, 0x27
		xchg qword ptr [rsp + r8*2 - 0x37d3ae70], rsi
		mov qword ptr [rbx + rsi*8], r10
		neg r8
		push rcx
		mov dword ptr [rsp + rsi + 8], esi
		sub word ptr [rsp + r8 + 0x1be9d73d], cx
		mov r10d, dword ptr [rsp + r8 + 0x1be9d73a]
		add r10w, dx
		inc word ptr [rsp + r8 + 0x1be9d73b]
		lea edi, [r8 + rdi - 0x63a42c56]
		dec ecx
		rol edi, 2
		ror edx, 0x91
		call 0x7ffb72c59ec8
1526: UB addr = 7ffb729ce8d6 with ID: 76 yields:
		lea r11, [r11 + r10*2 - 0x5d25]
		xor sil, bpl
		rol dword ptr [rsp + r10*2 - 0x5d28], 0x67
		mov qword ptr [rsp + r10 - 0x2e8d], -0x5766b050
		adc sil, al
		sar qword ptr [rsp + r10*8 - 0x174a4], 0x37
		or ax, 0x829b
		rol sil, 1
		add sil, 0x89
		not byte ptr [rsp + r10 - 0x2eaf]
		push rcx
		not sil
		mov qword ptr [rsp + r10*8 - 0x175a7], rcx
		not byte ptr [rsp + r10*4 - 0xbacc]
		sal word ptr [rsp + r10*2 - 0x5d67], 0xe1
		ror sil, 1
		rol byte ptr [rsp + r10*2 - 0x5d65], 0x22
		ror word ptr [rsp + rax - 0xc28e], 0xaa
		not sil
		xor bpl, sil
		dec word ptr [rsp + r10*2 - 0x5d58]
		sar byte ptr [rsp + r10 - 0x2ea0], 0xc1
		lea rsi, [rsp + rsi + 0x18]
		mov rax, qword ptr [rsi + r10*4 - 0xbad4]
		mov r10, rax
		mov rdx, qword ptr [rbx + rcx]
		or r10, rdx
		mov edx, r8d
		and dword ptr [rsp + rcx*2 + 0x13], 0x213e8b94
		not r10
		mov qword ptr [rbx + rcx], r10
		neg byte ptr [rsp + rcx*4 + 0x11]
		sar qword ptr [rsp + r8 - 0x7db52e8e], 0xb4
		mov qword ptr [rsp + rcx], r9
		ret 0x10
1527: UB addr = 7ffb729ce8d6 with ID: 76 yields:
		lea r11, [r11 + r10*2 - 0x5d25]
		xor sil, bpl
		rol dword ptr [rsp + r10*2 - 0x5d28], 0x67
		mov qword ptr [rsp + r10 - 0x2e8d], -0x5766b050
		adc sil, al
		sar qword ptr [rsp + r10*8 - 0x174a4], 0x37
		or ax, 0x829b
		rol sil, 1
		add sil, 0x89
		not byte ptr [rsp + r10 - 0x2eaf]
		push rcx
		not sil
		mov qword ptr [rsp + r10*8 - 0x175a7], rcx
		not byte ptr [rsp + r10*4 - 0xbacc]
		sal word ptr [rsp + r10*2 - 0x5d67], 0xe1
		ror sil, 1
		rol byte ptr [rsp + r10*2 - 0x5d65], 0x22
		ror word ptr [rsp + rax - 0xc28e], 0xaa
		not sil
		xor bpl, sil
		dec word ptr [rsp + r10*2 - 0x5d58]
		sar byte ptr [rsp + r10 - 0x2ea0], 0xc1
		lea rsi, [rsp + rsi + 0x18]
		mov rax, qword ptr [rsi + r10*4 - 0xbad4]
		mov r10, rax
		mov rdx, qword ptr [rbx + rcx]
		or r10, rdx
		mov edx, r8d
		and dword ptr [rsp + rcx*2 + 0x13], 0x213e8b94
		not r10
		mov qword ptr [rbx + rcx], r10
		neg byte ptr [rsp + rcx*4 + 0x11]
		sar qword ptr [rsp + r8 - 0x7db52e8e], 0xb4
		mov qword ptr [rsp + rcx], r9
		ret 0x10
1528: UB addr = 7ffb7290e916 with ID: 77 yields:
		mov r8, qword ptr [rbx + rcx]
		mov r10, qword ptr [rbx + rcx*4 + 8]
		movsx edx, cl
		lea rbx, [rbx + rcx + 0x10]
		mov edi, edx
		or r8, r10
		btr rdi, rdx
		not r8
		shl cx, 0x2f
		call 0x7ffb72a4af7b
1529: UB addr = 7ffb72a4af7b with ID: 78 yields:
		xor rdi, r8
		add cl, byte ptr [r11 + rcx*2]
		xor cl, bpl
		lea r10, [rdx*8 + 0x292eea03]
		push r10
		sar r10b, 0x41
		ror cl, 1
		add dl, 0xaf
		movsx r8d, dx
		neg cl
		mov qword ptr [rsp + rdx*4 - 0x2b4], r10
		bts r8w, 0x20
		adc cl, 0x90
		ror cl, 1
		xor bpl, cl
		lea rcx, [rsp + rcx + 0x10]
		or r8b, r10b
		mov qword ptr [rcx + rdx*2 - 0x15e], rdi
		neg qword ptr [rsp + rdx - 0xa7]
		movsx ecx, r10b
		rol word ptr [rsp + r10 - 0x292ee9fe], 0x85
		mov eax, dword ptr [rdx + r11 - 0xae]
		sar dl, cl
		jp 0x7ffb72d1c765
1530: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
1531: UB addr = 7ffb72a1d907 with ID: 94 yields:
		mov qword ptr [rbx + r10*2 - 0x40], rax
		dec byte ptr [rsp + r10*4 - 0x7c]
		mov esi, dword ptr [r11 + r10*4 - 0x7f]
		xor esi, ebp
		mov eax, 0x4c831738
		xor r10d, 0xb102621e
		dec esi
		ror esi, 1
		cdqe
		dec esi
		not cl
		bswap esi
		mov qword ptr [rsp + rax - 0x4c831738], rbp
		or ecx, eax
		xor dword ptr [rsp + rcx - 0x4c8317ff], esi
		pop rbp
		xchg rax, r10
		and r8, 0xfffffffff195a6b5
		movsxd rsi, esi
		add r9, rsi
		movsx edx, ax
		movzx edi, byte ptr [r11 + rcx - 0x4c8317fa]
		dec r8w
		lea r11, [r11 + rcx - 0x4c8317f9]
		jne 0x7ffb72bf9868
1532: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
1533: UB addr = 7ffb728bf4c3 with ID: 95 yields:
		mov qword ptr [rsp + rsi], 0x73ab5b2
		neg eax
		lea eax, [rax + rsi*2 - 0x3f027520]
		and di, word ptr [rsp + rsi + 5]
		lea r10, [rcx*4 + 0x7b33f5ab]
		adc cx, dx
		mov qword ptr [rsp + rsi], rbp
		jl 0x7ffb72d12ae1
1534: UB addr = 7ffb72b9db35 with ID: 11 yields:
		xor rbp, r10
		mov qword ptr [rsp + rsi - 0xffae], rdx
		xor r8, rax
		btc esi, ecx
		mov qword ptr [rsi + rbx - 0xffb6], r10
		push rsi
		neg ecx
		xadd eax, esi
		movzx eax, byte ptr [rax + r11 - 0x2000ff91]
		shr di, 0xed
		or dx, 0xec87
		lea r11, [r11 + rdx*4 - 0x3f607]
		call 0x7ffb72c67c09
1535: UB addr = 7ffb728df27b with ID: 12 yields:
		mov rdi, qword ptr [rax + rdi + 0x5519fffd]
		pop rsi
		adc rsi, 0x18852e
		jmp rsi
1536: UB addr = 7ffb728ec8d6 with ID: 111 yields:
		mov edi, 0xb5077482
		mov r8, qword ptr [rbx]
		movsx esi, dil
		mov rax, qword ptr [rbx + 8]
		push rdi
		ror word ptr [rsp + 3], 0xac
		adc r8, rax
		movsx eax, dil
		shl eax, 0xc2
		mov rcx, r8
		sal rax, 0x9a
		mov r10, qword ptr [rbx + 0x10]
		and rcx, r10
		lea r8, [rsi + rdi*8 - 0x4bc9cd4a]
		sal word ptr [rsp + 3], 0xe7
		not rcx
		lea rsi, [rdi*8 + 0x733da337]
		or qword ptr [rsp], 0xffffffffa80c4cbf
		or word ptr [rsp + 6], r8w
		mov qword ptr [rbx + 0x10], rcx
		call 0x7ffb72cab9f8
1537: UB addr = 7ffb72b6924e with ID: 112 yields:
		xor edi, ebp
		shl esi, 0x11
		neg edi
		lea edi, [rdi + rsi - 0x3264924e]
		mov qword ptr [rsp + 8], rax
		lea rdx, [rsi + 0x6c1853be]
		btr dx, si
		bswap edi
		ror edi, 2
		cdqe
		lea edi, [rdi + rax*8 - 0x1b65a577]
		shl word ptr [rsp + rax - 0x1ffffff6], 0xe1
		mov qword ptr [rsp + rax*4 - 0x7ffffff8], rbp
		cmovb eax, esi
		adc rax, rcx
		xor dword ptr [rsp + 8], edi
		ror eax, 0x5f
		mov rbp, qword ptr [rsp + rax*2 - 0x7ffe9ff8]
		call 0x7ffb72c5ee93
1538: UB addr = 7ffb72a9cc1f with ID: 107 yields:
		sal rdx, 0xe
		inc r8d
		movzx eax, r10w
		not r8d
		push rax
		sub r8d, 0xe9243939
		btc rax, 0x2e
		pop rdi
		not r8d
		call 0x7ffb72c0360d
1539: UB addr = 7ffb72b59447 with ID: 46 yields:
		mov r8d, 0x818098a8
		ror al, 1
		movsx esi, r8w
		add al, 4
		not al
		shr r8d, 0x22
		sbb al, 0x9b
		neg al
		xor bpl, al
		shl word ptr [rsp + r8 - 0x20602626], 0xeb
		pop rdi
		adc rax, rsp
		mov rcx, qword ptr [r8 + rax - 0x2060262a]
		movzx eax, si
		mov qword ptr [rdi + rbx - 0x3695281e], rcx
		mov r10d, dword ptr [r8 + r11 - 0x20602629]
		xor rax, 0x4d9cb20a
		lea r11, [r11 + rdi*2 - 0x6d2a5027]
		bt r8, rax
		cdq
		jb 0x7ffb72e38308
1540: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
1541: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
1542: UB addr = 7ffb72ab309a with ID: 101 yields:
		push rbp
		or cx, di
		xor dword ptr [rsp + rdi - 0x32bdfaf1], edx
		ror cx, 0x26
		pop rbp
		movsxd rdx, edx
		lea rdi, [r10 + rdi*2 - 0xae16671]
		neg r10d
		add r9, rdx
		mov rdx, qword ptr [rbx + rcx - 0x32bdffff]
		xchg r8d, ecx
		mov cx, word ptr [rdx + r8*2 - 0x657bfffe]
		mov di, cx
		movsx esi, r10b
		sar rsi, 0x8b
		movsx ecx, r8w
		mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]
		add di, r8w
		movzx r8d, r10w
		push r10
		mov word ptr [rsi + rbx - 0x1ffff7], di
		movsx edi, r10w
		lea rbx, [rbx + rsi - 0x1ffff7]
		mov qword ptr [rsp + rsi - 0x1fffff], r9
		ret
1543: UB addr = 7ffb72952658 with ID: 448 yields:
		mov word ptr [rsi + rbx - 0x1325], r8w
		mov edi, dword ptr [r11 + rsi*2 - 0x2645]
		inc si
		lea r11, [r11 + rsi - 0x131f]
		xor edi, ebp
		mov eax, r10d
		or rsi, 0x682b4f33
		rol cl, 0x67
		xor edi, 0x9036b897
		xadd rsi, r10
		call 0x7ffb72c80895
1544: UB addr = 7ffb729bdad4 with ID: 449 yields:
		shl eax, 0x1d
		sbb dl, al
		not dl
		sbb dl, 0x1d
		mov edi, r8d
		xor bpl, dl
		xadd di, cx
		xadd dil, r8b
		adc rdx, rsp
		or r8w, di
		dec cx
		mov byte ptr [rax + rdx - 0x20000000], sil
		cdq
		xor dil, dl
		mov r10d, dword ptr [r11 + rax*2 - 0x3fffffff]
		dec eax
		sal edi, cl
		xor r10d, ebp
		not r10d
		inc edi
		xor r8w, 0xb53d
		rol r10d, 1
		rol rdx, cl
		lea rsi, [r8 + rdx*8 + 0x5a84db2e]
		inc r10d
		push r8
		shl al, 0xc3
		xadd edx, eax
		not r10d
		not r8b
		inc qword ptr [rsp + rax]
		lea rax, [rdx + rsi*2 - 0x4f59397e]
		sbb r10d, 0xe9243939
		dec rcx
		not r10d
		bswap r10d
		xor r10d, 0x6a81ef09
		xadd dword ptr [rsp + rcx - 0x2800510f], esi
		inc r10d
		dec ecx
		not r10d
		lea r10d, [r10 + r8 - 0x64e0b7ab]
		push rsi
		xchg byte ptr [rsp + rdi - 0x10a6f7f6], sil
		bswap r10d
		sub dword ptr [rsp + rdi - 0x10a6f7fc], 0x4b1b5102
		sal word ptr [rsp + rcx - 0x28005107], 0x87
		mov qword ptr [rsp + rcx - 0x28005108], rbp
		xor dword ptr [rsp + rcx - 0x28005108], r10d
		mov rbp, qword ptr [rsp + rcx*2 - 0x5000a218]
		sbb dil, 0xb2
		movsxd r10, r10d
		add r9, r10
		movzx r8d, word ptr [rcx + r11 - 0x2800510b]
		pop rsi
		mov r10d, esi
		neg sil
		xor r8w, bp
		xchg rcx, r10
		dec rax
		not r8w
		neg si
		mov qword ptr [rsp + rcx - 0x830800], rcx
		btr rsi, rax
		neg r8w
		lea rdx, [rsi*2 + 0x8118faf]
		neg rsi
		sar ax, 0x48
		xor r8w, 0x5da4
		sub r8w, 0xd53e
		xor r8w, 0xe018
		shl ax, 1
		xor bp, r8w
		cdqe
		call 0x7ffb72b9954d
1545: UB addr = 7ffb72b9954d with ID: 450 yields:
		mov word ptr [rbx + rax + 0x743dff6e], r8w
		mov rcx, qword ptr [r11 + rcx*4 - 0x20c1ff9]
		call 0x7ffb72b91996
1546: UB addr = 7ffb72b91996 with ID: 451 yields:
		pop r10
		add r10, 0x24387
		jmp r10
1547: UB addr = 7ffb72b59447 with ID: 46 yields:
		mov r8d, 0x818098a8
		ror al, 1
		movsx esi, r8w
		add al, 4
		not al
		shr r8d, 0x22
		sbb al, 0x9b
		neg al
		xor bpl, al
		shl word ptr [rsp + r8 - 0x20602626], 0xeb
		pop rdi
		adc rax, rsp
		mov rcx, qword ptr [r8 + rax - 0x2060262a]
		movzx eax, si
		mov qword ptr [rdi + rbx - 0x3695281e], rcx
		mov r10d, dword ptr [r8 + r11 - 0x20602629]
		xor rax, 0x4d9cb20a
		lea r11, [r11 + rdi*2 - 0x6d2a5027]
		bt r8, rax
		cdq
		jb 0x7ffb72e38308
1548: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
1549: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
1550: UB addr = 7ffb72ab309a with ID: 101 yields:
		push rbp
		or cx, di
		xor dword ptr [rsp + rdi - 0x32bdfaf1], edx
		ror cx, 0x26
		pop rbp
		movsxd rdx, edx
		lea rdi, [r10 + rdi*2 - 0xae16671]
		neg r10d
		add r9, rdx
		mov rdx, qword ptr [rbx + rcx - 0x32bdffff]
		xchg r8d, ecx
		mov cx, word ptr [rdx + r8*2 - 0x657bfffe]
		mov di, cx
		movsx esi, r10b
		sar rsi, 0x8b
		movsx ecx, r8w
		mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]
		add di, r8w
		movzx r8d, r10w
		push r10
		mov word ptr [rsi + rbx - 0x1ffff7], di
		movsx edi, r10w
		lea rbx, [rbx + rsi - 0x1ffff7]
		mov qword ptr [rsp + rsi - 0x1fffff], r9
		ret
1551: UB addr = 7ffb72a9cc1f with ID: 107 yields:
		sal rdx, 0xe
		inc r8d
		movzx eax, r10w
		not r8d
		push rax
		sub r8d, 0xe9243939
		btc rax, 0x2e
		pop rdi
		not r8d
		call 0x7ffb72c0360d
1552: UB addr = 7ffb72b59447 with ID: 46 yields:
		mov r8d, 0x818098a8
		ror al, 1
		movsx esi, r8w
		add al, 4
		not al
		shr r8d, 0x22
		sbb al, 0x9b
		neg al
		xor bpl, al
		shl word ptr [rsp + r8 - 0x20602626], 0xeb
		pop rdi
		adc rax, rsp
		mov rcx, qword ptr [r8 + rax - 0x2060262a]
		movzx eax, si
		mov qword ptr [rdi + rbx - 0x3695281e], rcx
		mov r10d, dword ptr [r8 + r11 - 0x20602629]
		xor rax, 0x4d9cb20a
		lea r11, [r11 + rdi*2 - 0x6d2a5027]
		bt r8, rax
		cdq
		jb 0x7ffb72e38308
1553: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
1554: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
1555: UB addr = 7ffb72ab309a with ID: 101 yields:
		push rbp
		or cx, di
		xor dword ptr [rsp + rdi - 0x32bdfaf1], edx
		ror cx, 0x26
		pop rbp
		movsxd rdx, edx
		lea rdi, [r10 + rdi*2 - 0xae16671]
		neg r10d
		add r9, rdx
		mov rdx, qword ptr [rbx + rcx - 0x32bdffff]
		xchg r8d, ecx
		mov cx, word ptr [rdx + r8*2 - 0x657bfffe]
		mov di, cx
		movsx esi, r10b
		sar rsi, 0x8b
		movsx ecx, r8w
		mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]
		add di, r8w
		movzx r8d, r10w
		push r10
		mov word ptr [rsi + rbx - 0x1ffff7], di
		movsx edi, r10w
		lea rbx, [rbx + rsi - 0x1ffff7]
		mov qword ptr [rsp + rsi - 0x1fffff], r9
		ret
1556: UB addr = 7ffb728ab392 with ID: 452 yields:
		xor r10b, 0xbf
		shr dil, 0xa3
		movsx r8d, sil
		not r10b
		xor bpl, r10b
		mov qword ptr [rsp + rdi - 0x1ed06], rsi
		shl edi, 0x17
		lea r10, [rsp + r10 + 0x10]
		jbe 0x7ffb72cc44d6
1557: UB addr = 7ffb728ab3ba with ID: 453 yields:
		shl dil, 0x23
		js 0x7ffb72b14d3a
1558: UB addr = 7ffb728ab3c4 with ID: 454 yields:
		xor cl, byte ptr [r10 + rax]
		cwde
		push rsi
		mov word ptr [rbx + rax], cx
		neg dx
		mov r10d, 0x348c7420
		cwd
		mov qword ptr [rsp + rax], r9
		ret 0x10
1559: UB addr = 7ffb729d2309 with ID: 455 yields:
		mov dil, byte ptr [rbx + 2]
		or dword ptr [rsp + 0xa], 0xb7343727
		je 0x7ffb72e0ea0f
1560: UB addr = 7ffb729d231b with ID: 493 yields:
		and sil, dil
		not sil
		mov word ptr [rbx + 2], si
		mov esi, dword ptr [r11]
		xor esi, ebp
		pop rcx
		not qword ptr [rsp]
		push -0x2dea5664
		dec esi
		mov ecx, dword ptr [rsp + 7]
		neg esi
		movzx edi, byte ptr [rsp + rcx - 0x48095cfa]
		cmove rdx, qword ptr [rsp + r8 - 0xa]
		dec eax
		neg eax
		add esi, 0xf915612c
		inc eax
		xadd cx, r8w
		xadd qword ptr [rsp + r8 - 0xae], rsi
		not eax
		dec r8w
		inc byte ptr [rsp + r8*2 - 0x15a]
		and r10, r8
		mov qword ptr [rsp + r8*8 - 0x568], rbp
		xor dword ptr [rsp + r8 - 0xad], eax
		sub cl, r8b
		ror r8w, 0x21
		pop rbp
		inc rcx
		bts r8w, cx
		lea rcx, [r10 + rsi*4 - 0x7cd2e9e6]
		movsxd rax, eax
		xor esi, 0x8ba57b8d
		push rcx
		adc r9, rax
		rol word ptr [rsp + r8*8 - 0x482ac], 0xab
		mov qword ptr [rsp + r8 - 0x9056], r9
		ret
1561: UB addr = 7ffb729d231b with ID: 493 yields:
		and sil, dil
		not sil
		mov word ptr [rbx + 2], si
		mov esi, dword ptr [r11]
		xor esi, ebp
		pop rcx
		not qword ptr [rsp]
		push -0x2dea5664
		dec esi
		mov ecx, dword ptr [rsp + 7]
		neg esi
		movzx edi, byte ptr [rsp + rcx - 0x48095cfa]
		cmove rdx, qword ptr [rsp + r8 - 0xa]
		dec eax
		neg eax
		add esi, 0xf915612c
		inc eax
		xadd cx, r8w
		xadd qword ptr [rsp + r8 - 0xae], rsi
		not eax
		dec r8w
		inc byte ptr [rsp + r8*2 - 0x15a]
		and r10, r8
		mov qword ptr [rsp + r8*8 - 0x568], rbp
		xor dword ptr [rsp + r8 - 0xad], eax
		sub cl, r8b
		ror r8w, 0x21
		pop rbp
		inc rcx
		bts r8w, cx
		lea rcx, [r10 + rsi*4 - 0x7cd2e9e6]
		movsxd rax, eax
		xor esi, 0x8ba57b8d
		push rcx
		adc r9, rax
		rol word ptr [rsp + r8*8 - 0x482ac], 0xab
		mov qword ptr [rsp + r8 - 0x9056], r9
		ret
1562: UB addr = 7ffb72b63a7d with ID: 458 yields:
		shr qword ptr [rsp + rdx*2 - 0x5975f9a4], 0x7c
		rol dil, 1
		dec dil
		movzx ecx, r8w
		rol dil, 1
		dec dil
		bswap r10
		cqo
		neg dil
		sal r10w, 0xab
		xor bpl, dil
		lea rdi, [rsp + rdi + 0x18]
		and dl, ah
		setle byte ptr [rsp + rdx + 3]
		movzx si, byte ptr [rdi + rdx*4]
		mov word ptr [rbx + rdx - 4], si
		lea rbx, [rbx + rdx - 4]
		mov edi, dword ptr [r11 + rdx + 2]
		mov esi, r10d
		xadd word ptr [rsp + rdx + 5], cx
		lea r11, [rdx + r11 + 6]
		call 0x7ffb72b930df
1563: UB addr = 7ffb72b930df with ID: 459 yields:
		sub r8, 0x2b806807
		xor edi, ebp
		xor r8w, word ptr [rsp + rdx*2 + 0x14]
		sar dl, 0x45
		dec edi
		pop rcx
		ror qword ptr [rsp + rdx + 2], 0xe7
		neg edi
		push r10
		push rsi
		xor edi, 0x44afaea1
		mov rax, qword ptr [rsp + 0x20]
		add rax, 0xf7e25
		jmp rax
1564: UB addr = 7ffb72b9c1e3 with ID: 495 yields:
		mov rbp, qword ptr [rsp + rax - 0x6b536a]
		mov esi, dword ptr [r11 + rsi - 0x13ff8953]
		mov edx, r10d
		lea r11, [r11 + rdi*4 - 0xfa486f]
		xadd edx, r10d
		sar cx, 0x61
		movzx r8d, dx
		xor esi, ebp
		dec cx
		lea esi, [rsi + r10 - 0x2bdf27cf]
		ror esi, 2
		dec esi
		rol esi, 3
		not r10b
		dec esi
		cdq
		inc dl
		sub r10w, 0xf25
		not esi
		and dl, cl
		push rbp
		jge 0x7ffb72a182f8
1565: UB addr = 7ffb72b6e2b2 with ID: 36 yields:
		lea rcx, [r10 + rcx + 0x17d0c5d9]
		rol rcx, 1
		lea rcx, [rcx + r10 + 0x7f47f23b]
		xor rcx, 0xffffffffe31c4620
		xor rbp, rcx
		shr sil, 0x63
		mov qword ptr [rdi + rbx - 0xa801eb5], rcx
		neg al
		shr ax, 0x43
		movzx edx, byte ptr [r11 + rdi - 0xa801ea5]
		xor dl, bpl
		call 0x7ffb72c71f52
1566: UB addr = 7ffb729f9e35 with ID: 37 yields:
		neg dl
		mov qword ptr [rsp + rdi - 0xa801ea5], r8
		add r10d, eax
		xor dl, 0x2e
		mov qword ptr [rsp + rdi*2 - 0x15003d5a], 0x2cbd7b21
		cdqe
		xor bpl, dl
		lea rdx, [rsp + rdx + 0x18]
		sal rsi, 0x2c
		xor byte ptr [rsp + rdi*2 - 0x15003d4d], 0x95
		sar esi, 0x3c
		mov r10, qword ptr [rdi + rdx - 0xa801ead]
		add rsi, rax
		push rax
		mov qword ptr [rdi + rbx - 0xa801ebd], r10
		xchg qword ptr [rsp + rdi*8 - 0x5400f558], rsi
		mov r8d, dword ptr [r11 + rdi*4 - 0x2a007aab]
		xchg word ptr [rsp + rdi*4 - 0x2a007aa3], ax
		lea r11, [r11 + rdi*2 - 0x15003d4d]
		neg rax
		cqo
		xor r8d, ebp
		shl byte ptr [rsp + rdi - 0xa801e97], 0xa2
		and edi, 0xb49881a3
		movsx r10d, word ptr [rsp + rdi - 0x80008f]
		neg r8d
		push rdi
		ror r8d, 2
		neg r10b
		call 0x7ffb72e8304d
1567: UB addr = 7ffb72ab309a with ID: 101 yields:
		push rbp
		or cx, di
		xor dword ptr [rsp + rdi - 0x32bdfaf1], edx
		ror cx, 0x26
		pop rbp
		movsxd rdx, edx
		lea rdi, [r10 + rdi*2 - 0xae16671]
		neg r10d
		add r9, rdx
		mov rdx, qword ptr [rbx + rcx - 0x32bdffff]
		xchg r8d, ecx
		mov cx, word ptr [rdx + r8*2 - 0x657bfffe]
		mov di, cx
		movsx esi, r10b
		sar rsi, 0x8b
		movsx ecx, r8w
		mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]
		add di, r8w
		movzx r8d, r10w
		push r10
		mov word ptr [rsi + rbx - 0x1ffff7], di
		movsx edi, r10w
		lea rbx, [rbx + rsi - 0x1ffff7]
		mov qword ptr [rsp + rsi - 0x1fffff], r9
		ret
1568: UB addr = 7ffb72aaaf0f with ID: 461 yields:
		mov r10d, 0xa3b13c9c
		movzx eax, r10b
		cqo
		shl r10w, 0x29
		lea r11, [r11 + rdx*2 + 4]
		movsx r8d, dx
		movsx edi, r8b
		dec edi
		not ax
		lea esi, [r10 + rsi - 0x77820b7a]
		ror esi, 1
		movzx ecx, al
		dec r10
		neg r8d
		sbb esi, 0x90ada59c
		neg esi
		shr r8w, cl
		cbw
		sbb esi, edi
		cqo
		sal edx, 0x3b
		push rbp
		setp cl
		xor dword ptr [rsp + rdx], esi
		pop rbp
		and di, cx
		push rdi
		movsxd rsi, esi
		shr qword ptr [rsp + rdx*4], cl
		add r9, rsi
		add r10d, edx
		mov ax, word ptr [rbx + rdx]
		dec edx
		xor r8w, word ptr [rbx + r8 + 2]
		xor ax, dx
		xor r8w, dx
		xor dword ptr [rsp + rcx*8 - 5], r10d
		or ax, r8w
		dec edx
		pop rdi
		mov word ptr [rcx + rbx + 1], ax
		lea rdi, [rcx + rbx + 1]
		mov r8d, 0x6f0cff90
		mov r10, rdi
		mov si, word ptr ss:[r10 + rcx*2 - 2]
		jle 0x7ffb72c990b3
1569: UB addr = 7ffb72aa5235 with ID: 462 yields:
		movzx ecx, ax
		mov cx, word ptr [rcx + rbx - 0x5093]
		call 0x7ffb72be3ad2
1570: UB addr = 7ffb728bdab0 with ID: 463 yields:
		xchg byte ptr [rsp + rax - 0x2b6fff5], dl
		not edx
		sub esi, edx
		sal r8b, 0x45
		inc dil
		add r10w, r8w
		xor esi, edx
		lea rax, [r8 + r10*2 + 0x1d0f190c]
		lea esi, [rsi + r8*2 + 0x18ba2e52]
		cwd
		mov qword ptr [rsp + r8*2 - 0x56e00c0], rdi
		sub qword ptr [rsp + r8*2 - 0x56e0098], 0x2589b527
		bswap esi
		mov ecx, 0x898f8c07
		xor edi, edi
		mov qword ptr [rsp + r8*2 - 0x56e0098], rbp
		xor dword ptr [rsp + r8 - 0x2b70038], esi
		shr byte ptr [rsp + r8*2 - 0x56e00a0], cl
		ror edi, 0xb1
		mov rbp, qword ptr [rsp + r8 - 0x2b70038]
		movsxd rsi, esi
		adc r9, rsi
		and word ptr [rsp + r8 - 0x2b7003f], di
		mov qword ptr [rsp + r8 - 0x2b70038], r8
		pop rax
		add di, word ptr [rax + r11 - 1]
		xor di, bp
		shl r8d, cl
		xor di, 0xb821
		cbw
		add qword ptr [rsp + rax*2 + 0x14], rax
		sub byte ptr [rsp + rax], r10b
		sbb di, dx
		pop rax
		xor word ptr [rsp + r8 - 0x5b802fed], r8w
		call 0x7ffb72cc9d2e
1571: UB addr = 7ffb72ab68bd with ID: 464 yields:
		ror di, 1
		push rdx
		mov qword ptr [rsp + r8 - 0x5b802ff2], rdx
		xadd byte ptr [rsp + r8 - 0x5b802fee], al
		sbb di, 0x1306
		xor bp, di
		call 0x7ffb72c38518
1572: UB addr = 7ffb72b59447 with ID: 46 yields:
		mov r8d, 0x818098a8
		ror al, 1
		movsx esi, r8w
		add al, 4
		not al
		shr r8d, 0x22
		sbb al, 0x9b
		neg al
		xor bpl, al
		shl word ptr [rsp + r8 - 0x20602626], 0xeb
		pop rdi
		adc rax, rsp
		mov rcx, qword ptr [r8 + rax - 0x2060262a]
		movzx eax, si
		mov qword ptr [rdi + rbx - 0x3695281e], rcx
		mov r10d, dword ptr [r8 + r11 - 0x20602629]
		xor rax, 0x4d9cb20a
		lea r11, [r11 + rdi*2 - 0x6d2a5027]
		bt r8, rax
		cdq
		jb 0x7ffb72e38308
1573: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
1574: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
1575: UB addr = 7ffb72ab309a with ID: 101 yields:
		push rbp
		or cx, di
		xor dword ptr [rsp + rdi - 0x32bdfaf1], edx
		ror cx, 0x26
		pop rbp
		movsxd rdx, edx
		lea rdi, [r10 + rdi*2 - 0xae16671]
		neg r10d
		add r9, rdx
		mov rdx, qword ptr [rbx + rcx - 0x32bdffff]
		xchg r8d, ecx
		mov cx, word ptr [rdx + r8*2 - 0x657bfffe]
		mov di, cx
		movsx esi, r10b
		sar rsi, 0x8b
		movsx ecx, r8w
		mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]
		add di, r8w
		movzx r8d, r10w
		push r10
		mov word ptr [rsi + rbx - 0x1ffff7], di
		movsx edi, r10w
		lea rbx, [rbx + rsi - 0x1ffff7]
		mov qword ptr [rsp + rsi - 0x1fffff], r9
		ret
1576: UB addr = 7ffb729ecfab with ID: 465 yields:
		btr rdi, 0x19
		xor bp, ax
		rol dil, 0xc4
		setb cl
		mov word ptr [rdi + rbx - 0x58943a1e], ax
		push rdi
		shl cl, 0x46
		mov qword ptr [rsp + rdi - 0x58943a1e], r9
		ret
1577: UB addr = 7ffb72b6e2b2 with ID: 36 yields:
		lea rcx, [r10 + rcx + 0x17d0c5d9]
		rol rcx, 1
		lea rcx, [rcx + r10 + 0x7f47f23b]
		xor rcx, 0xffffffffe31c4620
		xor rbp, rcx
		shr sil, 0x63
		mov qword ptr [rdi + rbx - 0xa801eb5], rcx
		neg al
		shr ax, 0x43
		movzx edx, byte ptr [r11 + rdi - 0xa801ea5]
		xor dl, bpl
		call 0x7ffb72c71f52
1578: UB addr = 7ffb729f9e35 with ID: 37 yields:
		neg dl
		mov qword ptr [rsp + rdi - 0xa801ea5], r8
		add r10d, eax
		xor dl, 0x2e
		mov qword ptr [rsp + rdi*2 - 0x15003d5a], 0x2cbd7b21
		cdqe
		xor bpl, dl
		lea rdx, [rsp + rdx + 0x18]
		sal rsi, 0x2c
		xor byte ptr [rsp + rdi*2 - 0x15003d4d], 0x95
		sar esi, 0x3c
		mov r10, qword ptr [rdi + rdx - 0xa801ead]
		add rsi, rax
		push rax
		mov qword ptr [rdi + rbx - 0xa801ebd], r10
		xchg qword ptr [rsp + rdi*8 - 0x5400f558], rsi
		mov r8d, dword ptr [r11 + rdi*4 - 0x2a007aab]
		xchg word ptr [rsp + rdi*4 - 0x2a007aa3], ax
		lea r11, [r11 + rdi*2 - 0x15003d4d]
		neg rax
		cqo
		xor r8d, ebp
		shl byte ptr [rsp + rdi - 0xa801e97], 0xa2
		and edi, 0xb49881a3
		movsx r10d, word ptr [rsp + rdi - 0x80008f]
		neg r8d
		push rdi
		ror r8d, 2
		neg r10b
		call 0x7ffb72e8304d
1579: UB addr = 7ffb72ab309a with ID: 101 yields:
		push rbp
		or cx, di
		xor dword ptr [rsp + rdi - 0x32bdfaf1], edx
		ror cx, 0x26
		pop rbp
		movsxd rdx, edx
		lea rdi, [r10 + rdi*2 - 0xae16671]
		neg r10d
		add r9, rdx
		mov rdx, qword ptr [rbx + rcx - 0x32bdffff]
		xchg r8d, ecx
		mov cx, word ptr [rdx + r8*2 - 0x657bfffe]
		mov di, cx
		movsx esi, r10b
		sar rsi, 0x8b
		movsx ecx, r8w
		mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]
		add di, r8w
		movzx r8d, r10w
		push r10
		mov word ptr [rsi + rbx - 0x1ffff7], di
		movsx edi, r10w
		lea rbx, [rbx + rsi - 0x1ffff7]
		mov qword ptr [rsp + rsi - 0x1fffff], r9
		ret
1580: UB addr = 7ffb72aaaf0f with ID: 461 yields:
		mov r10d, 0xa3b13c9c
		movzx eax, r10b
		cqo
		shl r10w, 0x29
		lea r11, [r11 + rdx*2 + 4]
		movsx r8d, dx
		movsx edi, r8b
		dec edi
		not ax
		lea esi, [r10 + rsi - 0x77820b7a]
		ror esi, 1
		movzx ecx, al
		dec r10
		neg r8d
		sbb esi, 0x90ada59c
		neg esi
		shr r8w, cl
		cbw
		sbb esi, edi
		cqo
		sal edx, 0x3b
		push rbp
		setp cl
		xor dword ptr [rsp + rdx], esi
		pop rbp
		and di, cx
		push rdi
		movsxd rsi, esi
		shr qword ptr [rsp + rdx*4], cl
		add r9, rsi
		add r10d, edx
		mov ax, word ptr [rbx + rdx]
		dec edx
		xor r8w, word ptr [rbx + r8 + 2]
		xor ax, dx
		xor r8w, dx
		xor dword ptr [rsp + rcx*8 - 5], r10d
		or ax, r8w
		dec edx
		pop rdi
		mov word ptr [rcx + rbx + 1], ax
		lea rdi, [rcx + rbx + 1]
		mov r8d, 0x6f0cff90
		mov r10, rdi
		mov si, word ptr ss:[r10 + rcx*2 - 2]
		jle 0x7ffb72c990b3
1581: UB addr = 7ffb728dbc3a with ID: 466 yields:
		mov rsi, qword ptr [rbx + r8 - 0x7ffffefc]
		pop rcx
		adc rcx, -0xeeb7b
		jmp rcx
1582: UB addr = 7ffb72b50a73 with ID: 467 yields:
		ror eax, 0xc7
		mov rcx, qword ptr [r8 + rbx - 0x7ffffef4]
		call 0x7ffb72d17a0c
1583: UB addr = 7ffb7298e1d7 with ID: 468 yields:
		mov rax, qword ptr [r8 + rcx - 0x5c1c4290]
		movzx r8d, cx
		neg r8b
		mov qword ptr [rbx + rcx - 0x5c1c4298], rax
		mov dx, word ptr [r11 + rcx - 0x5c1c428e]
		mov edi, 0x1599d183
		jb 0x7ffb72bb7146
1584: UB addr = 7ffb72a7d19f with ID: 469 yields:
		mov qword ptr [rsp], 0x1ea57f1e
		mov r10, qword ptr [rbx + 8]
		not rax
		mov ecx, 0xf80846b9
		movsx edx, cl
		not r10
		lea r8, [rdi + rdi - 0x675966e2]
		inc r8
		and rax, r10
		not cx
		mov qword ptr [rbx + 8], rax
		rol word ptr [rsp + 6], cl
		mov r10d, edi
		not edx
		mov ecx, dword ptr [r11 + rdx - 0x46]
		xchg qword ptr [rsp + rdx*2 - 0x8c], r8
		xor ecx, ebp
		neg ecx
		shl word ptr [rsp + r8 - 0x1ea57f19], 0xa6
		neg qword ptr [rsp + rdx - 0x46]
		add r10b, byte ptr [rsp + rdx*4 - 0x111]
		lea ecx, [rcx + r8*4 + 0x1f055ab8]
		ror ecx, 1
		movsx esi, r8w
		not ecx
		jnp 0x7ffb72dd5462
1585: UB addr = 7ffb72b59447 with ID: 46 yields:
		mov r8d, 0x818098a8
		ror al, 1
		movsx esi, r8w
		add al, 4
		not al
		shr r8d, 0x22
		sbb al, 0x9b
		neg al
		xor bpl, al
		shl word ptr [rsp + r8 - 0x20602626], 0xeb
		pop rdi
		adc rax, rsp
		mov rcx, qword ptr [r8 + rax - 0x2060262a]
		movzx eax, si
		mov qword ptr [rdi + rbx - 0x3695281e], rcx
		mov r10d, dword ptr [r8 + r11 - 0x20602629]
		xor rax, 0x4d9cb20a
		lea r11, [r11 + rdi*2 - 0x6d2a5027]
		bt r8, rax
		cdq
		jb 0x7ffb72e38308
1586: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
1587: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
1588: UB addr = 7ffb72ba64af with ID: 38 yields:
		mov rdx, qword ptr [rbx + rcx - 0x3fb092b0]
		lea r10, [rcx + 0x83fa737]
		not r8
		mov qword ptr [rsp + rcx*2 - 0x7f612570], -0x275467dd
		xor qword ptr [rsp + rcx*2 - 0x7f612570], r10
		sal byte ptr [rsp + rcx*2 - 0x7f612570], 0xe6
		not rdx
		and r8, rdx
		movsx edi, cl
		mov eax, edi
		movsx esi, dil
		mov r10, r8
		and rsi, 0xffffffffee97de0b
		jg 0x7ffb7290e32e
1589: UB addr = 7ffb7290e32e with ID: 39 yields:
		jne 0x7ffb72b6fee5
1590: UB addr = 7ffb72b6fee5 with ID: 470 yields:
		mov rax, qword ptr [rbx + rcx*2 - 0x7f612560]
		inc byte ptr [rsp + rcx*2 - 0x7f61256e]
		lea rcx, [rsi + rdi + 0x3f1fd820]
		shr cl, 0x83
		adc r10, rax
		push rcx
		lea r8, [rdi - 0x27ec5874]
		mov qword ptr [rbx + 0x10], r10
		pop rdi
		rol rsi, 0x2e
		cqo
		lea rbx, [rbx + rax*2 + 0x1b6c07b0]
		jae 0x7ffb72bd0b16
1591: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
1592: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
1593: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
1594: UB addr = 7ffb72b69522 with ID: 50 yields:
		mov eax, 0xb602e72e
		lea rdi, [rax - 0x6173404d]
		movzx ecx, di
		movzx edi, byte ptr [r11 + rcx*4 - 0x29b84]
		push rax
		sar word ptr [rsp + rcx - 0xa6de], cl
		xor dil, bpl
		movsx esi, cl
		inc dil
		lea r8, [rsi*8 - 0x71ff74e7]
		ror dil, cl
		neg dil
		cwd
		or edx, dword ptr [rsp + rcx - 0xa6dd]
		sbb dword ptr [rsp + rcx*8 - 0x53707], ecx
		xor dil, al
		neg dx
		xor bpl, dil
		sar word ptr [rsp + rdx*2 + 3], 0x26
		pop rcx
		adc rdi, rsp
		xchg eax, edx
		mov rdx, qword ptr [rdi + rax - 1]
		push rsi
		mov qword ptr [rax + rbx - 9], rdx
		call 0x7ffb72b91b37
1595: UB addr = 7ffb72b91b37 with ID: 51 yields:
		mov r10d, dword ptr [r11 + rax*4 - 0xb]
		xor r10d, ebp
		mov qword ptr [rsp + rax*2 - 6], rcx
		cwde
		push r8
		dec r10d
		ror r10d, 1
		dec r10d
		push rax
		ror qword ptr [rsp + rax + 6], 0xb0
		cqo
		bswap r10d
		setae byte ptr [rsp + rax*2 + 0x10]
		cmovb si, cx
		mov qword ptr [rsp + rax + 0x15], rbp
		btc r8w, dx
		xor dword ptr [rsp + rax + 0x15], r10d
		and ecx, 0x76179610
		mov rbp, qword ptr [rsp + rdx + 0x18]
		shl eax, cl
		movsxd r10, r10d
		adc r9, r10
		shl al, 0x44
		mov qword ptr [rsp + rax*2 - 0x5ffe8], rdx
		movzx r10d, word ptr [r11 + rax*4 - 0xbfffb]
		shr cx, 0xc
		xchg byte ptr [rsp + rax - 0x2fffb], ah
		shr dword ptr [rsp + rax*4 - 0xbfff1], 0x7c
		lea r11, [r11 + rax - 0x2fff9]
		rol word ptr [rsp + rax*4 - 0xbfffb], 0x6e
		shl byte ptr [rsp + rax*2 - 0x5fffc], 1
		xor r10w, bp
		rol dl, 0x83
		dec ax
		sbb r10w, ax
		pop rax
		xchg qword ptr [rsp + rax*2 + 5], rsi
		sar dl, 0x22
		ror r10w, 1
		neg word ptr [rsp + rsi - 0x1000052]
		not r10w
		neg r10w
		xor bp, r10w
		movzx edi, cl
		lea r10, [rsp + r10 + 0x18]
		or rdi, qword ptr [r10 + rax - 3]
		mov qword ptr [rbx + rax - 0x13], rdi
		sal dx, 0xc4
		lea rbx, [rbx + rax - 0x13]
		inc esi
		or dl, 0xb0
		pop rcx
		pop rax
		pop rcx
		jl 0x7ffb72eb83a2
1596: UB addr = 7ffb72b7a8a9 with ID: 52 yields:
		mov r8d, 0x1b013f0f
		lea rdi, [r8*4 - 0x257725d8]
		mov ecx, edi
		mov edi, dword ptr [r8 + r11 - 0x1b013f0f]
		lea r10, [rcx*2 + 0x2d07b710]
		push r10
		xor edi, ebp
		lea rax, [r10*8 - 0x1ad2a974]
		bswap edi
		push rax
		dec byte ptr [rsp + r8 - 0x1b013f0e]
		inc dword ptr [rsp + r8 - 0x1b013f0e]
		dec edi
		rol edi, 1
		inc dword ptr [rsp + r8*2 - 0x36027e16]
		dec qword ptr [rsp + r8 - 0x1b013f07]
		xadd r8b, r10b
		sbb edi, 0x7f8e038e
		xchg byte ptr [rsp + r8 - 0x1b013fe4], cl
		sub eax, dword ptr [rsp + r8 - 0x1b013fe2]
		rol edi, 2
		push rcx
		mov qword ptr [rsp + r8*4 - 0x6c04ff8c], rbp
		lea rsi, [rcx*2 + 0x52b9be90]
		adc word ptr [rsp + r8 - 0x1b013fe3], r8w
		xor dword ptr [rsp + r8*2 - 0x36027fbe], edi
		rol sil, 1
		xor bpl, sil
		mov qword ptr [rsp + r8*4 + 0x28], 0x6f0b60a2
		neg rdx
		lea rsi, [rsp + rsi + 0x30]
		lea rdi, [rdx*4 - 0x22f58f7e]
		add r8, qword ptr [rsi + r8*2]
		mov qword ptr [rbx + rdx*8 + 0x68], r8
		mov cl, byte ptr [r11 + rdx*2 + 0x25]
		lea r10, [r10 + rax + 0x222ddeaf]
		xchg qword ptr [rsp + rdx + 0x2e], rdx
		lea r11, [rax + r11 - 0x5d33a921]
		cdqe
		mov r8d, 0x56b9e511
		xor cl, bpl
		rol word ptr [rsp + rdi*2 + 0x45eb1f86], 0x6d
		rol byte ptr [rsp + r8 - 0x56b9e4e3], 0xa5
		inc cl
		dec r10w
		ror cl, 1
		or r10w, 0x19ab
		movsx esi, word ptr [rsp + rdi + 0x22f58fda]
		neg cl
		sal rax, 0xa
		add rax, 0x1136f5b0
		neg al
		xor cl, 0x2e
		sar dword ptr [rsp + rdi + 0x22f58fe5], 0xc
		xchg word ptr [rsp + rdi + 0x22f58fda], si
		xor bpl, cl
		mov byte ptr [rsp + rdi + 0x22f58fd5], 0x16
		xor r8, qword ptr [rsp + rdi + 0x22f58fdb]
		lea rcx, [rsp + rcx + 0x30]
		shr rsi, 0x6f
		sub r10, qword ptr [rsp + rdi*2 + 0x45eb1f79]
		mov rdx, qword ptr [rcx + rdi*2 + 0x45eb1f74]
		setae byte ptr [rsp + rdi + 0x22f58fc0]
		mov qword ptr [rbx + rdi*2 + 0x45eb1f5c], rdx
		push rdi
		jbe 0x7ffb729ec224
1597: UB addr = 7ffb729ec224 with ID: 53 yields:
		lea rbx, [rdi + rbx + 0x22f58fa2]
		sbb si, si
		pop rax
		pop rdx
		pop r8
		pop rax
		pop r8
		pop rax
		pop rdi
		jno 0x7ffb72eb83a2
1598: UB addr = 7ffb72a60fe6 with ID: 49 yields:
		sub dil, 0x9c
		add rcx, rsp
		movzx eax, sil
		xor si, r10w
		mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]
		mov qword ptr [rbx + rax - 8], rdx
		movzx ecx, al
		mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]
		xor r10d, ebp
		lea rdx, [rsi + rcx - 0x57ce3fed]
		mov r8d, ecx
		dec r10d
		ror r10d, 1
		dec r10d
		bswap rdx
		shl ax, 0xa7
		neg di
		bswap r10d
		push rdi
		ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6
		push r8
		mov qword ptr [rsp + rsi - 0x33e70104], rbp
		mov word ptr [rsp + rsi - 0x33e70106], 0x9b98
		xor dword ptr [rsp + rsi - 0x33e70104], r10d
		sar r8d, 0x79
		sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26
		rol r8, 0x6e
		mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]
		movsxd r10, r10d
		mov qword ptr [rsp + rdi - 0x9215], rsi
		adc r9, r10
		movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]
		xadd dil, sil
		sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w
		adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax
		lea r11, [rsi + r11 - 0x33e70117]
		adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh
		xor r10b, bpl
		rol r10b, 1
		dec eax
		lea rcx, [rax - 0x7050ecf0]
		add r10b, al
		not byte ptr [rsp + rsi - 0x33e70118]
		or qword ptr [rsp + rdi*2 - 0x1244a], rsi
		xor r10b, 0x91
		add r10b, cl
		shr dx, 0x4c
		dec cl
		and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f
		rol r10b, 1
		sub r8d, dword ptr [rsp + rsi - 0x33e70116]
		sal edi, cl
		adc r10b, 0x84
		call 0x7ffb72c546ab
1599: UB addr = 7ffb7298e1d7 with ID: 468 yields:
		mov rax, qword ptr [r8 + rcx - 0x5c1c4290]
		movzx r8d, cx
		neg r8b
		mov qword ptr [rbx + rcx - 0x5c1c4298], rax
		mov dx, word ptr [r11 + rcx - 0x5c1c428e]
		mov edi, 0x1599d183
		jb 0x7ffb72bb7146
1600: UB addr = 7ffb72b1b407 with ID: 471 yields:
		mov r10d, 0xda962391
		lea r8, [r10 + r10*8 + 0x4803c381]
		lea r9, [rip - 0x15]
		mov r10d, dword ptr [r11]
		movzx eax, r8b
		mov ecx, eax
		lea r11, [r11 + rax*4 - 0x264]
		xadd eax, r8d
		movzx edi, cx
		xor r10d, ebp
		push rcx
		bswap eax
		dec r10d
		shr byte ptr [rsp + r8*2 - 0x132], 6
		bswap r10d
		shl al, 0xc1
		shr rax, 0x16
		mov edx, r8d
		ror r10d, 3
		xor al, dil
		lea r10d, [r10 + r8*2 + 0x3228c97a]
		xchg qword ptr [rsp + r8*2 - 0x134], rcx
		lea rsi, [rcx + 0x7a6de21]
		xor r10d, 0xd7940b1e
		neg word ptr [rsp + r8*2 - 0x130]
		mov qword ptr [rsp + r8*2 - 0x134], rbp
		cmovg rcx, rsi
		shl r8, 0xb
		xor dword ptr [rsp + r8 - 0x4d000], r10d
		pop rbp
		push rax
		inc r8d
		movsxd r10, r10d
		add r9, r10
		mov qword ptr [rsp + r8 - 0x4d001], r9
		ret
1601: UB addr = 7ffb72b47d9c with ID: 5 yields:
		movzx r8d, cx
		xor dl, bpl
		xor dword ptr [rsp + rsi*4 + 0xc], r8d
		pop r10
		not dl
		bts r10, 0x98
		lea rcx, [r10*4 - 0x6c5b2e6c]
		rol r8w, 0x2c
		inc dl
		mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]
		ror dl, 1
		xor word ptr [rsp + r10 - 0x4f1da1c1], r8w
		neg qword ptr [rsp + rsi]
		adc dl, sil
		sar r10d, 0x6b
		xadd qword ptr [rsp + r10 - 0x9e3b4], rdi
		neg dl
		inc r8d
		sub dl, 0xc
		neg rsi
		setl byte ptr [rsp + r10*4 - 0x278ecb]
		rol dl, 1
		xor bpl, dl
		lea rdx, [rsp + rdx + 8]
		mov qword ptr [rdx + r10*8 - 0x4f1da0], rax
		mov edi, dword ptr [r11 + r10 - 0x9e3b2]
		neg qword ptr [rsp + r10*2 - 0x13c768]
		xor edi, ebp
		xor edi, 0xe12e3f2d
		btc r8d, ecx
		rol edi, 1
		sub r8w, 0x64a7
		sal rcx, 0x87
		xor edi, 0x689d25ab
		neg edi
		sal r8w, 0xec
		mov qword ptr [rsp + r10 - 0x9e3b4], rbp
		movsx eax, cl
		btr esi, 0xa1
		xor dword ptr [rsp + r10 - 0x9e3b4], edi
		pop rbp
		xor r10, rax
		movsxd rdi, edi
		adc r9, rdi
		mov rdx, qword ptr [rbx + rsi*2 + 0x10]
		lea rbx, [r10 + rbx - 0x9e39c]
		dec si
		movzx edi, byte ptr [rsi + r11 - 0xfff9]
		lea r11, [r11 + r10 - 0x9e3ad]
		jno 0x7ffb72b7d536
1602: UB addr = 7ffb72b7d536 with ID: 6 yields:
		ror si, 0xf
		rol si, 0xc7
		xor dil, bpl
		lea rcx, [rax*8 + 0x3d3d7905]
		ror dil, 1
		sub rsi, -0x577b11cf
		xor dil, 0xa1
		xor r8d, r8d
		rol r10w, cl
		adc dil, 0x94
		sub cx, cx
		xor dil, 0x9c
		not r8d
		btr si, cx
		xor bpl, dil
		sar r10w, 0xc6
		add rdi, rsp
		xchg ax, r8w
		mov qword ptr [r10 + rdi - 0x9fed3], rdx
		dec si
		add ax, r10w
		sub sil, al
		jmp r9
1603: UB addr = 7ffb72b47d9c with ID: 5 yields:
		movzx r8d, cx
		xor dl, bpl
		xor dword ptr [rsp + rsi*4 + 0xc], r8d
		pop r10
		not dl
		bts r10, 0x98
		lea rcx, [r10*4 - 0x6c5b2e6c]
		rol r8w, 0x2c
		inc dl
		mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]
		ror dl, 1
		xor word ptr [rsp + r10 - 0x4f1da1c1], r8w
		neg qword ptr [rsp + rsi]
		adc dl, sil
		sar r10d, 0x6b
		xadd qword ptr [rsp + r10 - 0x9e3b4], rdi
		neg dl
		inc r8d
		sub dl, 0xc
		neg rsi
		setl byte ptr [rsp + r10*4 - 0x278ecb]
		rol dl, 1
		xor bpl, dl
		lea rdx, [rsp + rdx + 8]
		mov qword ptr [rdx + r10*8 - 0x4f1da0], rax
		mov edi, dword ptr [r11 + r10 - 0x9e3b2]
		neg qword ptr [rsp + r10*2 - 0x13c768]
		xor edi, ebp
		xor edi, 0xe12e3f2d
		btc r8d, ecx
		rol edi, 1
		sub r8w, 0x64a7
		sal rcx, 0x87
		xor edi, 0x689d25ab
		neg edi
		sal r8w, 0xec
		mov qword ptr [rsp + r10 - 0x9e3b4], rbp
		movsx eax, cl
		btr esi, 0xa1
		xor dword ptr [rsp + r10 - 0x9e3b4], edi
		pop rbp
		xor r10, rax
		movsxd rdi, edi
		adc r9, rdi
		mov rdx, qword ptr [rbx + rsi*2 + 0x10]
		lea rbx, [r10 + rbx - 0x9e39c]
		dec si
		movzx edi, byte ptr [rsi + r11 - 0xfff9]
		lea r11, [r11 + r10 - 0x9e3ad]
		jno 0x7ffb72b7d536
1604: UB addr = 7ffb72b7d536 with ID: 6 yields:
		ror si, 0xf
		rol si, 0xc7
		xor dil, bpl
		lea rcx, [rax*8 + 0x3d3d7905]
		ror dil, 1
		sub rsi, -0x577b11cf
		xor dil, 0xa1
		xor r8d, r8d
		rol r10w, cl
		adc dil, 0x94
		sub cx, cx
		xor dil, 0x9c
		not r8d
		btr si, cx
		xor bpl, dil
		sar r10w, 0xc6
		add rdi, rsp
		xchg ax, r8w
		mov qword ptr [r10 + rdi - 0x9fed3], rdx
		dec si
		add ax, r10w
		sub sil, al
		jmp r9
1605: UB addr = 7ffb72b47d9c with ID: 5 yields:
		movzx r8d, cx
		xor dl, bpl
		xor dword ptr [rsp + rsi*4 + 0xc], r8d
		pop r10
		not dl
		bts r10, 0x98
		lea rcx, [r10*4 - 0x6c5b2e6c]
		rol r8w, 0x2c
		inc dl
		mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]
		ror dl, 1
		xor word ptr [rsp + r10 - 0x4f1da1c1], r8w
		neg qword ptr [rsp + rsi]
		adc dl, sil
		sar r10d, 0x6b
		xadd qword ptr [rsp + r10 - 0x9e3b4], rdi
		neg dl
		inc r8d
		sub dl, 0xc
		neg rsi
		setl byte ptr [rsp + r10*4 - 0x278ecb]
		rol dl, 1
		xor bpl, dl
		lea rdx, [rsp + rdx + 8]
		mov qword ptr [rdx + r10*8 - 0x4f1da0], rax
		mov edi, dword ptr [r11 + r10 - 0x9e3b2]
		neg qword ptr [rsp + r10*2 - 0x13c768]
		xor edi, ebp
		xor edi, 0xe12e3f2d
		btc r8d, ecx
		rol edi, 1
		sub r8w, 0x64a7
		sal rcx, 0x87
		xor edi, 0x689d25ab
		neg edi
		sal r8w, 0xec
		mov qword ptr [rsp + r10 - 0x9e3b4], rbp
		movsx eax, cl
		btr esi, 0xa1
		xor dword ptr [rsp + r10 - 0x9e3b4], edi
		pop rbp
		xor r10, rax
		movsxd rdi, edi
		adc r9, rdi
		mov rdx, qword ptr [rbx + rsi*2 + 0x10]
		lea rbx, [r10 + rbx - 0x9e39c]
		dec si
		movzx edi, byte ptr [rsi + r11 - 0xfff9]
		lea r11, [r11 + r10 - 0x9e3ad]
		jno 0x7ffb72b7d536
1606: UB addr = 7ffb72b7d536 with ID: 6 yields:
		ror si, 0xf
		rol si, 0xc7
		xor dil, bpl
		lea rcx, [rax*8 + 0x3d3d7905]
		ror dil, 1
		sub rsi, -0x577b11cf
		xor dil, 0xa1
		xor r8d, r8d
		rol r10w, cl
		adc dil, 0x94
		sub cx, cx
		xor dil, 0x9c
		not r8d
		btr si, cx
		xor bpl, dil
		sar r10w, 0xc6
		add rdi, rsp
		xchg ax, r8w
		mov qword ptr [r10 + rdi - 0x9fed3], rdx
		dec si
		add ax, r10w
		sub sil, al
		jmp r9
1607: UB addr = 7ffb72a6dc74 with ID: 9 yields:
		mov qword ptr [rsp + rax*4 + 0x860000c], rbp
		shl r10, 0xf5
		sbb rsi, rdx
		xor dword ptr [rsp + rax*2 + 0x430000a], ecx
		add word ptr [rsp + rax*2 + 0x4300004], ax
		sal edx, 0xca
		btr edi, eax
		mov rbp, qword ptr [rsp + rdx*8 + 8]
		dec di
		mov qword ptr [rsp + rdx], rdx
		movsxd rcx, ecx
		mov r8d, 0x869b6ea2
		sbb r10, rdi
		add word ptr [rsp + rdx], di
		adc r9, rcx
		sal sil, 0x46
		mov rdi, qword ptr [rbx + rdx + 0x10]
		mov qword ptr [rsp + rdx*2 + 8], -0x6dd6a777
		jb 0x7ffb72dadbd6
1608: UB addr = 7ffb72a6dcd2 with ID: 10 yields:
		lea rbx, [rdx + rbx + 0x18]
		neg qword ptr [rsp + rdx*8 + 8]
		setb r8b
		movzx esi, word ptr [r11 + rax + 0x2180007]
		lea r11, [r11 + rdx + 8]
		push rdx
		xor si, bp
		call 0x7ffb72c3e2f2
1609: UB addr = 7ffb728c6110 with ID: 472 yields:
		mov ecx, 0x27357e26
		movsx eax, cl
		mov r10, qword ptr [rbx + rcx*2 - 0x4e6afc4c]
		ror al, 0x46
		movsx edx, cl
		add edx, 0x39ba4b1c
		movzx edi, word ptr [rcx + r11 - 0x27357e26]
		xor di, bp
		call 0x7ffb72be78c2
1610: UB addr = 7ffb72b47d9c with ID: 5 yields:
		movzx r8d, cx
		xor dl, bpl
		xor dword ptr [rsp + rsi*4 + 0xc], r8d
		pop r10
		not dl
		bts r10, 0x98
		lea rcx, [r10*4 - 0x6c5b2e6c]
		rol r8w, 0x2c
		inc dl
		mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]
		ror dl, 1
		xor word ptr [rsp + r10 - 0x4f1da1c1], r8w
		neg qword ptr [rsp + rsi]
		adc dl, sil
		sar r10d, 0x6b
		xadd qword ptr [rsp + r10 - 0x9e3b4], rdi
		neg dl
		inc r8d
		sub dl, 0xc
		neg rsi
		setl byte ptr [rsp + r10*4 - 0x278ecb]
		rol dl, 1
		xor bpl, dl
		lea rdx, [rsp + rdx + 8]
		mov qword ptr [rdx + r10*8 - 0x4f1da0], rax
		mov edi, dword ptr [r11 + r10 - 0x9e3b2]
		neg qword ptr [rsp + r10*2 - 0x13c768]
		xor edi, ebp
		xor edi, 0xe12e3f2d
		btc r8d, ecx
		rol edi, 1
		sub r8w, 0x64a7
		sal rcx, 0x87
		xor edi, 0x689d25ab
		neg edi
		sal r8w, 0xec
		mov qword ptr [rsp + r10 - 0x9e3b4], rbp
		movsx eax, cl
		btr esi, 0xa1
		xor dword ptr [rsp + r10 - 0x9e3b4], edi
		pop rbp
		xor r10, rax
		movsxd rdi, edi
		adc r9, rdi
		mov rdx, qword ptr [rbx + rsi*2 + 0x10]
		lea rbx, [r10 + rbx - 0x9e39c]
		dec si
		movzx edi, byte ptr [rsi + r11 - 0xfff9]
		lea r11, [r11 + r10 - 0x9e3ad]
		jno 0x7ffb72b7d536
1611: UB addr = 7ffb72b7d536 with ID: 6 yields:
		ror si, 0xf
		rol si, 0xc7
		xor dil, bpl
		lea rcx, [rax*8 + 0x3d3d7905]
		ror dil, 1
		sub rsi, -0x577b11cf
		xor dil, 0xa1
		xor r8d, r8d
		rol r10w, cl
		adc dil, 0x94
		sub cx, cx
		xor dil, 0x9c
		not r8d
		btr si, cx
		xor bpl, dil
		sar r10w, 0xc6
		add rdi, rsp
		xchg ax, r8w
		mov qword ptr [r10 + rdi - 0x9fed3], rdx
		dec si
		add ax, r10w
		sub sil, al
		jmp r9
1612: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
1613: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
1614: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
1615: UB addr = 7ffb72a8f198 with ID: 58 yields:
		jns 0x7ffb72c8632a
1616: UB addr = 7ffb72b7d42e with ID: 59 yields:
		mov rdi, qword ptr [rbx + rdx - 0xa5]
		mov ecx, 0x26214c3c
		xor edx, esi
		adc r10, rdi
		xadd dx, r8w
		mov qword ptr [rbx + rsi - 0x1cc1], r10
		lea rbx, [rbx + rdx - 0x22fe]
		jmp r9
1617: UB addr = 7ffb7296e57b with ID: 473 yields:
		mov edx, 0xa819427
		movzx r8d, byte ptr [r11 + rdx*2 - 0x1503284e]
		bts dx, 0xa7
		xor r8b, bpl
		movsx r10d, dl
		or rdx, 0x8999606
		xor r8b, 0xb6
		lea rsi, [r10 + rdx*2 - 0x34c0314c]
		lea rdi, [r10*4 - 0xd4f9fc2]
		add si, 0x54a9
		not r8b
		shr r10, 0xcb
		ror r8b, 1
		call 0x7ffb72b90681
1618: UB addr = 7ffb72b90681 with ID: 474 yields:
		add r8b, r10b
		movzx eax, dl
		rol rax, 0x6a
		mov qword ptr [rsp + rdx - 0xa9996a7], rdx
		xor r8b, r10b
		xor bpl, r8b
		lea r8, [rsp + r8 + 8]
		mov edx, 0x1706ce2b
		movzx r10d, dl
		mov r8d, dword ptr [r11 + rdx*2 - 0x2e0d9c56]
		movzx edi, dl
		xor r8d, ebp
		movzx ecx, dil
		shl dx, 0xa5
		ror r8d, 1
		lea rsi, [rdx + rcx*8 + 0x719ec1b2]
		inc r8d
		lea rsi, [rsi*2 + 0x4e9d55b9]
		xor r8d, 0x16348688
		bts si, dx
		ror dl, 0x67
		inc r8d
		btr edx, r10d
		jae 0x7ffb728f353e
1619: UB addr = 7ffb728f353e with ID: 89 yields:
		ror r8d, 3
		sal r10b, 0x26
		sbb ecx, edi
		push rbp
		and cl, 0x3d
		movzx eax, cl
		xor dword ptr [rsp + rdx - 0x1706c5c2], r8d
		lea rcx, [rcx + r10 + 0x5bb14d2a]
		cwde
		pop rbp
		not cl
		and edi, eax
		mov dword ptr [rbx + rdx*2 - 0x2e0d8b88], r8d
		sub r10, rdx
		mov rdx, qword ptr [r11 + rdx*2 - 0x2e0d8b80]
		shl di, 0x4e
		not si
		add ax, 0x1c05
		ror r10b, 0xa4
		lea rdx, [r10 + rdx + 0x456cae70]
		neg rdx
		lea r8, [r10*8 - 0x7fe7fbef]
		rol rdx, 1
		xor rbp, rdx
		or r10d, eax
		mov qword ptr [rbx + rdi*2 - 0x800c], rdx
		ja 0x7ffb72f0df4f
1620: UB addr = 7ffb72a7a0dc with ID: 90 yields:
		ror dx, 1
		mov qword ptr [rsp + rdi - 0x4000], 0x6f0ac19b
		sub dx, 0xc9ba
		push r10
		or edi, 0x7da86d19
		pop rsi
		ror dx, 1
		or dword ptr [rsp + rax*2 - 0x32], 0xbf0b5da2
		adc dx, 0xee9e
		push rax
		ror eax, 0x70
		xor bp, dx
		cwde
		sar r10w, 0xe4
		lea rdx, [rsp + rdx + 0x10]
		mov rcx, qword ptr [rax + rdx]
		jns 0x7ffb72bd5c92
1621: UB addr = 7ffb72b59447 with ID: 46 yields:
		mov r8d, 0x818098a8
		ror al, 1
		movsx esi, r8w
		add al, 4
		not al
		shr r8d, 0x22
		sbb al, 0x9b
		neg al
		xor bpl, al
		shl word ptr [rsp + r8 - 0x20602626], 0xeb
		pop rdi
		adc rax, rsp
		mov rcx, qword ptr [r8 + rax - 0x2060262a]
		movzx eax, si
		mov qword ptr [rdi + rbx - 0x3695281e], rcx
		mov r10d, dword ptr [r8 + r11 - 0x20602629]
		xor rax, 0x4d9cb20a
		lea r11, [r11 + rdi*2 - 0x6d2a5027]
		bt r8, rax
		cdq
		jb 0x7ffb72e38308
1622: UB addr = 7ffb72b594b9 with ID: 31 yields:
		xor r10d, ebp
		ror di, 0xc1
		rol edi, 0x9e
		neg r10d
		neg rdi
		cdqe
		call 0x7ffb72a8b1a9
1623: UB addr = 7ffb72a8b1a9 with ID: 32 yields:
		ror r10d, 2
		mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf
		inc word ptr [rsp + r8 - 0x20602627]
		lea r10d, [r10 + r8*4 + 0x6ebe4f90]
		and si, word ptr [rsp + rdx + 2]
		not r10d
		pop r8
		adc r8, -0xd5dd14d
		push rbp
		cwde
		xor dword ptr [rsp + r8 + 0x4a4e941c], r10d
		cqo
		movsx ecx, r8b
		pop rbp
		and r8w, 0x2395
		setne sil
		movsxd r10, r10d
		shr si, cl
		cmovae esi, r8d
		adc r9, r10
		btr rdx, 0x28
		mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]
		mov r10d, ecx
		dec al
		mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]
		push r10
		adc rdi, rcx
		lea rcx, [r10*4 - 0x774591ed]
		mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi
		neg byte ptr [rsp + rax - 0x2a9a]
		setle r8b
		mov qword ptr [rsp + rax*2 - 0x5542], r9
		ret
1624: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
1625: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
1626: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
1627: UB addr = 7ffb728ec820 with ID: 66 yields:
		mov rdx, qword ptr [rbx]
		mov eax, 0x2e3e62ae
		dec eax
		mov r10, qword ptr [rbx + rax - 0x2e3e62a5]
		add rdx, r10
		push rax
		movsx edi, word ptr [rsp + rax - 0x2e3e62ab]
		add word ptr [rsp + rax*2 - 0x5c7cc556], di
		mov rsi, rdx
		jg 0x7ffb72d73526
1628: UB addr = 7ffb729be318 with ID: 67 yields:
		movsxd r8, r8d
		mov qword ptr [rsp + rax*2 - 0x5c7cc55a], rdi
		add eax, 0x3a96efa2
		pop rsi
		adc r9, r8
		btr esi, 0x1b
		movzx r8d, ax
		shr r10w, cl
		adc rdx, r9
		jmp rdx
1629: UB addr = 7ffb72ba6e72 with ID: 475 yields:
		mov edx, 0x1706ce2b
		movzx r10d, dl
		mov r8d, dword ptr [r11 + rdx*2 - 0x2e0d9c56]
		movzx edi, dl
		xor r8d, ebp
		movzx ecx, dil
		shl dx, 0xa5
		ror r8d, 1
		lea rsi, [rdx + rcx*8 + 0x719ec1b2]
		inc r8d
		lea rsi, [rsi*2 + 0x4e9d55b9]
		xor r8d, 0x16348688
		bts si, dx
		ror dl, 0x67
		inc r8d
		btr edx, r10d
		jae 0x7ffb728f353e
1630: UB addr = 7ffb728f353e with ID: 89 yields:
		ror r8d, 3
		sal r10b, 0x26
		sbb ecx, edi
		push rbp
		and cl, 0x3d
		movzx eax, cl
		xor dword ptr [rsp + rdx - 0x1706c5c2], r8d
		lea rcx, [rcx + r10 + 0x5bb14d2a]
		cwde
		pop rbp
		not cl
		and edi, eax
		mov dword ptr [rbx + rdx*2 - 0x2e0d8b88], r8d
		sub r10, rdx
		mov rdx, qword ptr [r11 + rdx*2 - 0x2e0d8b80]
		shl di, 0x4e
		not si
		add ax, 0x1c05
		ror r10b, 0xa4
		lea rdx, [r10 + rdx + 0x456cae70]
		neg rdx
		lea r8, [r10*8 - 0x7fe7fbef]
		rol rdx, 1
		xor rbp, rdx
		or r10d, eax
		mov qword ptr [rbx + rdi*2 - 0x800c], rdx
		ja 0x7ffb72f0df4f
1631: UB addr = 7ffb72a7a0dc with ID: 90 yields:
		ror dx, 1
		mov qword ptr [rsp + rdi - 0x4000], 0x6f0ac19b
		sub dx, 0xc9ba
		push r10
		or edi, 0x7da86d19
		pop rsi
		ror dx, 1
		or dword ptr [rsp + rax*2 - 0x32], 0xbf0b5da2
		adc dx, 0xee9e
		push rax
		ror eax, 0x70
		xor bp, dx
		cwde
		sar r10w, 0xe4
		lea rdx, [rsp + rdx + 0x10]
		mov rcx, qword ptr [rax + rdx]
		jns 0x7ffb72bd5c92
1632: UB addr = 7ffb72ba6e72 with ID: 475 yields:
		mov edx, 0x1706ce2b
		movzx r10d, dl
		mov r8d, dword ptr [r11 + rdx*2 - 0x2e0d9c56]
		movzx edi, dl
		xor r8d, ebp
		movzx ecx, dil
		shl dx, 0xa5
		ror r8d, 1
		lea rsi, [rdx + rcx*8 + 0x719ec1b2]
		inc r8d
		lea rsi, [rsi*2 + 0x4e9d55b9]
		xor r8d, 0x16348688
		bts si, dx
		ror dl, 0x67
		inc r8d
		btr edx, r10d
		jae 0x7ffb728f353e
1633: UB addr = 7ffb728f353e with ID: 89 yields:
		ror r8d, 3
		sal r10b, 0x26
		sbb ecx, edi
		push rbp
		and cl, 0x3d
		movzx eax, cl
		xor dword ptr [rsp + rdx - 0x1706c5c2], r8d
		lea rcx, [rcx + r10 + 0x5bb14d2a]
		cwde
		pop rbp
		not cl
		and edi, eax
		mov dword ptr [rbx + rdx*2 - 0x2e0d8b88], r8d
		sub r10, rdx
		mov rdx, qword ptr [r11 + rdx*2 - 0x2e0d8b80]
		shl di, 0x4e
		not si
		add ax, 0x1c05
		ror r10b, 0xa4
		lea rdx, [r10 + rdx + 0x456cae70]
		neg rdx
		lea r8, [r10*8 - 0x7fe7fbef]
		rol rdx, 1
		xor rbp, rdx
		or r10d, eax
		mov qword ptr [rbx + rdi*2 - 0x800c], rdx
		ja 0x7ffb72f0df4f
1634: UB addr = 7ffb72a7a0dc with ID: 90 yields:
		ror dx, 1
		mov qword ptr [rsp + rdi - 0x4000], 0x6f0ac19b
		sub dx, 0xc9ba
		push r10
		or edi, 0x7da86d19
		pop rsi
		ror dx, 1
		or dword ptr [rsp + rax*2 - 0x32], 0xbf0b5da2
		adc dx, 0xee9e
		push rax
		ror eax, 0x70
		xor bp, dx
		cwde
		sar r10w, 0xe4
		lea rdx, [rsp + rdx + 0x10]
		mov rcx, qword ptr [rax + rdx]
		jns 0x7ffb72bd5c92
1635: UB addr = 7ffb72926672 with ID: 476 yields:
		mov ecx, 0xa43b3020
		lea rsi, [rcx*4 + 0x74064384]
		movzx r10d, byte ptr [r11]
		xor r10b, bpl
		movsx r8d, cx
		sbb r10b, 0x9c
		movsx eax, sil
		shr si, 0xab
		rol r10b, 1
		dec r10b
		neg r10b
		xor bpl, r10b
		cqo
		add r10, rsp
		call 0x7ffb728ae0d0
1636: UB addr = 7ffb728ae0d0 with ID: 477 yields:
		mov qword ptr [rsp + r8 - 0x3020], rcx
		movzx r8w, byte ptr [r10 + r8 - 0x3020]
		mov edi, eax
		bswap eax
		rol dword ptr [rsp + rax*2 - 0x8000000], 0xd5
		mov word ptr [rax + rbx - 0x4000002], r8w
		adc edx, dword ptr [rax + r11 - 0x3ffffff]
		sub dword ptr [rsp + rax - 0x3ffffff], eax
		cdqe
		mov r10d, esi
		xor edx, ebp
		dec edx
		btr ecx, r10d
		neg edx
		sal word ptr [rsp + rax*4 - 0xffffffb], 0x2d
		dec si
		call 0x7ffb729fe09d
1637: UB addr = 7ffb729fe09d with ID: 478 yields:
		xor edx, 0x44afaea1
		shr r10b, 0xa3
		sbb cx, cx
		and cl, r10b
		bswap edx
		mov qword ptr [rsp + rax - 0x3fffff8], rbp
		mov qword ptr [rsp + rax*4 - 0x10000000], rcx
		xor dword ptr [rsp + rax*4 - 0xffffff8], edx
		mov rbp, qword ptr [rsp + rax - 0x3fffff8]
		lea rax, [rax - 0x7c7fc0f7]
		movsxd rdx, edx
		add r9, rdx
		movsx r8d, byte ptr [rsp + rax + 0x787fc0f9]
		movzx ecx, byte ptr [rax + r11 + 0x787fc0fc]
		mov qword ptr [rsp + rax + 0x787fc0ff], rax
		lea r11, [r11 + rdi*4 - 0xa]
		movsx edx, byte ptr [rsp + rdi*2 - 3]
		xor cl, bpl
		xor cl, 0xb6
		rol qword ptr [rsp + rdi + 4], 0xde
		inc dil
		call 0x7ffb72a180c9
1638: UB addr = 7ffb72a180c9 with ID: 479 yields:
		not cl
		mov qword ptr [rsp + rax + 0x787fc0f7], 0x2a9ae70f
		ror cl, 1
		pop rdx
		push r8
		sar dx, 0x6c
		dec cl
		add dword ptr [rsp + rdi*4 - 0x10], edx
		lea rsi, [r8*2 + 0x57bb1d1b]
		sbb word ptr [rsp + rsi - 0x57bb1d7f], 0x1b81
		not cl
		inc rsi
		add al, dl
		xor bpl, cl
		lea rcx, [rsp + rcx + 0x18]
		mov edi, dword ptr [rcx + rax + 0x787fc0f9]
		inc rax
		mov dword ptr [rsi + rbx - 0x57bb1d98], edi
		lea rax, [rbx + r10*2 - 0x9e60006]
		ja 0x7ffb72aa7653
1639: UB addr = 7ffb72aa7653 with ID: 480 yields:
		mov qword ptr [rbx + r10*8 - 0x2798000e], rax
		ror r8, 0x38
		pop r10
		xadd dword ptr [rsp + rsi - 0x57bb1d90], r8d
		lea rbx, [rdx + rbx - 0x2a9b000c]
		pop r8
		pop rax
		jg 0x7ffb72eb83a2
1640: UB addr = 7ffb72b3863d with ID: 481 yields:
		mov rcx, qword ptr [rbx]
		mov edi, 0x6929aa32
		mov edx, 0xf5aa7009
		movzx esi, dil
		mov edi, dword ptr ss:[rcx + rdi - 0x6929aa32]
		movzx ecx, sil
		lea rbx, [rbx + rsi*4 - 0xc4]
		mov dword ptr [rsi + rbx - 0x32], edi
		mov edi, edx
		mov eax, ecx
		mov r8d, dword ptr [rsi + r11 - 0x32]
		sar si, 0xa5
		lea r11, [r11 + rax - 0x2e]
		sal dl, 0x61
		xor r8d, ebp
		neg r8d
		ror r8d, 2
		btc eax, edx
		call 0x7ffb72b62e80
1641: UB addr = 7ffb72b62e80 with ID: 482 yields:
		lea r8d, [r8 + rdi - 0x161aece7]
		mov qword ptr [rsp + rsi*2 - 6], -0x3f5c70f0
		dec dx
		movzx r10d, word ptr [rsp + rsi - 2]
		bswap r8d
		xor r8d, 0xc5acd3b3
		mov qword ptr [rsp + rsi*2 - 6], rbp
		call 0x7ffb72a3c30d
1642: UB addr = 7ffb72a3c30d with ID: 483 yields:
		mov edx, 0xa214a84
		xchg dh, dl
		mov ecx, dword ptr [r11 + rdx*8 - 0x510c2250]
		xor ecx, ebp
		lea ecx, [rcx + rdx + 0x2909b60]
		mov qword ptr [rsp + rdx - 0xa21844a], rdx
		not ecx
		inc ecx
		sar qword ptr [rsp + rdx - 0xa21844a], 0xba
		bswap ecx
		dec ecx
		neg byte ptr [rsp + rdx - 0xa218446]
		movzx r8d, dl
		or qword ptr [rsp + rdx - 0xa21844a], rbp
		movsx esi, r8w
		xor dword ptr [rsp + rdx*8 - 0x510c2250], ecx
		movsx edi, sil
		pop rbp
		mov eax, edi
		movsxd rcx, ecx
		add r9, rcx
		lea r8, [rax - 0x7e4e0ad9]
		mov edi, dword ptr [rdx + rbx - 0xa21844a]
		and si, dx
		mov eax, dword ptr [rbx + rdx*4 - 0x28861124]
		bts r8, rsi
		lea rcx, [rsi + r8*2 + 0x5e23d23b]
		call 0x7ffb729644e4
1643: UB addr = 7ffb729644e4 with ID: 484 yields:
		inc r8
		inc edx
		mov r10d, edi
		or sil, 0x9d
		movzx eax, byte ptr [r11 + rdx*2 - 0x14430892]
		xor al, bpl
		mov qword ptr [rsp + rdx - 0xa21844b], 0x3517e30a
		movsx edi, r8b
		push rdi
		dec al
		shr dl, 0x43
		rol al, 1
		shr word ptr [rsp + rdx*2 - 0x1443080e], 0xc2
		sbb al, 0x18
		shr byte ptr [rsp + rdx - 0xa2183fe], 0x65
		not al
		mov ecx, dword ptr [rsp + rdx*4 - 0x28861019]
		pop r8
		add al, cl
		inc dx
		xor bpl, al
		shr r8b, cl
		ror si, 9
		or rdi, rcx
		lea rax, [rsp + rax + 8]
		mov dword ptr [rax + rdx - 0xa21840a], r10d
		mov eax, dword ptr [r11 + rdx - 0xa218405]
		lea r10, [rsi*8 + 0x4199570e]
		lea r11, [rdx + r11 - 0xa218401]
		xor eax, ebp
		rol cx, 0xaa
		sar qword ptr [rsp + rdx*8 - 0x510c2050], 0x4c
		adc word ptr [rsp + rdx - 0xa21840a], si
		bswap eax
		ror cl, 0x65
		xchg qword ptr [rsp + r8*2 - 0x72], rcx
		inc rdi
		xor eax, 0x39ae4229
		sub eax, 0x9d290498
		ror eax, 3
		xadd si, di
		or dword ptr [rsp + rdx*4 - 0x28861028], r8d
		seto sil
		inc eax
		lea rcx, [r8 + 0x708b380]
		xchg qword ptr [rsp + rdx - 0xa21840a], rsi
		neg eax
		not r8b
		add dword ptr [rsp + rdx*4 - 0x28861025], r8d
		bswap eax
		or word ptr [rsp + rdx*2 - 0x1443080f], r8w
		sal qword ptr [rsp + rdx - 0xa21840a], 0x3a
		ror eax, 3
		xor eax, 0x1f0f9da6
		or qword ptr [rsp + rdx - 0xa21840a], rbp
		xadd di, cx
		shr dil, 0xa1
		xor dword ptr [rsp + rdx - 0xa21840a], eax
		bts si, cx
		sal edx, 0x2d
		pop rbp
		ror r8b, 0x45
		mov dword ptr [rbx + rdx - 0x30813ffa], eax
		setns sil
		lea rbx, [rbx + r8*2 - 0x66]
		add r8b, cl
		xadd edi, ecx
		jmp r9
1644: UB addr = 7ffb72baa237 with ID: 485 yields:
		mov ecx, 0x8313f523
		movzx edi, byte ptr [r11]
		movsx esi, cl
		call 0x7ffb72c60391
1645: UB addr = 7ffb72b63a7d with ID: 458 yields:
		shr qword ptr [rsp + rdx*2 - 0x5975f9a4], 0x7c
		rol dil, 1
		dec dil
		movzx ecx, r8w
		rol dil, 1
		dec dil
		bswap r10
		cqo
		neg dil
		sal r10w, 0xab
		xor bpl, dil
		lea rdi, [rsp + rdi + 0x18]
		and dl, ah
		setle byte ptr [rsp + rdx + 3]
		movzx si, byte ptr [rdi + rdx*4]
		mov word ptr [rbx + rdx - 4], si
		lea rbx, [rbx + rdx - 4]
		mov edi, dword ptr [r11 + rdx + 2]
		mov esi, r10d
		xadd word ptr [rsp + rdx + 5], cx
		lea r11, [rdx + r11 + 6]
		call 0x7ffb72b930df
1646: UB addr = 7ffb72b930df with ID: 459 yields:
		sub r8, 0x2b806807
		xor edi, ebp
		xor r8w, word ptr [rsp + rdx*2 + 0x14]
		sar dl, 0x45
		dec edi
		pop rcx
		ror qword ptr [rsp + rdx + 2], 0xe7
		neg edi
		push r10
		push rsi
		xor edi, 0x44afaea1
		mov rax, qword ptr [rsp + 0x20]
		add rax, 0xf7e25
		jmp rax
1647: UB addr = 7ffb72a67562 with ID: 486 yields:
		movzx di, byte ptr [rdx + rbx - 0xe]
		mov ecx, 0xa6989184
		mov al, byte ptr [rbx + rdx*4 - 0x36]
		lea rbx, [rdx + rbx - 0xc]
		movzx r10d, dl
		add dil, al
		shr edx, cl
		movsx esi, cx
		mov word ptr [rbx + rdx*4], di
		jb 0x7ffb72e49dc7
1648: UB addr = 7ffb72ae87a5 with ID: 487 yields:
		bts r8d, 0x39
		lea r10d, [rcx + r10 + 0x4a7182b8]
		push rdx
		xor r10d, 0xf4b4fd06
		xadd dx, di
		xchg word ptr [rsp + rdx*4 + 4], cx
		adc di, r8w
		dec r10d
		neg r10d
		cdq
		inc rcx
		cwde
		xor r10d, 0x223c1d1d
		shl qword ptr [rsp + rdx], 0xcb
		not dil
		mov qword ptr [rsp + rdx], rbp
		xor dword ptr [rsp + rdi - 0xff], r10d
		cdq
		xadd esi, r8d
		push rcx
		mov rbp, qword ptr [rsp + rsi - 0x1ff917c]
		or rax, rdi
		xor edi, 0x2c8e96a2
		movsxd r10, r10d
		adc r9, r10
		mov qword ptr [rsp + rsi - 0x1ff9184], r9
		ret 8
1649: UB addr = 7ffb72a46666 with ID: 488 yields:
		dec eax
		sub r10, 0x6aaca5ac
		add dx, si
		not eax
		dec rdi
		push rbp
		xor dword ptr [rsp + rsi - 0x6f], eax
		pop rbp
		push rcx
		movsxd rax, eax
		add r9, rax
		or sil, 0x99
		shr ecx, 0x86
		mov r8w, word ptr [rsi + rbx - 0xff]
		sar byte ptr [rsp + rsi - 0xfd], cl
		call 0x7ffb72ccc49c
1650: UB addr = 7ffb729cf642 with ID: 489 yields:
		sal word ptr [rsp + rsi*2 - 0x1eb], 0x6e
		dec dx
		adc r10b, 0x2c
		ror r10b, 1
		pop rsi
		neg r10b
		rol dl, 0xa4
		ror r10b, 1
		xor bpl, r10b
		ror dword ptr [rsp + rcx*2 - 0x6fdc7e5], cl
		lea r10, [rsp + r10 + 0x20]
		push rdi
		mov byte ptr [rcx + r10 - 0x37ee3ff], r8b
		mov rcx, qword ptr [rcx + r11 - 0x37ee3fa]
		mov eax, edi
		pop rsi
		movsx r8d, dl
		sbb r11, -0xd
		lea rsi, [rdx + rsi*8 - 0x69c54e7b]
		sal esi, 0x61
		pop r10
		add r10, -0x3bc0cd
		jmp r10
1651: UB addr = 7ffb729f1798 with ID: 490 yields:
		xor rcx, rbp
		inc rcx
		xor r8b, r8b
		adc dl, byte ptr [rsp + rsi - 0x7720933d]
		neg r8b
		xor rcx, 0x3ca8de17
		xchg dword ptr [rsp + rsi - 0x77209336], edi
		call 0x7ffb72d3fe08
1652: UB addr = 7ffb72b9168c with ID: 81 yields:
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
1653: UB addr = 7ffb729e9388 with ID: 82 yields:
		mov r10d, 0x743bafb1
		movsx r8d, r10w
		mov rsi, qword ptr [rbx + rsi - 0x743bafb1]
		movzx eax, r10w
		mov ecx, dword ptr [rax + rsi - 0xafb1]
		cwde
		movzx esi, r8w
		mov dword ptr [rbx + rsi - 0xafad], ecx
		mov edx, r10d
		call 0x7ffb72da8477
1654: UB addr = 7ffb72a800f3 with ID: 491 yields:
		mov qword ptr [rsp + rax*8 - 0x5f620], 0x7af253a
		lea rsi, [r10 + r10*2 - 0x586acbe9]
		neg r8d
		add eax, dword ptr [rsp + rax - 0xbec0]
		sbb qword ptr [rsp + rax - 0xbec4], rsi
		mov qword ptr [rsp + rax - 0xbec4], rbp
		movzx edi, ax
		xadd r10w, si
		xor dword ptr [rsp + rax - 0xbec4], r8d
		mov ecx, 0xe31fffa4
		call 0x7ffb72c6bfc3
1655: UB addr = 7ffb72b69522 with ID: 50 yields:
		mov eax, 0xb602e72e
		lea rdi, [rax - 0x6173404d]
		movzx ecx, di
		movzx edi, byte ptr [r11 + rcx*4 - 0x29b84]
		push rax
		sar word ptr [rsp + rcx - 0xa6de], cl
		xor dil, bpl
		movsx esi, cl
		inc dil
		lea r8, [rsi*8 - 0x71ff74e7]
		ror dil, cl
		neg dil
		cwd
		or edx, dword ptr [rsp + rcx - 0xa6dd]
		sbb dword ptr [rsp + rcx*8 - 0x53707], ecx
		xor dil, al
		neg dx
		xor bpl, dil
		sar word ptr [rsp + rdx*2 + 3], 0x26
		pop rcx
		adc rdi, rsp
		xchg eax, edx
		mov rdx, qword ptr [rdi + rax - 1]
		push rsi
		mov qword ptr [rax + rbx - 9], rdx
		call 0x7ffb72b91b37
1656: UB addr = 7ffb72b91b37 with ID: 51 yields:
		mov r10d, dword ptr [r11 + rax*4 - 0xb]
		xor r10d, ebp
		mov qword ptr [rsp + rax*2 - 6], rcx
		cwde
		push r8
		dec r10d
		ror r10d, 1
		dec r10d
		push rax
		ror qword ptr [rsp + rax + 6], 0xb0
		cqo
		bswap r10d
		setae byte ptr [rsp + rax*2 + 0x10]
		cmovb si, cx
		mov qword ptr [rsp + rax + 0x15], rbp
		btc r8w, dx
		xor dword ptr [rsp + rax + 0x15], r10d
		and ecx, 0x76179610
		mov rbp, qword ptr [rsp + rdx + 0x18]
		shl eax, cl
		movsxd r10, r10d
		adc r9, r10
		shl al, 0x44
		mov qword ptr [rsp + rax*2 - 0x5ffe8], rdx
		movzx r10d, word ptr [r11 + rax*4 - 0xbfffb]
		shr cx, 0xc
		xchg byte ptr [rsp + rax - 0x2fffb], ah
		shr dword ptr [rsp + rax*4 - 0xbfff1], 0x7c
		lea r11, [r11 + rax - 0x2fff9]
		rol word ptr [rsp + rax*4 - 0xbfffb], 0x6e
		shl byte ptr [rsp + rax*2 - 0x5fffc], 1
		xor r10w, bp
		rol dl, 0x83
		dec ax
		sbb r10w, ax
		pop rax
		xchg qword ptr [rsp + rax*2 + 5], rsi
		sar dl, 0x22
		ror r10w, 1
		neg word ptr [rsp + rsi - 0x1000052]
		not r10w
		neg r10w
		xor bp, r10w
		movzx edi, cl
		lea r10, [rsp + r10 + 0x18]
		or rdi, qword ptr [r10 + rax - 3]
		mov qword ptr [rbx + rax - 0x13], rdi
		sal dx, 0xc4
		lea rbx, [rbx + rax - 0x13]
		inc esi
		or dl, 0xb0
		pop rcx
		pop rax
		pop rcx
		jl 0x7ffb72eb83a2
1657: UB addr = 7ffb72a8da34 with ID: 492 yields:
		ror edi, 2
		neg al
		mov qword ptr [rsp + r8 - 0xcb7e], rcx
		call 0x7ffb72ed6f0c
1658: UB addr = 7ffb729d2309 with ID: 455 yields:
		mov dil, byte ptr [rbx + 2]
		or dword ptr [rsp + 0xa], 0xb7343727
		je 0x7ffb72e0ea0f
1659: UB addr = 7ffb729d231b with ID: 493 yields:
		and sil, dil
		not sil
		mov word ptr [rbx + 2], si
		mov esi, dword ptr [r11]
		xor esi, ebp
		pop rcx
		not qword ptr [rsp]
		push -0x2dea5664
		dec esi
		mov ecx, dword ptr [rsp + 7]
		neg esi
		movzx edi, byte ptr [rsp + rcx - 0x48095cfa]
		cmove rdx, qword ptr [rsp + r8 - 0xa]
		dec eax
		neg eax
		add esi, 0xf915612c
		inc eax
		xadd cx, r8w
		xadd qword ptr [rsp + r8 - 0xae], rsi
		not eax
		dec r8w
		inc byte ptr [rsp + r8*2 - 0x15a]
		and r10, r8
		mov qword ptr [rsp + r8*8 - 0x568], rbp
		xor dword ptr [rsp + r8 - 0xad], eax
		sub cl, r8b
		ror r8w, 0x21
		pop rbp
		inc rcx
		bts r8w, cx
		lea rcx, [r10 + rsi*4 - 0x7cd2e9e6]
		movsxd rax, eax
		xor esi, 0x8ba57b8d
		push rcx
		adc r9, rax
		rol word ptr [rsp + r8*8 - 0x482ac], 0xab
		mov qword ptr [rsp + r8 - 0x9056], r9
		ret
1660: UB addr = 7ffb72b69522 with ID: 50 yields:
		mov eax, 0xb602e72e
		lea rdi, [rax - 0x6173404d]
		movzx ecx, di
		movzx edi, byte ptr [r11 + rcx*4 - 0x29b84]
		push rax
		sar word ptr [rsp + rcx - 0xa6de], cl
		xor dil, bpl
		movsx esi, cl
		inc dil
		lea r8, [rsi*8 - 0x71ff74e7]
		ror dil, cl
		neg dil
		cwd
		or edx, dword ptr [rsp + rcx - 0xa6dd]
		sbb dword ptr [rsp + rcx*8 - 0x53707], ecx
		xor dil, al
		neg dx
		xor bpl, dil
		sar word ptr [rsp + rdx*2 + 3], 0x26
		pop rcx
		adc rdi, rsp
		xchg eax, edx
		mov rdx, qword ptr [rdi + rax - 1]
		push rsi
		mov qword ptr [rax + rbx - 9], rdx
		call 0x7ffb72b91b37
1661: UB addr = 7ffb72b91b37 with ID: 51 yields:
		mov r10d, dword ptr [r11 + rax*4 - 0xb]
		xor r10d, ebp
		mov qword ptr [rsp + rax*2 - 6], rcx
		cwde
		push r8
		dec r10d
		ror r10d, 1
		dec r10d
		push rax
		ror qword ptr [rsp + rax + 6], 0xb0
		cqo
		bswap r10d
		setae byte ptr [rsp + rax*2 + 0x10]
		cmovb si, cx
		mov qword ptr [rsp + rax + 0x15], rbp
		btc r8w, dx
		xor dword ptr [rsp + rax + 0x15], r10d
		and ecx, 0x76179610
		mov rbp, qword ptr [rsp + rdx + 0x18]
		shl eax, cl
		movsxd r10, r10d
		adc r9, r10
		shl al, 0x44
		mov qword ptr [rsp + rax*2 - 0x5ffe8], rdx
		movzx r10d, word ptr [r11 + rax*4 - 0xbfffb]
		shr cx, 0xc
		xchg byte ptr [rsp + rax - 0x2fffb], ah
		shr dword ptr [rsp + rax*4 - 0xbfff1], 0x7c
		lea r11, [r11 + rax - 0x2fff9]
		rol word ptr [rsp + rax*4 - 0xbfffb], 0x6e
		shl byte ptr [rsp + rax*2 - 0x5fffc], 1
		xor r10w, bp
		rol dl, 0x83
		dec ax
		sbb r10w, ax
		pop rax
		xchg qword ptr [rsp + rax*2 + 5], rsi
		sar dl, 0x22
		ror r10w, 1
		neg word ptr [rsp + rsi - 0x1000052]
		not r10w
		neg r10w
		xor bp, r10w
		movzx edi, cl
		lea r10, [rsp + r10 + 0x18]
		or rdi, qword ptr [r10 + rax - 3]
		mov qword ptr [rbx + rax - 0x13], rdi
		sal dx, 0xc4
		lea rbx, [rbx + rax - 0x13]
		inc esi
		or dl, 0xb0
		pop rcx
		pop rax
		pop rcx
		jl 0x7ffb72eb83a2
1662: UB addr = 7ffb72b7282b with ID: 494 yields:
		lea rdi, [r8*8 - 0x7b5a6867]
		movzx si, byte ptr [r10 + r8 - 0x5d9d]
		mov qword ptr [rsp + rdi + 0x7b577b7f], r8
		lea rbx, [rbx + rdi + 0x7b577b85]
		mov word ptr [rbx + r8*2 - 0xbb3a], si
		mov esi, dword ptr [r11 + r8*2 - 0xbb3a]
		cbw
		and r8d, dword ptr [rsp + r8*2 - 0xbb38]
		lea r11, [rdi + r11 + 0x7b577b83]
		and word ptr [rsp + r8 + 1], di
		xor esi, ebp
		xor esi, 0xa61191bb
		ror esi, 1
		movzx r10d, dil
		inc esi
		sar qword ptr [rsp + rdi + 0x7b577b7f], 0xc3
		bswap esi
		adc r8b, 0x3e
		mov qword ptr [rsp + rdi + 0x7b577b7f], rbp
		xor dword ptr [rsp + r8 - 0x3f], esi
		pop rbp
		movsxd rsi, esi
		cqo
		add r9, rsi
		sar r8w, 0xea
		or r8, r9
		jmp r8
1663: UB addr = 7ffb72baa237 with ID: 485 yields:
		mov ecx, 0x8313f523
		movzx edi, byte ptr [r11]
		movsx esi, cl
		call 0x7ffb72c60391
1664: UB addr = 7ffb72b63a7d with ID: 458 yields:
		shr qword ptr [rsp + rdx*2 - 0x5975f9a4], 0x7c
		rol dil, 1
		dec dil
		movzx ecx, r8w
		rol dil, 1
		dec dil
		bswap r10
		cqo
		neg dil
		sal r10w, 0xab
		xor bpl, dil
		lea rdi, [rsp + rdi + 0x18]
		and dl, ah
		setle byte ptr [rsp + rdx + 3]
		movzx si, byte ptr [rdi + rdx*4]
		mov word ptr [rbx + rdx - 4], si
		lea rbx, [rbx + rdx - 4]
		mov edi, dword ptr [r11 + rdx + 2]
		mov esi, r10d
		xadd word ptr [rsp + rdx + 5], cx
		lea r11, [rdx + r11 + 6]
		call 0x7ffb72b930df
1665: UB addr = 7ffb72b930df with ID: 459 yields:
		sub r8, 0x2b806807
		xor edi, ebp
		xor r8w, word ptr [rsp + rdx*2 + 0x14]
		sar dl, 0x45
		dec edi
		pop rcx
		ror qword ptr [rsp + rdx + 2], 0xe7
		neg edi
		push r10
		push rsi
		xor edi, 0x44afaea1
		mov rax, qword ptr [rsp + 0x20]
		add rax, 0xf7e25
		jmp rax
1666: UB addr = 7ffb72b9c1e3 with ID: 495 yields:
		mov rbp, qword ptr [rsp + rax - 0x6b536a]
		mov esi, dword ptr [r11 + rsi - 0x13ff8953]
		mov edx, r10d
		lea r11, [r11 + rdi*4 - 0xfa486f]
		xadd edx, r10d
		sar cx, 0x61
		movzx r8d, dx
		xor esi, ebp
		dec cx
		lea esi, [rsi + r10 - 0x2bdf27cf]
		ror esi, 2
		dec esi
		rol esi, 3
		not r10b
		dec esi
		cdq
		inc dl
		sub r10w, 0xf25
		not esi
		and dl, cl
		push rbp
		jge 0x7ffb72a182f8
1667: UB addr = 7ffb72a182f8 with ID: 496 yields:
		xor dword ptr [rsp + rdi - 0x3e921d], esi
		sbb dl, r8b
		pop rbp
		movsxd rsi, esi
		xor r8, rdi
		push rcx
		neg rdi
		add r9, rsi
		lea r10, [rdi - 0xef70c75]
		not edx
		mov qword ptr [rsp + r10 + 0xf359e92], r9
		ret
1668: UB addr = 7ffb7290d40e with ID: 497 yields:
		movzx r10d, byte ptr [r11]
		xor r10b, bpl
		mov ecx, 0x50a413a
		ror r10b, 1
		mov r8d, ecx
		xor r10b, 8
		movsx edx, r8w
		call 0x7ffb72e28299
1669: UB addr = 7ffb72ac1d1b with ID: 498 yields:
		mov qword ptr [rsp + r8*2 - 0x11d4a202], 0x6a86d11c
		not dword ptr [rsp + rdx*8 - 0x47528808]
		movzx r8d, byte ptr [r11 + r8 - 0x8ea50fc]
		cdqe
		lea r11, [rax + r11 - 0x607d4134]
		push rsi
		cwde
		dec rax
		xor r8b, bpl
		cdq
		xor eax, esi
		sbb eax, esi
		adc r8b, 0x2f
		rol al, 5
		add r10b, 0x88
		jb 0x7ffb72c0460e
1670: UB addr = 7ffb72ac1d5f with ID: 499 yields:
		neg r8b
		inc r8b
		xor r10, qword ptr [rsp + rsi + 0x603e961b]
		rol edx, 0x22
		xor r8b, 0xa0
		xor bpl, r8b
		lea rdi, [rsi + rax*4 - 0x4cc15954]
		lea r8, [rsp + r8 + 0x10]
		sub word ptr [rsp + rdx + 5], di
		adc byte ptr [rsp + rsi + 0x603e961f], dh
		rol rdi, 0x73
		mov byte ptr [r8 + rdx], cl
		lea r8, [rsi*2 - 0x65703146]
		mov qword ptr [rsp + rdx*2], r9
		ret 8
1671: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
1672: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
1673: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
1674: UB addr = 7ffb72b689d9 with ID: 500 yields:
		mov eax, 0xc9a46715
		movzx r10d, al
		movzx esi, byte ptr [r11 + r10*8 - 0xa8]
		lea r11, [r11 + r10 - 0x14]
		xor sil, bpl
		sub sil, 5
		neg sil
		dec sil
		neg r10w
		mov r8d, 0x751d5caf
		sub eax, eax
		xor sil, 0xbf
		not sil
		lea rcx, [r10 + r8*8 - 0x23fa6b7b]
		sar cx, 0x6b
		xor bpl, sil
		lea rdi, [r8 + r10*8 - 0x6a44ba7c]
		call 0x7ffb729336db
1675: UB addr = 7ffb729336db with ID: 501 yields:
		cbw
		lea rsi, [rsp + rsi + 8]
		pop r8
		movzx r10w, byte ptr [rax + rsi]
		sal edi, cl
		lea r8, [rax + rdi*4 - 0x35f649ea]
		btc eax, 0xaf
		lea rbx, [rax + rbx - 0x8002]
		call 0x7ffb72ba512b
1676: UB addr = 7ffb72ba512b with ID: 502 yields:
		mov word ptr [rdi + rbx - 0x50718000], r10w
		movzx esi, di
		mov edx, dword ptr [r11 + rax - 0x8000]
		mov qword ptr [rsp + rax - 0x8000], rcx
		lea r11, [r11 + rax*2 - 0xfffc]
		sub cl, byte ptr [rsp + rax*4 - 0x1ffff]
		shr cl, 7
		xor edx, ebp
		sal byte ptr [rsp + rax*4 - 0x1fffe], 0xe2
		and di, r8w
		dec edx
		pop r10
		ror edi, 0xa1
		cwde
		neg edx
		shl rdi, 0x50
		sbb cx, di
		bswap edx
		push rbp
		jae 0x7ffb72b27ced
1677: UB addr = 7ffb72b27ced with ID: 503 yields:
		rol r10, 9
		xor dword ptr [rsp + rsi*8 - 0x407f8], edx
		add cl, al
		sub sil, dil
		pop rbp
		xadd rcx, r10
		sal si, cl
		movsxd rdx, edx
		add r9, rdx
		xor cx, r8w
		movsx edx, cl
		ja 0x7ffb72eb83a2
1678: UB addr = 7ffb72914d97 with ID: 504 yields:
		dec eax
		rol eax, 1
		lea eax, [rax + rdx*8 - 0x57e54e56]
		bswap edx
		mov qword ptr [rsp + r8 - 0xf81598c], r8
		pop rdi
		rol eax, 2
		add rdx, rdi
		push rbp
		js 0x7ffb72af3f42
1679: UB addr = 7ffb72914dba with ID: 505 yields:
		sbb dx, r10w
		xor dword ptr [rsp + r8*4 - 0x3e056630], eax
		pop rbp
		inc r10d
		bts rdx, r10
		shr dil, 0xc6
		movsxd rax, eax
		sal r10d, 0xb7
		add di, 0x2cb9
		call 0x7ffb72ac4d8d
1680: UB addr = 7ffb72ac4d8d with ID: 506 yields:
		adc r9, rax
		sub r10b, dil
		movzx edi, word ptr [r8 + r11 - 0xf81598c]
		mov qword ptr [rsp + r8 - 0xf81598c], r10
		jae 0x7ffb72936264
1681: UB addr = 7ffb72ac4daa with ID: 507 yields:
		xor dword ptr [rsp + r8*2 - 0x1f02b317], 0x5a27dc04
		lea r11, [r11 + r8*2 - 0x1f02b316]
		xchg qword ptr [rsp + r8 - 0xf81598c], rcx
		pop rdx
		mov esi, 0x6ad3312
		lea r10, [rsi*2 - 0x5cfa8c4]
		movsx edx, sil
		mov rdi, qword ptr [rsi + rbx - 0x6ad3312]
		neg dl
		mov r8b, byte ptr [rbx + rsi - 0x6ad330a]
		not si
		lea rbx, [rbx + rsi - 0x6adcce3]
		movsx ecx, r10w
		xadd r10d, esi
		or cx, 0x541b
		mov byte ptr [rdi + rsi - 0x78abd60], r8b
		mov r8d, edx
		shl r10b, 0xc3
		mov edi, dword ptr [r11 + r10 - 0xe388a68]
		inc dx
		bts ecx, r10d
		call 0x7ffb72bcb071
1682: UB addr = 7ffb72b54725 with ID: 508 yields:
		xchg rdx, rsi
		mov qword ptr [rsp + rdx - 0x38a99038], -0xf5d08df
		add r10, rcx
		pop r8
		mov qword ptr [rbx + rdx*2 - 0x71532068], r10
		xchg dword ptr [rsp + r8*8 + 0x7ae846fb], edx
		push rdx
		mov rdi, qword ptr [r11 + rdx*2 - 0xd6]
		xchg byte ptr [rsp + rdx*2 - 0xcc], sil
		not byte ptr [rsp + rdx - 0x66]
		xor rdi, rbp
		rol rdi, 6
		neg rdi
		inc r8w
		shl dl, 0x21
		shr dword ptr [rsp + rdx - 0xd6], 0x5c
		xor rdi, 0xffffffffc88d0731
		mov r10d, 0x15a92286
		shl edx, 0xe6
		shr word ptr [rsp + rdx - 0x357f], 0x61
		not rdi
		lea rcx, [rdx*8 + 0x3d36fc97]
		push r8
		movsx eax, byte ptr [rsp + rdx - 0x3572]
		xor rbp, rdi
		mov qword ptr [rbx + rdx - 0x3580], rdi
		call 0x7ffb72be08e6
1683: UB addr = 7ffb72b9168c with ID: 81 yields:
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
1684: UB addr = 7ffb72ba875b with ID: 64 yields:
		movsxd rax, eax
		add r9, rax
		shr dl, 0xc5
		mov di, word ptr [r10 + r11 - 0x1663e]
		lea r8, [r10*8 + 0x1dac92b4]
		lea rcx, [rdx + r8*2 + 0x1ca16f26]
		lea r11, [rdx + r11 - 0x631291f2]
		mov eax, esi
		xor di, bp
		add r10w, si
		ror di, 1
		call 0x7ffb72ecba3e
1685: UB addr = 7ffb72a4af49 with ID: 509 yields:
		mov rax, qword ptr [rbx]
		mov r8d, 0xef2a0e08
		movzx r10d, r8w
		mov rdi, qword ptr [rbx + r10 - 0xe00]
		and r8, 0xffffffff99bbb5be
		seto r8b
		movsx edx, r8w
		adc rax, rdi
		mov rsi, rax
		mov ecx, r8d
		ror rdx, cl
		mov r10d, ecx
		lea r8d, [rsi + r8 + 0x44e49b2e]
		ror r8d, 1
		sub al, 0x28
		adc r10w, si
		or eax, eax
		not r8d
		jns 0x7ffb729361b0
1686: UB addr = 7ffb729361b0 with ID: 510 yields:
		add r10w, cx
		btc rcx, 0x84
		push rbp
		xor dword ptr [rsp + rdi - 0x57b1], r8d
		pop rbp
		cdq
		movsxd r8, r8d
		sal rdi, 0xdf
		shr rsi, 0xd2
		call 0x7ffb72934d41
1687: UB addr = 7ffb72934d41 with ID: 511 yields:
		add r9, r8
		mov r10, qword ptr [r11 + rdx*2 + 6]
		mov qword ptr [rsp + rdx*2], rdi
		and ax, di
		neg byte ptr [rsp + rdx + 4]
		lea r11, [r11 + rdx*4 + 0xe]
		movzx r8d, si
		rol si, 0xe1
		xor r10, rbp
		shr byte ptr [rsp + rdx*4 + 2], 0x66
		bswap r10
		sub qword ptr [rsp + rdx*2], rcx
		cmovp ecx, r8d
		lea r10, [r10 + rsi + 0x12df62d]
		not r10
		inc word ptr [rsp + rsi - 0x2a5a]
		adc byte ptr [rsp + rdx*4 + 3], al
		inc r10
		neg r10
		bswap rax
		xor rbp, r10
		mov qword ptr [rdx + rbx - 8], r10
		mov r10d, dword ptr [rsp + rdx + 4]
		lea rbx, [rbx + rdx*4 - 8]
		cbw
		neg dil
		pop rdi
		jns 0x7ffb72eb83a2
1688: UB addr = 7ffb72b9168c with ID: 81 yields:
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
1689: UB addr = 7ffb72ab309a with ID: 101 yields:
		push rbp
		or cx, di
		xor dword ptr [rsp + rdi - 0x32bdfaf1], edx
		ror cx, 0x26
		pop rbp
		movsxd rdx, edx
		lea rdi, [r10 + rdi*2 - 0xae16671]
		neg r10d
		add r9, rdx
		mov rdx, qword ptr [rbx + rcx - 0x32bdffff]
		xchg r8d, ecx
		mov cx, word ptr [rdx + r8*2 - 0x657bfffe]
		mov di, cx
		movsx esi, r10b
		sar rsi, 0x8b
		movsx ecx, r8w
		mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]
		add di, r8w
		movzx r8d, r10w
		push r10
		mov word ptr [rsi + rbx - 0x1ffff7], di
		movsx edi, r10w
		lea rbx, [rbx + rsi - 0x1ffff7]
		mov qword ptr [rsp + rsi - 0x1fffff], r9
		ret
1690: UB addr = 7ffb72ba6e72 with ID: 475 yields:
		mov edx, 0x1706ce2b
		movzx r10d, dl
		mov r8d, dword ptr [r11 + rdx*2 - 0x2e0d9c56]
		movzx edi, dl
		xor r8d, ebp
		movzx ecx, dil
		shl dx, 0xa5
		ror r8d, 1
		lea rsi, [rdx + rcx*8 + 0x719ec1b2]
		inc r8d
		lea rsi, [rsi*2 + 0x4e9d55b9]
		xor r8d, 0x16348688
		bts si, dx
		ror dl, 0x67
		inc r8d
		btr edx, r10d
		jae 0x7ffb728f353e
1691: UB addr = 7ffb728f353e with ID: 89 yields:
		ror r8d, 3
		sal r10b, 0x26
		sbb ecx, edi
		push rbp
		and cl, 0x3d
		movzx eax, cl
		xor dword ptr [rsp + rdx - 0x1706c5c2], r8d
		lea rcx, [rcx + r10 + 0x5bb14d2a]
		cwde
		pop rbp
		not cl
		and edi, eax
		mov dword ptr [rbx + rdx*2 - 0x2e0d8b88], r8d
		sub r10, rdx
		mov rdx, qword ptr [r11 + rdx*2 - 0x2e0d8b80]
		shl di, 0x4e
		not si
		add ax, 0x1c05
		ror r10b, 0xa4
		lea rdx, [r10 + rdx + 0x456cae70]
		neg rdx
		lea r8, [r10*8 - 0x7fe7fbef]
		rol rdx, 1
		xor rbp, rdx
		or r10d, eax
		mov qword ptr [rbx + rdi*2 - 0x800c], rdx
		ja 0x7ffb72f0df4f
1692: UB addr = 7ffb72a7a0dc with ID: 90 yields:
		ror dx, 1
		mov qword ptr [rsp + rdi - 0x4000], 0x6f0ac19b
		sub dx, 0xc9ba
		push r10
		or edi, 0x7da86d19
		pop rsi
		ror dx, 1
		or dword ptr [rsp + rax*2 - 0x32], 0xbf0b5da2
		adc dx, 0xee9e
		push rax
		ror eax, 0x70
		xor bp, dx
		cwde
		sar r10w, 0xe4
		lea rdx, [rsp + rdx + 0x10]
		mov rcx, qword ptr [rax + rdx]
		jns 0x7ffb72bd5c92
1693: UB addr = 7ffb72a6b788 with ID: 512 yields:
		mov rbp, qword ptr [rsp + rdi*2 - 0x4822]
		btr di, 0xb2
		call 0x7ffb72d67800
1694: UB addr = 7ffb729fa323 with ID: 513 yields:
		lea r11, [r11 + rdi*2 - 0x481d]
		xor rdx, qword ptr [rsp + rdi - 0x23fb]
		push r8
		inc rdi
		xor r10b, bpl
		rol r10b, 1
		xor r10b, 0xbb
		add r10b, 0x98
		xadd cx, dx
		cbw
		jbe 0x7ffb72b3cd60
1695: UB addr = 7ffb729fa352 with ID: 514 yields:
		xor r10b, 0x88
		sar dword ptr [rsp + rdi - 0x2410], cl
		push rcx
		sbb r10b, 0x91
		not al
		dec al
		xor esi, dword ptr [rsp + rdi*2 - 0x47fa]
		xor r10b, 0x2c
		xor bpl, r10b
		add dl, 0x24
		mov word ptr [rbx + rdi - 0x2410], r10w
		sub ax, di
		lea rbx, [rbx + rdi*4 - 0x9046]
		mov qword ptr [rsp + rdi - 0x2412], r9
		ret 0x28
1696: UB addr = 7ffb729e00f8 with ID: 515 yields:
		mov edi, 0x3f90b89d
		movzx r8d, di
		movzx ecx, byte ptr [rdi + r11 - 0x3f90b89d]
		not r8
		movsx r10d, r8b
		xor cl, bpl
		sub cl, 5
		sub r8w, 0x3694
		jns 0x7ffb7291cfc7
1697: UB addr = 7ffb7291cfc7 with ID: 516 yields:
		neg cl
		sar di, 0x2d
		dec cl
		xor cl, 0xbf
		mov edx, r8d
		not cl
		xor bpl, cl
		add rcx, rsp
		neg dil
		mov r10b, byte ptr [rcx + rdi - 0x3f90ff03]
		mov word ptr [rbx + rdi - 0x3f90ff05], r10w
		movsx r10d, dl
		rol edi, 0xf7
		lea edx, [rdi + rdx + 0x6f6a4bbd]
		xor edx, 0xf4b4fd06
		dec edx
		btr di, r10w
		neg edx
		xor edx, 0x223c1d1d
		ror r8w, 0xc4
		push rbp
		xor dword ptr [rsp + r8 + 0x1ef4], edx
		pop rbp
		lea rax, [rcx + rdx*4 + 0x709e09a6]
		not r10b
		movzx esi, dl
		mov word ptr [rdx + rbx - 0x6d1ee5ad], r10w
		movsx r8d, cl
		movsx r10d, ax
		mov eax, dword ptr [r11 + rsi*4 - 0x2bc]
		mov qword ptr [rsp + rsi*2 - 0x15e], rdx
		dec byte ptr [rsp + rsi - 0xad]
		lea rcx, [rdx*2 - 0x1ce6716b]
		xor eax, ebp
		shl dword ptr [rsp + rdx - 0x6d1ee5ac], cl
		jbe 0x7ffb72b58b6a
1698: UB addr = 7ffb72a43fd8 with ID: 517 yields:
		jp 0x7ffb7292ee41
1699: UB addr = 7ffb7292ee41 with ID: 518 yields:
		bswap eax
		jae 0x7ffb72e58272
1700: UB addr = 7ffb72903dcf with ID: 519 yields:
		not r10d
		call 0x7ffb72d4e379
1701: UB addr = 7ffb72ab868f with ID: 520 yields:
		movsxd r10, r10d
		adc r9, r10
		sbb al, dil
		movzx si, byte ptr [rbx + r8*4 - 0x72354abc]
		jb 0x7ffb72d9ae5f
1702: UB addr = 7ffb729b7a13 with ID: 99 yields:
		mov r10d, 0x40b8f9a2
		mov rdi, qword ptr [rbx + r10 - 0x40b8f9a2]
		lea rdx, [r10*4 - 0x79dabbd0]
		or r10, 0xffffffffa523a11f
		movzx ecx, byte ptr [r11 + r10*4 + 0x69101904]
		not r10
		xor cl, bpl
		ror cl, 1
		ror edx, 0x33
		mov r8d, r10d
		movzx eax, r8w
		neg cl
		bswap rax
		add r10d, 0xe298ffa4
		xor cl, 0x28
		lea r8, [r8 + rdx*2 + 0x42278f03]
		or dx, 0x308b
		jge 0x7ffb72d56de2
1703: UB addr = 7ffb72b76798 with ID: 100 yields:
		bswap r10d
		cdqe
		btc si, ax
		not r10d
		btr dx, 0x85
		neg r10d
		btc rdx, 0x3c
		btc rdx, rsi
		push rbp
		rol dx, 0xc7
		xor dword ptr [rsp + rax], r10d
		rol dl, 0xc7
		and rsi, 0xffffffffeb87a49f
		sal al, 0x86
		pop rbp
		movsxd r10, r10d
		bswap rsi
		jp 0x7ffb72e71c68
1704: UB addr = 7ffb72b9168c with ID: 81 yields:
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
1705: UB addr = 7ffb72ab309a with ID: 101 yields:
		push rbp
		or cx, di
		xor dword ptr [rsp + rdi - 0x32bdfaf1], edx
		ror cx, 0x26
		pop rbp
		movsxd rdx, edx
		lea rdi, [r10 + rdi*2 - 0xae16671]
		neg r10d
		add r9, rdx
		mov rdx, qword ptr [rbx + rcx - 0x32bdffff]
		xchg r8d, ecx
		mov cx, word ptr [rdx + r8*2 - 0x657bfffe]
		mov di, cx
		movsx esi, r10b
		sar rsi, 0x8b
		movsx ecx, r8w
		mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]
		add di, r8w
		movzx r8d, r10w
		push r10
		mov word ptr [rsi + rbx - 0x1ffff7], di
		movsx edi, r10w
		lea rbx, [rbx + rsi - 0x1ffff7]
		mov qword ptr [rsp + rsi - 0x1fffff], r9
		ret
1706: UB addr = 7ffb728f6cb2 with ID: 521 yields:
		mov esi, 0xc5a2e18e
		movsx r10d, si
		sal r10d, 7
		lea rdi, [rsp + 0x18]
		sar si, 0xe6
		inc r10b
		lea rdx, [r10 + rsi*4 + 0x5881ac08]
		mov rcx, qword ptr [rdi]
		lea rdi, [rdx + rdx*2 - 0xc53d662]
		mov r8, rcx
		mov cl, byte ptr [rbx]
		shr r8, cl
		movzx eax, si
		btr r10, 0xba
		mov qword ptr [rbx + rax - 0xff8c], r8
		lea rbx, [rax + rbx - 0xff8c]
		dec si
		mov edx, dword ptr [rax + r11 - 0xff86]
		ror rdi, 0x3f
		movsx r8d, al
		lea r11, [r11 + rax*4 - 0x3fe14]
		setne r10b
		xadd r10w, si
		sub al, r8b
		xor edx, ebp
		not edx
		not r10d
		or si, di
		sbb edx, 0xdd98f1a7
		call 0x7ffb72d22c5a
1707: UB addr = 7ffb728c18fa with ID: 522 yields:
		bswap edx
		inc dil
		xadd rdi, r10
		btc r8, 0x33
		not edx
		rol r10d, 0xdf
		rol edx, 3
		push rbp
		xor dword ptr [rsp + rax - 0xff00], edx
		add ax, r8w
		pop rbp
		movsxd rdx, edx
		sub r8d, r10d
		or rax, rdi
		adc r9, rdx
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
1708: UB addr = 7ffb72bad340 with ID: 56 yields:
		bts r10d, 0x2c
		dec cl
		mov qword ptr [rsp + r10*4 - 0x2eef0], r10
		shr rsi, cl
		xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc
		lea rdx, [r10 + rdx + 0x21a79a4f]
		pop r8
		ror rdx, 5
		rol r10b, 0xe1
		pop rax
		xor rbp, rdx
		sal r10, cl
		mov qword ptr [rbx + rsi*4 - 0x10], rdx
		neg r10d
		neg rcx
		lea rdx, [rax + r8*2 + 0x3102b03c]
		or r10d, dword ptr [r10 + r11 + 0x10]
		cwde
		rol r10d, 2
		sub edi, 0x82313a32
		mov qword ptr [rsp + rdi - 0x7dcec5be], rbp
		jle 0x7ffb72b20360
1709: UB addr = 7ffb72b539dd with ID: 57 yields:
		xor dword ptr [rsp + rdi - 0x7dcec5be], r10d
		dec word ptr [rsp + rsi*2 + 3]
		ror edx, 9
		mov rbp, qword ptr [rsp + rsi*2 + 0x10]
		add ecx, 0xd6aede26
		movsxd r10, r10d
		add r9, r10
		sar cx, 0x29
		lea rax, [rcx*8 - 0x5847164a]
		mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6
		movzx r10d, word ptr [r11 + rcx - 0x1aee0026]
		lea r11, [rcx + r11 - 0x1aee0024]
		cbw
		xor r10w, bp
		mov qword ptr [rsp + rcx - 0x1aee002a], rdx
		mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx
		add r10w, 0x5bbe
		ror r10w, 1
		inc r10w
		dec word ptr [rsp + rcx*4 - 0x6bb800df]
		neg r10w
		pop rsi
		ror r10w, 1
		neg r10w
		shr word ptr [rsp + rax - 0x7f28ff7b], 0x21
		rol r10w, 1
		cdqe
		push rax
		add r10w, 0xfba5
		xor bp, r10w
		lea r10, [rsp + r10 + 0x18]
		mov rcx, qword ptr [r10 + rcx - 0x1aee003a]
		mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx
		sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce
		lea r10, [rdi*8 - 0x65c4ffca]
		cwd
		lea rbx, [rbx + rdi - 0x7dcec5e6]
		shr qword ptr [rsp + r8 - 0xbbba], 0xcb
		and dil, r8b
		pop r8
		pop r8
		pop rsi
		jno 0x7ffb72eb83a2
1710: UB addr = 7ffb728ec8d6 with ID: 111 yields:
		mov edi, 0xb5077482
		mov r8, qword ptr [rbx]
		movsx esi, dil
		mov rax, qword ptr [rbx + 8]
		push rdi
		ror word ptr [rsp + 3], 0xac
		adc r8, rax
		movsx eax, dil
		shl eax, 0xc2
		mov rcx, r8
		sal rax, 0x9a
		mov r10, qword ptr [rbx + 0x10]
		and rcx, r10
		lea r8, [rsi + rdi*8 - 0x4bc9cd4a]
		sal word ptr [rsp + 3], 0xe7
		not rcx
		lea rsi, [rdi*8 + 0x733da337]
		or qword ptr [rsp], 0xffffffffa80c4cbf
		or word ptr [rsp + 6], r8w
		mov qword ptr [rbx + 0x10], rcx
		call 0x7ffb72cab9f8
1711: UB addr = 7ffb72b6924e with ID: 112 yields:
		xor edi, ebp
		shl esi, 0x11
		neg edi
		lea edi, [rdi + rsi - 0x3264924e]
		mov qword ptr [rsp + 8], rax
		lea rdx, [rsi + 0x6c1853be]
		btr dx, si
		bswap edi
		ror edi, 2
		cdqe
		lea edi, [rdi + rax*8 - 0x1b65a577]
		shl word ptr [rsp + rax - 0x1ffffff6], 0xe1
		mov qword ptr [rsp + rax*4 - 0x7ffffff8], rbp
		cmovb eax, esi
		adc rax, rcx
		xor dword ptr [rsp + 8], edi
		ror eax, 0x5f
		mov rbp, qword ptr [rsp + rax*2 - 0x7ffe9ff8]
		call 0x7ffb72c5ee93
1712: UB addr = 7ffb72b4c61c with ID: 523 yields:
		mov ecx, dword ptr [r11]
		mov edx, 0x2c29210a
		mov edi, edx
		xor ecx, ebp
		push rdi
		neg ecx
		sar dx, 0xca
		sbb dword ptr [rsp + rdx*2 - 0x5852000e], edx
		movsx r8d, dx
		sbb ecx, 0x859d3727
		not r8w
		adc dl, 0x31
		and word ptr [rsp + r10 + 0xc], r10w
		mov qword ptr [rsp + r10], rsi
		neg qword ptr [rsp + r10*2 + 9]
		xor bpl, dl
		shl qword ptr [rsp + r10 + 5], 0xbf
		lea rdx, [rsp + rdx + 0x18]
		mov byte ptr [rsp + r10*8 + 0xc], sil
		shr r10d, cl
		jne 0x7ffb72bc1057
1713: UB addr = 7ffb72b760b5 with ID: 8 yields:
		mov qword ptr [r10 + rdx], rax
		mov rdx, qword ptr [r10 + rbx + 8]
		lea rbx, [rbx + r10*4 + 0x10]
		setns sil
		or r10b, byte ptr [rsp + r10 + 0x16]
		movzx ecx, word ptr [r11 + r10 + 1]
		movzx eax, word ptr [rsp + r10 + 7]
		xor cx, bp
		shr dil, 0x87
		adc cx, 0xe297
		movsx r8d, byte ptr [rsp + rsi*2 + 0x11]
		not cx
		sub byte ptr [rsp + r10 + 0xd], 0x11
		sal r8d, 0xfc
		sbb cx, 0x4b88
		ror cx, 1
		xor bp, cx
		sal r8d, 0x7b
		call 0x7ffb72be9f6b
1714: UB addr = 7ffb72b69522 with ID: 50 yields:
		mov eax, 0xb602e72e
		lea rdi, [rax - 0x6173404d]
		movzx ecx, di
		movzx edi, byte ptr [r11 + rcx*4 - 0x29b84]
		push rax
		sar word ptr [rsp + rcx - 0xa6de], cl
		xor dil, bpl
		movsx esi, cl
		inc dil
		lea r8, [rsi*8 - 0x71ff74e7]
		ror dil, cl
		neg dil
		cwd
		or edx, dword ptr [rsp + rcx - 0xa6dd]
		sbb dword ptr [rsp + rcx*8 - 0x53707], ecx
		xor dil, al
		neg dx
		xor bpl, dil
		sar word ptr [rsp + rdx*2 + 3], 0x26
		pop rcx
		adc rdi, rsp
		xchg eax, edx
		mov rdx, qword ptr [rdi + rax - 1]
		push rsi
		mov qword ptr [rax + rbx - 9], rdx
		call 0x7ffb72b91b37
1715: UB addr = 7ffb72b91b37 with ID: 51 yields:
		mov r10d, dword ptr [r11 + rax*4 - 0xb]
		xor r10d, ebp
		mov qword ptr [rsp + rax*2 - 6], rcx
		cwde
		push r8
		dec r10d
		ror r10d, 1
		dec r10d
		push rax
		ror qword ptr [rsp + rax + 6], 0xb0
		cqo
		bswap r10d
		setae byte ptr [rsp + rax*2 + 0x10]
		cmovb si, cx
		mov qword ptr [rsp + rax + 0x15], rbp
		btc r8w, dx
		xor dword ptr [rsp + rax + 0x15], r10d
		and ecx, 0x76179610
		mov rbp, qword ptr [rsp + rdx + 0x18]
		shl eax, cl
		movsxd r10, r10d
		adc r9, r10
		shl al, 0x44
		mov qword ptr [rsp + rax*2 - 0x5ffe8], rdx
		movzx r10d, word ptr [r11 + rax*4 - 0xbfffb]
		shr cx, 0xc
		xchg byte ptr [rsp + rax - 0x2fffb], ah
		shr dword ptr [rsp + rax*4 - 0xbfff1], 0x7c
		lea r11, [r11 + rax - 0x2fff9]
		rol word ptr [rsp + rax*4 - 0xbfffb], 0x6e
		shl byte ptr [rsp + rax*2 - 0x5fffc], 1
		xor r10w, bp
		rol dl, 0x83
		dec ax
		sbb r10w, ax
		pop rax
		xchg qword ptr [rsp + rax*2 + 5], rsi
		sar dl, 0x22
		ror r10w, 1
		neg word ptr [rsp + rsi - 0x1000052]
		not r10w
		neg r10w
		xor bp, r10w
		movzx edi, cl
		lea r10, [rsp + r10 + 0x18]
		or rdi, qword ptr [r10 + rax - 3]
		mov qword ptr [rbx + rax - 0x13], rdi
		sal dx, 0xc4
		lea rbx, [rbx + rax - 0x13]
		inc esi
		or dl, 0xb0
		pop rcx
		pop rax
		pop rcx
		jl 0x7ffb72eb83a2
1716: UB addr = 7ffb72a9cc1f with ID: 107 yields:
		sal rdx, 0xe
		inc r8d
		movzx eax, r10w
		not r8d
		push rax
		sub r8d, 0xe9243939
		btc rax, 0x2e
		pop rdi
		not r8d
		call 0x7ffb72c0360d
1717: UB addr = 7ffb72b9168c with ID: 81 yields:
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
1718: UB addr = 7ffb72ab309a with ID: 101 yields:
		push rbp
		or cx, di
		xor dword ptr [rsp + rdi - 0x32bdfaf1], edx
		ror cx, 0x26
		pop rbp
		movsxd rdx, edx
		lea rdi, [r10 + rdi*2 - 0xae16671]
		neg r10d
		add r9, rdx
		mov rdx, qword ptr [rbx + rcx - 0x32bdffff]
		xchg r8d, ecx
		mov cx, word ptr [rdx + r8*2 - 0x657bfffe]
		mov di, cx
		movsx esi, r10b
		sar rsi, 0x8b
		movsx ecx, r8w
		mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]
		add di, r8w
		movzx r8d, r10w
		push r10
		mov word ptr [rsi + rbx - 0x1ffff7], di
		movsx edi, r10w
		lea rbx, [rbx + rsi - 0x1ffff7]
		mov qword ptr [rsp + rsi - 0x1fffff], r9
		ret
1719: UB addr = 7ffb72a9cc1f with ID: 107 yields:
		sal rdx, 0xe
		inc r8d
		movzx eax, r10w
		not r8d
		push rax
		sub r8d, 0xe9243939
		btc rax, 0x2e
		pop rdi
		not r8d
		call 0x7ffb72c0360d
1720: UB addr = 7ffb72b9168c with ID: 81 yields:
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
1721: UB addr = 7ffb72ab309a with ID: 101 yields:
		push rbp
		or cx, di
		xor dword ptr [rsp + rdi - 0x32bdfaf1], edx
		ror cx, 0x26
		pop rbp
		movsxd rdx, edx
		lea rdi, [r10 + rdi*2 - 0xae16671]
		neg r10d
		add r9, rdx
		mov rdx, qword ptr [rbx + rcx - 0x32bdffff]
		xchg r8d, ecx
		mov cx, word ptr [rdx + r8*2 - 0x657bfffe]
		mov di, cx
		movsx esi, r10b
		sar rsi, 0x8b
		movsx ecx, r8w
		mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]
		add di, r8w
		movzx r8d, r10w
		push r10
		mov word ptr [rsi + rbx - 0x1ffff7], di
		movsx edi, r10w
		lea rbx, [rbx + rsi - 0x1ffff7]
		mov qword ptr [rsp + rsi - 0x1fffff], r9
		ret
1722: UB addr = 7ffb72ba6e72 with ID: 475 yields:
		mov edx, 0x1706ce2b
		movzx r10d, dl
		mov r8d, dword ptr [r11 + rdx*2 - 0x2e0d9c56]
		movzx edi, dl
		xor r8d, ebp
		movzx ecx, dil
		shl dx, 0xa5
		ror r8d, 1
		lea rsi, [rdx + rcx*8 + 0x719ec1b2]
		inc r8d
		lea rsi, [rsi*2 + 0x4e9d55b9]
		xor r8d, 0x16348688
		bts si, dx
		ror dl, 0x67
		inc r8d
		btr edx, r10d
		jae 0x7ffb728f353e
1723: UB addr = 7ffb728f353e with ID: 89 yields:
		ror r8d, 3
		sal r10b, 0x26
		sbb ecx, edi
		push rbp
		and cl, 0x3d
		movzx eax, cl
		xor dword ptr [rsp + rdx - 0x1706c5c2], r8d
		lea rcx, [rcx + r10 + 0x5bb14d2a]
		cwde
		pop rbp
		not cl
		and edi, eax
		mov dword ptr [rbx + rdx*2 - 0x2e0d8b88], r8d
		sub r10, rdx
		mov rdx, qword ptr [r11 + rdx*2 - 0x2e0d8b80]
		shl di, 0x4e
		not si
		add ax, 0x1c05
		ror r10b, 0xa4
		lea rdx, [r10 + rdx + 0x456cae70]
		neg rdx
		lea r8, [r10*8 - 0x7fe7fbef]
		rol rdx, 1
		xor rbp, rdx
		or r10d, eax
		mov qword ptr [rbx + rdi*2 - 0x800c], rdx
		ja 0x7ffb72f0df4f
1724: UB addr = 7ffb72a7a0dc with ID: 90 yields:
		ror dx, 1
		mov qword ptr [rsp + rdi - 0x4000], 0x6f0ac19b
		sub dx, 0xc9ba
		push r10
		or edi, 0x7da86d19
		pop rsi
		ror dx, 1
		or dword ptr [rsp + rax*2 - 0x32], 0xbf0b5da2
		adc dx, 0xee9e
		push rax
		ror eax, 0x70
		xor bp, dx
		cwde
		sar r10w, 0xe4
		lea rdx, [rsp + rdx + 0x10]
		mov rcx, qword ptr [rax + rdx]
		jns 0x7ffb72bd5c92
1725: UB addr = 7ffb72a6b788 with ID: 512 yields:
		mov rbp, qword ptr [rsp + rdi*2 - 0x4822]
		btr di, 0xb2
		call 0x7ffb72d67800
1726: UB addr = 7ffb729fa323 with ID: 513 yields:
		lea r11, [r11 + rdi*2 - 0x481d]
		xor rdx, qword ptr [rsp + rdi - 0x23fb]
		push r8
		inc rdi
		xor r10b, bpl
		rol r10b, 1
		xor r10b, 0xbb
		add r10b, 0x98
		xadd cx, dx
		cbw
		jbe 0x7ffb72b3cd60
1727: UB addr = 7ffb729fa352 with ID: 514 yields:
		xor r10b, 0x88
		sar dword ptr [rsp + rdi - 0x2410], cl
		push rcx
		sbb r10b, 0x91
		not al
		dec al
		xor esi, dword ptr [rsp + rdi*2 - 0x47fa]
		xor r10b, 0x2c
		xor bpl, r10b
		add dl, 0x24
		mov word ptr [rbx + rdi - 0x2410], r10w
		sub ax, di
		lea rbx, [rbx + rdi*4 - 0x9046]
		mov qword ptr [rsp + rdi - 0x2412], r9
		ret 0x28
1728: UB addr = 7ffb729e00f8 with ID: 515 yields:
		mov edi, 0x3f90b89d
		movzx r8d, di
		movzx ecx, byte ptr [rdi + r11 - 0x3f90b89d]
		not r8
		movsx r10d, r8b
		xor cl, bpl
		sub cl, 5
		sub r8w, 0x3694
		jns 0x7ffb7291cfc7
1729: UB addr = 7ffb7291cfc7 with ID: 516 yields:
		neg cl
		sar di, 0x2d
		dec cl
		xor cl, 0xbf
		mov edx, r8d
		not cl
		xor bpl, cl
		add rcx, rsp
		neg dil
		mov r10b, byte ptr [rcx + rdi - 0x3f90ff03]
		mov word ptr [rbx + rdi - 0x3f90ff05], r10w
		movsx r10d, dl
		rol edi, 0xf7
		lea edx, [rdi + rdx + 0x6f6a4bbd]
		xor edx, 0xf4b4fd06
		dec edx
		btr di, r10w
		neg edx
		xor edx, 0x223c1d1d
		ror r8w, 0xc4
		push rbp
		xor dword ptr [rsp + r8 + 0x1ef4], edx
		pop rbp
		lea rax, [rcx + rdx*4 + 0x709e09a6]
		not r10b
		movzx esi, dl
		mov word ptr [rdx + rbx - 0x6d1ee5ad], r10w
		movsx r8d, cl
		movsx r10d, ax
		mov eax, dword ptr [r11 + rsi*4 - 0x2bc]
		mov qword ptr [rsp + rsi*2 - 0x15e], rdx
		dec byte ptr [rsp + rsi - 0xad]
		lea rcx, [rdx*2 - 0x1ce6716b]
		xor eax, ebp
		shl dword ptr [rsp + rdx - 0x6d1ee5ac], cl
		jbe 0x7ffb72b58b6a
1730: UB addr = 7ffb72a43fd8 with ID: 517 yields:
		jp 0x7ffb7292ee41
1731: UB addr = 7ffb7292ee41 with ID: 518 yields:
		bswap eax
		jae 0x7ffb72e58272
1732: UB addr = 7ffb72903dcf with ID: 519 yields:
		not r10d
		call 0x7ffb72d4e379
1733: UB addr = 7ffb72ab868f with ID: 520 yields:
		movsxd r10, r10d
		adc r9, r10
		sbb al, dil
		movzx si, byte ptr [rbx + r8*4 - 0x72354abc]
		jb 0x7ffb72d9ae5f
1734: UB addr = 7ffb72a9cc1f with ID: 107 yields:
		sal rdx, 0xe
		inc r8d
		movzx eax, r10w
		not r8d
		push rax
		sub r8d, 0xe9243939
		btc rax, 0x2e
		pop rdi
		not r8d
		call 0x7ffb72c0360d
1735: UB addr = 7ffb72b9168c with ID: 81 yields:
		mov r8d, esi
		and cl, dl
		push rdi
		push r10
		btc si, cx
		dec word ptr [rsp + rdx]
		xadd r10d, edx
		inc r10
		lea eax, [r10 + rax + 0x2940cfcc]
		push r8
		sub word ptr [rsp + rsi*4 + 0xe], r8w
		not eax
		lea rcx, [rsi + rcx*8 - 0x50c2f3e3]
		call 0x7ffb72bdd935
1736: UB addr = 7ffb72ab309a with ID: 101 yields:
		push rbp
		or cx, di
		xor dword ptr [rsp + rdi - 0x32bdfaf1], edx
		ror cx, 0x26
		pop rbp
		movsxd rdx, edx
		lea rdi, [r10 + rdi*2 - 0xae16671]
		neg r10d
		add r9, rdx
		mov rdx, qword ptr [rbx + rcx - 0x32bdffff]
		xchg r8d, ecx
		mov cx, word ptr [rdx + r8*2 - 0x657bfffe]
		mov di, cx
		movsx esi, r10b
		sar rsi, 0x8b
		movsx ecx, r8w
		mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]
		add di, r8w
		movzx r8d, r10w
		push r10
		mov word ptr [rsi + rbx - 0x1ffff7], di
		movsx edi, r10w
		lea rbx, [rbx + rsi - 0x1ffff7]
		mov qword ptr [rsp + rsi - 0x1fffff], r9
		ret
1737: UB addr = 7ffb72ba6e72 with ID: 475 yields:
		mov edx, 0x1706ce2b
		movzx r10d, dl
		mov r8d, dword ptr [r11 + rdx*2 - 0x2e0d9c56]
		movzx edi, dl
		xor r8d, ebp
		movzx ecx, dil
		shl dx, 0xa5
		ror r8d, 1
		lea rsi, [rdx + rcx*8 + 0x719ec1b2]
		inc r8d
		lea rsi, [rsi*2 + 0x4e9d55b9]
		xor r8d, 0x16348688
		bts si, dx
		ror dl, 0x67
		inc r8d
		btr edx, r10d
		jae 0x7ffb728f353e
1738: UB addr = 7ffb728f353e with ID: 89 yields:
		ror r8d, 3
		sal r10b, 0x26
		sbb ecx, edi
		push rbp
		and cl, 0x3d
		movzx eax, cl
		xor dword ptr [rsp + rdx - 0x1706c5c2], r8d
		lea rcx, [rcx + r10 + 0x5bb14d2a]
		cwde
		pop rbp
		not cl
		and edi, eax
		mov dword ptr [rbx + rdx*2 - 0x2e0d8b88], r8d
		sub r10, rdx
		mov rdx, qword ptr [r11 + rdx*2 - 0x2e0d8b80]
		shl di, 0x4e
		not si
		add ax, 0x1c05
		ror r10b, 0xa4
		lea rdx, [r10 + rdx + 0x456cae70]
		neg rdx
		lea r8, [r10*8 - 0x7fe7fbef]
		rol rdx, 1
		xor rbp, rdx
		or r10d, eax
		mov qword ptr [rbx + rdi*2 - 0x800c], rdx
		ja 0x7ffb72f0df4f
1739: UB addr = 7ffb72a7a0dc with ID: 90 yields:
		ror dx, 1
		mov qword ptr [rsp + rdi - 0x4000], 0x6f0ac19b
		sub dx, 0xc9ba
		push r10
		or edi, 0x7da86d19
		pop rsi
		ror dx, 1
		or dword ptr [rsp + rax*2 - 0x32], 0xbf0b5da2
		adc dx, 0xee9e
		push rax
		ror eax, 0x70
		xor bp, dx
		cwde
		sar r10w, 0xe4
		lea rdx, [rsp + rdx + 0x10]
		mov rcx, qword ptr [rax + rdx]
		jns 0x7ffb72bd5c92
1740: UB addr = 7ffb729edb37 with ID: 524 yields:
		xor r8d, ebp
		shl ecx, 0x5c
		call 0x7ffb72dc6b47
1741: UB addr = 7ffb729d25ac with ID: 525 yields:
		xor sil, 1
		inc sil
		neg sil
		dec sil
		xadd qword ptr [rsp + r8 - 0xe520], rcx
		push rdi
		xor bpl, sil
		movzx si, sil
		mov al, byte ptr [rbx + rax - 0x20]
		inc r8w
		sub ecx, 0x3bb81408
		and sil, al
		neg dword ptr [rsp + r8*4 - 0x39483]
		sar dword ptr [rsp + rcx - 0x5450d113], 0xab
		push r8
		not sil
		xchg qword ptr [rsp + rcx - 0x5450d110], rcx
		mov word ptr [rbx + rdi - 8], si
		mov esi, 0xbdb9573a
		lea rax, [rsi*4 + 0x4f3c8708]
		mov r8, qword ptr [rbx]
		lea rdi, [rsi + 0x6e80c9a6]
		movzx r10w, byte ptr ss:[r8]
		mov edx, 0x5216a99b
		neg edx
		add edi, esi
		mov word ptr [rbx + 6], r10w
		lea rcx, [rsi + rsi*2 - 0x18da4a7f]
		jnp 0x7ffb72d3158e
1742: UB addr = 7ffb72980109 with ID: 526 yields:
		push rbp
		call 0x7ffb72d77306
1743: UB addr = 7ffb72b7261d with ID: 527 yields:
		mov r10d, 0x6980f73e
		movzx eax, r10b
		btc ax, 0xae
		mov rsi, qword ptr [rax + rbx - 0x403e]
		movsx ecx, al
		mov edi, ecx
		mov rcx, qword ptr [rbx + r10 - 0x6980f736]
		adc rsi, rcx
		btr di, 0xa7
		xor rax, rax
		mov qword ptr [rbx + r10 - 0x6980f736], rsi
		adc eax, dword ptr [r11 + rax*2]
		xor eax, ebp
		neg eax
		sal di, 0x84
		lea rcx, [r10 + rdi*4 - 0x4ef4cfdc]
		ror eax, 2
		btc di, 0x87
		sar r10, cl
		lea eax, [rax + rcx*8 + 0x1bdd2f38]
		push rcx
		not eax
		mov qword ptr [rsp + r10*4], rbp
		xchg r10, rdi
		xor dword ptr [rsp + r10*2 - 0x6c0], eax
		pop rbp
		push rcx
		movsxd rax, eax
		add r9, rax
		movzx edi, byte ptr [r11]
		mov edx, 0x8a286702
		lea rsi, [rdx + 0x219ed34]
		xor dil, bpl
		movzx r8d, sil
		or r8w, dx
		push rdx
		not dil
		mov r10d, r8d
		push r10
		dec dil
		rol dil, 1
		movsx eax, si
		rol r10b, 0xe5
		neg dil
		rol dx, 0x2e
		shr esi, 0x42
		movsx ecx, sil
		xor bpl, dil
		neg r8d
		shl word ptr [rsp + rsi - 0x231094ff], 1
		not cx
		lea rdi, [rsp + rdi + 0x10]
		cwde
		jbe 0x7ffb72efdfcf
1744: UB addr = 7ffb72908976 with ID: 528 yields:
		mov qword ptr [rbx + r10*2 - 0xcf94], rsi
		mov edi, dword ptr [r10 + r11 - 0x67c5]
		adc word ptr [rsp + r10*2 - 0xcf84], 0x4ea0
		xor cx, ax
		jno 0x7ffb72d0e3b0
1745: UB addr = 7ffb72998ffa with ID: 55 yields:
		bswap rax
		mov qword ptr [rsp + rcx - 0x1e96abbc], rdi
		dec rax
		bts rsi, 1
		call 0x7ffb72bcf8f8
distinct # of ublocks: 500
block IDs [duplicates]: [0]
['call 0x7ffb6cfa48bf']

bytes: call 0x7ffb6cfa48bf: e89906dcff

bytecode len: 10 -   e89906dcff

block IDs [duplicates]: [1]
['push r14', 'push r10', 'call 0x7ffb72ba8acd']

bytes: push r14: 4156
push r10: 4152
call 0x7ffb72ba8acd: e8be431400

bytecode len: 18 -   41564152e8be431400

block IDs [duplicates]: [2]
['mov qword ptr [rsp], r9', 'push r12', 'mov r10d, 0x3ca0119a', 'push rax', 'call 0x7ffb72ac85fb']

bytes: mov qword ptr [rsp], r9: 4c894c2400
push r12: 4154
mov r10d, 0x3ca0119a: 41ba9a11a03c
push rax: 50
call 0x7ffb72ac85fb: e89153f6ff

bytecode len: 38 -   4c894c2400415441ba9a11a03c50e89153f6ff

block IDs [duplicates]: [3]
['mov eax, 0xbb885e17', 'mov qword ptr [rsp + r10 - 0x3ca0119a], rbx', 'call 0x7ffb72c5aa4c']

bytes: mov eax, 0xbb885e17: b8175e88bb
mov qword ptr [rsp + r10 - 0x3ca0119a], rbx: 4a899c1466ee5fc3
call 0x7ffb72c5aa4c: e83f241900

bytecode len: 36 -   b8175e88bb4a899c1466ee5fc3e83f241900

block IDs [duplicates]: [4]
['sub rbp, rdx', 'mov r10d, 0xda962391', 'lea r8, [r10 + r10*8 + 0x4803c381]', 'lea r9, [rip - 0x15]', 'mov r10d, dword ptr [r11]', 'movzx eax, r8b', 'mov ecx, eax', 'lea r11, [r11 + rax*4 - 0x264]', 'xadd eax, r8d', 'movzx edi, cx', 'xor r10d, ebp', 'push rcx', 'bswap eax', 'dec r10d', 'shr byte ptr [rsp + r8*2 - 0x132], 6', 'bswap r10d', 'shl al, 0xc1', 'shr rax, 0x16', 'mov edx, r8d', 'ror r10d, 3', 'xor al, dil', 'lea r10d, [r10 + r8*2 + 0x3228c97a]', 'xchg qword ptr [rsp + r8*2 - 0x134], rcx', 'lea rsi, [rcx + 0x7a6de21]', 'xor r10d, 0xd7940b1e', 'neg word ptr [rsp + r8*2 - 0x130]', 'mov qword ptr [rsp + r8*2 - 0x134], rbp', 'cmovg rcx, rsi', 'shl r8, 0xb', 'xor dword ptr [rsp + r8 - 0x4d000], r10d', 'pop rbp', 'push rax', 'inc r8d', 'movsxd r10, r10d', 'add r9, r10', 'mov qword ptr [rsp + r8 - 0x4d001], r9', 'ret']

bytes: sub rbp, rdx: 482bea
mov r10d, 0xda962391: 41ba912396da
lea r8, [r10 + r10*8 + 0x4803c381]: 4f8d84d281c30348
lea r9, [rip - 0x15]: 4c8d0debffffff
mov r10d, dword ptr [r11]: 458b1423
movzx eax, r8b: 410fb6c0
mov ecx, eax: 8bc8
lea r11, [r11 + rax*4 - 0x264]: 4d8d9c839cfdffff
xadd eax, r8d: 440fc1c0
movzx edi, cx: 0fb7f9
xor r10d, ebp: 4433d5
push rcx: 51
bswap eax: 0fc8
dec r10d: 41ffca
shr byte ptr [rsp + r8*2 - 0x132], 6: 42c0ac44cefeffff06
bswap r10d: 410fca
shl al, 0xc1: c0e0c1
shr rax, 0x16: 48c1e816
mov edx, r8d: 418bd0
ror r10d, 3: 41c1ca03
xor al, dil: 4032c7
lea r10d, [r10 + r8*2 + 0x3228c97a]: 478d94427ac92832
xchg qword ptr [rsp + r8*2 - 0x134], rcx: 4a878c44ccfeffff
lea rsi, [rcx + 0x7a6de21]: 488db121dea607
xor r10d, 0xd7940b1e: 4181f21e0b94d7
neg word ptr [rsp + r8*2 - 0x130]: 6642f79c44d0feffff
mov qword ptr [rsp + r8*2 - 0x134], rbp: 4a89ac44ccfeffff
cmovg rcx, rsi: 480f4fce
shl r8, 0xb: 49c1e00b
xor dword ptr [rsp + r8 - 0x4d000], r10d: 463194040030fbff
pop rbp: 5d
push rax: 50
inc r8d: 41ffc0
movsxd r10, r10d: 4d63d2
add r9, r10: 4d03ca
mov qword ptr [rsp + r8 - 0x4d001], r9: 4e898c04ff2ffbff
ret: c3

bytecode len: 340 -   482bea41ba912396da4f8d84d281c303484c8d0debffffff458b1423410fb6c08bc84d8d9c839cfdffff440fc1c00fb7f94433d5510fc841ffca42c0ac44cefeffff06410fcac0e0c148c1e816418bd041c1ca034032c7478d94427ac928324a878c44ccfeffff488db121dea6074181f21e0b94d76642f79c44d0feffff4a89ac44ccfeffff480f4fce49c1e00b463194040030fbff5d5041ffc04d63d24d03ca4e898c04ff2ffbffc3

block IDs [duplicates]: [5]
['movzx r8d, cx', 'xor dl, bpl', 'xor dword ptr [rsp + rsi*4 + 0xc], r8d', 'pop r10', 'not dl', 'bts r10, 0x98', 'lea rcx, [r10*4 - 0x6c5b2e6c]', 'rol r8w, 0x2c', 'inc dl', 'mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]', 'ror dl, 1', 'xor word ptr [rsp + r10 - 0x4f1da1c1], r8w', 'neg qword ptr [rsp + rsi]', 'adc dl, sil', 'sar r10d, 0x6b', 'xadd qword ptr [rsp + r10 - 0x9e3b4], rdi', 'neg dl', 'inc r8d', 'sub dl, 0xc', 'neg rsi', 'setl byte ptr [rsp + r10*4 - 0x278ecb]', 'rol dl, 1', 'xor bpl, dl', 'lea rdx, [rsp + rdx + 8]', 'mov qword ptr [rdx + r10*8 - 0x4f1da0], rax', 'mov edi, dword ptr [r11 + r10 - 0x9e3b2]', 'neg qword ptr [rsp + r10*2 - 0x13c768]', 'xor edi, ebp', 'xor edi, 0xe12e3f2d', 'btc r8d, ecx', 'rol edi, 1', 'sub r8w, 0x64a7', 'sal rcx, 0x87', 'xor edi, 0x689d25ab', 'neg edi', 'sal r8w, 0xec', 'mov qword ptr [rsp + r10 - 0x9e3b4], rbp', 'movsx eax, cl', 'btr esi, 0xa1', 'xor dword ptr [rsp + r10 - 0x9e3b4], edi', 'pop rbp', 'xor r10, rax', 'movsxd rdi, edi', 'adc r9, rdi', 'mov rdx, qword ptr [rbx + rsi*2 + 0x10]', 'lea rbx, [r10 + rbx - 0x9e39c]', 'dec si', 'movzx edi, byte ptr [rsi + r11 - 0xfff9]', 'lea r11, [r11 + r10 - 0x9e3ad]', 'jno 0x7ffb72b7d536']

bytes: movzx r8d, cx: 440fb7c1
xor dl, bpl: 4032d5
xor dword ptr [rsp + rsi*4 + 0xc], r8d: 443144b40c
pop r10: 415a
not dl: f6d2
bts r10, 0x98: 490fbaea98
lea rcx, [r10*4 - 0x6c5b2e6c]: 4a8d0c9594d1a493
rol r8w, 0x2c: 6641c1c02c
inc dl: fec2
mov edi, dword ptr [rsp + r10 - 0x4f1da1c4]: 428bbc143c5ee2b0
ror dl, 1: d0ca
xor word ptr [rsp + r10 - 0x4f1da1c1], r8w: 66463184143f5ee2b0
neg qword ptr [rsp + rsi]: 48f71c34
adc dl, sil: 4012d6
sar r10d, 0x6b: 41c1fa6b
xadd qword ptr [rsp + r10 - 0x9e3b4], rdi: 4a0fc1bc144c1cf6ff
neg dl: f6da
inc r8d: 41ffc0
sub dl, 0xc: 80ea0c
neg rsi: 48f7de
setl byte ptr [rsp + r10*4 - 0x278ecb]: 420f9c84943571d8ff
rol dl, 1: d0c2
xor bpl, dl: 4032ea
lea rdx, [rsp + rdx + 8]: 488d541408
mov qword ptr [rdx + r10*8 - 0x4f1da0], rax: 4a8984d260e2b0ff
mov edi, dword ptr [r11 + r10 - 0x9e3b2]: 438bbc134e1cf6ff
neg qword ptr [rsp + r10*2 - 0x13c768]: 4af79c549838ecff
xor edi, ebp: 33fd
xor edi, 0xe12e3f2d: 81f72d3f2ee1
btc r8d, ecx: 410fbbc8
rol edi, 1: d1c7
sub r8w, 0x64a7: 664181e8a764
sal rcx, 0x87: 48c1f187
xor edi, 0x689d25ab: 81f7ab259d68
neg edi: f7df
sal r8w, 0xec: 6641c1f0ec
mov qword ptr [rsp + r10 - 0x9e3b4], rbp: 4a89ac144c1cf6ff
movsx eax, cl: 0fbec1
btr esi, 0xa1: 0fbaf6a1
xor dword ptr [rsp + r10 - 0x9e3b4], edi: 4231bc144c1cf6ff
pop rbp: 5d
xor r10, rax: 4c33d0
movsxd rdi, edi: 4863ff
adc r9, rdi: 4c13cf
mov rdx, qword ptr [rbx + rsi*2 + 0x10]: 488b547310
lea rbx, [r10 + rbx - 0x9e39c]: 498d9c1a641cf6ff
dec si: 66ffce
movzx edi, byte ptr [rsi + r11 - 0xfff9]: 420fb6bc1e0700ffff
lea r11, [r11 + r10 - 0x9e3ad]: 4f8d9c13531cf6ff
jno 0x7ffb72b7d536: 0f8123480300

bytecode len: 476 -   440fb7c14032d5443144b40c415af6d2490fbaea984a8d0c9594d1a4936641c1c02cfec2428bbc143c5ee2b0d0ca66463184143f5ee2b048f71c344012d641c1fa6b4a0fc1bc144c1cf6fff6da41ffc080ea0c48f7de420f9c84943571d8ffd0c24032ea488d5414084a8984d260e2b0ff438bbc134e1cf6ff4af79c549838ecff33fd81f72d3f2ee1410fbbc8d1c7664181e8a76448c1f18781f7ab259d68f7df6641c1f0ec4a89ac144c1cf6ff0fbec10fbaf6a14231bc144c1cf6ff5d4c33d04863ff4c13cf488b547310498d9c1a641cf6ff66ffce420fb6bc1e0700ffff4f8d9c13531cf6ff0f8123480300

block IDs [duplicates]: [6]
['ror si, 0xf', 'rol si, 0xc7', 'xor dil, bpl', 'lea rcx, [rax*8 + 0x3d3d7905]', 'ror dil, 1', 'sub rsi, -0x577b11cf', 'xor dil, 0xa1', 'xor r8d, r8d', 'rol r10w, cl', 'adc dil, 0x94', 'sub cx, cx', 'xor dil, 0x9c', 'not r8d', 'btr si, cx', 'xor bpl, dil', 'sar r10w, 0xc6', 'add rdi, rsp', 'xchg ax, r8w', 'mov qword ptr [r10 + rdi - 0x9fed3], rdx', 'dec si', 'add ax, r10w', 'sub sil, al', 'jmp r9']

bytes: ror si, 0xf: 66c1ce0f
rol si, 0xc7: 66c1c6c7
xor dil, bpl: 4032fd
lea rcx, [rax*8 + 0x3d3d7905]: 488d0cc505793d3d
ror dil, 1: 40d0cf
sub rsi, -0x577b11cf: 4881ee31ee84a8
xor dil, 0xa1: 4080f7a1
xor r8d, r8d: 4533c0
rol r10w, cl: 6641d3c2
adc dil, 0x94: 4080d794
sub cx, cx: 662bc9
xor dil, 0x9c: 4080f79c
not r8d: 41f7d0
btr si, cx: 660fb3ce
xor bpl, dil: 4032ef
sar r10w, 0xc6: 6641c1fac6
add rdi, rsp: 4803fc
xchg ax, r8w: 664190
mov qword ptr [r10 + rdi - 0x9fed3], rdx: 4989943a2d01f6ff
dec si: 66ffce
add ax, r10w: 664103c2
sub sil, al: 402af0
jmp r9: 41ffe1

bytecode len: 186 -   66c1ce0f66c1c6c74032fd488d0cc505793d3d40d0cf4881ee31ee84a84080f7a14533c06641d3c24080d794662bc94080f79c41f7d0660fb3ce4032ef6641c1fac64803fc6641904989943a2d01f6ff66ffce664103c2402af041ffe1

block IDs [duplicates]: [7]
['adc dl, 0x31', 'and word ptr [rsp + r10 + 0xc], r10w', 'mov qword ptr [rsp + r10], rsi', 'neg qword ptr [rsp + r10*2 + 9]', 'xor bpl, dl', 'shl qword ptr [rsp + r10 + 5], 0xbf', 'lea rdx, [rsp + rdx + 0x18]', 'mov byte ptr [rsp + r10*8 + 0xc], sil', 'shr r10d, cl', 'jne 0x7ffb72bc1057']

bytes: adc dl, 0x31: 80d231
and word ptr [rsp + r10 + 0xc], r10w: 66462154140c
mov qword ptr [rsp + r10], rsi: 4a893414
neg qword ptr [rsp + r10*2 + 9]: 4af75c5409
xor bpl, dl: 4032ea
shl qword ptr [rsp + r10 + 5], 0xbf: 4ac1641405bf
lea rdx, [rsp + rdx + 0x18]: 488d541418
mov byte ptr [rsp + r10*8 + 0xc], sil: 428874d40c
shr r10d, cl: 41d3ea
jne 0x7ffb72bc1057: 0f85a2af0400

bytecode len: 92 -   80d23166462154140c4a8934144af75c54094032ea4ac1641405bf488d541418428874d40c41d3ea0f85a2af0400

block IDs [duplicates]: [8]
['mov qword ptr [r10 + rdx], rax', 'mov rdx, qword ptr [r10 + rbx + 8]', 'lea rbx, [rbx + r10*4 + 0x10]', 'setns sil', 'or r10b, byte ptr [rsp + r10 + 0x16]', 'movzx ecx, word ptr [r11 + r10 + 1]', 'movzx eax, word ptr [rsp + r10 + 7]', 'xor cx, bp', 'shr dil, 0x87', 'adc cx, 0xe297', 'movsx r8d, byte ptr [rsp + rsi*2 + 0x11]', 'not cx', 'sub byte ptr [rsp + r10 + 0xd], 0x11', 'sal r8d, 0xfc', 'sbb cx, 0x4b88', 'ror cx, 1', 'xor bp, cx', 'sal r8d, 0x7b', 'call 0x7ffb72be9f6b']

bytes: mov qword ptr [r10 + rdx], rax: 49890412
mov rdx, qword ptr [r10 + rbx + 8]: 498b541a08
lea rbx, [rbx + r10*4 + 0x10]: 4a8d5c9310
setns sil: 400f99c6
or r10b, byte ptr [rsp + r10 + 0x16]: 460a541416
movzx ecx, word ptr [r11 + r10 + 1]: 430fb74c1301
movzx eax, word ptr [rsp + r10 + 7]: 420fb7441407
xor cx, bp: 6633cd
shr dil, 0x87: 40c0ef87
adc cx, 0xe297: 6681d197e2
movsx r8d, byte ptr [rsp + rsi*2 + 0x11]: 440fbe447411
not cx: 66f7d1
sub byte ptr [rsp + r10 + 0xd], 0x11: 42806c140d11
sal r8d, 0xfc: 41c1f0fc
sbb cx, 0x4b88: 6681d9884b
ror cx, 1: 66d1c9
xor bp, cx: 6633e9
sal r8d, 0x7b: 41c1f07b
call 0x7ffb72be9f6b: e85d3e0700

bytecode len: 172 -   49890412498b541a084a8d5c9310400f99c6460a541416430fb74c1301420fb74414076633cd40c0ef876681d197e2440fbe44741166f7d142806c140d1141c1f0fc6681d9884b66d1c96633e941c1f07be85d3e0700

block IDs [duplicates]: [9]
['mov qword ptr [rsp + rax*4 + 0x860000c], rbp', 'shl r10, 0xf5', 'sbb rsi, rdx', 'xor dword ptr [rsp + rax*2 + 0x430000a], ecx', 'add word ptr [rsp + rax*2 + 0x4300004], ax', 'sal edx, 0xca', 'btr edi, eax', 'mov rbp, qword ptr [rsp + rdx*8 + 8]', 'dec di', 'mov qword ptr [rsp + rdx], rdx', 'movsxd rcx, ecx', 'mov r8d, 0x869b6ea2', 'sbb r10, rdi', 'add word ptr [rsp + rdx], di', 'adc r9, rcx', 'sal sil, 0x46', 'mov rdi, qword ptr [rbx + rdx + 0x10]', 'mov qword ptr [rsp + rdx*2 + 8], -0x6dd6a777', 'jb 0x7ffb72dadbd6']

bytes: mov qword ptr [rsp + rax*4 + 0x860000c], rbp: 4889ac840c006008
shl r10, 0xf5: 49c1e2f5
sbb rsi, rdx: 481bf2
xor dword ptr [rsp + rax*2 + 0x430000a], ecx: 318c440a003004
add word ptr [rsp + rax*2 + 0x4300004], ax: 6601844404003004
sal edx, 0xca: c1f2ca
btr edi, eax: 0fb3c7
mov rbp, qword ptr [rsp + rdx*8 + 8]: 488b6cd408
dec di: 66ffcf
mov qword ptr [rsp + rdx], rdx: 48891414
movsxd rcx, ecx: 4863c9
mov r8d, 0x869b6ea2: 41b8a26e9b86
sbb r10, rdi: 4c1bd7
add word ptr [rsp + rdx], di: 66013c14
adc r9, rcx: 4c13c9
sal sil, 0x46: 40c0f646
mov rdi, qword ptr [rbx + rdx + 0x10]: 488b7c1310
mov qword ptr [rsp + rdx*2 + 8], -0x6dd6a777: 48c744540889582992
jb 0x7ffb72dadbd6: 0f8204ff3300

bytecode len: 182 -   4889ac840c00600849c1e2f5481bf2318c440a0030046601844404003004c1f2ca0fb3c7488b6cd40866ffcf488914144863c941b8a26e9b864c1bd766013c144c13c940c0f646488b7c131048c7445408895829920f8204ff3300

block IDs [duplicates]: [10]
['lea rbx, [rdx + rbx + 0x18]', 'neg qword ptr [rsp + rdx*8 + 8]', 'setb r8b', 'movzx esi, word ptr [r11 + rax + 0x2180007]', 'lea r11, [r11 + rdx + 8]', 'push rdx', 'xor si, bp', 'call 0x7ffb72c3e2f2']

bytes: lea rbx, [rdx + rbx + 0x18]: 488d5c1a18
neg qword ptr [rsp + rdx*8 + 8]: 48f75cd408
setb r8b: 410f92c0
movzx esi, word ptr [r11 + rax + 0x2180007]: 410fb7b40307001802
lea r11, [r11 + rdx + 8]: 4d8d5c1308
push rdx: 52
xor si, bp: 6633f5
call 0x7ffb72c3e2f2: e8f8051d00

bytecode len: 74 -   488d5c1a1848f75cd408410f92c0410fb7b403070018024d8d5c1308526633f5e8f8051d00

block IDs [duplicates]: [11]
['xor rbp, r10', 'mov qword ptr [rsp + rsi - 0xffae], rdx', 'xor r8, rax', 'btc esi, ecx', 'mov qword ptr [rsi + rbx - 0xffb6], r10', 'push rsi', 'neg ecx', 'xadd eax, esi', 'movzx eax, byte ptr [rax + r11 - 0x2000ff91]', 'shr di, 0xed', 'or dx, 0xec87', 'lea r11, [r11 + rdx*4 - 0x3f607]', 'call 0x7ffb72c67c09']

bytes: xor rbp, r10: 4933ea
mov qword ptr [rsp + rsi - 0xffae], rdx: 488994345200ffff
xor r8, rax: 4c33c0
btc esi, ecx: 0fbbce
mov qword ptr [rsi + rbx - 0xffb6], r10: 4c89941e4a00ffff
push rsi: 56
neg ecx: f7d9
xadd eax, esi: 0fc1f0
movzx eax, byte ptr [rax + r11 - 0x2000ff91]: 420fb684186f00ffdf
shr di, 0xed: 66c1efed
or dx, 0xec87: 6681ca87ec
lea r11, [r11 + rdx*4 - 0x3f607]: 4d8d9c93f909fcff
call 0x7ffb72c67c09: e896a00c00

bytecode len: 124 -   4933ea488994345200ffff4c33c00fbbce4c89941e4a00ffff56f7d90fc1f0420fb684186f00ffdf66c1efed6681ca87ec4d8d9c93f909fcffe896a00c00

block IDs [duplicates]: [12]
['mov rdi, qword ptr [rax + rdi + 0x5519fffd]', 'pop rsi', 'adc rsi, 0x18852e', 'jmp rsi']

bytes: mov rdi, qword ptr [rax + rdi + 0x5519fffd]: 488bbc38fdff1955
pop rsi: 5e
adc rsi, 0x18852e: 4881d62e851800
jmp rsi: ffe6

bytecode len: 36 -   488bbc38fdff19555e4881d62e851800ffe6

block IDs [duplicates]: [527, 527, 527, 527, 527, 527, 527]
['mov r10d, 0x6980f73e', 'movzx eax, r10b', 'btc ax, 0xae', 'mov rsi, qword ptr [rax + rbx - 0x403e]', 'movsx ecx, al', 'mov edi, ecx', 'mov rcx, qword ptr [rbx + r10 - 0x6980f736]', 'adc rsi, rcx', 'btr di, 0xa7', 'xor rax, rax', 'mov qword ptr [rbx + r10 - 0x6980f736], rsi', 'adc eax, dword ptr [r11 + rax*2]', 'xor eax, ebp', 'neg eax', 'sal di, 0x84', 'lea rcx, [r10 + rdi*4 - 0x4ef4cfdc]', 'ror eax, 2', 'btc di, 0x87', 'sar r10, cl', 'lea eax, [rax + rcx*8 + 0x1bdd2f38]', 'push rcx', 'not eax', 'mov qword ptr [rsp + r10*4], rbp', 'xchg r10, rdi', 'xor dword ptr [rsp + r10*2 - 0x6c0], eax', 'pop rbp', 'push rcx', 'movsxd rax, eax', 'add r9, rax', 'movzx edi, byte ptr [r11]', 'mov edx, 0x8a286702', 'lea rsi, [rdx + 0x219ed34]', 'xor dil, bpl', 'movzx r8d, sil', 'or r8w, dx', 'push rdx', 'not dil', 'mov r10d, r8d', 'push r10', 'dec dil', 'rol dil, 1', 'movsx eax, si', 'rol r10b, 0xe5', 'neg dil', 'rol dx, 0x2e', 'shr esi, 0x42', 'movsx ecx, sil', 'xor bpl, dil', 'neg r8d', 'shl word ptr [rsp + rsi - 0x231094ff], 1', 'not cx', 'lea rdi, [rsp + rdi + 0x10]', 'cwde', 'jbe 0x7ffb72efdfcf']

bytes: mov r10d, 0x6980f73e: 41ba3ef78069
movzx eax, r10b: 410fb6c2
btc ax, 0xae: 660fbaf8ae
mov rsi, qword ptr [rax + rbx - 0x403e]: 488bb418c2bfffff
movsx ecx, al: 0fbec8
mov edi, ecx: 8bf9
mov rcx, qword ptr [rbx + r10 - 0x6980f736]: 4a8b8c13ca087f96
adc rsi, rcx: 4813f1
btr di, 0xa7: 660fbaf7a7
xor rax, rax: 4833c0
mov qword ptr [rbx + r10 - 0x6980f736], rsi: 4a89b413ca087f96
adc eax, dword ptr [r11 + rax*2]: 41130443
xor eax, ebp: 33c5
neg eax: f7d8
sal di, 0x84: 66c1f784
lea rcx, [r10 + rdi*4 - 0x4ef4cfdc]: 498d8cba24300bb1
ror eax, 2: c1c802
btc di, 0x87: 660fbaff87
sar r10, cl: 49d3fa
lea eax, [rax + rcx*8 + 0x1bdd2f38]: 8d84c8382fdd1b
push rcx: 51
not eax: f7d0
mov qword ptr [rsp + r10*4], rbp: 4a892c94
xchg r10, rdi: 4987fa
xor dword ptr [rsp + r10*2 - 0x6c0], eax: 4231845440f9ffff
pop rbp: 5d
push rcx: 51
movsxd rax, eax: 4863c0
add r9, rax: 4c03c8
movzx edi, byte ptr [r11]: 410fb63b
mov edx, 0x8a286702: ba0267288a
lea rsi, [rdx + 0x219ed34]: 488db234ed1902
xor dil, bpl: 4032fd
movzx r8d, sil: 440fb6c6
or r8w, dx: 66440bc2
push rdx: 52
not dil: 40f6d7
mov r10d, r8d: 458bd0
push r10: 4152
dec dil: 40fecf
rol dil, 1: 40d0c7
movsx eax, si: 0fbfc6
rol r10b, 0xe5: 41c0c2e5
neg dil: 40f6df
rol dx, 0x2e: 66c1c22e
shr esi, 0x42: c1ee42
movsx ecx, sil: 400fbece
xor bpl, dil: 4032ef
neg r8d: 41f7d8
shl word ptr [rsp + rsi - 0x231094ff], 1: 66d1a434016befdc
not cx: 66f7d1
lea rdi, [rsp + rdi + 0x10]: 488d7c3c10
cwde: 98
jbe 0x7ffb72efdfcf: 0f8698d05000

bytecode len: 422 -   41ba3ef78069410fb6c2660fbaf8ae488bb418c2bfffff0fbec88bf94a8b8c13ca087f964813f1660fbaf7a74833c04a89b413ca087f964113044333c5f7d866c1f784498d8cba24300bb1c1c802660fbaff8749d3fa8d84c8382fdd1b51f7d04a892c944987fa4231845440f9ffff5d514863c04c03c8410fb63bba0267288a488db234ed19024032fd440fb6c666440bc25240f6d7458bd0415240fecf40d0c70fbfc641c0c2e540f6df66c1c22ec1ee42400fbece4032ef41f7d866d1a434016befdc66f7d1488d7c3c10980f8698d05000

block IDs [duplicates]: [14]
['btc r8w, 0xb3', 'xor dword ptr [rsp + r10 - 0x73b0b997], ecx', 'bts r10d, eax', 'call 0x7ffb728ad73b']

bytes: btc r8w, 0xb3: 66410fbaf8b3
xor dword ptr [rsp + r10 - 0x73b0b997], ecx: 42318c1469464f8c
bts r10d, eax: 410fabc2
call 0x7ffb728ad73b: e84768e5ff

bytecode len: 46 -   66410fbaf8b342318c1469464f8c410fabc2e84768e5ff

block IDs [duplicates]: [15]
['mov rbp, qword ptr [rsp + r8 - 0x5134888e]', 'movsx esi, r8w', 'movsxd rcx, ecx', 'dec al', 'adc r9, rcx', 'mov rdx, qword ptr [r8 + rbx - 0x5134889e]', 'mov qword ptr [rsp + r8 - 0x5134888e], r10', 'lea rdi, [rsp + rax*8 + 0x158]', 'mov qword ptr [rdi + r10 - 0x73b0b997], rdx', 'mov qword ptr [rsp + r8 - 0x51348896], -0x5bd3dafc', 'mov qword ptr [rsp + r10 - 0x73b0b997], r9', 'ret 8']

bytes: mov rbp, qword ptr [rsp + r8 - 0x5134888e]: 4a8bac047277cbae
movsx esi, r8w: 410fbff0
movsxd rcx, ecx: 4863c9
dec al: fec8
adc r9, rcx: 4c13c9
mov rdx, qword ptr [r8 + rbx - 0x5134889e]: 498b94186277cbae
mov qword ptr [rsp + r8 - 0x5134888e], r10: 4e8994047277cbae
lea rdi, [rsp + rax*8 + 0x158]: 488dbcc458010000
mov qword ptr [rdi + r10 - 0x73b0b997], rdx: 4a89941769464f8c
mov qword ptr [rsp + r8 - 0x51348896], -0x5bd3dafc: 4ac784046a77cbae04252ca4
mov qword ptr [rsp + r10 - 0x73b0b997], r9: 4e898c1469464f8c
ret 8: c20800

bytecode len: 150 -   4a8bac047277cbae410fbff04863c9fec84c13c9498b94186277cbae4e8994047277cbae488dbcc4580100004a89941769464f8c4ac784046a77cbae04252ca44e898c1469464f8cc20800

block IDs [duplicates]: [16]
['mov edi, dword ptr [rsi + r11 - 0x7a02ec14]', 'xor edi, ebp', 'lea rdx, [rsi*2 + 0x5d2a8181]', 'dec edi', 'movsx r10d, si', 'ror edi, 1', 'xor ecx, ecx', 'inc rdx', 'dec edi', 'bts rsi, r10', 'bswap edi', 'movzx r8d, dl', 'mov eax, 0xcc270637', 'push rbp', 'or rsi, rax', 'xor dword ptr [rsp + rcx], edi', 'sar dl, 0xe4', 'ror si, 1', 'call 0x7ffb72a2308f']

bytes: mov edi, dword ptr [rsi + r11 - 0x7a02ec14]: 428bbc1eec13fd85
xor edi, ebp: 33fd
lea rdx, [rsi*2 + 0x5d2a8181]: 488d147581812a5d
dec edi: ffcf
movsx r10d, si: 440fbfd6
ror edi, 1: d1cf
xor ecx, ecx: 33c9
inc rdx: 48ffc2
dec edi: ffcf
bts rsi, r10: 4c0fabd6
bswap edi: 0fcf
movzx r8d, dl: 440fb6c2
mov eax, 0xcc270637: b8370627cc
push rbp: 55
or rsi, rax: 480bf0
xor dword ptr [rsp + rcx], edi: 313c0c
sar dl, 0xe4: c0fae4
ror si, 1: 66d1ce
call 0x7ffb72a2308f: e8088c1500

bytecode len: 132 -   428bbc1eec13fd8533fd488d147581812a5dffcf440fbfd6d1cf33c948ffc2ffcf4c0fabd60fcf440fb6c2b8370627cc55480bf0313c0cc0fae466d1cee8088c1500

block IDs [duplicates]: [17]
['neg si', 'rol si, 1', 'pop r8', 'sub rcx, rcx', 'sbb si, 0x680', 'shl qword ptr [rsp + rcx + 8], 0xc', 'mov qword ptr [rsp + rcx], 0x6f8c9e25', 'xchg qword ptr [rsp + rcx + 5], rcx', 'xor bp, si', 'lea r8, [rdx*8 - 0x57731477]', 'mov r10d, 0x331896', 'lea rsi, [rsp + rsi + 0x10]', 'mov qword ptr [r10 + rsi - 0x331896], rax', 'shr di, 0xcd', 'sub cl, dl', 'movzx eax, r8w', 'mov edx, dword ptr [r11 + r10*4 - 0xcc6254]', 'sub eax, 0x3d374215', 'xor edx, ebp', 'ror r10w, 0xac', 'jb 0x7ffb72987d6b']

bytes: neg si: 66f7de
rol si, 1: 66d1c6
pop r8: 4158
sub rcx, rcx: 482bc9
sbb si, 0x680: 6681de8006
shl qword ptr [rsp + rcx + 8], 0xc: 48c1640c080c
mov qword ptr [rsp + rcx], 0x6f8c9e25: 48c7040c259e8c6f
xchg qword ptr [rsp + rcx + 5], rcx: 48874c0c05
xor bp, si: 6633ee
lea r8, [rdx*8 - 0x57731477]: 4c8d04d589eb8ca8
mov r10d, 0x331896: 41ba96183300
lea rsi, [rsp + rsi + 0x10]: 488d743410
mov qword ptr [r10 + rsi - 0x331896], rax: 498984326ae7ccff
shr di, 0xcd: 66c1efcd
sub cl, dl: 2aca
movzx eax, r8w: 410fb7c0
mov edx, dword ptr [r11 + r10*4 - 0xcc6254]: 438b9493ac9d33ff
sub eax, 0x3d374215: 2d1542373d
xor edx, ebp: 33d5
ror r10w, 0xac: 6641c1caac
jb 0x7ffb72987d6b: 0f82664cf6ff

bytecode len: 202 -   66f7de66d1c64158482bc96681de800648c1640c080c48c7040c259e8c6f48874c0c056633ee4c8d04d589eb8ca841ba96183300488d743410498984326ae7ccff66c1efcd2aca410fb7c0438b9493ac9d33ff2d1542373d33d56641c1caac0f82664cf6ff

block IDs [duplicates]: [18]
['xchg qword ptr [rsp + r10*4 - 0xce257c], rax', 'xor byte ptr [rsp + r10*2 - 0x6712be], r8b', 'lea edx, [rdi + rdx - 0x5ac0d471]', 'jbe 0x7ffb72d0df06']

bytes: xchg qword ptr [rsp + r10*4 - 0xce257c], rax: 4a87849484da31ff
xor byte ptr [rsp + r10*2 - 0x6712be], r8b: 4630845442ed98ff
lea edx, [rdi + rdx - 0x5ac0d471]: 8d94178f2b3fa5
jbe 0x7ffb72d0df06: 0f867c613800

bytecode len: 58 -   4a87849484da31ff4630845442ed98ff8d94178f2b3fa50f867c613800

block IDs [duplicates]: [19]
['ror edx, 1', 'ror qword ptr [rsp + r10*8 - 0x19c4b00], 0xfa', 'jb 0x7ffb72b072ba']

bytes: ror edx, 1: d1ca
ror qword ptr [rsp + r10*8 - 0x19c4b00], 0xfa: 4ac18cd400b563fefa
jb 0x7ffb72b072ba: 0f821ff51700

bytecode len: 34 -   d1ca4ac18cd400b563fefa0f821ff51700

block IDs [duplicates]: [20]
['bswap edx', 'sbb r8w, 0xbf2e', 'rol edx, 3', 'mov qword ptr [rsp + r10 - 0x338959], rbp', 'inc r10w', 'xor dword ptr [rsp + r10*2 - 0x6712bc], edx', 'push r8', 'pop r10', 'mov rbp, qword ptr [rsp + 8]', 'movsxd rdx, edx', 'not rcx', 'mov qword ptr [rsp + 8], -0x59fae262', 'add r9, rdx', 'and r8d, 0x1e9ba438', 'movzx eax, word ptr [r11 + r8 - 0xc032428]', 'movzx edx, di', 'add word ptr [rsp + r8*8 - 0x60192175], di', 'lea r11, [r11 + r8 - 0xc032426]', 'movsx esi, cl', 'xor ax, bp', 'call 0x7ffb72de2b95']

bytes: bswap edx: 0fca
sbb r8w, 0xbf2e: 664181d82ebf
rol edx, 3: c1c203
mov qword ptr [rsp + r10 - 0x338959], rbp: 4a89ac14a776ccff
inc r10w: 6641ffc2
xor dword ptr [rsp + r10*2 - 0x6712bc], edx: 4231945444ed98ff
push r8: 4150
pop r10: 415a
mov rbp, qword ptr [rsp + 8]: 488b6c2408
movsxd rdx, edx: 4863d2
not rcx: 48f7d1
mov qword ptr [rsp + 8], -0x59fae262: 48c74424089e1d05a6
add r9, rdx: 4c03ca
and r8d, 0x1e9ba438: 4181e038a49b1e
movzx eax, word ptr [r11 + r8 - 0xc032428]: 430fb78403d8dbfcf3
movzx edx, di: 0fb7d7
add word ptr [rsp + r8*8 - 0x60192175], di: 664201bcc48bdee69f
lea r11, [r11 + r8 - 0xc032426]: 4f8d9c03dadbfcf3
movsx esi, cl: 0fbef1
xor ax, bp: 6633c5
call 0x7ffb72de2b95: e843203f00

bytecode len: 210 -   0fca664181d82ebfc1c2034a89ac14a776ccff6641ffc24231945444ed98ff4150415a488b6c24084863d248f7d148c74424089e1d05a64c03ca4181e038a49b1e430fb78403d8dbfcf30fb7d7664201bcc48bdee69f4f8d9c03dadbfcf30fbef16633c5e843203f00

block IDs [duplicates]: [21]
['not ax', 'lea rdx, [r8 + rdi - 0x47c423fa]', 'neg ax', 'xor rcx, 0x453bcd94', 'ror ax, 1', 'not r10b', 'add ax, 0x5e8f', 'call 0x7ffb72de74ae']

bytes: not ax: 66f7d0
lea rdx, [r8 + rdi - 0x47c423fa]: 498d943806dc3bb8
neg ax: 66f7d8
xor rcx, 0x453bcd94: 4881f194cd3b45
ror ax, 1: 66d1c8
not r10b: 41f6d2
add ax, 0x5e8f: 66058f5e
call 0x7ffb72de74ae: e8f9df3e00

bytecode len: 72 -   66f7d0498d943806dc3bb866f7d84881f194cd3b4566d1c841f6d266058f5ee8f9df3e00

block IDs [duplicates]: [22]
['push 0x643f3989', 'mov ecx, 0xe3a653b', 'mov edx, dword ptr [rcx + r11 - 0xe3a653b]', 'xor edx, ebp', 'mov edi, ecx', 'movsx r8d, word ptr [rsp + rcx - 0xe3a6538]', 'not edx', 'rol ecx, 0xb', 'lea edx, [rdx + rdi + 0x7065c654]', 'ror edx, 1', 'not byte ptr [rsp + rdi*2 - 0x1c74ca71]', 'bswap edx', 'sub edi, 0x1931938f', 'xor r8b, 0xa6', 'rol edx, 3', 'mov qword ptr [rsp + r8*2 - 0x184], rbp', 'not r10w', 'movzx esi, cx', 'xor bp, r10w', 'sub rcx, rsi', 'lea r10, [rsp + r10 + 8]', 'mov qword ptr [rsp + r8 - 0x80c2], rcx', 'btc dx, 0x19', 'cwde', 'mov qword ptr [rcx + r10 - 0x67a40000], rdi', 'jb 0x7ffb72c16290']

bytes: push 0x643f3989: 6889393f64
mov ecx, 0xe3a653b: b93b653a0e
mov edx, dword ptr [rcx + r11 - 0xe3a653b]: 428b9419c59ac5f1
xor edx, ebp: 33d5
mov edi, ecx: 8bf9
movsx r8d, word ptr [rsp + rcx - 0xe3a6538]: 440fbf840cc89ac5f1
not edx: f7d2
rol ecx, 0xb: c1c10b
lea edx, [rdx + rdi + 0x7065c654]: 8d943a54c66570
ror edx, 1: d1ca
not byte ptr [rsp + rdi*2 - 0x1c74ca71]: f6947c8f358be3
bswap edx: 0fca
sub edi, 0x1931938f: 81ef8f933119
xor r8b, 0xa6: 4180f0a6
rol edx, 3: c1c203
mov qword ptr [rsp + r8*2 - 0x184], rbp: 4a89ac447cfeffff
not r10w: 6641f7d2
movzx esi, cx: 0fb7f1
xor bp, r10w: 664133ea
sub rcx, rsi: 482bce
lea r10, [rsp + r10 + 8]: 4e8d541408
mov qword ptr [rsp + r8 - 0x80c2], rcx: 4a898c043e7fffff
btc dx, 0x19: 660fbafa19
cwde: 98
mov qword ptr [rcx + r10 - 0x67a40000], rdi: 4a89bc1100005c98
jb 0x7ffb72c16290: 0f824f942b00

bytecode len: 244 -   6889393f64b93b653a0e428b9419c59ac5f133d58bf9440fbf840cc89ac5f1f7d2c1c10b8d943a54c66570d1caf6947c8f358be30fca81ef8f9331194180f0a6c1c2034a89ac447cfeffff6641f7d20fb7f1664133ea482bce4e8d5414084a898c043e7fffff660fbafa19984a89bc1100005c980f824f942b00

block IDs [duplicates]: [23]
['movzx esi, byte ptr [r8 + r11 - 0x80bc]', 'call 0x7ffb72c0b213']

bytes: movzx esi, byte ptr [r8 + r11 - 0x80bc]: 430fb6b418447fffff
call 0x7ffb72c0b213: e8c4e32a00

bytecode len: 28 -   430fb6b418447fffffe8c4e32a00

block IDs [duplicates]: [24]
['xor dl, ah', 'xor sil, 0x2e', 'xor bpl, sil', 'lea rsi, [rsp + rsi + 0x18]', 'inc cl', 'shl cx, 3', 'mov rax, qword ptr [rcx + rsi - 0x67a40008]', 'push r10', 'lea rsi, [rcx - 0x277439d4]', 'mov qword ptr [rbx + r8*8 - 0x40610], rax', 'adc si, word ptr [rsp + rcx - 0x67a3ffef]', 'call 0x7ffb72932bc2']

bytes: xor dl, ah: 32d4
xor sil, 0x2e: 4080f62e
xor bpl, sil: 4032ee
lea rsi, [rsp + rsi + 0x18]: 488d743418
inc cl: fec1
shl cx, 3: 66c1e103
mov rax, qword ptr [rcx + rsi - 0x67a40008]: 488b8431f8ff5b98
push r10: 4152
lea rsi, [rcx - 0x277439d4]: 488db12cc68bd8
mov qword ptr [rbx + r8*8 - 0x40610], rax: 4a8984c3f0f9fbff
adc si, word ptr [rsp + rcx - 0x67a3ffef]: 6613b40c11005c98
call 0x7ffb72932bc2: e8e1ad0300

bytecode len: 116 -   32d44080f62e4032ee488d743418fec166c1e103488b8431f8ff5b984152488db12cc68bd84a8984c3f0f9fbff6613b40c11005c98e8e1ad0300

block IDs [duplicates]: [25]
['push r8', 'mov qword ptr [rsp + r8*2 - 0x10184], r9', 'ret 0x28']

bytes: push r8: 4150
mov qword ptr [rsp + r8*2 - 0x10184], r9: 4e898c447cfefeff
ret 0x28: c22800

bytecode len: 26 -   41504e898c447cfefeffc22800

block IDs [duplicates]: [26]
['mov r8d, dword ptr [r11 + r8*2 - 0x4e0a7558]', 'mov edi, 0x8834e7a7', 'mov esi, edi', 'movzx ecx, di', 'push rsi', 'lea r10, [rcx*8 - 0x67d484cc]', 'lea r8d, [rcx + r8 - 0x410c0608]', 'movsx edx, byte ptr [rsp + rcx - 0xd37e]', 'movzx eax, di', 'bswap r8d', 'sbb rcx, 0x480c4e9f', 'xchg dword ptr [rsp + rdx*2 - 0x65], r10d', 'neg ax', 'xor r8d, 0x3aabe31c', 'xchg byte ptr [rsp + rcx + 0x480b7b27], al', 'push rsi', 'mov qword ptr [rsp + rsi - 0x80], rbp', 'xor eax, 0x2fbddc91', 'xor dword ptr [rsp + rsi*2 - 0x108], r8d', 'mov rbp, qword ptr [rsp + rsi - 0x80]', 'inc dil', 'cqo', 'movsxd r8, r8d', 'inc byte ptr [rsp + rsi - 0x85]', 'add r9, r8', 'and ecx, 0x6532cb33', 'mov r10, rbx', 'je 0x7ffb72b7e82b']

bytes: mov r8d, dword ptr [r11 + r8*2 - 0x4e0a7558]: 478b8443a88af5b1
mov edi, 0x8834e7a7: bfa7e73488
mov esi, edi: 8bf7
movzx ecx, di: 0fb7cf
push rsi: 56
lea r10, [rcx*8 - 0x67d484cc]: 4c8d14cd347b2b98
lea r8d, [rcx + r8 - 0x410c0608]: 468d8401f8f9f3be
movsx edx, byte ptr [rsp + rcx - 0xd37e]: 0fbe940c822cffff
movzx eax, di: 0fb7c7
bswap r8d: 410fc8
sbb rcx, 0x480c4e9f: 4881d99f4e0c48
xchg dword ptr [rsp + rdx*2 - 0x65], r10d: 448754549b
neg ax: 66f7d8
xor r8d, 0x3aabe31c: 4181f01ce3ab3a
xchg byte ptr [rsp + rcx + 0x480b7b27], al: 86840c277b0b48
push rsi: 56
mov qword ptr [rsp + rsi - 0x80], rbp: 48896c3480
xor eax, 0x2fbddc91: 3591dcbd2f
xor dword ptr [rsp + rsi*2 - 0x108], r8d: 44318474f8feffff
mov rbp, qword ptr [rsp + rsi - 0x80]: 488b6c3480
inc dil: 40fec7
cqo: 4899
movsxd r8, r8d: 4d63c0
inc byte ptr [rsp + rsi - 0x85]: fe84347bffffff
add r9, r8: 4d03c8
and ecx, 0x6532cb33: 81e133cb3265
mov r10, rbx: 4c8bd3
je 0x7ffb72b7e82b: 0f8445d4feff

bytecode len: 270 -   478b8443a88af5b1bfa7e734888bf70fb7cf564c8d14cd347b2b98468d8401f8f9f3be0fbe940c822cffff0fb7c7410fc84881d99f4e0c48448754549b66f7d84181f01ce3ab3a86840c277b0b485648896c34803591dcbd2f44318474f8feffff488b6c348040fec748994d63c0fe84347bffffff4d03c881e133cb32654c8bd30f8445d4feff

block IDs [duplicates]: [27]
['neg di', 'mov qword ptr [rsi + rbx - 0x90], r10', 'mov qword ptr [rsp + rsi - 0x80], rax', 'bts rdx, rax', 'mov r8, qword ptr [rsi + r11 - 0x84]', 'ror word ptr [rsp + rsi*2 - 0x10f], 8', 'push rdi', 'call 0x7ffb729acebf']

bytes: neg di: 66f7df
mov qword ptr [rsi + rbx - 0x90], r10: 4c89941e70ffffff
mov qword ptr [rsp + rsi - 0x80], rax: 4889443480
bts rdx, rax: 480fabc2
mov r8, qword ptr [rsi + r11 - 0x84]: 4e8b841e7cffffff
ror word ptr [rsp + rsi*2 - 0x10f], 8: 66c18c74f1feffff08
push rdi: 57
call 0x7ffb729acebf: e8abbae1ff

bytecode len: 86 -   66f7df4c89941e70ffffff4889443480480fabc24e8b841e7cffffff66c18c74f1feffff0857e8abbae1ff

block IDs [duplicates]: [28]
['movsx r10d, word ptr [rsp + rsi - 0x7f]', 'neg al', 'shr ax, 1', 'shl rdi, 0xd5', 'lea r8, [rsi + r8 + 0x933b51f]', 'or r10b, 0x91', 'ror r8, 6', 'cdqe', 'xor rbp, r8', 'cqo', 'btc di, 0x1d', 'shl dil, 0x22', 'mov qword ptr [rsi + rbx - 0x98], r8', 'rol byte ptr [rsp + rsi - 0x6d], 0x42', 'lea r8, [rdi*4 + 0x76918820]', 'mov rcx, qword ptr [r11 + rsi*4 - 0x214]', 'rol dl, 0x61', 'shr word ptr [rsp + rsi*4 - 0x206], 0x6e', 'xchg byte ptr [rsp + rsi - 0x6f], dh', 'lea r11, [r11 + rsi - 0x74]', 'pop rax', 'mov eax, r8d', 'xor rcx, rbp', 'lea rcx, [rcx + rsi*4 - 0x1b9fe73d]', 'or word ptr [rsp + rdx - 0xc3fd], dx', 'bswap rcx', 'ror r8, 0xc3', 'neg eax', 'inc byte ptr [rsp + rsi - 0x88]', 'rol rcx, 7', 'xor rcx, 0xffffffffaf9b582f', 'inc rcx', 'not qword ptr [rsp + rsi*4 - 0x212]', 'xor rbp, rcx', 'rol dword ptr [rsp + rsi*2 - 0x110], 0xe5', 'mov qword ptr [rsi + rbx - 0xa0], rcx', 'cwde', 'call 0x7ffb72b6006b']

bytes: movsx r10d, word ptr [rsp + rsi - 0x7f]: 440fbf543481
neg al: f6d8
shr ax, 1: 66d1e8
shl rdi, 0xd5: 48c1e7d5
lea r8, [rsi + r8 + 0x933b51f]: 4e8d84061fb53309
or r10b, 0x91: 4180ca91
ror r8, 6: 49c1c806
cdqe: 4898
xor rbp, r8: 4933e8
cqo: 4899
btc di, 0x1d: 660fbaff1d
shl dil, 0x22: 40c0e722
mov qword ptr [rsi + rbx - 0x98], r8: 4c89841e68ffffff
rol byte ptr [rsp + rsi - 0x6d], 0x42: c044349342
lea r8, [rdi*4 + 0x76918820]: 4c8d04bd20889176
mov rcx, qword ptr [r11 + rsi*4 - 0x214]: 498b8cb3ecfdffff
rol dl, 0x61: c0c261
shr word ptr [rsp + rsi*4 - 0x206], 0x6e: 66c1acb4fafdffff6e
xchg byte ptr [rsp + rsi - 0x6f], dh: 86743491
lea r11, [r11 + rsi - 0x74]: 4d8d5c338c
pop rax: 58
mov eax, r8d: 418bc0
xor rcx, rbp: 4833cd
lea rcx, [rcx + rsi*4 - 0x1b9fe73d]: 488d8cb1c31860e4
or word ptr [rsp + rdx - 0xc3fd], dx: 66099414033cffff
bswap rcx: 480fc9
ror r8, 0xc3: 49c1c8c3
neg eax: f7d8
inc byte ptr [rsp + rsi - 0x88]: fe843478ffffff
rol rcx, 7: 48c1c107
xor rcx, 0xffffffffaf9b582f: 4881f12f589baf
inc rcx: 48ffc1
not qword ptr [rsp + rsi*4 - 0x212]: 48f794b4eefdffff
xor rbp, rcx: 4833e9
rol dword ptr [rsp + rsi*2 - 0x110], 0xe5: c18474f0feffffe5
mov qword ptr [rsi + rbx - 0xa0], rcx: 48898c1e60ffffff
cwde: 98
call 0x7ffb72b6006b: e8e9301b00

bytecode len: 366 -   440fbf543481f6d866d1e848c1e7d54e8d84061fb533094180ca9149c1c80648984933e84899660fbaff1d40c0e7224c89841e68ffffffc0443493424c8d04bd20889176498b8cb3ecfdffffc0c26166c1acb4fafdffff6e867434914d8d5c338c58418bc04833cd488d8cb1c31860e466099414033cffff480fc949c1c8c3f7d8fe843478ffffff48c1c1074881f12f589baf48ffc148f794b4eefdffff4833e9c18474f0feffffe548898c1e60ffffff98e8e9301b00

block IDs [duplicates]: [29]
['push r8', 'lea rbx, [rsi + rbx - 0xa0]', 'xchg qword ptr [rsp + 8], rdi', 'adc rdi, 0x10edc7', 'jmp rdi']

bytes: push r8: 4150
lea rbx, [rsi + rbx - 0xa0]: 488d9c1e60ffffff
xchg qword ptr [rsp + 8], rdi: 48877c2408
adc rdi, 0x10edc7: 4881d7c7ed1000
jmp rdi: ffe7

bytecode len: 48 -   4150488d9c1e60ffffff48877c24084881d7c7ed1000ffe7

block IDs [duplicates]: [68, 68]
['pop r8', 'pop rdx', 'pop rdx', 'pop rax', 'pop rdi', 'mov r8d, esi', 'and cl, dl', 'push rdi', 'push r10', 'btc si, cx', 'dec word ptr [rsp + rdx]', 'xadd r10d, edx', 'inc r10', 'lea eax, [r10 + rax + 0x2940cfcc]', 'push r8', 'sub word ptr [rsp + rsi*4 + 0xe], r8w', 'not eax', 'lea rcx, [rsi + rcx*8 - 0x50c2f3e3]', 'call 0x7ffb72bdd935']

bytes: pop r8: 4158
pop rdx: 5a
pop rdx: 5a
pop rax: 58
pop rdi: 5f
mov r8d, esi: 448bc6
and cl, dl: 22ca
push rdi: 57
push r10: 4152
btc si, cx: 660fbbce
dec word ptr [rsp + rdx]: 66ff0c14
xadd r10d, edx: 410fc1d2
inc r10: 49ffc2
lea eax, [r10 + rax + 0x2940cfcc]: 418d8402cccf4029
push r8: 4150
sub word ptr [rsp + rsi*4 + 0xe], r8w: 66442944b40e
not eax: f7d0
lea rcx, [rsi + rcx*8 - 0x50c2f3e3]: 488d8cce1d0c3daf
call 0x7ffb72bdd935: e86cc20400

bytecode len: 120 -   41585a5a585f448bc622ca574152660fbbce66ff0c14410fc1d249ffc2418d8402cccf4029415066442944b40ef7d0488d8cce1d0c3dafe86cc20400

block IDs [duplicates]: [31]
['xor r10d, ebp', 'ror di, 0xc1', 'rol edi, 0x9e', 'neg r10d', 'neg rdi', 'cdqe', 'call 0x7ffb72a8b1a9']

bytes: xor r10d, ebp: 4433d5
ror di, 0xc1: 66c1cfc1
rol edi, 0x9e: c1c79e
neg r10d: 41f7da
neg rdi: 48f7df
cdqe: 4898
call 0x7ffb72a8b1a9: e8d91cf3ff

bytecode len: 46 -   4433d566c1cfc1c1c79e41f7da48f7df4898e8d91cf3ff

block IDs [duplicates]: [32]
['ror r10d, 2', 'mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf', 'inc word ptr [rsp + r8 - 0x20602627]', 'lea r10d, [r10 + r8*4 + 0x6ebe4f90]', 'and si, word ptr [rsp + rdx + 2]', 'not r10d', 'pop r8', 'adc r8, -0xd5dd14d', 'push rbp', 'cwde', 'xor dword ptr [rsp + r8 + 0x4a4e941c], r10d', 'cqo', 'movsx ecx, r8b', 'pop rbp', 'and r8w, 0x2395', 'setne sil', 'movsxd r10, r10d', 'shr si, cl', 'cmovae esi, r8d', 'adc r9, r10', 'btr rdx, 0x28', 'mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]', 'mov r10d, ecx', 'dec al', 'mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]', 'push r10', 'adc rdi, rcx', 'lea rcx, [r10*4 - 0x774591ed]', 'mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi', 'neg byte ptr [rsp + rax - 0x2a9a]', 'setle r8b', 'mov qword ptr [rsp + rax*2 - 0x5542], r9', 'ret']

bytes: ror r10d, 2: 41c1ca02
mov qword ptr [rsp + r8*2 - 0x40c04c54], -0x3df0c2cf: 4ac78444acb33fbf313d0fc2
inc word ptr [rsp + r8 - 0x20602627]: 6642ff8404d9d99fdf
lea r10d, [r10 + r8*4 + 0x6ebe4f90]: 478d9482904fbe6e
and si, word ptr [rsp + rdx + 2]: 6623741402
not r10d: 41f7d2
pop r8: 4158
adc r8, -0xd5dd14d: 4981d0b32ea2f2
push rbp: 55
cwde: 98
xor dword ptr [rsp + r8 + 0x4a4e941c], r10d: 463194041c944e4a
cqo: 4899
movsx ecx, r8b: 410fbec8
pop rbp: 5d
and r8w, 0x2395: 664181e09523
setne sil: 400f95c6
movsxd r10, r10d: 4d63d2
shr si, cl: 66d3ee
cmovae esi, r8d: 410f43f0
adc r9, r10: 4d13ca
btr rdx, 0x28: 480fbaf228
mov rdi, qword ptr [r8 + rbx + 0x4a4edc74]: 498bbc1874dc4e4a
mov r10d, ecx: 448bd1
dec al: fec8
mov rcx, qword ptr [r8 + rbx + 0x4a4edc7c]: 498b8c187cdc4e4a
push r10: 4152
adc rdi, rcx: 4813f9
lea rcx, [r10*4 - 0x774591ed]: 4a8d0c95136eba88
mov qword ptr [r8 + rbx + 0x4a4edc7c], rdi: 4989bc187cdc4e4a
neg byte ptr [rsp + rax - 0x2a9a]: f69c0466d5ffff
setle r8b: 410f9ec0
mov qword ptr [rsp + rax*2 - 0x5542], r9: 4c898c44beaaffff
ret: c3

bytecode len: 314 -   41c1ca024ac78444acb33fbf313d0fc26642ff8404d9d99fdf478d9482904fbe6e662374140241f7d241584981d0b32ea2f25598463194041c944e4a4899410fbec85d664181e09523400f95c64d63d266d3ee410f43f04d13ca480fbaf228498bbc1874dc4e4a448bd1fec8498b8c187cdc4e4a41524813f94a8d0c95136eba884989bc187cdc4e4af69c0466d5ffff410f9ec04c898c44beaaffffc3

block IDs [duplicates]: [33]
['mov r8d, dword ptr [r11]', 'xor edi, edi', 'lea r11, [rdi + r11 + 4]', 'mov esi, 0x529e369e', 'movsx ecx, di', 'xor r8d, ebp', 'add ecx, esi', 'sbb r8d, 0xd9bf8d9b', 'call 0x7ffb72c0da85']

bytes: mov r8d, dword ptr [r11]: 458b03
xor edi, edi: 33ff
lea r11, [rdi + r11 + 4]: 4e8d5c1f04
mov esi, 0x529e369e: be9e369e52
movsx ecx, di: 0fbfcf
xor r8d, ebp: 4433c5
add ecx, esi: 03ce
sbb r8d, 0xd9bf8d9b: 4181d89b8dbfd9
call 0x7ffb72c0da85: e80ae22700

bytecode len: 70 -   458b0333ff4e8d5c1f04be9e369e520fbfcf4433c503ce4181d89b8dbfd9e80ae22700

block IDs [duplicates]: [34]
['mov edx, 0xb4a57380', 'mov r10, qword ptr [rbx]', 'movsx edi, dx', 'sal edi, 0x6f', 'xor dl, dil', 'movzx eax, byte ptr [r11 + rdi*2 - 0x73800000]', 'not dx', 'xor al, bpl', 'movzx r8d, dx', 'btc si, 0x39', 'xor dword ptr [rsp + rax*2 - 0xf520], ecx', 'inc di', 'mov rbp, qword ptr [rsp + rax*4 - 0x1ea48]', 'ror r8b, 0xe1', 'movsxd rcx, ecx', 'add r9, rcx', 'mov rcx, qword ptr [rax + r11 - 0xf523]', 'lea r11, [r11 + rax - 0xf51b]', 'xor rcx, rbp', 'shl rsi, 0x4b', 'ror dil, 0x46', 'not rcx', 'jae 0x7ffb72f12ace']

bytes: mov edx, 0xb4a57380: ba8073a5b4
mov r10, qword ptr [rbx]: 4c8b1423
movsx edi, dx: 0fbffa
sal edi, 0x6f: c1f76f
xor dl, dil: 4032d7
movzx eax, byte ptr [r11 + rdi*2 - 0x73800000]: 410fb6847b0000808c
not dx: 66f7d2
xor al, bpl: 4032c5
movzx r8d, dx: 440fb7c2
btc si, 0x39: 660fbafe39
xor dword ptr [rsp + rax*2 - 0xf520], ecx: 318c44e00affff
inc di: 66ffc7
mov rbp, qword ptr [rsp + rax*4 - 0x1ea48]: 488bac84b815feff
ror r8b, 0xe1: 41c0c8e1
movsxd rcx, ecx: 4863c9
add r9, rcx: 4c03c9
mov rcx, qword ptr [rax + r11 - 0xf523]: 4a8b8c18dd0affff
lea r11, [r11 + rax - 0xf51b]: 4d8d9c03e50affff
xor rcx, rbp: 4833cd
shl rsi, 0x4b: 48c1e64b
ror dil, 0x46: 40c0cf46
not rcx: 48f7d1
jae 0x7ffb72f12ace: 0f8345c93900

bytecode len: 212 -   ba8073a5b44c8b14230fbffac1f76f4032d7410fb6847b0000808c66f7d24032c5440fb7c2660fbafe39318c44e00affff66ffc7488bac84b815feff41c0c8e14863c94c03c94a8b8c18dd0affff4d8d9c03e50affff4833cd48c1e64b40c0cf4648f7d10f8345c93900

block IDs [duplicates]: [35]
['lea rcx, [rax + rcx - 0x42a3fed1]', 'cwd', 'push rdi', 'xor al, r8b', 'xor rbp, rcx', 'shr r10d, 0x81', 'mov qword ptr [rax + rbx - 0xf583], rcx', 'mov qword ptr [rsp + rax - 0xf583], r9', 'ret 0x18']

bytes: lea rcx, [rax + rcx - 0x42a3fed1]: 488d8c082f015cbd
cwd: 6699
push rdi: 57
xor al, r8b: 4132c0
xor rbp, rcx: 4833e9
shr r10d, 0x81: 41c1ea81
mov qword ptr [rax + rbx - 0xf583], rcx: 48898c187d0affff
mov qword ptr [rsp + rax - 0xf583], r9: 4c898c047d0affff
ret 0x18: c21800

bytecode len: 80 -   488d8c082f015cbd6699574132c04833e941c1ea8148898c187d0affff4c898c047d0affffc21800

block IDs [duplicates]: [36]
['lea rcx, [r10 + rcx + 0x17d0c5d9]', 'rol rcx, 1', 'lea rcx, [rcx + r10 + 0x7f47f23b]', 'xor rcx, 0xffffffffe31c4620', 'xor rbp, rcx', 'shr sil, 0x63', 'mov qword ptr [rdi + rbx - 0xa801eb5], rcx', 'neg al', 'shr ax, 0x43', 'movzx edx, byte ptr [r11 + rdi - 0xa801ea5]', 'xor dl, bpl', 'call 0x7ffb72c71f52']

bytes: lea rcx, [r10 + rcx + 0x17d0c5d9]: 498d8c0ad9c5d017
rol rcx, 1: 48d1c1
lea rcx, [rcx + r10 + 0x7f47f23b]: 4a8d8c113bf2477f
xor rcx, 0xffffffffe31c4620: 4881f120461ce3
xor rbp, rcx: 4833e9
shr sil, 0x63: 40c0ee63
mov qword ptr [rdi + rbx - 0xa801eb5], rcx: 48898c1f4be17ff5
neg al: f6d8
shr ax, 0x43: 66c1e843
movzx edx, byte ptr [r11 + rdi - 0xa801ea5]: 410fb6943b5be17ff5
xor dl, bpl: 4032d5
call 0x7ffb72c71f52: e85d3c1000

bytecode len: 128 -   498d8c0ad9c5d01748d1c14a8d8c113bf2477f4881f120461ce34833e940c0ee6348898c1f4be17ff5f6d866c1e843410fb6943b5be17ff54032d5e85d3c1000

block IDs [duplicates]: [37]
['neg dl', 'mov qword ptr [rsp + rdi - 0xa801ea5], r8', 'add r10d, eax', 'xor dl, 0x2e', 'mov qword ptr [rsp + rdi*2 - 0x15003d5a], 0x2cbd7b21', 'cdqe', 'xor bpl, dl', 'lea rdx, [rsp + rdx + 0x18]', 'sal rsi, 0x2c', 'xor byte ptr [rsp + rdi*2 - 0x15003d4d], 0x95', 'sar esi, 0x3c', 'mov r10, qword ptr [rdi + rdx - 0xa801ead]', 'add rsi, rax', 'push rax', 'mov qword ptr [rdi + rbx - 0xa801ebd], r10', 'xchg qword ptr [rsp + rdi*8 - 0x5400f558], rsi', 'mov r8d, dword ptr [r11 + rdi*4 - 0x2a007aab]', 'xchg word ptr [rsp + rdi*4 - 0x2a007aa3], ax', 'lea r11, [r11 + rdi*2 - 0x15003d4d]', 'neg rax', 'cqo', 'xor r8d, ebp', 'shl byte ptr [rsp + rdi - 0xa801e97], 0xa2', 'and edi, 0xb49881a3', 'movsx r10d, word ptr [rsp + rdi - 0x80008f]', 'neg r8d', 'push rdi', 'ror r8d, 2', 'neg r10b', 'call 0x7ffb72e8304d']

bytes: neg dl: f6da
mov qword ptr [rsp + rdi - 0xa801ea5], r8: 4c89843c5be17ff5
add r10d, eax: 4403d0
xor dl, 0x2e: 80f22e
mov qword ptr [rsp + rdi*2 - 0x15003d5a], 0x2cbd7b21: 48c7847ca6c2ffea217bbd2c
cdqe: 4898
xor bpl, dl: 4032ea
lea rdx, [rsp + rdx + 0x18]: 488d541418
sal rsi, 0x2c: 48c1f62c
xor byte ptr [rsp + rdi*2 - 0x15003d4d], 0x95: 80b47cb3c2ffea95
sar esi, 0x3c: c1fe3c
mov r10, qword ptr [rdi + rdx - 0xa801ead]: 4c8b941753e17ff5
add rsi, rax: 4803f0
push rax: 50
mov qword ptr [rdi + rbx - 0xa801ebd], r10: 4c89941f43e17ff5
xchg qword ptr [rsp + rdi*8 - 0x5400f558], rsi: 4887b4fca80affab
mov r8d, dword ptr [r11 + rdi*4 - 0x2a007aab]: 458b84bb5585ffd5
xchg word ptr [rsp + rdi*4 - 0x2a007aa3], ax: 668784bc5d85ffd5
lea r11, [r11 + rdi*2 - 0x15003d4d]: 4d8d9c7bb3c2ffea
neg rax: 48f7d8
cqo: 4899
xor r8d, ebp: 4433c5
shl byte ptr [rsp + rdi - 0xa801e97], 0xa2: c0a43c69e17ff5a2
and edi, 0xb49881a3: 81e7a38198b4
movsx r10d, word ptr [rsp + rdi - 0x80008f]: 440fbf943c71ff7fff
neg r8d: 41f7d8
push rdi: 57
ror r8d, 2: 41c1c802
neg r10b: 41f6da
call 0x7ffb72e8304d: e878914800

bytecode len: 304 -   f6da4c89843c5be17ff54403d080f22e48c7847ca6c2ffea217bbd2c48984032ea488d54141848c1f62c80b47cb3c2ffea95c1fe3c4c8b941753e17ff54803f0504c89941f43e17ff54887b4fca80affab458b84bb5585ffd5668784bc5d85ffd54d8d9c7bb3c2ffea48f7d848994433c5c0a43c69e17ff5a281e7a38198b4440fbf943c71ff7fff41f7d85741c1c80241f6dae878914800

block IDs [duplicates]: [38]
['mov rdx, qword ptr [rbx + rcx - 0x3fb092b0]', 'lea r10, [rcx + 0x83fa737]', 'not r8', 'mov qword ptr [rsp + rcx*2 - 0x7f612570], -0x275467dd', 'xor qword ptr [rsp + rcx*2 - 0x7f612570], r10', 'sal byte ptr [rsp + rcx*2 - 0x7f612570], 0xe6', 'not rdx', 'and r8, rdx', 'movsx edi, cl', 'mov eax, edi', 'movsx esi, dil', 'mov r10, r8', 'and rsi, 0xffffffffee97de0b', 'jg 0x7ffb7290e32e']

bytes: mov rdx, qword ptr [rbx + rcx - 0x3fb092b0]: 488b940b506d4fc0
lea r10, [rcx + 0x83fa737]: 4c8d9137a73f08
not r8: 49f7d0
mov qword ptr [rsp + rcx*2 - 0x7f612570], -0x275467dd: 48c7844c90da9e802398abd8
xor qword ptr [rsp + rcx*2 - 0x7f612570], r10: 4c31944c90da9e80
sal byte ptr [rsp + rcx*2 - 0x7f612570], 0xe6: c0b44c90da9e80e6
not rdx: 48f7d2
and r8, rdx: 4c23c2
movsx edi, cl: 0fbef9
mov eax, edi: 8bc7
movsx esi, dil: 400fbef7
mov r10, r8: 4d8bd0
and rsi, 0xffffffffee97de0b: 4881e60bde97ee
jg 0x7ffb7290e32e: 0f8f327ed6ff

bytecode len: 154 -   488b940b506d4fc04c8d9137a73f0849f7d048c7844c90da9e802398abd84c31944c90da9e80c0b44c90da9e80e648f7d24c23c20fbef98bc7400fbef74d8bd04881e60bde97ee0f8f327ed6ff

block IDs [duplicates]: [39]
['jne 0x7ffb72b6fee5']

bytes: jne 0x7ffb72b6fee5: 0f85b11b2600

bytecode len: 12 -   0f85b11b2600

block IDs [duplicates]: [470, 470]
['mov rax, qword ptr [rbx + rcx*2 - 0x7f612560]', 'inc byte ptr [rsp + rcx*2 - 0x7f61256e]', 'lea rcx, [rsi + rdi + 0x3f1fd820]', 'shr cl, 0x83', 'adc r10, rax', 'push rcx', 'lea r8, [rdi - 0x27ec5874]', 'mov qword ptr [rbx + 0x10], r10', 'pop rdi', 'rol rsi, 0x2e', 'cqo', 'lea rbx, [rbx + rax*2 + 0x1b6c07b0]', 'jae 0x7ffb72bd0b16']

bytes: mov rax, qword ptr [rbx + rcx*2 - 0x7f612560]: 488b844ba0da9e80
inc byte ptr [rsp + rcx*2 - 0x7f61256e]: fe844c92da9e80
lea rcx, [rsi + rdi + 0x3f1fd820]: 488d8c3e20d81f3f
shr cl, 0x83: c0e983
adc r10, rax: 4c13d0
push rcx: 51
lea r8, [rdi - 0x27ec5874]: 4c8d878ca713d8
mov qword ptr [rbx + 0x10], r10: 4c89542310
pop rdi: 5f
rol rsi, 0x2e: 48c1c62e
cqo: 4899
lea rbx, [rbx + rax*2 + 0x1b6c07b0]: 488d9c43b0076c1b
jae 0x7ffb72bd0b16: 0f8346ea0500

bytecode len: 126 -   488b844ba0da9e80fe844c92da9e80488d8c3e20d81f3fc0e9834c13d0514c8d878ca713d84c895423105f48c1c62e4899488d9c43b0076c1b0f8346ea0500

block IDs [duplicates]: [41]
['lea r11, [rdi + r11 - 0x37aafffc]', 'mov qword ptr [rsp + rdi - 0x37ab0000], rdi', 'pop rcx', 'movzx r10d, r8w', 'xor edx, ebp', 'neg edx', 'ror r10w, 0xa9', 'lea rax, [r10*2 - 0x4ddc93fe]', 'lea edx, [rdx + rdi*2 - 0x132c924e]', 'and rax, rcx', 'cmove di, r8w', 'btc ecx, 1', 'bswap edx', 'push rax', 'xor cl, 0x85', 'ror edx, 2', 'sbb r8, -0x685c3b75', 'sete r8b', 'lea edx, [rdx + rdi*2 + 0x75445a89]', 'sar r10d, 4', 'sal di, 6', 'mov qword ptr [rsp + rdi - 0x37ab0000], r10', 'mov qword ptr [rsp + rdi*2 - 0x6f560000], rbp', 'bts edi, eax', 'xor dword ptr [rsp + rdi - 0x37ab0001], edx', 'pop rbp', 'sub r8b, cl', 'add cx, r10w', 'movsxd rdx, edx', 'adc r9, rdx', 'lea rsi, [rdi*2 - 0x2f41f757]', 'mov r10, qword ptr [rbx + rdi*2 - 0x6f560002]', 'lea rdx, [r8 + rsi*4 - 0x7de0cded]', 'sal rdx, 0x4c', 'jns 0x7ffb72a1af1a']

bytes: lea r11, [rdi + r11 - 0x37aafffc]: 4e8d9c1f040055c8
mov qword ptr [rsp + rdi - 0x37ab0000], rdi: 4889bc3c000055c8
pop rcx: 59
movzx r10d, r8w: 450fb7d0
xor edx, ebp: 33d5
neg edx: f7da
ror r10w, 0xa9: 6641c1caa9
lea rax, [r10*2 - 0x4ddc93fe]: 4a8d0455026c23b2
lea edx, [rdx + rdi*2 - 0x132c924e]: 8d947ab26dd3ec
and rax, rcx: 4823c1
cmove di, r8w: 66410f44f8
btc ecx, 1: 0fbaf901
bswap edx: 0fca
push rax: 50
xor cl, 0x85: 80f185
ror edx, 2: c1ca02
sbb r8, -0x685c3b75: 4981d88bc4a397
sete r8b: 410f94c0
lea edx, [rdx + rdi*2 + 0x75445a89]: 8d947a895a4475
sar r10d, 4: 41c1fa04
sal di, 6: 66c1f706
mov qword ptr [rsp + rdi - 0x37ab0000], r10: 4c89943c000055c8
mov qword ptr [rsp + rdi*2 - 0x6f560000], rbp: 4889ac7c0000aa90
bts edi, eax: 0fabc7
xor dword ptr [rsp + rdi - 0x37ab0001], edx: 31943cffff54c8
pop rbp: 5d
sub r8b, cl: 442ac1
add cx, r10w: 664103ca
movsxd rdx, edx: 4863d2
adc r9, rdx: 4c13ca
lea rsi, [rdi*2 - 0x2f41f757]: 488d347da908bed0
mov r10, qword ptr [rbx + rdi*2 - 0x6f560002]: 4c8b947bfeffa990
lea rdx, [r8 + rsi*4 - 0x7de0cded]: 498d94b013321f82
sal rdx, 0x4c: 48c1f24c
jns 0x7ffb72a1af1a: 0f89cf27fcff

bytecode len: 332 -   4e8d9c1f040055c84889bc3c000055c859450fb7d033d5f7da6641c1caa94a8d0455026c23b28d947ab26dd3ec4823c166410f44f80fbaf9010fca5080f185c1ca024981d88bc4a397410f94c08d947a895a447541c1fa0466c1f7064c89943c000055c84889ac7c0000aa900fabc731943cffff54c85d442ac1664103ca4863d24c13ca488d347da908bed04c8b947bfeffa990498d94b013321f8248c1f24c0f89cf27fcff

block IDs [duplicates]: [42]
['mov r8, qword ptr [rbx + rdi - 0x37aafff9]', 'rol rcx, 0x48', 'not r10', 'call 0x7ffb728ac7a8']

bytes: mov r8, qword ptr [rbx + rdi - 0x37aafff9]: 4c8b843b070055c8
rol rcx, 0x48: 48c1c148
not r10: 49f7d2
call 0x7ffb728ac7a8: e87a18e9ff

bytecode len: 40 -   4c8b843b070055c848c1c14849f7d2e87a18e9ff

block IDs [duplicates]: [43]
['call 0x7ffb72924658']

bytes: call 0x7ffb72924658: e8ab7e0700

bytecode len: 10 -   e8ab7e0700

block IDs [duplicates]: [69, 69]
['not r8', 'or r10, r8', 'mov rbx, r10', 'mov qword ptr [rsp + rdi*2 - 0x6f55fffa], rax', 'mov qword ptr [rsp + rax*2 - 0x64400000], rcx', 'pop rcx', 'pop rdi', 'jne 0x7ffb72c4500c']

bytes: not r8: 49f7d0
or r10, r8: 4d0bd0
mov rbx, r10: 498bda
mov qword ptr [rsp + rdi*2 - 0x6f55fffa], rax: 4889847c0600aa90
mov qword ptr [rsp + rax*2 - 0x64400000], rcx: 48898c440000c09b
pop rcx: 59
pop rdi: 5f
jne 0x7ffb72c4500c: 0f85167a1500

bytecode len: 66 -   49f7d04d0bd0498bda4889847c0600aa9048898c440000c09b595f0f85167a1500

block IDs [duplicates]: [46]
['mov r8d, 0x818098a8', 'ror al, 1', 'movsx esi, r8w', 'add al, 4', 'not al', 'shr r8d, 0x22', 'sbb al, 0x9b', 'neg al', 'xor bpl, al', 'shl word ptr [rsp + r8 - 0x20602626], 0xeb', 'pop rdi', 'adc rax, rsp', 'mov rcx, qword ptr [r8 + rax - 0x2060262a]', 'movzx eax, si', 'mov qword ptr [rdi + rbx - 0x3695281e], rcx', 'mov r10d, dword ptr [r8 + r11 - 0x20602629]', 'xor rax, 0x4d9cb20a', 'lea r11, [r11 + rdi*2 - 0x6d2a5027]', 'bt r8, rax', 'cdq', 'jb 0x7ffb72e38308']

bytes: mov r8d, 0x818098a8: 41b8a8988081
ror al, 1: d0c8
movsx esi, r8w: 410fbff0
add al, 4: 0404
not al: f6d0
shr r8d, 0x22: 41c1e822
sbb al, 0x9b: 1c9b
neg al: f6d8
xor bpl, al: 4032e8
shl word ptr [rsp + r8 - 0x20602626], 0xeb: 6642c1a404dad99fdfeb
pop rdi: 5f
adc rax, rsp: 4813c4
mov rcx, qword ptr [r8 + rax - 0x2060262a]: 498b8c00d6d99fdf
movzx eax, si: 0fb7c6
mov qword ptr [rdi + rbx - 0x3695281e], rcx: 48898c1fe2d76ac9
mov r10d, dword ptr [r8 + r11 - 0x20602629]: 478b9418d7d99fdf
xor rax, 0x4d9cb20a: 4881f00ab29c4d
lea r11, [r11 + rdi*2 - 0x6d2a5027]: 4d8d9c7bd9afd592
bt r8, rax: 490fa3c0
cdq: 99
jb 0x7ffb72e38308: 0f824fee2d00

bytecode len: 188 -   41b8a8988081d0c8410fbff00404f6d041c1e8221c9bf6d84032e86642c1a404dad99fdfeb5f4813c4498b8c00d6d99fdf0fb7c648898c1fe2d76ac9478b9418d7d99fdf4881f00ab29c4d4d8d9c7bd9afd592490fa3c0990f824fee2d00

block IDs [duplicates]: [47]
['bts r10d, r8d', 'xor dl, bpl', 'movsx eax, sil', 'inc dl', 'ror dl, 1', 'shl si, 0x25', 'neg dl', 'call 0x7ffb72c7caa0']

bytes: bts r10d, r8d: 450fabc2
xor dl, bpl: 4032d5
movsx eax, sil: 400fbec6
inc dl: fec2
ror dl, 1: d0ca
shl si, 0x25: 66c1e625
neg dl: f6da
call 0x7ffb72c7caa0: e8446a1e00

bytecode len: 52 -   450fabc24032d5400fbec6fec2d0ca66c1e625f6dae8446a1e00

block IDs [duplicates]: [48]
['push rdx', 'inc r8w', 'sub cl, 0xa4', 'not r8w', 'movzx r10d, byte ptr [rsp]', 'sar edi, cl', 'xor bp, r8w', 'lea r8, [rsp + r8 + 8]', 'sar r10, cl', 'mov qword ptr [rdi + r8], rax', 'add edi, 0x1908091f', 'seta byte ptr [rsp + rdi - 0x1908091f]', 'mov edx, dword ptr [r11 + rdi - 0x1908091d]', 'xor edx, ebp', 'xor edx, 0xe12e3f2d', 'movsx eax, byte ptr [rsp + rdi - 0x1908091f]', 'ror byte ptr [rsp + rdi*4 - 0x64202477], 0xe1', 'cmovae rcx, rax', 'rol edx, cl', 'and qword ptr [rsp + rdi*2 - 0x3210123e], 0xffffffffe10855ae', 'sal word ptr [rsp + rdi*2 - 0x3210123e], 0xc7', 'call 0x7ffb72dc8bfb']

bytes: push rdx: 52
inc r8w: 6641ffc0
sub cl, 0xa4: 80e9a4
not r8w: 6641f7d0
movzx r10d, byte ptr [rsp]: 440fb6542400
sar edi, cl: d3ff
xor bp, r8w: 664133e8
lea r8, [rsp + r8 + 8]: 4e8d440408
sar r10, cl: 49d3fa
mov qword ptr [rdi + r8], rax: 4a890407
add edi, 0x1908091f: 81c71f090819
seta byte ptr [rsp + rdi - 0x1908091f]: 0f97843ce1f6f7e6
mov edx, dword ptr [r11 + rdi - 0x1908091d]: 418b943be3f6f7e6
xor edx, ebp: 33d5
xor edx, 0xe12e3f2d: 81f22d3f2ee1
movsx eax, byte ptr [rsp + rdi - 0x1908091f]: 0fbe843ce1f6f7e6
ror byte ptr [rsp + rdi*4 - 0x64202477], 0xe1: c08cbc89dbdf9be1
cmovae rcx, rax: 480f43c8
rol edx, cl: d3c2
and qword ptr [rsp + rdi*2 - 0x3210123e], 0xffffffffe10855ae: 4881a47cc2edefcdae5508e1
sal word ptr [rsp + rdi*2 - 0x3210123e], 0xc7: 66c1b47cc2edefcdc7
call 0x7ffb72dc8bfb: e8f8203600

bytecode len: 228 -   526641ffc080e9a46641f7d0440fb6542400d3ff664133e84e8d44040849d3fa4a89040781c71f0908190f97843ce1f6f7e6418b943be3f6f7e633d581f22d3f2ee10fbe843ce1f6f7e6c08cbc89dbdf9be1480f43c8d3c24881a47cc2edefcdae5508e166c1b47cc2edefcdc7e8f8203600

block IDs [duplicates]: [49]
['sub dil, 0x9c', 'add rcx, rsp', 'movzx eax, sil', 'xor si, r10w', 'mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]', 'mov qword ptr [rbx + rax - 8], rdx', 'movzx ecx, al', 'mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]', 'xor r10d, ebp', 'lea rdx, [rsi + rcx - 0x57ce3fed]', 'mov r8d, ecx', 'dec r10d', 'ror r10d, 1', 'dec r10d', 'bswap rdx', 'shl ax, 0xa7', 'neg di', 'bswap r10d', 'push rdi', 'ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6', 'push r8', 'mov qword ptr [rsp + rsi - 0x33e70104], rbp', 'mov word ptr [rsp + rsi - 0x33e70106], 0x9b98', 'xor dword ptr [rsp + rsi - 0x33e70104], r10d', 'sar r8d, 0x79', 'sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26', 'rol r8, 0x6e', 'mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]', 'movsxd r10, r10d', 'mov qword ptr [rsp + rdi - 0x9215], rsi', 'adc r9, r10', 'movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]', 'xadd dil, sil', 'sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w', 'adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax', 'lea r11, [rsi + r11 - 0x33e70117]', 'adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh', 'xor r10b, bpl', 'rol r10b, 1', 'dec eax', 'lea rcx, [rax - 0x7050ecf0]', 'add r10b, al', 'not byte ptr [rsp + rsi - 0x33e70118]', 'or qword ptr [rsp + rdi*2 - 0x1244a], rsi', 'xor r10b, 0x91', 'add r10b, cl', 'shr dx, 0x4c', 'dec cl', 'and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f', 'rol r10b, 1', 'sub r8d, dword ptr [rsp + rsi - 0x33e70116]', 'sal edi, cl', 'adc r10b, 0x84', 'call 0x7ffb72c546ab']

bytes: sub dil, 0x9c: 4080ef9c
add rcx, rsp: 4803cc
movzx eax, sil: 400fb6c6
xor si, r10w: 664133f2
mov rdx, qword ptr [rdx + rcx - 0x33e76d7f]: 488b940a819218cc
mov qword ptr [rbx + rax - 8], rdx: 48895403f8
movzx ecx, al: 0fb6c8
mov r10d, dword ptr [r11 + rsi*2 - 0x67ce0217]: 458b9473e9fd3198
xor r10d, ebp: 4433d5
lea rdx, [rsi + rcx - 0x57ce3fed]: 488d940e13c031a8
mov r8d, ecx: 448bc1
dec r10d: 41ffca
ror r10d, 1: 41d1ca
dec r10d: 41ffca
bswap rdx: 480fca
shl ax, 0xa7: 66c1e0a7
neg di: 66f7df
bswap r10d: 410fca
push rdi: 57
ror dword ptr [rsp + rsi - 0x33e7010b], 0xd6: c18c34f5fe18ccd6
push r8: 4150
mov qword ptr [rsp + rsi - 0x33e70104], rbp: 4889ac34fcfe18cc
mov word ptr [rsp + rsi - 0x33e70106], 0x9b98: 66c78434fafe18cc989b
xor dword ptr [rsp + rsi - 0x33e70104], r10d: 44319434fcfe18cc
sar r8d, 0x79: 41c1f879
sal dword ptr [rsp + rsi*2 - 0x67ce0215], 0x26: c1b474ebfd319826
rol r8, 0x6e: 49c1c06e
mov rbp, qword ptr [rsp + rdi*8 - 0x490e0]: 488bacfc206ffbff
movsxd r10, r10d: 4d63d2
mov qword ptr [rsp + rdi - 0x9215], rsi: 4889b43ceb6dffff
adc r9, r10: 4d13ca
movzx r10d, byte ptr [r11 + rsi*2 - 0x67ce0213]: 450fb69473edfd3198
xadd dil, sil: 400fc0f7
sbb word ptr [rsp + rsi*2 - 0x67ce0235], r8w: 6644198474cbfd3198
adc qword ptr [rsp + rsi*2 - 0x67ce0233], rax: 48118474cdfd3198
lea r11, [rsi + r11 - 0x33e70117]: 4e8d9c1ee9fe18cc
adc byte ptr [rsp + rsi*2 - 0x67ce0233], dh: 10b474cdfd3198
xor r10b, bpl: 4432d5
rol r10b, 1: 41d0c2
dec eax: ffc8
lea rcx, [rax - 0x7050ecf0]: 488d881013af8f
add r10b, al: 4402d0
not byte ptr [rsp + rsi - 0x33e70118]: f69434e8fe18cc
or qword ptr [rsp + rdi*2 - 0x1244a], rsi: 4809b47cb6dbfeff
xor r10b, 0x91: 4180f291
add r10b, cl: 4402d1
shr dx, 0x4c: 66c1ea4c
dec cl: fec9
and dword ptr [rsp + rdi*2 - 0x1244b], 0xdf01e79f: 81a47cb5dbfeff9fe701df
rol r10b, 1: 41d0c2
sub r8d, dword ptr [rsp + rsi - 0x33e70116]: 442b8434eafe18cc
sal edi, cl: d3f7
adc r10b, 0x84: 4180d284
call 0x7ffb72c546ab: e8a6351f00

bytecode len: 548 -   4080ef9c4803cc400fb6c6664133f2488b940a819218cc48895403f80fb6c8458b9473e9fd31984433d5488d940e13c031a8448bc141ffca41d1ca41ffca480fca66c1e0a766f7df410fca57c18c34f5fe18ccd641504889ac34fcfe18cc66c78434fafe18cc989b44319434fcfe18cc41c1f879c1b474ebfd31982649c1c06e488bacfc206ffbff4d63d24889b43ceb6dffff4d13ca450fb69473edfd3198400fc0f76644198474cbfd319848118474cdfd31984e8d9c1ee9fe18cc10b474cdfd31984432d541d0c2ffc8488d881013af8f4402d0f69434e8fe18cc4809b47cb6dbfeff4180f2914402d166c1ea4cfec981a47cb5dbfeff9fe701df41d0c2442b8434eafe18ccd3f74180d284e8a6351f00

block IDs [duplicates]: [50]
['mov eax, 0xb602e72e', 'lea rdi, [rax - 0x6173404d]', 'movzx ecx, di', 'movzx edi, byte ptr [r11 + rcx*4 - 0x29b84]', 'push rax', 'sar word ptr [rsp + rcx - 0xa6de], cl', 'xor dil, bpl', 'movsx esi, cl', 'inc dil', 'lea r8, [rsi*8 - 0x71ff74e7]', 'ror dil, cl', 'neg dil', 'cwd', 'or edx, dword ptr [rsp + rcx - 0xa6dd]', 'sbb dword ptr [rsp + rcx*8 - 0x53707], ecx', 'xor dil, al', 'neg dx', 'xor bpl, dil', 'sar word ptr [rsp + rdx*2 + 3], 0x26', 'pop rcx', 'adc rdi, rsp', 'xchg eax, edx', 'mov rdx, qword ptr [rdi + rax - 1]', 'push rsi', 'mov qword ptr [rax + rbx - 9], rdx', 'call 0x7ffb72b91b37']

bytes: mov eax, 0xb602e72e: b82ee702b6
lea rdi, [rax - 0x6173404d]: 488db8b3bf8c9e
movzx ecx, di: 0fb7cf
movzx edi, byte ptr [r11 + rcx*4 - 0x29b84]: 410fb6bc8b7c64fdff
push rax: 50
sar word ptr [rsp + rcx - 0xa6de], cl: 66d3bc0c2259ffff
xor dil, bpl: 4032fd
movsx esi, cl: 0fbef1
inc dil: 40fec7
lea r8, [rsi*8 - 0x71ff74e7]: 4c8d04f5198b008e
ror dil, cl: 40d2cf
neg dil: 40f6df
cwd: 6699
or edx, dword ptr [rsp + rcx - 0xa6dd]: 0b940c2359ffff
sbb dword ptr [rsp + rcx*8 - 0x53707], ecx: 198cccf9c8faff
xor dil, al: 4032f8
neg dx: 66f7da
xor bpl, dil: 4032ef
sar word ptr [rsp + rdx*2 + 3], 0x26: 66c17c540326
pop rcx: 59
adc rdi, rsp: 4813fc
xchg eax, edx: 92
mov rdx, qword ptr [rdi + rax - 1]: 488b5407ff
push rsi: 56
mov qword ptr [rax + rbx - 9], rdx: 48895418f7
call 0x7ffb72b91b37: e88e850200

bytecode len: 216 -   b82ee702b6488db8b3bf8c9e0fb7cf410fb6bc8b7c64fdff5066d3bc0c2259ffff4032fd0fbef140fec74c8d04f5198b008e40d2cf40f6df66990b940c2359ffff198cccf9c8faff4032f866f7da4032ef66c17c540326594813fc92488b5407ff5648895418f7e88e850200

block IDs [duplicates]: [51]
['mov r10d, dword ptr [r11 + rax*4 - 0xb]', 'xor r10d, ebp', 'mov qword ptr [rsp + rax*2 - 6], rcx', 'cwde', 'push r8', 'dec r10d', 'ror r10d, 1', 'dec r10d', 'push rax', 'ror qword ptr [rsp + rax + 6], 0xb0', 'cqo', 'bswap r10d', 'setae byte ptr [rsp + rax*2 + 0x10]', 'cmovb si, cx', 'mov qword ptr [rsp + rax + 0x15], rbp', 'btc r8w, dx', 'xor dword ptr [rsp + rax + 0x15], r10d', 'and ecx, 0x76179610', 'mov rbp, qword ptr [rsp + rdx + 0x18]', 'shl eax, cl', 'movsxd r10, r10d', 'adc r9, r10', 'shl al, 0x44', 'mov qword ptr [rsp + rax*2 - 0x5ffe8], rdx', 'movzx r10d, word ptr [r11 + rax*4 - 0xbfffb]', 'shr cx, 0xc', 'xchg byte ptr [rsp + rax - 0x2fffb], ah', 'shr dword ptr [rsp + rax*4 - 0xbfff1], 0x7c', 'lea r11, [r11 + rax - 0x2fff9]', 'rol word ptr [rsp + rax*4 - 0xbfffb], 0x6e', 'shl byte ptr [rsp + rax*2 - 0x5fffc], 1', 'xor r10w, bp', 'rol dl, 0x83', 'dec ax', 'sbb r10w, ax', 'pop rax', 'xchg qword ptr [rsp + rax*2 + 5], rsi', 'sar dl, 0x22', 'ror r10w, 1', 'neg word ptr [rsp + rsi - 0x1000052]', 'not r10w', 'neg r10w', 'xor bp, r10w', 'movzx edi, cl', 'lea r10, [rsp + r10 + 0x18]', 'or rdi, qword ptr [r10 + rax - 3]', 'mov qword ptr [rbx + rax - 0x13], rdi', 'sal dx, 0xc4', 'lea rbx, [rbx + rax - 0x13]', 'inc esi', 'or dl, 0xb0', 'pop rcx', 'pop rax', 'pop rcx', 'jl 0x7ffb72eb83a2']

bytes: mov r10d, dword ptr [r11 + rax*4 - 0xb]: 458b5483f5
xor r10d, ebp: 4433d5
mov qword ptr [rsp + rax*2 - 6], rcx: 48894c44fa
cwde: 98
push r8: 4150
dec r10d: 41ffca
ror r10d, 1: 41d1ca
dec r10d: 41ffca
push rax: 50
ror qword ptr [rsp + rax + 6], 0xb0: 48c14c0406b0
cqo: 4899
bswap r10d: 410fca
setae byte ptr [rsp + rax*2 + 0x10]: 0f93444410
cmovb si, cx: 660f42f1
mov qword ptr [rsp + rax + 0x15], rbp: 48896c0415
btc r8w, dx: 66410fbbd0
xor dword ptr [rsp + rax + 0x15], r10d: 4431540415
and ecx, 0x76179610: 81e110961776
mov rbp, qword ptr [rsp + rdx + 0x18]: 488b6c1418
shl eax, cl: d3e0
movsxd r10, r10d: 4d63d2
adc r9, r10: 4d13ca
shl al, 0x44: c0e044
mov qword ptr [rsp + rax*2 - 0x5ffe8], rdx: 488994441800faff
movzx r10d, word ptr [r11 + rax*4 - 0xbfffb]: 450fb794830500f4ff
shr cx, 0xc: 66c1e90c
xchg byte ptr [rsp + rax - 0x2fffb], ah: 86a4040500fdff
shr dword ptr [rsp + rax*4 - 0xbfff1], 0x7c: c1ac840f00f4ff7c
lea r11, [r11 + rax - 0x2fff9]: 4d8d9c030700fdff
rol word ptr [rsp + rax*4 - 0xbfffb], 0x6e: 66c184840500f4ff6e
shl byte ptr [rsp + rax*2 - 0x5fffc], 1: d0a4440400faff
xor r10w, bp: 664433d5
rol dl, 0x83: c0c283
dec ax: 66ffc8
sbb r10w, ax: 66441bd0
pop rax: 58
xchg qword ptr [rsp + rax*2 + 5], rsi: 4887744405
sar dl, 0x22: c0fa22
ror r10w, 1: 6641d1ca
neg word ptr [rsp + rsi - 0x1000052]: 66f79c34aefffffe
not r10w: 6641f7d2
neg r10w: 6641f7da
xor bp, r10w: 664133ea
movzx edi, cl: 0fb6f9
lea r10, [rsp + r10 + 0x18]: 4e8d541418
or rdi, qword ptr [r10 + rax - 3]: 490b7c02fd
mov qword ptr [rbx + rax - 0x13], rdi: 48897c03ed
sal dx, 0xc4: 66c1f2c4
lea rbx, [rbx + rax - 0x13]: 488d5c03ed
inc esi: ffc6
or dl, 0xb0: 80cab0
pop rcx: 59
pop rax: 58
pop rcx: 59
jl 0x7ffb72eb83a2: 0f8c84673200

bytecode len: 462 -   458b5483f54433d548894c44fa98415041ffca41d1ca41ffca5048c14c0406b04899410fca0f93444410660f42f148896c041566410fbbd0443154041581e110961776488b6c1418d3e04d63d24d13cac0e044488994441800faff450fb794830500f4ff66c1e90c86a4040500fdffc1ac840f00f4ff7c4d8d9c030700fdff66c184840500f4ff6ed0a4440400faff664433d5c0c28366ffc866441bd0584887744405c0fa226641d1ca66f79c34aefffffe6641f7d26641f7da664133ea0fb6f94e8d541418490b7c02fd48897c03ed66c1f2c4488d5c03edffc680cab05958590f8c84673200

block IDs [duplicates]: [52]
['mov r8d, 0x1b013f0f', 'lea rdi, [r8*4 - 0x257725d8]', 'mov ecx, edi', 'mov edi, dword ptr [r8 + r11 - 0x1b013f0f]', 'lea r10, [rcx*2 + 0x2d07b710]', 'push r10', 'xor edi, ebp', 'lea rax, [r10*8 - 0x1ad2a974]', 'bswap edi', 'push rax', 'dec byte ptr [rsp + r8 - 0x1b013f0e]', 'inc dword ptr [rsp + r8 - 0x1b013f0e]', 'dec edi', 'rol edi, 1', 'inc dword ptr [rsp + r8*2 - 0x36027e16]', 'dec qword ptr [rsp + r8 - 0x1b013f07]', 'xadd r8b, r10b', 'sbb edi, 0x7f8e038e', 'xchg byte ptr [rsp + r8 - 0x1b013fe4], cl', 'sub eax, dword ptr [rsp + r8 - 0x1b013fe2]', 'rol edi, 2', 'push rcx', 'mov qword ptr [rsp + r8*4 - 0x6c04ff8c], rbp', 'lea rsi, [rcx*2 + 0x52b9be90]', 'adc word ptr [rsp + r8 - 0x1b013fe3], r8w', 'xor dword ptr [rsp + r8*2 - 0x36027fbe], edi', 'rol sil, 1', 'xor bpl, sil', 'mov qword ptr [rsp + r8*4 + 0x28], 0x6f0b60a2', 'neg rdx', 'lea rsi, [rsp + rsi + 0x30]', 'lea rdi, [rdx*4 - 0x22f58f7e]', 'add r8, qword ptr [rsi + r8*2]', 'mov qword ptr [rbx + rdx*8 + 0x68], r8', 'mov cl, byte ptr [r11 + rdx*2 + 0x25]', 'lea r10, [r10 + rax + 0x222ddeaf]', 'xchg qword ptr [rsp + rdx + 0x2e], rdx', 'lea r11, [rax + r11 - 0x5d33a921]', 'cdqe', 'mov r8d, 0x56b9e511', 'xor cl, bpl', 'rol word ptr [rsp + rdi*2 + 0x45eb1f86], 0x6d', 'rol byte ptr [rsp + r8 - 0x56b9e4e3], 0xa5', 'inc cl', 'dec r10w', 'ror cl, 1', 'or r10w, 0x19ab', 'movsx esi, word ptr [rsp + rdi + 0x22f58fda]', 'neg cl', 'sal rax, 0xa', 'add rax, 0x1136f5b0', 'neg al', 'xor cl, 0x2e', 'sar dword ptr [rsp + rdi + 0x22f58fe5], 0xc', 'xchg word ptr [rsp + rdi + 0x22f58fda], si', 'xor bpl, cl', 'mov byte ptr [rsp + rdi + 0x22f58fd5], 0x16', 'xor r8, qword ptr [rsp + rdi + 0x22f58fdb]', 'lea rcx, [rsp + rcx + 0x30]', 'shr rsi, 0x6f', 'sub r10, qword ptr [rsp + rdi*2 + 0x45eb1f79]', 'mov rdx, qword ptr [rcx + rdi*2 + 0x45eb1f74]', 'setae byte ptr [rsp + rdi + 0x22f58fc0]', 'mov qword ptr [rbx + rdi*2 + 0x45eb1f5c], rdx', 'push rdi', 'jbe 0x7ffb729ec224']

bytes: mov r8d, 0x1b013f0f: 41b80f3f011b
lea rdi, [r8*4 - 0x257725d8]: 4a8d3c8528da88da
mov ecx, edi: 8bcf
mov edi, dword ptr [r8 + r11 - 0x1b013f0f]: 438bbc18f1c0fee4
lea r10, [rcx*2 + 0x2d07b710]: 4c8d144d10b7072d
push r10: 4152
xor edi, ebp: 33fd
lea rax, [r10*8 - 0x1ad2a974]: 4a8d04d58c562de5
bswap edi: 0fcf
push rax: 50
dec byte ptr [rsp + r8 - 0x1b013f0e]: 42fe8c04f2c0fee4
inc dword ptr [rsp + r8 - 0x1b013f0e]: 42ff8404f2c0fee4
dec edi: ffcf
rol edi, 1: d1c7
inc dword ptr [rsp + r8*2 - 0x36027e16]: 42ff8444ea81fdc9
dec qword ptr [rsp + r8 - 0x1b013f07]: 4aff8c04f9c0fee4
xadd r8b, r10b: 450fc0d0
sbb edi, 0x7f8e038e: 81df8e038e7f
xchg byte ptr [rsp + r8 - 0x1b013fe4], cl: 42868c041cc0fee4
sub eax, dword ptr [rsp + r8 - 0x1b013fe2]: 422b84041ec0fee4
rol edi, 2: c1c702
push rcx: 51
mov qword ptr [rsp + r8*4 - 0x6c04ff8c], rbp: 4a89ac847400fb93
lea rsi, [rcx*2 + 0x52b9be90]: 488d344d90beb952
adc word ptr [rsp + r8 - 0x1b013fe3], r8w: 66461184041dc0fee4
xor dword ptr [rsp + r8*2 - 0x36027fbe], edi: 4231bc444280fdc9
rol sil, 1: 40d0c6
xor bpl, sil: 4032ee
mov qword ptr [rsp + r8*4 + 0x28], 0x6f0b60a2: 4ac7448428a2600b6f
neg rdx: 48f7da
lea rsi, [rsp + rsi + 0x30]: 488d743430
lea rdi, [rdx*4 - 0x22f58f7e]: 488d3c9582700add
add r8, qword ptr [rsi + r8*2]: 4e030446
mov qword ptr [rbx + rdx*8 + 0x68], r8: 4c8944d368
mov cl, byte ptr [r11 + rdx*2 + 0x25]: 418a4c5325
lea r10, [r10 + rax + 0x222ddeaf]: 4d8d9402afde2d22
xchg qword ptr [rsp + rdx + 0x2e], rdx: 488754142e
lea r11, [rax + r11 - 0x5d33a921]: 4e8d9c18df56cca2
cdqe: 4898
mov r8d, 0x56b9e511: 41b811e5b956
xor cl, bpl: 4032cd
rol word ptr [rsp + rdi*2 + 0x45eb1f86], 0x6d: 66c1847c861feb456d
rol byte ptr [rsp + r8 - 0x56b9e4e3], 0xa5: 42c084041d1b46a9a5
inc cl: fec1
dec r10w: 6641ffca
ror cl, 1: d0c9
or r10w, 0x19ab: 664181caab19
movsx esi, word ptr [rsp + rdi + 0x22f58fda]: 0fbfb43cda8ff522
neg cl: f6d9
sal rax, 0xa: 48c1f00a
add rax, 0x1136f5b0: 4881c0b0f53611
neg al: f6d8
xor cl, 0x2e: 80f12e
sar dword ptr [rsp + rdi + 0x22f58fe5], 0xc: c1bc3ce58ff5220c
xchg word ptr [rsp + rdi + 0x22f58fda], si: 6687b43cda8ff522
xor bpl, cl: 4032e9
mov byte ptr [rsp + rdi + 0x22f58fd5], 0x16: c6843cd58ff52216
xor r8, qword ptr [rsp + rdi + 0x22f58fdb]: 4c33843cdb8ff522
lea rcx, [rsp + rcx + 0x30]: 488d4c0c30
shr rsi, 0x6f: 48c1ee6f
sub r10, qword ptr [rsp + rdi*2 + 0x45eb1f79]: 4c2b947c791feb45
mov rdx, qword ptr [rcx + rdi*2 + 0x45eb1f74]: 488b9479741feb45
setae byte ptr [rsp + rdi + 0x22f58fc0]: 0f93843cc08ff522
mov qword ptr [rbx + rdi*2 + 0x45eb1f5c], rdx: 4889947b5c1feb45
push rdi: 57
jbe 0x7ffb729ec224: 0f867713e9ff

bytecode len: 728 -   41b80f3f011b4a8d3c8528da88da8bcf438bbc18f1c0fee44c8d144d10b7072d415233fd4a8d04d58c562de50fcf5042fe8c04f2c0fee442ff8404f2c0fee4ffcfd1c742ff8444ea81fdc94aff8c04f9c0fee4450fc0d081df8e038e7f42868c041cc0fee4422b84041ec0fee4c1c702514a89ac847400fb93488d344d90beb95266461184041dc0fee44231bc444280fdc940d0c64032ee4ac7448428a2600b6f48f7da488d743430488d3c9582700add4e0304464c8944d368418a4c53254d8d9402afde2d22488754142e4e8d9c18df56cca2489841b811e5b9564032cd66c1847c861feb456d42c084041d1b46a9a5fec16641ffcad0c9664181caab190fbfb43cda8ff522f6d948c1f00a4881c0b0f53611f6d880f12ec1bc3ce58ff5220c6687b43cda8ff5224032e9c6843cd58ff522164c33843cdb8ff522488d4c0c3048c1ee6f4c2b947c791feb45488b9479741feb450f93843cc08ff5224889947b5c1feb45570f867713e9ff

block IDs [duplicates]: [53]
['lea rbx, [rdi + rbx + 0x22f58fa2]', 'sbb si, si', 'pop rax', 'pop rdx', 'pop r8', 'pop rax', 'pop r8', 'pop rax', 'pop rdi', 'jno 0x7ffb72eb83a2']

bytes: lea rbx, [rdi + rbx + 0x22f58fa2]: 488d9c1fa28ff522
sbb si, si: 661bf6
pop rax: 58
pop rdx: 5a
pop r8: 4158
pop rax: 58
pop r8: 4158
pop rax: 58
pop rdi: 5f
jno 0x7ffb72eb83a2: 0f8163c14c00

bytecode len: 52 -   488d9c1fa28ff522661bf6585a4158584158585f0f8163c14c00

block IDs [duplicates]: [54]
['mov rsi, qword ptr [rbx]', 'mov r11d, 0x2b8bf70f', 'movsx edx, r11b', 'lea rbx, [rbx + r11 - 0x2b8bf707]', 'mov r11, rsi', 'sub rbp, rdx', 'mov r10d, 0xda962391', 'lea r8, [r10 + r10*8 + 0x4803c381]', 'lea r9, [rip - 0x15]', 'mov r10d, dword ptr [r11]', 'movzx eax, r8b', 'mov ecx, eax', 'lea r11, [r11 + rax*4 - 0x264]', 'xadd eax, r8d', 'movzx edi, cx', 'xor r10d, ebp', 'push rcx', 'bswap eax', 'dec r10d', 'shr byte ptr [rsp + r8*2 - 0x132], 6', 'bswap r10d', 'shl al, 0xc1', 'shr rax, 0x16', 'mov edx, r8d', 'ror r10d, 3', 'xor al, dil', 'lea r10d, [r10 + r8*2 + 0x3228c97a]', 'xchg qword ptr [rsp + r8*2 - 0x134], rcx', 'lea rsi, [rcx + 0x7a6de21]', 'xor r10d, 0xd7940b1e', 'neg word ptr [rsp + r8*2 - 0x130]', 'mov qword ptr [rsp + r8*2 - 0x134], rbp', 'cmovg rcx, rsi', 'shl r8, 0xb', 'xor dword ptr [rsp + r8 - 0x4d000], r10d', 'pop rbp', 'push rax', 'inc r8d', 'movsxd r10, r10d', 'add r9, r10', 'mov qword ptr [rsp + r8 - 0x4d001], r9', 'ret']

bytes: mov rsi, qword ptr [rbx]: 488b33
mov r11d, 0x2b8bf70f: 41bb0ff78b2b
movsx edx, r11b: 410fbed3
lea rbx, [rbx + r11 - 0x2b8bf707]: 4a8d9c1bf90874d4
mov r11, rsi: 4c8bde
sub rbp, rdx: 482bea
mov r10d, 0xda962391: 41ba912396da
lea r8, [r10 + r10*8 + 0x4803c381]: 4f8d84d281c30348
lea r9, [rip - 0x15]: 4c8d0debffffff
mov r10d, dword ptr [r11]: 458b1423
movzx eax, r8b: 410fb6c0
mov ecx, eax: 8bc8
lea r11, [r11 + rax*4 - 0x264]: 4d8d9c839cfdffff
xadd eax, r8d: 440fc1c0
movzx edi, cx: 0fb7f9
xor r10d, ebp: 4433d5
push rcx: 51
bswap eax: 0fc8
dec r10d: 41ffca
shr byte ptr [rsp + r8*2 - 0x132], 6: 42c0ac44cefeffff06
bswap r10d: 410fca
shl al, 0xc1: c0e0c1
shr rax, 0x16: 48c1e816
mov edx, r8d: 418bd0
ror r10d, 3: 41c1ca03
xor al, dil: 4032c7
lea r10d, [r10 + r8*2 + 0x3228c97a]: 478d94427ac92832
xchg qword ptr [rsp + r8*2 - 0x134], rcx: 4a878c44ccfeffff
lea rsi, [rcx + 0x7a6de21]: 488db121dea607
xor r10d, 0xd7940b1e: 4181f21e0b94d7
neg word ptr [rsp + r8*2 - 0x130]: 6642f79c44d0feffff
mov qword ptr [rsp + r8*2 - 0x134], rbp: 4a89ac44ccfeffff
cmovg rcx, rsi: 480f4fce
shl r8, 0xb: 49c1e00b
xor dword ptr [rsp + r8 - 0x4d000], r10d: 463194040030fbff
pop rbp: 5d
push rax: 50
inc r8d: 41ffc0
movsxd r10, r10d: 4d63d2
add r9, r10: 4d03ca
mov qword ptr [rsp + r8 - 0x4d001], r9: 4e898c04ff2ffbff
ret: c3

bytecode len: 388 -   488b3341bb0ff78b2b410fbed34a8d9c1bf90874d44c8bde482bea41ba912396da4f8d84d281c303484c8d0debffffff458b1423410fb6c08bc84d8d9c839cfdffff440fc1c00fb7f94433d5510fc841ffca42c0ac44cefeffff06410fcac0e0c148c1e816418bd041c1ca034032c7478d94427ac928324a878c44ccfeffff488db121dea6074181f21e0b94d76642f79c44d0feffff4a89ac44ccfeffff480f4fce49c1e00b463194040030fbff5d5041ffc04d63d24d03ca4e898c04ff2ffbffc3

block IDs [duplicates]: [55]
['bswap rax', 'mov qword ptr [rsp + rcx - 0x1e96abbc], rdi', 'dec rax', 'bts rsi, 1', 'call 0x7ffb72bcf8f8']

bytes: bswap rax: 480fc8
mov qword ptr [rsp + rcx - 0x1e96abbc], rdi: 4889bc0c445469e1
dec rax: 48ffc8
bts rsi, 1: 480fbaee01
call 0x7ffb72bcf8f8: e8e6682300

bytecode len: 48 -   480fc84889bc0c445469e148ffc8480fbaee01e8e6682300

block IDs [duplicates]: [56]
['bts r10d, 0x2c', 'dec cl', 'mov qword ptr [rsp + r10*4 - 0x2eef0], r10', 'shr rsi, cl', 'xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc', 'lea rdx, [r10 + rdx + 0x21a79a4f]', 'pop r8', 'ror rdx, 5', 'rol r10b, 0xe1', 'pop rax', 'xor rbp, rdx', 'sal r10, cl', 'mov qword ptr [rbx + rsi*4 - 0x10], rdx', 'neg r10d', 'neg rcx', 'lea rdx, [rax + r8*2 + 0x3102b03c]', 'or r10d, dword ptr [r10 + r11 + 0x10]', 'cwde', 'rol r10d, 2', 'sub edi, 0x82313a32', 'mov qword ptr [rsp + rdi - 0x7dcec5be], rbp', 'jle 0x7ffb72b20360']

bytes: bts r10d, 0x2c: 410fbaea2c
dec cl: fec9
mov qword ptr [rsp + r10*4 - 0x2eef0], r10: 4e8994941011fdff
shr rsi, cl: 48d3ee
xor qword ptr [rsp + r10 - 0xbbb4], 0xffffffff9708bbbc: 4a81b4144c44ffffbcbb0897
lea rdx, [r10 + rdx + 0x21a79a4f]: 498d94124f9aa721
pop r8: 4158
ror rdx, 5: 48c1ca05
rol r10b, 0xe1: 41c0c2e1
pop rax: 58
xor rbp, rdx: 4833ea
sal r10, cl: 49d3f2
mov qword ptr [rbx + rsi*4 - 0x10], rdx: 488954b3f0
neg r10d: 41f7da
neg rcx: 48f7d9
lea rdx, [rax + r8*2 + 0x3102b03c]: 4a8d94403cb00231
or r10d, dword ptr [r10 + r11 + 0x10]: 470b541a10
cwde: 98
rol r10d, 2: 41c1c202
sub edi, 0x82313a32: 81ef323a3182
mov qword ptr [rsp + rdi - 0x7dcec5be], rbp: 4889ac3c423a3182
jle 0x7ffb72b20360: 0f8e83c9fcff

bytecode len: 208 -   410fbaea2cfec94e8994941011fdff48d3ee4a81b4144c44ffffbcbb0897498d94124f9aa721415848c1ca0541c0c2e1584833ea49d3f2488954b3f041f7da48f7d94a8d94403cb00231470b541a109841c1c20281ef323a31824889ac3c423a31820f8e83c9fcff

block IDs [duplicates]: [57]
['xor dword ptr [rsp + rdi - 0x7dcec5be], r10d', 'dec word ptr [rsp + rsi*2 + 3]', 'ror edx, 9', 'mov rbp, qword ptr [rsp + rsi*2 + 0x10]', 'add ecx, 0xd6aede26', 'movsxd r10, r10d', 'add r9, r10', 'sar cx, 0x29', 'lea rax, [rcx*8 - 0x5847164a]', 'mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6', 'movzx r10d, word ptr [r11 + rcx - 0x1aee0026]', 'lea r11, [rcx + r11 - 0x1aee0024]', 'cbw', 'xor r10w, bp', 'mov qword ptr [rsp + rcx - 0x1aee002a], rdx', 'mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx', 'add r10w, 0x5bbe', 'ror r10w, 1', 'inc r10w', 'dec word ptr [rsp + rcx*4 - 0x6bb800df]', 'neg r10w', 'pop rsi', 'ror r10w, 1', 'neg r10w', 'shr word ptr [rsp + rax - 0x7f28ff7b], 0x21', 'rol r10w, 1', 'cdqe', 'push rax', 'add r10w, 0xfba5', 'xor bp, r10w', 'lea r10, [rsp + r10 + 0x18]', 'mov rcx, qword ptr [r10 + rcx - 0x1aee003a]', 'mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx', 'sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce', 'lea r10, [rdi*8 - 0x65c4ffca]', 'cwd', 'lea rbx, [rbx + rdi - 0x7dcec5e6]', 'shr qword ptr [rsp + r8 - 0xbbba], 0xcb', 'and dil, r8b', 'pop r8', 'pop r8', 'pop rsi', 'jno 0x7ffb72eb83a2']

bytes: xor dword ptr [rsp + rdi - 0x7dcec5be], r10d: 4431943c423a3182
dec word ptr [rsp + rsi*2 + 3]: 66ff4c7403
ror edx, 9: c1ca09
mov rbp, qword ptr [rsp + rsi*2 + 0x10]: 488b6c7410
add ecx, 0xd6aede26: 81c126deaed6
movsxd r10, r10d: 4d63d2
add r9, r10: 4d03ca
sar cx, 0x29: 66c1f929
lea rax, [rcx*8 - 0x5847164a]: 488d04cdb6e9b8a7
mov dword ptr [rsp + rcx - 0x1aee002f], 0x95a801b6: c7840cd1ff11e5b601a895
movzx r10d, word ptr [r11 + rcx - 0x1aee0026]: 450fb7940bdaff11e5
lea r11, [rcx + r11 - 0x1aee0024]: 4e8d9c19dcff11e5
cbw: 6698
xor r10w, bp: 664433d5
mov qword ptr [rsp + rcx - 0x1aee002a], rdx: 4889940cd6ff11e5
mov qword ptr [rsp + rcx*2 - 0x35dc006f], rdx: 4889944c91ff23ca
add r10w, 0x5bbe: 664181c2be5b
ror r10w, 1: 6641d1ca
inc r10w: 6641ffc2
dec word ptr [rsp + rcx*4 - 0x6bb800df]: 66ff8c8c21ff4794
neg r10w: 6641f7da
pop rsi: 5e
ror r10w, 1: 6641d1ca
neg r10w: 6641f7da
shr word ptr [rsp + rax - 0x7f28ff7b], 0x21: 66c1ac048500d78021
rol r10w, 1: 6641d1c2
cdqe: 4898
push rax: 50
add r10w, 0xfba5: 664181c2a5fb
xor bp, r10w: 664133ea
lea r10, [rsp + r10 + 0x18]: 4e8d541418
mov rcx, qword ptr [r10 + rcx - 0x1aee003a]: 498b8c0ac6ff11e5
mov qword ptr [rbx + rdi - 0x7dcec5e6], rcx: 48898c3b1a3a3182
sar word ptr [rsp + rdi - 0x7dcec5b9], 0xce: 66c1bc3c473a3182ce
lea r10, [rdi*8 - 0x65c4ffca]: 4c8d14fd36003b9a
cwd: 6699
lea rbx, [rbx + rdi - 0x7dcec5e6]: 488d9c3b1a3a3182
shr qword ptr [rsp + r8 - 0xbbba], 0xcb: 4ac1ac044644ffffcb
and dil, r8b: 4122f8
pop r8: 4158
pop r8: 4158
pop rsi: 5e
jno 0x7ffb72eb83a2: 0f8163c14c00

bytecode len: 454 -   4431943c423a318266ff4c7403c1ca09488b6c741081c126deaed64d63d24d03ca66c1f929488d04cdb6e9b8a7c7840cd1ff11e5b601a895450fb7940bdaff11e54e8d9c19dcff11e56698664433d54889940cd6ff11e54889944c91ff23ca664181c2be5b6641d1ca6641ffc266ff8c8c21ff47946641f7da5e6641d1ca6641f7da66c1ac048500d780216641d1c2489850664181c2a5fb664133ea4e8d541418498b8c0ac6ff11e548898c3b1a3a318266c1bc3c473a3182ce4c8d14fd36003b9a6699488d9c3b1a3a31824ac1ac044644ffffcb4122f8415841585e0f8163c14c00

block IDs [duplicates]: [58]
['jns 0x7ffb72c8632a']

bytes: jns 0x7ffb72c8632a: 0f898c711f00

bytecode len: 12 -   0f898c711f00

block IDs [duplicates]: [59]
['mov rdi, qword ptr [rbx + rdx - 0xa5]', 'mov ecx, 0x26214c3c', 'xor edx, esi', 'adc r10, rdi', 'xadd dx, r8w', 'mov qword ptr [rbx + rsi - 0x1cc1], r10', 'lea rbx, [rbx + rdx - 0x22fe]', 'jmp r9']

bytes: mov rdi, qword ptr [rbx + rdx - 0xa5]: 488bbc135bffffff
mov ecx, 0x26214c3c: b93c4c2126
xor edx, esi: 33d6
adc r10, rdi: 4c13d7
xadd dx, r8w: 66440fc1c2
mov qword ptr [rbx + rsi - 0x1cc1], r10: 4c8994333fe3ffff
lea rbx, [rbx + rdx - 0x22fe]: 488d9c1302ddffff
jmp r9: 41ffe1

bytecode len: 84 -   488bbc135bffffffb93c4c212633d64c13d766440fc1c24c8994333fe3ffff488d9c1302ddffff41ffe1

block IDs [duplicates]: [60]
['add cx, 0xddb4', 'not cx', 'cqo', 'rol dl, 0xe4', 'movzx esi, r10w', 'ror cx, 1', 'ror rax, 0x23', 'shl r10d, 0xa1', 'shl rsi, 0x51', 'xor cx, 0xe5b6', 'cwde', 'xor bp, cx', 'xchg r8d, edi', 'cdqe', 'dec r10b', 'add rcx, rsp', 'btr edx, edi', 'adc rsi, rdi', 'call 0x7ffb72e1c459']

bytes: add cx, 0xddb4: 6681c1b4dd
not cx: 66f7d1
cqo: 4899
rol dl, 0xe4: c0c2e4
movzx esi, r10w: 410fb7f2
ror cx, 1: 66d1c9
ror rax, 0x23: 48c1c823
shl r10d, 0xa1: 41c1e2a1
shl rsi, 0x51: 48c1e651
xor cx, 0xe5b6: 6681f1b6e5
cwde: 98
xor bp, cx: 6633e9
xchg r8d, edi: 4187f8
cdqe: 4898
dec r10b: 41feca
add rcx, rsp: 4803cc
btr edx, edi: 0fb3fa
adc rsi, rdi: 4813f7
call 0x7ffb72e1c459: e834c24d00

bytecode len: 126 -   6681c1b4dd66f7d14899c0c2e4410fb7f266d1c948c1c82341c1e2a148c1e6516681f1b6e5986633e94187f8489841feca4803cc0fb3fa4813f7e834c24d00

block IDs [duplicates]: [61]
['sal dx, 0xaa', 'shl qword ptr [rsp + rdx*8 + 0x10], 0x90', 'lea r8d, [r8 + rdx*2 - 0x7f8e038e]', 'rol r8d, 2', 'movsx edi, sil', 'mov qword ptr [rsp + rdx], -0x714f95ee', 'lea rcx, [rdi*8 + 0x4e0035a4]', 'mov qword ptr [rsp + rdx + 0x10], rbp', 'sub word ptr [rsp + rdx + 0xa], 0x5b8', 'or si, 0x87ae', 'xor dword ptr [rsp + rdx*2 + 0x10], r8d', 'mov rbp, qword ptr [rsp + rdx + 0x10]', 'ror rcx, 9', 'movsxd r8, r8d', 'ror dword ptr [rsp + rdx*2 + 0xa], 0x1f', 'mov qword ptr [rsp + rdx + 0x10], 0x4fa44abb', 'neg rsi', 'add r9, r8', 'sar dword ptr [rsp + rdx*2 + 6], cl', 'mov qword ptr [rsp + rdx*2], r9', 'ret 0x10']

bytes: sal dx, 0xaa: 66c1f2aa
shl qword ptr [rsp + rdx*8 + 0x10], 0x90: 48c164d41090
lea r8d, [r8 + rdx*2 - 0x7f8e038e]: 458d845072fc7180
rol r8d, 2: 41c1c002
movsx edi, sil: 400fbefe
mov qword ptr [rsp + rdx], -0x714f95ee: 48c70414126ab08e
lea rcx, [rdi*8 + 0x4e0035a4]: 488d0cfda435004e
mov qword ptr [rsp + rdx + 0x10], rbp: 48896c1410
sub word ptr [rsp + rdx + 0xa], 0x5b8: 66816c140ab805
or si, 0x87ae: 6681ceae87
xor dword ptr [rsp + rdx*2 + 0x10], r8d: 4431445410
mov rbp, qword ptr [rsp + rdx + 0x10]: 488b6c1410
ror rcx, 9: 48c1c909
movsxd r8, r8d: 4d63c0
ror dword ptr [rsp + rdx*2 + 0xa], 0x1f: c14c540a1f
mov qword ptr [rsp + rdx + 0x10], 0x4fa44abb: 48c7441410bb4aa44f
neg rsi: 48f7de
add r9, r8: 4d03c8
sar dword ptr [rsp + rdx*2 + 6], cl: d37c5406
mov qword ptr [rsp + rdx*2], r9: 4c890c54
ret 0x10: c21000

bytecode len: 214 -   66c1f2aa48c164d41090458d845072fc718041c1c002400fbefe48c70414126ab08e488d0cfda435004e48896c141066816c140ab8056681ceae874431445410488b6c141048c1c9094d63c0c14c540a1f48c7441410bb4aa44f48f7de4d03c8d37c54064c890c54c21000

block IDs [duplicates]: [62]
['mov rax, qword ptr [rbx]', 'mov ecx, 0xb7bf4211', 'mov edx, 0x82a603a6', 'movzx r10d, word ptr [r11]', 'mov edi, edx', 'bts rcx, rdx', 'jae 0x7ffb72c262bc']

bytes: mov rax, qword ptr [rbx]: 488b03
mov ecx, 0xb7bf4211: b91142bfb7
mov edx, 0x82a603a6: baa603a682
movzx r10d, word ptr [r11]: 450fb71423
mov edi, edx: 8bfa
bts rcx, rdx: 480fabd1
jae 0x7ffb72c262bc: 0f83a0902700

bytecode len: 60 -   488b03b91142bfb7baa603a682450fb714238bfa480fabd10f83a0902700

block IDs [duplicates]: [63]
['ror r10, 2', 'neg rdx', 'sub byte ptr [rsp + rcx*2 - 0x4563ffe3], dil', 'sar byte ptr [rsp + rcx*2 - 0x4563fff7], 0xc1', 'not r10', 'xor rbp, r10', 'lea rax, [rdx + rdi*4 + 0x3bd1e2c]', 'mov r8d, ecx', 'shl dl, 0xc3', 'mov qword ptr [rbx + rcx - 0x22b20000], r10', 'jb 0x7ffb72cb5491']

bytes: ror r10, 2: 49c1ca02
neg rdx: 48f7da
sub byte ptr [rsp + rcx*2 - 0x4563ffe3], dil: 4028bc4c1d009cba
sar byte ptr [rsp + rcx*2 - 0x4563fff7], 0xc1: c0bc4c09009cbac1
not r10: 49f7d2
xor rbp, r10: 4933ea
lea rax, [rdx + rdi*4 + 0x3bd1e2c]: 488d84ba2c1ebd03
mov r8d, ecx: 448bc1
shl dl, 0xc3: c0e2c3
mov qword ptr [rbx + rcx - 0x22b20000], r10: 4c89940b00004edd
jb 0x7ffb72cb5491: 0f82208d2000

bytecode len: 114 -   49c1ca0248f7da4028bc4c1d009cbac0bc4c09009cbac149f7d24933ea488d84ba2c1ebd03448bc1c0e2c34c89940b00004edd0f82208d2000

block IDs [duplicates]: [64]
['movsxd rax, eax', 'add r9, rax', 'shr dl, 0xc5', 'mov di, word ptr [r10 + r11 - 0x1663e]', 'lea r8, [r10*8 + 0x1dac92b4]', 'lea rcx, [rdx + r8*2 + 0x1ca16f26]', 'lea r11, [rdx + r11 - 0x631291f2]', 'mov eax, esi', 'xor di, bp', 'add r10w, si', 'ror di, 1', 'call 0x7ffb72ecba3e']

bytes: movsxd rax, eax: 4863c0
add r9, rax: 4c03c8
shr dl, 0xc5: c0eac5
mov di, word ptr [r10 + r11 - 0x1663e]: 66438bbc1ac299feff
lea r8, [r10*8 + 0x1dac92b4]: 4e8d04d5b492ac1d
lea rcx, [rdx + r8*2 + 0x1ca16f26]: 4a8d8c42266fa11c
lea r11, [rdx + r11 - 0x631291f2]: 4e8d9c1a0e6eed9c
mov eax, esi: 8bc6
xor di, bp: 6633fd
add r10w, si: 664403d6
ror di, 1: 66d1cf
call 0x7ffb72ecba3e: e89e323200

bytecode len: 118 -   4863c04c03c8c0eac566438bbc1ac299feff4e8d04d5b492ac1d4a8d8c42266fa11c4e8d9c1a0e6eed9c8bc66633fd664403d666d1cfe89e323200

block IDs [duplicates]: [65]
['mov edi, 0xef27efaf', 'mov r8, qword ptr [rbx]', 'movsx eax, dil', 'shr eax, 0x66', 'mov rcx, qword ptr [rbx + rax - 0x3fffff6]', 'jne 0x7ffb72d41b53']

bytes: mov edi, 0xef27efaf: bfafef27ef
mov r8, qword ptr [rbx]: 4c8b0423
movsx eax, dil: 400fbec7
shr eax, 0x66: c1e866
mov rcx, qword ptr [rbx + rax - 0x3fffff6]: 488b8c030a0000fc
jne 0x7ffb72d41b53: 0f85789f3f00

bytecode len: 60 -   bfafef27ef4c8b0423400fbec7c1e866488b8c030a0000fc0f85789f3f00

block IDs [duplicates]: [66]
['mov rdx, qword ptr [rbx]', 'mov eax, 0x2e3e62ae', 'dec eax', 'mov r10, qword ptr [rbx + rax - 0x2e3e62a5]', 'add rdx, r10', 'push rax', 'movsx edi, word ptr [rsp + rax - 0x2e3e62ab]', 'add word ptr [rsp + rax*2 - 0x5c7cc556], di', 'mov rsi, rdx', 'jg 0x7ffb72d73526']

bytes: mov rdx, qword ptr [rbx]: 488b13
mov eax, 0x2e3e62ae: b8ae623e2e
dec eax: ffc8
mov r10, qword ptr [rbx + rax - 0x2e3e62a5]: 4c8b94035b9dc1d1
add rdx, r10: 4903d2
push rax: 50
movsx edi, word ptr [rsp + rax - 0x2e3e62ab]: 0fbfbc04559dc1d1
add word ptr [rsp + rax*2 - 0x5c7cc556], di: 6601bc44aa3a83a3
mov rsi, rdx: 488bf2
jg 0x7ffb72d73526: 0f8fd76c4800

bytecode len: 94 -   488b13b8ae623e2effc84c8b94035b9dc1d14903d2500fbfbc04559dc1d16601bc44aa3a83a3488bf20f8fd76c4800

block IDs [duplicates]: [67]
['movsxd r8, r8d', 'mov qword ptr [rsp + rax*2 - 0x5c7cc55a], rdi', 'add eax, 0x3a96efa2', 'pop rsi', 'adc r9, r8', 'btr esi, 0x1b', 'movzx r8d, ax', 'shr r10w, cl', 'adc rdx, r9', 'jmp rdx']

bytes: movsxd r8, r8d: 4d63c0
mov qword ptr [rsp + rax*2 - 0x5c7cc55a], rdi: 4889bc44a63a83a3
add eax, 0x3a96efa2: 05a2ef963a
pop rsi: 5e
adc r9, r8: 4d13c8
btr esi, 0x1b: 0fbaf61b
movzx r8d, ax: 440fb7c0
shr r10w, cl: 6641d3ea
adc rdx, r9: 4913d1
jmp rdx: ffe2

bytecode len: 74 -   4d63c04889bc44a63a83a305a2ef963a5e4d13c80fbaf61b440fb7c06641d3ea4913d1ffe2

block IDs [duplicates]: [70]
['jne 0x7ffb72c4500c']

bytes: jne 0x7ffb72c4500c: 0f85167a1500

bytecode len: 12 -   0f85167a1500

block IDs [duplicates]: [71]
['rol rsi, 0x2e', 'cqo', 'lea rbx, [rbx + rax*2 + 0x1b6c07b0]', 'jae 0x7ffb72bd0b16']

bytes: rol rsi, 0x2e: 48c1c62e
cqo: 4899
lea rbx, [rbx + rax*2 + 0x1b6c07b0]: 488d9c43b0076c1b
jae 0x7ffb72bd0b16: 0f8346ea0500

bytecode len: 40 -   48c1c62e4899488d9c43b0076c1b0f8346ea0500

block IDs [duplicates]: [72]
['push 0x6cb41c0e', 'sar qword ptr [rsp], 0x46', 'mov rdx, qword ptr [rbx]', 'jnp 0x7ffb72a9cd48']

bytes: push 0x6cb41c0e: 680e1cb46c
sar qword ptr [rsp], 0x46: 48c17c240046
mov rdx, qword ptr [rbx]: 488b13
jnp 0x7ffb72a9cd48: 0f8b23400000

bytecode len: 40 -   680e1cb46c48c17c240046488b130f8b23400000

block IDs [duplicates]: [73]
['mov r8d, 0x3f34e59d', 'mov rsi, qword ptr [rbx + r8*2 - 0x7e69cb32]', 'push r8', 'or qword ptr [rsp + r8*2 - 0x7e69cb34], r8', 'mov qword ptr ss:[r8 + rdx - 0x3f34e59d], rsi', 'mov esi, r8d', 'lea r10, [r8*8 - 0x5ec25378]', 'movzx edi, byte ptr [r8 + r11 - 0x3f34e59d]', 'neg esi', 'pop rdx', 'cmovno r10w, word ptr [rsp + r8*2 - 0x7e69cb34]', 'xor dil, bpl', 'lea rcx, [r10 + rdx*4 - 0x73c710e8]', 'inc r10d', 'add dil, r10b', 'push r10', 'add qword ptr [rsp + r8*2 - 0x7e69cb34], r8', 'ror dil, 1', 'pop rdx', 'neg dil', 'push r8', 'xor dil, 0x2e', 'xor bpl, dil', 'call 0x7ffb728f4da5']

bytes: mov r8d, 0x3f34e59d: 41b89de5343f
mov rsi, qword ptr [rbx + r8*2 - 0x7e69cb32]: 4a8bb443ce349681
push r8: 4150
or qword ptr [rsp + r8*2 - 0x7e69cb34], r8: 4e098444cc349681
mov qword ptr ss:[r8 + rdx - 0x3f34e59d], rsi: 364989b410631acbc0
mov esi, r8d: 418bf0
lea r10, [r8*8 - 0x5ec25378]: 4e8d14c588ac3da1
movzx edi, byte ptr [r8 + r11 - 0x3f34e59d]: 430fb6bc18631acbc0
neg esi: f7de
pop rdx: 5a
cmovno r10w, word ptr [rsp + r8*2 - 0x7e69cb34]: 66460f419444cc349681
xor dil, bpl: 4032fd
lea rcx, [r10 + rdx*4 - 0x73c710e8]: 498d8c9218ef388c
inc r10d: 41ffc2
add dil, r10b: 4102fa
push r10: 4152
add qword ptr [rsp + r8*2 - 0x7e69cb34], r8: 4e018444cc349681
ror dil, 1: 40d0cf
pop rdx: 5a
neg dil: 40f6df
push r8: 4150
xor dil, 0x2e: 4080f72e
xor bpl, dil: 4032ef
call 0x7ffb728f4da5: e8e97fe5ff

bytecode len: 228 -   41b89de5343f4a8bb443ce34968141504e098444cc349681364989b410631acbc0418bf04e8d14c588ac3da1430fb6bc18631acbc0f7de5a66460f419444cc3496814032fd498d8c9218ef388c41ffc24102fa41524e018444cc34968140d0cf5a40f6df41504080f72e4032efe8e97fe5ff

block IDs [duplicates]: [74]
['lea rdi, [rsp + rdi + 0x18]', 'mov r8, qword ptr [rdi + r8*2 - 0x7e69cb3a]', 'sub dword ptr [rsp + 0xf], 0xd00fc921', 'mov qword ptr [rbx + 8], r8', 'sbb rbx, -9', 'mov edi, dword ptr [r11 + 1]', 'shr dword ptr [rsp + 0x11], 0xaa', 'sbb r11, -6', 'lea rax, [rdx*4 - 0x22682feb]', 'sub r10b, dl', 'xor edi, ebp', 'inc ax', 'add rax, r10', 'dec edi', 'movsx r8d, r10b', 'cwd', 'ror edi, 1', 'add eax, 0xba15b715', 'sbb edi, r8d', 'mov qword ptr [rsp + r8*8], -0xac2875a', 'sal dword ptr [rsp + r8*2 + 0xc], 0xb2', 'bswap edi', 'cwde', 'xadd dl, ch', 'mov qword ptr [rsp + r8*4 + 0x10], rbp', 'jne 0x7ffb7294eb23']

bytes: lea rdi, [rsp + rdi + 0x18]: 488d7c3c18
mov r8, qword ptr [rdi + r8*2 - 0x7e69cb3a]: 4e8b8447c6349681
sub dword ptr [rsp + 0xf], 0xd00fc921: 816c240f21c90fd0
mov qword ptr [rbx + 8], r8: 4c89442308
sbb rbx, -9: 4883dbf7
mov edi, dword ptr [r11 + 1]: 418b7c2301
shr dword ptr [rsp + 0x11], 0xaa: c16c2411aa
sbb r11, -6: 4983dbfa
lea rax, [rdx*4 - 0x22682feb]: 488d049515d097dd
sub r10b, dl: 442ad2
xor edi, ebp: 33fd
inc ax: 66ffc0
add rax, r10: 4903c2
dec edi: ffcf
movsx r8d, r10b: 450fbec2
cwd: 6699
ror edi, 1: d1cf
add eax, 0xba15b715: 0515b715ba
sbb edi, r8d: 411bf8
mov qword ptr [rsp + r8*8], -0xac2875a: 4ac704c4a6783df5
sal dword ptr [rsp + r8*2 + 0xc], 0xb2: 42c174440cb2
bswap edi: 0fcf
cwde: 98
xadd dl, ch: 0fc0ea
mov qword ptr [rsp + r8*4 + 0x10], rbp: 4a896c8410
jne 0x7ffb7294eb23: 0f850a9d0500

bytecode len: 224 -   488d7c3c184e8b8447c6349681816c240f21c90fd04c894423084883dbf7418b7c2301c16c2411aa4983dbfa488d049515d097dd442ad233fd66ffc04903c2ffcf450fbec26699d1cf0515b715ba411bf84ac704c4a6783df542c174440cb20fcf980fc0ea4a896c84100f850a9d0500

block IDs [duplicates]: [75]
['xor dword ptr [rsp + r8*2 + 0x10], edi', 'xchg word ptr [rsp + r8 + 1], r8w', 'mov rbp, qword ptr [rsp + r8 - 0x3d68]', 'movsxd rdi, edi', 'shl byte ptr [rsp + r8*2 - 0x7ae1], 0xc1', 'not dword ptr [rsp + r8 - 0x3d6e]', 'sbb eax, 0x18beef22', 'adc r9, rdi', 'not r10d', 'sar ecx, 0x9d', 'neg rax', 'mov qword ptr [rsp + rcx*4 - 4], r9', 'ret 0x10']

bytes: xor dword ptr [rsp + r8*2 + 0x10], edi: 42317c4410
xchg word ptr [rsp + r8 + 1], r8w: 664687440401
mov rbp, qword ptr [rsp + r8 - 0x3d68]: 4a8bac0498c2ffff
movsxd rdi, edi: 4863ff
shl byte ptr [rsp + r8*2 - 0x7ae1], 0xc1: 42c0a4441f85ffffc1
not dword ptr [rsp + r8 - 0x3d6e]: 42f7940492c2ffff
sbb eax, 0x18beef22: 1d22efbe18
adc r9, rdi: 4c13cf
not r10d: 41f7d2
sar ecx, 0x9d: c1f99d
neg rax: 48f7d8
mov qword ptr [rsp + rcx*4 - 4], r9: 4c894c8cfc
ret 0x10: c21000

bytecode len: 128 -   42317c44106646874404014a8bac0498c2ffff4863ff42c0a4441f85ffffc142f7940492c2ffff1d22efbe184c13cf41f7d2c1f99d48f7d84c894c8cfcc21000

block IDs [duplicates]: [76]
['lea r11, [r11 + r10*2 - 0x5d25]', 'xor sil, bpl', 'rol dword ptr [rsp + r10*2 - 0x5d28], 0x67', 'mov qword ptr [rsp + r10 - 0x2e8d], -0x5766b050', 'adc sil, al', 'sar qword ptr [rsp + r10*8 - 0x174a4], 0x37', 'or ax, 0x829b', 'rol sil, 1', 'add sil, 0x89', 'not byte ptr [rsp + r10 - 0x2eaf]', 'push rcx', 'not sil', 'mov qword ptr [rsp + r10*8 - 0x175a7], rcx', 'not byte ptr [rsp + r10*4 - 0xbacc]', 'sal word ptr [rsp + r10*2 - 0x5d67], 0xe1', 'ror sil, 1', 'rol byte ptr [rsp + r10*2 - 0x5d65], 0x22', 'ror word ptr [rsp + rax - 0xc28e], 0xaa', 'not sil', 'xor bpl, sil', 'dec word ptr [rsp + r10*2 - 0x5d58]', 'sar byte ptr [rsp + r10 - 0x2ea0], 0xc1', 'lea rsi, [rsp + rsi + 0x18]', 'mov rax, qword ptr [rsi + r10*4 - 0xbad4]', 'mov r10, rax', 'mov rdx, qword ptr [rbx + rcx]', 'or r10, rdx', 'mov edx, r8d', 'and dword ptr [rsp + rcx*2 + 0x13], 0x213e8b94', 'not r10', 'mov qword ptr [rbx + rcx], r10', 'neg byte ptr [rsp + rcx*4 + 0x11]', 'sar qword ptr [rsp + r8 - 0x7db52e8e], 0xb4', 'mov qword ptr [rsp + rcx], r9', 'ret 0x10']

bytes: lea r11, [r11 + r10*2 - 0x5d25]: 4f8d9c53dba2ffff
xor sil, bpl: 4032f5
rol dword ptr [rsp + r10*2 - 0x5d28], 0x67: 42c18454d8a2ffff67
mov qword ptr [rsp + r10 - 0x2e8d], -0x5766b050: 4ac7841473d1ffffb04f99a8
adc sil, al: 4012f0
sar qword ptr [rsp + r10*8 - 0x174a4], 0x37: 4ac1bcd45c8bfeff37
or ax, 0x829b: 660d9b82
rol sil, 1: 40d0c6
add sil, 0x89: 4080c689
not byte ptr [rsp + r10 - 0x2eaf]: 42f6941451d1ffff
push rcx: 51
not sil: 40f6d6
mov qword ptr [rsp + r10*8 - 0x175a7], rcx: 4a898cd4598afeff
not byte ptr [rsp + r10*4 - 0xbacc]: 42f694943445ffff
sal word ptr [rsp + r10*2 - 0x5d67], 0xe1: 6642c1b45499a2ffffe1
ror sil, 1: 40d0ce
rol byte ptr [rsp + r10*2 - 0x5d65], 0x22: 42c084549ba2ffff22
ror word ptr [rsp + rax - 0xc28e], 0xaa: 66c18c04723dffffaa
not sil: 40f6d6
xor bpl, sil: 4032ee
dec word ptr [rsp + r10*2 - 0x5d58]: 6642ff8c54a8a2ffff
sar byte ptr [rsp + r10 - 0x2ea0], 0xc1: 42c0bc1460d1ffffc1
lea rsi, [rsp + rsi + 0x18]: 488d743418
mov rax, qword ptr [rsi + r10*4 - 0xbad4]: 4a8b84962c45ffff
mov r10, rax: 4c8bd0
mov rdx, qword ptr [rbx + rcx]: 488b140b
or r10, rdx: 4c0bd2
mov edx, r8d: 418bd0
and dword ptr [rsp + rcx*2 + 0x13], 0x213e8b94: 81644c13948b3e21
not r10: 49f7d2
mov qword ptr [rbx + rcx], r10: 4c89140b
neg byte ptr [rsp + rcx*4 + 0x11]: f65c8c11
sar qword ptr [rsp + r8 - 0x7db52e8e], 0xb4: 4ac1bc0472d14a82b4
mov qword ptr [rsp + rcx], r9: 4c890c0c
ret 0x10: c21000

bytecode len: 398 -   4f8d9c53dba2ffff4032f542c18454d8a2ffff674ac7841473d1ffffb04f99a84012f04ac1bcd45c8bfeff37660d9b8240d0c64080c68942f6941451d1ffff5140f6d64a898cd4598afeff42f694943445ffff6642c1b45499a2ffffe140d0ce42c084549ba2ffff2266c18c04723dffffaa40f6d64032ee6642ff8c54a8a2ffff42c0bc1460d1ffffc1488d7434184a8b84962c45ffff4c8bd0488b140b4c0bd2418bd081644c13948b3e2149f7d24c89140bf65c8c114ac1bc0472d14a82b44c890c0cc21000

block IDs [duplicates]: [77]
['mov r8, qword ptr [rbx + rcx]', 'mov r10, qword ptr [rbx + rcx*4 + 8]', 'movsx edx, cl', 'lea rbx, [rbx + rcx + 0x10]', 'mov edi, edx', 'or r8, r10', 'btr rdi, rdx', 'not r8', 'shl cx, 0x2f', 'call 0x7ffb72a4af7b']

bytes: mov r8, qword ptr [rbx + rcx]: 4c8b040b
mov r10, qword ptr [rbx + rcx*4 + 8]: 4c8b548b08
movsx edx, cl: 0fbed1
lea rbx, [rbx + rcx + 0x10]: 488d5c0b10
mov edi, edx: 8bfa
or r8, r10: 4d0bc2
btr rdi, rdx: 480fb3d7
not r8: 49f7d0
shl cx, 0x2f: 66c1e12f
call 0x7ffb72a4af7b: e83ac61300

bytecode len: 76 -   4c8b040b4c8b548b080fbed1488d5c0b108bfa4d0bc2480fb3d749f7d066c1e12fe83ac61300

block IDs [duplicates]: [78]
['xor rdi, r8', 'add cl, byte ptr [r11 + rcx*2]', 'xor cl, bpl', 'lea r10, [rdx*8 + 0x292eea03]', 'push r10', 'sar r10b, 0x41', 'ror cl, 1', 'add dl, 0xaf', 'movsx r8d, dx', 'neg cl', 'mov qword ptr [rsp + rdx*4 - 0x2b4], r10', 'bts r8w, 0x20', 'adc cl, 0x90', 'ror cl, 1', 'xor bpl, cl', 'lea rcx, [rsp + rcx + 0x10]', 'or r8b, r10b', 'mov qword ptr [rcx + rdx*2 - 0x15e], rdi', 'neg qword ptr [rsp + rdx - 0xa7]', 'movsx ecx, r10b', 'rol word ptr [rsp + r10 - 0x292ee9fe], 0x85', 'mov eax, dword ptr [rdx + r11 - 0xae]', 'sar dl, cl', 'jp 0x7ffb72d1c765']

bytes: xor rdi, r8: 4933f8
add cl, byte ptr [r11 + rcx*2]: 41020c4b
xor cl, bpl: 4032cd
lea r10, [rdx*8 + 0x292eea03]: 4c8d14d503ea2e29
push r10: 4152
sar r10b, 0x41: 41c0fa41
ror cl, 1: d0c9
add dl, 0xaf: 80c2af
movsx r8d, dx: 440fbfc2
neg cl: f6d9
mov qword ptr [rsp + rdx*4 - 0x2b4], r10: 4c8994944cfdffff
bts r8w, 0x20: 66410fbae820
adc cl, 0x90: 80d190
ror cl, 1: d0c9
xor bpl, cl: 4032e9
lea rcx, [rsp + rcx + 0x10]: 488d4c0c10
or r8b, r10b: 450ac2
mov qword ptr [rcx + rdx*2 - 0x15e], rdi: 4889bc51a2feffff
neg qword ptr [rsp + rdx - 0xa7]: 48f79c1459ffffff
movsx ecx, r10b: 410fbeca
rol word ptr [rsp + r10 - 0x292ee9fe], 0x85: 6642c184140216d1d685
mov eax, dword ptr [rdx + r11 - 0xae]: 428b841a52ffffff
sar dl, cl: d2fa
jp 0x7ffb72d1c765: 0f8a77172d00

bytecode len: 222 -   4933f841020c4b4032cd4c8d14d503ea2e29415241c0fa41d0c980c2af440fbfc2f6d94c8994944cfdffff66410fbae82080d190d0c94032e9488d4c0c10450ac24889bc51a2feffff48f79c1459ffffff410fbeca6642c184140216d1d685428b841a52ffffffd2fa0f8a77172d00

block IDs [duplicates]: [79]
['call 0x7ffb72d50a00']

bytes: call 0x7ffb72d50a00: e8a9d03a00

bytecode len: 10 -   e8a9d03a00

block IDs [duplicates]: [80]
['lea esi, [rsi + r10*2 - 0x271e4027]', 'xchg r8w, dx', 'sar qword ptr [rsp + r8*2 + 0x60008], 4', 'adc rdx, 0x26a1c227', 'neg esi', 'mov qword ptr [rsp + rdx*2 - 0x4d44e08e], rdx', 'sal r8d, 0xed', 'lea esi, [rsi + r10 + 0x6113e17]', 'pop rdi', 'push r10', 'ror esi, 1', 'mov qword ptr [rsp + rdi - 0x26a27037], rbp', 'xor dword ptr [rsp + rdi - 0x26a27037], esi', 'shl rdi, 0x3d', 'mov rbp, qword ptr [rsp + rdi*8 + 0x10]', 'mov dword ptr [rbx + rdi*8 + 4], esi', 'mov rdi, qword ptr [rdx + r11 - 0x26a27043]', 'lea rsi, [r8 + r8*8 - 0x54f59d4f]', 'lea rcx, [rax - 0x3be90e7e]', 'and al, dh', 'xor rdi, rbp', 'mov qword ptr [rsp + rdx - 0x26a27037], r8', 'bswap rdi', 'neg r10b', 'call 0x7ffb72cf9af1']

bytes: lea esi, [rsi + r10*2 - 0x271e4027]: 428db456d9bfe1d8
xchg r8w, dx: 664187d0
sar qword ptr [rsp + r8*2 + 0x60008], 4: 4ac1bc440800060004
adc rdx, 0x26a1c227: 4881d227c2a126
neg esi: f7de
mov qword ptr [rsp + rdx*2 - 0x4d44e08e], rdx: 48899454721fbbb2
sal r8d, 0xed: 41c1f0ed
lea esi, [rsi + r10 + 0x6113e17]: 428db416173e1106
pop rdi: 5f
push r10: 4152
ror esi, 1: d1ce
mov qword ptr [rsp + rdi - 0x26a27037], rbp: 4889ac3cc98f5dd9
xor dword ptr [rsp + rdi - 0x26a27037], esi: 31b43cc98f5dd9
shl rdi, 0x3d: 48c1e73d
mov rbp, qword ptr [rsp + rdi*8 + 0x10]: 488b6cfc10
mov dword ptr [rbx + rdi*8 + 4], esi: 8974fb04
mov rdi, qword ptr [rdx + r11 - 0x26a27043]: 4a8bbc1abd8f5dd9
lea rsi, [r8 + r8*8 - 0x54f59d4f]: 4b8db4c0b1620aab
lea rcx, [rax - 0x3be90e7e]: 488d8882f116c4
and al, dh: 22c6
xor rdi, rbp: 4833fd
mov qword ptr [rsp + rdx - 0x26a27037], r8: 4c898414c98f5dd9
bswap rdi: 480fcf
neg r10b: 41f6da
call 0x7ffb72cf9af1: e8a7a43400

bytecode len: 260 -   428db456d9bfe1d8664187d04ac1bc4408000600044881d227c2a126f7de48899454721fbbb241c1f0ed428db416173e11065f4152d1ce4889ac3cc98f5dd931b43cc98f5dd948c1e73d488b6cfc108974fb044a8bbc1abd8f5dd94b8db4c0b1620aab488d8882f116c422c64833fd4c898414c98f5dd9480fcf41f6dae8a7a43400

block IDs [duplicates]: [81]
['mov r8d, esi', 'and cl, dl', 'push rdi', 'push r10', 'btc si, cx', 'dec word ptr [rsp + rdx]', 'xadd r10d, edx', 'inc r10', 'lea eax, [r10 + rax + 0x2940cfcc]', 'push r8', 'sub word ptr [rsp + rsi*4 + 0xe], r8w', 'not eax', 'lea rcx, [rsi + rcx*8 - 0x50c2f3e3]', 'call 0x7ffb72bdd935']

bytes: mov r8d, esi: 448bc6
and cl, dl: 22ca
push rdi: 57
push r10: 4152
btc si, cx: 660fbbce
dec word ptr [rsp + rdx]: 66ff0c14
xadd r10d, edx: 410fc1d2
inc r10: 49ffc2
lea eax, [r10 + rax + 0x2940cfcc]: 418d8402cccf4029
push r8: 4150
sub word ptr [rsp + rsi*4 + 0xe], r8w: 66442944b40e
not eax: f7d0
lea rcx, [rsi + rcx*8 - 0x50c2f3e3]: 488d8cce1d0c3daf
call 0x7ffb72bdd935: e86cc20400

bytecode len: 108 -   448bc622ca574152660fbbce66ff0c14410fc1d249ffc2418d8402cccf4029415066442944b40ef7d0488d8cce1d0c3dafe86cc20400

block IDs [duplicates]: [82]
['mov r10d, 0x743bafb1', 'movsx r8d, r10w', 'mov rsi, qword ptr [rbx + rsi - 0x743bafb1]', 'movzx eax, r10w', 'mov ecx, dword ptr [rax + rsi - 0xafb1]', 'cwde', 'movzx esi, r8w', 'mov dword ptr [rbx + rsi - 0xafad], ecx', 'mov edx, r10d', 'call 0x7ffb72da8477']

bytes: mov r10d, 0x743bafb1: 41bab1af3b74
movsx r8d, r10w: 450fbfc2
mov rsi, qword ptr [rbx + rsi - 0x743bafb1]: 488bb4334f50c48b
movzx eax, r10w: 410fb7c2
mov ecx, dword ptr [rax + rsi - 0xafb1]: 8b8c304f50ffff
cwde: 98
movzx esi, r8w: 410fb7f0
mov dword ptr [rbx + rsi - 0xafad], ecx: 898c335350ffff
mov edx, r10d: 418bd2
call 0x7ffb72da8477: e8bbf03b00

bytecode len: 98 -   41bab1af3b74450fbfc2488bb4334f50c48b410fb7c28b8c304f50ffff98410fb7f0898c335350ffff418bd2e8bbf03b00

block IDs [duplicates]: [491, 491]
['mov qword ptr [rsp + rax*8 - 0x5f620], 0x7af253a', 'lea rsi, [r10 + r10*2 - 0x586acbe9]', 'neg r8d', 'add eax, dword ptr [rsp + rax - 0xbec0]', 'sbb qword ptr [rsp + rax - 0xbec4], rsi', 'mov qword ptr [rsp + rax - 0xbec4], rbp', 'movzx edi, ax', 'xadd r10w, si', 'xor dword ptr [rsp + rax - 0xbec4], r8d', 'mov ecx, 0xe31fffa4', 'call 0x7ffb72c6bfc3']

bytes: mov qword ptr [rsp + rax*8 - 0x5f620], 0x7af253a: 48c784c4e009faff3a25af07
lea rsi, [r10 + r10*2 - 0x586acbe9]: 4b8db452173495a7
neg r8d: 41f7d8
add eax, dword ptr [rsp + rax - 0xbec0]: 0384044041ffff
sbb qword ptr [rsp + rax - 0xbec4], rsi: 4819b4043c41ffff
mov qword ptr [rsp + rax - 0xbec4], rbp: 4889ac043c41ffff
movzx edi, ax: 0fb7f8
xadd r10w, si: 66410fc1f2
xor dword ptr [rsp + rax - 0xbec4], r8d: 443184043c41ffff
mov ecx, 0xe31fffa4: b9a4ff1fe3
call 0x7ffb72c6bfc3: e87ab02500

bytecode len: 144 -   48c784c4e009faff3a25af074b8db452173495a741f7d80384044041ffff4819b4043c41ffff4889ac043c41ffff0fb7f866410fc1f2443184043c41ffffb9a4ff1fe3e87ab02500

block IDs [duplicates]: [84]
['shl sil, 0x66', 'setne byte ptr [rsp + rdi - 0x35]', 'not eax', 'or r10w, 0xce83', 'mov qword ptr [rsp + rdi*2 - 0x7a], -0x37cebc5b', 'inc word ptr [rsp + rdi*4 - 0xef]', 'lea eax, [rax + rdi + 0x3e117151]', 'bts si, 0x81', 'not eax', 'not qword ptr [rsp + rdi*2 - 0x72]', 'lea eax, [rax + rdx - 0x1c09cd20]', 'mov ecx, 0xedbb31a7', 'jb 0x7ffb72ced128']

bytes: shl sil, 0x66: 40c0e666
setne byte ptr [rsp + rdi - 0x35]: 0f95443ccb
not eax: f7d0
or r10w, 0xce83: 664181ca83ce
mov qword ptr [rsp + rdi*2 - 0x7a], -0x37cebc5b: 48c7447c86a54331c8
inc word ptr [rsp + rdi*4 - 0xef]: 66ff84bc11ffffff
lea eax, [rax + rdi + 0x3e117151]: 8d84385171113e
bts si, 0x81: 660fbaee81
not eax: f7d0
not qword ptr [rsp + rdi*2 - 0x72]: 48f7547c8e
lea eax, [rax + rdx - 0x1c09cd20]: 8d8410e032f6e3
mov ecx, 0xedbb31a7: b9a731bbed
jb 0x7ffb72ced128: 0f82ffe01400

bytecode len: 142 -   40c0e6660f95443ccbf7d0664181ca83ce48c7447c86a54331c866ff84bc11ffffff8d84385171113e660fbaee81f7d048f7547c8e8d8410e032f6e3b9a731bbed0f82ffe01400

block IDs [duplicates]: [85]
['bswap eax', 'xadd word ptr [rsp + rdi*8 - 0x1e2], cx', 'pop rdi', 'not eax', 'mov qword ptr [rsp], rbp', 'sal cx, 0xe2', 'inc esi', 'not r8b', 'xor dword ptr [rsp], eax', 'xor rdi, rcx', 'pop rbp', 'sub r8d, 0x1b3333ba', 'sub cx, r8w', 'movsxd rax, eax', 'adc r9, rax', 'jmp r9']

bytes: bswap eax: 0fc8
xadd word ptr [rsp + rdi*8 - 0x1e2], cx: 660fc18cfc1efeffff
pop rdi: 5f
not eax: f7d0
mov qword ptr [rsp], rbp: 48896c2400
sal cx, 0xe2: 66c1f1e2
inc esi: ffc6
not r8b: 41f6d0
xor dword ptr [rsp], eax: 310424
xor rdi, rcx: 4833f9
pop rbp: 5d
sub r8d, 0x1b3333ba: 4181e8ba33331b
sub cx, r8w: 66412bc8
movsxd rax, eax: 4863c0
adc r9, rax: 4c13c8
jmp r9: 41ffe1

bytecode len: 110 -   0fc8660fc18cfc1efeffff5ff7d048896c240066c1f1e2ffc641f6d03104244833f95d4181e8ba33331b66412bc84863c04c13c841ffe1

block IDs [duplicates]: [86]
['movzx r10d, byte ptr [r11 + r8 - 0x46afbf4b]', 'xor r10b, bpl', 'rol r10b, 1', 'dec rdi', 'xor r10b, 0xa', 'bswap ecx', 'movsx esi, r8b', 'btr di, ax', 'adc r10b, 0xa1', 'sal r8b, 0x63', 'xor r10b, cl', 'sub r10b, dil', 'not eax', 'xor r10b, 0xb6', 'call 0x7ffb7297216e']

bytes: movzx r10d, byte ptr [r11 + r8 - 0x46afbf4b]: 470fb69403b54050b9
xor r10b, bpl: 4432d5
rol r10b, 1: 41d0c2
dec rdi: 48ffcf
xor r10b, 0xa: 4180f20a
bswap ecx: 0fc9
movsx esi, r8b: 410fbef0
btr di, ax: 660fb3c7
adc r10b, 0xa1: 4180d2a1
sal r8b, 0x63: 41c0f063
xor r10b, cl: 4432d1
sub r10b, dil: 442ad7
not eax: f7d0
xor r10b, 0xb6: 4180f2b6
call 0x7ffb7297216e: e8ec700000

bytecode len: 114 -   470fb69403b54050b94432d541d0c248ffcf4180f20a0fc9410fbef0660fb3c74180d2a141c0f0634432d1442ad7f7d04180f2b6e8ec700000

block IDs [duplicates]: [87]
['push rdx', 'not rax', 'add r10b, dil', 'xor r10b, dil', 'xchg qword ptr [rsp + 8], r8', 'add r8, 0x42fc8e', 'jmp r8']

bytes: push rdx: 52
not rax: 48f7d0
add r10b, dil: 4402d7
xor r10b, dil: 4432d7
xchg qword ptr [rsp + 8], r8: 4c87442408
add r8, 0x42fc8e: 4981c08efc4200
jmp r8: 41ffe0

bytecode len: 50 -   5248f7d04402d74432d74c874424084981c08efc420041ffe0

block IDs [duplicates]: [88]
['xor bpl, r10b', 'cwde', 'lea r10, [rsp + r10 + 0x18]', 'ror dword ptr [rsp + rsi - 0x3a], 0x2c', 'movzx eax, byte ptr [r11 + rsi - 0x4a]', 'xor al, bpl', 'and byte ptr [rsp + rsi - 0x36], dil', 'sal di, 0xcf', 'sbb al, dil', 'not al', 'ror al, 1', 'not al', 'mov qword ptr [rsp + rsi*8 - 0x258], 0x448b2a03', 'neg qword ptr [rsp + rsi*2 - 0x95]', 'xor al, 0xad', 'xor bpl, al', 'mov edx, 0x1706ce2b', 'movzx r10d, dl', 'mov r8d, dword ptr [r11 + rdx*2 - 0x2e0d9c56]', 'movzx edi, dl', 'xor r8d, ebp', 'movzx ecx, dil', 'shl dx, 0xa5', 'ror r8d, 1', 'lea rsi, [rdx + rcx*8 + 0x719ec1b2]', 'inc r8d', 'lea rsi, [rsi*2 + 0x4e9d55b9]', 'xor r8d, 0x16348688', 'bts si, dx', 'ror dl, 0x67', 'inc r8d', 'btr edx, r10d', 'jae 0x7ffb728f353e']

bytes: xor bpl, r10b: 4132ea
cwde: 98
lea r10, [rsp + r10 + 0x18]: 4e8d541418
ror dword ptr [rsp + rsi - 0x3a], 0x2c: c14c34c62c
movzx eax, byte ptr [r11 + rsi - 0x4a]: 410fb64433b6
xor al, bpl: 4032c5
and byte ptr [rsp + rsi - 0x36], dil: 40207c34ca
sal di, 0xcf: 66c1f7cf
sbb al, dil: 401ac7
not al: f6d0
ror al, 1: d0c8
not al: f6d0
mov qword ptr [rsp + rsi*8 - 0x258], 0x448b2a03: 48c784f4a8fdffff032a8b44
neg qword ptr [rsp + rsi*2 - 0x95]: 48f79c746bffffff
xor al, 0xad: 34ad
xor bpl, al: 4032e8
mov edx, 0x1706ce2b: ba2bce0617
movzx r10d, dl: 440fb6d2
mov r8d, dword ptr [r11 + rdx*2 - 0x2e0d9c56]: 458b8453aa63f2d1
movzx edi, dl: 0fb6fa
xor r8d, ebp: 4433c5
movzx ecx, dil: 400fb6cf
shl dx, 0xa5: 66c1e2a5
ror r8d, 1: 41d1c8
lea rsi, [rdx + rcx*8 + 0x719ec1b2]: 488db4cab2c19e71
inc r8d: 41ffc0
lea rsi, [rsi*2 + 0x4e9d55b9]: 488d3475b9559d4e
xor r8d, 0x16348688: 4181f088863416
bts si, dx: 660fabd6
ror dl, 0x67: c0ca67
inc r8d: 41ffc0
btr edx, r10d: 440fb3d2
jae 0x7ffb728f353e: 0f8371c6d4ff

bytecode len: 292 -   4132ea984e8d541418c14c34c62c410fb64433b64032c540207c34ca66c1f7cf401ac7f6d0d0c8f6d048c784f4a8fdffff032a8b4448f79c746bffffff34ad4032e8ba2bce0617440fb6d2458b8453aa63f2d10fb6fa4433c5400fb6cf66c1e2a541d1c8488db4cab2c19e7141ffc0488d3475b9559d4e4181f088863416660fabd6c0ca6741ffc0440fb3d20f8371c6d4ff

block IDs [duplicates]: [89]
['ror r8d, 3', 'sal r10b, 0x26', 'sbb ecx, edi', 'push rbp', 'and cl, 0x3d', 'movzx eax, cl', 'xor dword ptr [rsp + rdx - 0x1706c5c2], r8d', 'lea rcx, [rcx + r10 + 0x5bb14d2a]', 'cwde', 'pop rbp', 'not cl', 'and edi, eax', 'mov dword ptr [rbx + rdx*2 - 0x2e0d8b88], r8d', 'sub r10, rdx', 'mov rdx, qword ptr [r11 + rdx*2 - 0x2e0d8b80]', 'shl di, 0x4e', 'not si', 'add ax, 0x1c05', 'ror r10b, 0xa4', 'lea rdx, [r10 + rdx + 0x456cae70]', 'neg rdx', 'lea r8, [r10*8 - 0x7fe7fbef]', 'rol rdx, 1', 'xor rbp, rdx', 'or r10d, eax', 'mov qword ptr [rbx + rdi*2 - 0x800c], rdx', 'ja 0x7ffb72f0df4f']

bytes: ror r8d, 3: 41c1c803
sal r10b, 0x26: 41c0f226
sbb ecx, edi: 1bcf
push rbp: 55
and cl, 0x3d: 80e13d
movzx eax, cl: 0fb6c1
xor dword ptr [rsp + rdx - 0x1706c5c2], r8d: 443184143e3af9e8
lea rcx, [rcx + r10 + 0x5bb14d2a]: 4a8d8c112a4db15b
cwde: 98
pop rbp: 5d
not cl: f6d1
and edi, eax: 23f8
mov dword ptr [rbx + rdx*2 - 0x2e0d8b88], r8d: 448984537874f2d1
sub r10, rdx: 4c2bd2
mov rdx, qword ptr [r11 + rdx*2 - 0x2e0d8b80]: 498b94538074f2d1
shl di, 0x4e: 66c1e74e
not si: 66f7d6
add ax, 0x1c05: 6605051c
ror r10b, 0xa4: 41c0caa4
lea rdx, [r10 + rdx + 0x456cae70]: 498d941270ae6c45
neg rdx: 48f7da
lea r8, [r10*8 - 0x7fe7fbef]: 4e8d04d511041880
rol rdx, 1: 48d1c2
xor rbp, rdx: 4833ea
or r10d, eax: 440bd0
mov qword ptr [rbx + rdi*2 - 0x800c], rdx: 4889947bf47fffff
ja 0x7ffb72f0df4f: 0f878ba96100

bytecode len: 230 -   41c1c80341c0f2261bcf5580e13d0fb6c1443184143e3af9e84a8d8c112a4db15b985df6d123f8448984537874f2d14c2bd2498b94538074f2d166c1e74e66f7d66605051c41c0caa4498d941270ae6c4548f7da4e8d04d51104188048d1c24833ea440bd04889947bf47fffff0f878ba96100

block IDs [duplicates]: [90]
['ror dx, 1', 'mov qword ptr [rsp + rdi - 0x4000], 0x6f0ac19b', 'sub dx, 0xc9ba', 'push r10', 'or edi, 0x7da86d19', 'pop rsi', 'ror dx, 1', 'or dword ptr [rsp + rax*2 - 0x32], 0xbf0b5da2', 'adc dx, 0xee9e', 'push rax', 'ror eax, 0x70', 'xor bp, dx', 'cwde', 'sar r10w, 0xe4', 'lea rdx, [rsp + rdx + 0x10]', 'mov rcx, qword ptr [rax + rdx]', 'jns 0x7ffb72bd5c92']

bytes: ror dx, 1: 66d1ca
mov qword ptr [rsp + rdi - 0x4000], 0x6f0ac19b: 48c7843c00c0ffff9bc10a6f
sub dx, 0xc9ba: 6681eabac9
push r10: 4152
or edi, 0x7da86d19: 81cf196da87d
pop rsi: 5e
ror dx, 1: 66d1ca
or dword ptr [rsp + rax*2 - 0x32], 0xbf0b5da2: 814c44cea25d0bbf
adc dx, 0xee9e: 6681d29eee
push rax: 50
ror eax, 0x70: c1c870
xor bp, dx: 6633ea
cwde: 98
sar r10w, 0xe4: 6641c1fae4
lea rdx, [rsp + rdx + 0x10]: 488d541410
mov rcx, qword ptr [rax + rdx]: 488b0c10
jns 0x7ffb72bd5c92: 0f896abb1500

bytecode len: 146 -   66d1ca48c7843c00c0ffff9bc10a6f6681eabac9415281cf196da87d5e66d1ca814c44cea25d0bbf6681d29eee50c1c8706633ea986641c1fae4488d541410488b0c100f896abb1500

block IDs [duplicates]: [91]
['mov esi, 0xd6b5ba3c', 'rol si, 0x4a', 'mov rdi, qword ptr [rbx]', 'sal esi, 0xa7', 'mov r10d, 0x2b2aa382', 'mov rdx, qword ptr [rdi + rsi - 0x5af97400]', 'movsx eax, r10b', 'sub r10d, esi', 'sal r10b, 0x27', 'mov qword ptr [rbx + rsi - 0x5af97400], rdx', 'call 0x7ffb72caac55']

bytes: mov esi, 0xd6b5ba3c: be3cbab5d6
rol si, 0x4a: 66c1c64a
mov rdi, qword ptr [rbx]: 488b3c23
sal esi, 0xa7: c1f6a7
mov r10d, 0x2b2aa382: 41ba82a32a2b
mov rdx, qword ptr [rdi + rsi - 0x5af97400]: 488b9437008c06a5
movsx eax, r10b: 410fbec2
sub r10d, esi: 442bd6
sal r10b, 0x27: 41c0f227
mov qword ptr [rbx + rsi - 0x5af97400], rdx: 48899433008c06a5
call 0x7ffb72caac55: e8abbb3d00

bytecode len: 108 -   be3cbab5d666c1c64a488b3c23c1f6a741ba82a32a2b488b9437008c06a5410fbec2442bd641c0f22748899433008c06a5e8abbb3d00

block IDs [duplicates]: [92]
['xor r8b, bpl', 'mov qword ptr [rsp + rdi*2 - 0x40000a], -0x54d64de5', 'sub dword ptr [rsp + rdi*2 - 0x400003], esi', 'neg r8b', 'lea r10, [rdi + rax*2 + 0x4f36e825]', 'not byte ptr [rsp + rdi*2 - 0x400003]', 'ror byte ptr [rsp + rdi - 0x1ffffd], 0xe2', 'adc r8b, 0x33', 'and word ptr [rsp + rdi*4 - 0x800008], r10w', 'adc r10w, word ptr [rsp + rdi - 0x1ffffe]', 'neg r8b', 'xor r8b, al', 'xor bpl, r8b', 'cdqe', 'lea r8, [rsp + r8 + 0x10]', 'call 0x7ffb72dde1b3']

bytes: xor r8b, bpl: 4432c5
mov qword ptr [rsp + rdi*2 - 0x40000a], -0x54d64de5: 48c7847cf6ffbfff1bb229ab
sub dword ptr [rsp + rdi*2 - 0x400003], esi: 29b47cfdffbfff
neg r8b: 41f6d8
lea r10, [rdi + rax*2 + 0x4f36e825]: 4c8d944725e8364f
not byte ptr [rsp + rdi*2 - 0x400003]: f6947cfdffbfff
ror byte ptr [rsp + rdi - 0x1ffffd], 0xe2: c08c3c0300e0ffe2
adc r8b, 0x33: 4180d033
and word ptr [rsp + rdi*4 - 0x800008], r10w: 66442194bcf8ff7fff
adc r10w, word ptr [rsp + rdi - 0x1ffffe]: 664413943c0200e0ff
neg r8b: 41f6d8
xor r8b, al: 4432c0
xor bpl, r8b: 4132e8
cdqe: 4898
lea r8, [rsp + r8 + 0x10]: 4e8d440410
call 0x7ffb72dde1b3: e85a313300

bytecode len: 182 -   4432c548c7847cf6ffbfff1bb229ab29b47cfdffbfff41f6d84c8d944725e8364ff6947cfdffbfffc08c3c0300e0ffe24180d03366442194bcf8ff7fff664413943c0200e0ff41f6d84432c04132e848984e8d440410e85a313300

block IDs [duplicates]: [93]
['dec r8b', 'push r10', 'xor bpl, r8b', 'neg dword ptr [rsp + rcx - 0x6134a22a]', 'pop rdi', 'xadd ax, r10w', 'adc r8, rsp', 'mov rcx, qword ptr [r8 + rcx - 0x6134a22e]', 'push r10', 'cwd', 'mov qword ptr [r10 + rbx - 0x1f], rcx', 'call 0x7ffb72db4744']

bytes: dec r8b: 41fec8
push r10: 4152
xor bpl, r8b: 4132e8
neg dword ptr [rsp + rcx - 0x6134a22a]: f79c0cd65dcb9e
pop rdi: 5f
xadd ax, r10w: 66440fc1d0
adc r8, rsp: 4c13c4
mov rcx, qword ptr [r8 + rcx - 0x6134a22e]: 498b8c08d25dcb9e
push r10: 4152
cwd: 6699
mov qword ptr [r10 + rbx - 0x1f], rcx: 49894c1ae1
call 0x7ffb72db4744: e8b0a94400

bytecode len: 92 -   41fec841524132e8f79c0cd65dcb9e5f66440fc1d04c13c4498b8c08d25dcb9e4152669949894c1ae1e8b0a94400

block IDs [duplicates]: [94]
['mov qword ptr [rbx + r10*2 - 0x40], rax', 'dec byte ptr [rsp + r10*4 - 0x7c]', 'mov esi, dword ptr [r11 + r10*4 - 0x7f]', 'xor esi, ebp', 'mov eax, 0x4c831738', 'xor r10d, 0xb102621e', 'dec esi', 'ror esi, 1', 'cdqe', 'dec esi', 'not cl', 'bswap esi', 'mov qword ptr [rsp + rax - 0x4c831738], rbp', 'or ecx, eax', 'xor dword ptr [rsp + rcx - 0x4c8317ff], esi', 'pop rbp', 'xchg rax, r10', 'and r8, 0xfffffffff195a6b5', 'movsxd rsi, esi', 'add r9, rsi', 'movsx edx, ax', 'movzx edi, byte ptr [r11 + rcx - 0x4c8317fa]', 'dec r8w', 'lea r11, [r11 + rcx - 0x4c8317f9]', 'jne 0x7ffb72bf9868']

bytes: mov qword ptr [rbx + r10*2 - 0x40], rax: 4a894453c0
dec byte ptr [rsp + r10*4 - 0x7c]: 42fe4c9484
mov esi, dword ptr [r11 + r10*4 - 0x7f]: 438b749381
xor esi, ebp: 33f5
mov eax, 0x4c831738: b83817834c
xor r10d, 0xb102621e: 4181f21e6202b1
dec esi: ffce
ror esi, 1: d1ce
cdqe: 4898
dec esi: ffce
not cl: f6d1
bswap esi: 0fce
mov qword ptr [rsp + rax - 0x4c831738], rbp: 4889ac04c8e87cb3
or ecx, eax: 0bc8
xor dword ptr [rsp + rcx - 0x4c8317ff], esi: 31b40c01e87cb3
pop rbp: 5d
xchg rax, r10: 4992
and r8, 0xfffffffff195a6b5: 4981e0b5a695f1
movsxd rsi, esi: 4863f6
add r9, rsi: 4c03ce
movsx edx, ax: 0fbfd0
movzx edi, byte ptr [r11 + rcx - 0x4c8317fa]: 410fb6bc0b06e87cb3
dec r8w: 6641ffc8
lea r11, [r11 + rcx - 0x4c8317f9]: 4d8d9c0b07e87cb3
jne 0x7ffb72bf9868: 0f8564f62200

bytecode len: 208 -   4a894453c042fe4c9484438b74938133f5b83817834c4181f21e6202b1ffced1ce4898ffcef6d10fce4889ac04c8e87cb30bc831b40c01e87cb35d49924981e0b5a695f14863f64c03ce0fbfd0410fb6bc0b06e87cb36641ffc84d8d9c0b07e87cb30f8564f62200

block IDs [duplicates]: [95]
['mov qword ptr [rsp + rsi], 0x73ab5b2', 'neg eax', 'lea eax, [rax + rsi*2 - 0x3f027520]', 'and di, word ptr [rsp + rsi + 5]', 'lea r10, [rcx*4 + 0x7b33f5ab]', 'adc cx, dx', 'mov qword ptr [rsp + rsi], rbp', 'jl 0x7ffb72d12ae1']

bytes: mov qword ptr [rsp + rsi], 0x73ab5b2: 48c70434b2b53a07
neg eax: f7d8
lea eax, [rax + rsi*2 - 0x3f027520]: 8d8470e08afdc0
and di, word ptr [rsp + rsi + 5]: 66237c3405
lea r10, [rcx*4 + 0x7b33f5ab]: 4c8d148dabf5337b
adc cx, dx: 6613ca
mov qword ptr [rsp + rsi], rbp: 48892c34
jl 0x7ffb72d12ae1: 0f8cf3354500

bytecode len: 86 -   48c70434b2b53a07f7d88d8470e08afdc066237c34054c8d148dabf5337b6613ca48892c340f8cf3354500

block IDs [duplicates]: [509, 509]
['mov rax, qword ptr [rbx]', 'mov r8d, 0xef2a0e08', 'movzx r10d, r8w', 'mov rdi, qword ptr [rbx + r10 - 0xe00]', 'and r8, 0xffffffff99bbb5be', 'seto r8b', 'movsx edx, r8w', 'adc rax, rdi', 'mov rsi, rax', 'mov ecx, r8d', 'ror rdx, cl', 'mov r10d, ecx', 'lea r8d, [rsi + r8 + 0x44e49b2e]', 'ror r8d, 1', 'sub al, 0x28', 'adc r10w, si', 'or eax, eax', 'not r8d', 'jns 0x7ffb729361b0']

bytes: mov rax, qword ptr [rbx]: 488b03
mov r8d, 0xef2a0e08: 41b8080e2aef
movzx r10d, r8w: 450fb7d0
mov rdi, qword ptr [rbx + r10 - 0xe00]: 4a8bbc1300f2ffff
and r8, 0xffffffff99bbb5be: 4981e0beb5bb99
seto r8b: 410f90c0
movsx edx, r8w: 410fbfd0
adc rax, rdi: 4813c7
mov rsi, rax: 488bf0
mov ecx, r8d: 418bc8
ror rdx, cl: 48d3ca
mov r10d, ecx: 448bd1
lea r8d, [rsi + r8 + 0x44e49b2e]: 468d84062e9be444
ror r8d, 1: 41d1c8
sub al, 0x28: 2c28
adc r10w, si: 664413d6
or eax, eax: 0bc0
not r8d: 41f7d0
jns 0x7ffb729361b0: 0f897c340600

bytecode len: 158 -   488b0341b8080e2aef450fb7d04a8bbc1300f2ffff4981e0beb5bb99410f90c0410fbfd04813c7488bf0418bc848d3ca448bd1468d84062e9be44441d1c82c28664413d60bc041f7d00f897c340600

block IDs [duplicates]: [98]
['xor edx, ebp', 'neg edx', 'not qword ptr [rsp + r8*4 - 0x80f00]', 'xor r8b, 0x37', 'lea edx, [rdx + rdi*2 - 0x310c896c]', 'bswap edx', 'ror edx, 2', 'bswap r8', 'lea rcx, [rdi*2 + 0x729e9c18]', 'lea edx, [rdx + rdi*4 - 0x35d193b3]', 'sal word ptr [rsp + rdi - 0x469afb8a], 0xab', 'mov qword ptr [rsp + rdi - 0x469afb8f], rbp', 'xor dword ptr [rsp + rdi - 0x469afb8f], edx', 'mov esi, 0x50a7d0bb', 'inc dil', 'xor rdi, 0xffffffffee22e83e', 'pop rbp', 'sal r10w, 0x83', 'setnp sil', 'movsxd rdx, edx', 'adc r9, rdx', 'lea rax, [rdi + rbx + 0x5747ec5a]', 'push rcx', 'mov r10, rax', 'mov rdi, qword ptr ss:[r10 + rsi - 0x50a7d000]', 'lea rdx, [r8*2 - 0x10c2d2d7]', 'and dword ptr [rsp + rsi - 0x50a7cfff], edx', 'mov qword ptr [rsi + rbx - 0x50a7d000], rdi', 'mov qword ptr [rsp + rsi - 0x50a7d000], r9', 'ret']

bytes: xor edx, ebp: 33d5
neg edx: f7da
not qword ptr [rsp + r8*4 - 0x80f00]: 4af7948400f1f7ff
xor r8b, 0x37: 4180f037
lea edx, [rdx + rdi*2 - 0x310c896c]: 8d947a9476f3ce
bswap edx: 0fca
ror edx, 2: c1ca02
bswap r8: 490fc8
lea rcx, [rdi*2 + 0x729e9c18]: 488d0c7d189c9e72
lea edx, [rdx + rdi*4 - 0x35d193b3]: 8d94ba4d6c2eca
sal word ptr [rsp + rdi - 0x469afb8a], 0xab: 66c1b43c760465b9ab
mov qword ptr [rsp + rdi - 0x469afb8f], rbp: 4889ac3c710465b9
xor dword ptr [rsp + rdi - 0x469afb8f], edx: 31943c710465b9
mov esi, 0x50a7d0bb: bebbd0a750
inc dil: 40fec7
xor rdi, 0xffffffffee22e83e: 4881f73ee822ee
pop rbp: 5d
sal r10w, 0x83: 6641c1f283
setnp sil: 400f9bc6
movsxd rdx, edx: 4863d2
adc r9, rdx: 4c13ca
lea rax, [rdi + rbx + 0x5747ec5a]: 488d841f5aec4757
push rcx: 51
mov r10, rax: 4c8bd0
mov rdi, qword ptr ss:[r10 + rsi - 0x50a7d000]: 36498bbc32003058af
lea rdx, [r8*2 - 0x10c2d2d7]: 4a8d1445292d3def
and dword ptr [rsp + rsi - 0x50a7cfff], edx: 219434013058af
mov qword ptr [rsi + rbx - 0x50a7d000], rdi: 4889bc1e003058af
mov qword ptr [rsp + rsi - 0x50a7d000], r9: 4c898c34003058af
ret: c3

bytecode len: 308 -   33d5f7da4af7948400f1f7ff4180f0378d947a9476f3ce0fcac1ca02490fc8488d0c7d189c9e728d94ba4d6c2eca66c1b43c760465b9ab4889ac3c710465b931943c710465b9bebbd0a75040fec74881f73ee822ee5d6641c1f283400f9bc64863d24c13ca488d841f5aec4757514c8bd036498bbc32003058af4a8d1445292d3def219434013058af4889bc1e003058af4c898c34003058afc3

block IDs [duplicates]: [99]
['mov r10d, 0x40b8f9a2', 'mov rdi, qword ptr [rbx + r10 - 0x40b8f9a2]', 'lea rdx, [r10*4 - 0x79dabbd0]', 'or r10, 0xffffffffa523a11f', 'movzx ecx, byte ptr [r11 + r10*4 + 0x69101904]', 'not r10', 'xor cl, bpl', 'ror cl, 1', 'ror edx, 0x33', 'mov r8d, r10d', 'movzx eax, r8w', 'neg cl', 'bswap rax', 'add r10d, 0xe298ffa4', 'xor cl, 0x28', 'lea r8, [r8 + rdx*2 + 0x42278f03]', 'or dx, 0x308b', 'jge 0x7ffb72d56de2']

bytes: mov r10d, 0x40b8f9a2: 41baa2f9b840
mov rdi, qword ptr [rbx + r10 - 0x40b8f9a2]: 4a8bbc135e0647bf
lea rdx, [r10*4 - 0x79dabbd0]: 4a8d149530442586
or r10, 0xffffffffa523a11f: 4981ca1fa123a5
movzx ecx, byte ptr [r11 + r10*4 + 0x69101904]: 430fb68c9304191069
not r10: 49f7d2
xor cl, bpl: 4032cd
ror cl, 1: d0c9
ror edx, 0x33: c1ca33
mov r8d, r10d: 458bc2
movzx eax, r8w: 410fb7c0
neg cl: f6d9
bswap rax: 480fc8
add r10d, 0xe298ffa4: 4181c2a4ff98e2
xor cl, 0x28: 80f128
lea r8, [r8 + rdx*2 + 0x42278f03]: 4d8d8450038f2742
or dx, 0x308b: 6681ca8b30
jge 0x7ffb72d56de2: 0f8d71f33900

bytecode len: 180 -   41baa2f9b8404a8bbc135e0647bf4a8d1495304425864981ca1fa123a5430fb68c930419106949f7d24032cdd0c9c1ca33458bc2410fb7c0f6d9480fc84181c2a4ff98e280f1284d8d8450038f27426681ca8b300f8d71f33900

block IDs [duplicates]: [100]
['bswap r10d', 'cdqe', 'btc si, ax', 'not r10d', 'btr dx, 0x85', 'neg r10d', 'btc rdx, 0x3c', 'btc rdx, rsi', 'push rbp', 'rol dx, 0xc7', 'xor dword ptr [rsp + rax], r10d', 'rol dl, 0xc7', 'and rsi, 0xffffffffeb87a49f', 'sal al, 0x86', 'pop rbp', 'movsxd r10, r10d', 'bswap rsi', 'jp 0x7ffb72e71c68']

bytes: bswap r10d: 410fca
cdqe: 4898
btc si, ax: 660fbbc6
not r10d: 41f7d2
btr dx, 0x85: 660fbaf285
neg r10d: 41f7da
btc rdx, 0x3c: 480fbafa3c
btc rdx, rsi: 480fbbf2
push rbp: 55
rol dx, 0xc7: 66c1c2c7
xor dword ptr [rsp + rax], r10d: 44311404
rol dl, 0xc7: c0c2c7
and rsi, 0xffffffffeb87a49f: 4881e69fa487eb
sal al, 0x86: c0f086
pop rbp: 5d
movsxd r10, r10d: 4d63d2
bswap rsi: 480fce
jp 0x7ffb72e71c68: 0f8a8cb42f00

bytecode len: 128 -   410fca4898660fbbc641f7d2660fbaf28541f7da480fbafa3c480fbbf25566c1c2c744311404c0c2c74881e69fa487ebc0f0865d4d63d2480fce0f8a8cb42f00

block IDs [duplicates]: [101]
['push rbp', 'or cx, di', 'xor dword ptr [rsp + rdi - 0x32bdfaf1], edx', 'ror cx, 0x26', 'pop rbp', 'movsxd rdx, edx', 'lea rdi, [r10 + rdi*2 - 0xae16671]', 'neg r10d', 'add r9, rdx', 'mov rdx, qword ptr [rbx + rcx - 0x32bdffff]', 'xchg r8d, ecx', 'mov cx, word ptr [rdx + r8*2 - 0x657bfffe]', 'mov di, cx', 'movsx esi, r10b', 'sar rsi, 0x8b', 'movsx ecx, r8w', 'mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]', 'add di, r8w', 'movzx r8d, r10w', 'push r10', 'mov word ptr [rsi + rbx - 0x1ffff7], di', 'movsx edi, r10w', 'lea rbx, [rbx + rsi - 0x1ffff7]', 'mov qword ptr [rsp + rsi - 0x1fffff], r9', 'ret']

bytes: push rbp: 55
or cx, di: 660bcf
xor dword ptr [rsp + rdi - 0x32bdfaf1], edx: 31943c0f0542cd
ror cx, 0x26: 66c1c926
pop rbp: 5d
movsxd rdx, edx: 4863d2
lea rdi, [r10 + rdi*2 - 0xae16671]: 498dbc7a8f991ef5
neg r10d: 41f7da
add r9, rdx: 4c03ca
mov rdx, qword ptr [rbx + rcx - 0x32bdffff]: 488b940b010042cd
xchg r8d, ecx: 4187c8
mov cx, word ptr [rdx + r8*2 - 0x657bfffe]: 66428b8c420200849a
mov di, cx: 668bf9
movsx esi, r10b: 410fbef2
sar rsi, 0x8b: 48c1fe8b
movsx ecx, r8w: 410fbfc8
mov r8w, word ptr [rbx + r8*2 - 0x657bfff6]: 66468b84430a00849a
add di, r8w: 664103f8
movzx r8d, r10w: 450fb7c2
push r10: 4152
mov word ptr [rsi + rbx - 0x1ffff7], di: 6689bc1e0900e0ff
movsx edi, r10w: 410fbffa
lea rbx, [rbx + rsi - 0x1ffff7]: 488d9c330900e0ff
mov qword ptr [rsp + rsi - 0x1fffff], r9: 4c898c340100e0ff
ret: c3

bytecode len: 232 -   55660bcf31943c0f0542cd66c1c9265d4863d2498dbc7a8f991ef541f7da4c03ca488b940b010042cd4187c866428b8c420200849a668bf9410fbef248c1fe8b410fbfc866468b84430a00849a664103f8450fb7c241526689bc1e0900e0ff410fbffa488d9c330900e0ff4c898c340100e0ffc3

block IDs [duplicates]: [102]
['mov qword ptr [rsp], 0x56abfb2c', 'rol r8b, 1', 'call 0x7ffb72972dfd']

bytes: mov qword ptr [rsp], 0x56abfb2c: 48c74424002cfbab56
rol r8b, 1: 41d0c0
call 0x7ffb72972dfd: e8460bddff

bytecode len: 34 -   48c74424002cfbab5641d0c0e8460bddff

block IDs [duplicates]: [103]
['mov eax, dword ptr [rsp + 0xb]', 'push rax', 'sub r8b, 0xa8', 'not r8b', 'dec r8b', 'movsx esi, al', 'mov qword ptr [rsp + rax - 0x4e], rsi', 'dec esi', 'xor bpl, r8b', 'pop rax', 'lea rcx, [rax + rax*2 - 0x6dd556e7]', 'lea r8, [rsp + r8 + 0x10]', 'mov rdi, qword ptr [rax + r8 - 0x56]', 'mov qword ptr [rbx + rax - 0x5e], rdi', 'pop rax', 'mov r8d, dword ptr [r11 + rax - 0x55]', 'lea r10, [rsi*4 + 0x1629549e]', 'lea r11, [rax + r11 - 0x51]', 'xor r8d, ebp', 'inc byte ptr [rsp + rax*8 - 0x2ab]', 'shl rcx, 0x49', 'sal si, 0x6d', 'dec r8d', 'ror r8d, 1', 'dec r8d', 'cdq', 'bswap r8d', 'mov qword ptr [rsp + rax - 0x56], rbp', 'or eax, edx', 'cdqe', 'xor dword ptr [rsp + rax*2 - 0xac], r8d', 'pop rbp', 'movsx edi, r10w', 'push rdx', 'not rdi', 'movsxd r8, r8d', 'push rax', 'shl byte ptr [rsp + rax - 0x56], 0xa4', 'add r9, r8', 'xchg byte ptr [rsp + rax - 0x48], dl', 'call 0x7ffb72d5ee77']

bytes: mov eax, dword ptr [rsp + 0xb]: 8b44240b
push rax: 50
sub r8b, 0xa8: 4180e8a8
not r8b: 41f6d0
dec r8b: 41fec8
movsx esi, al: 0fbef0
mov qword ptr [rsp + rax - 0x4e], rsi: 48897404b2
dec esi: ffce
xor bpl, r8b: 4132e8
pop rax: 58
lea rcx, [rax + rax*2 - 0x6dd556e7]: 488d8c4019a92a92
lea r8, [rsp + r8 + 0x10]: 4e8d440410
mov rdi, qword ptr [rax + r8 - 0x56]: 4a8b7c00aa
mov qword ptr [rbx + rax - 0x5e], rdi: 48897c03a2
pop rax: 58
mov r8d, dword ptr [r11 + rax - 0x55]: 458b4403ab
lea r10, [rsi*4 + 0x1629549e]: 4c8d14b59e542916
lea r11, [rax + r11 - 0x51]: 4e8d5c18af
xor r8d, ebp: 4433c5
inc byte ptr [rsp + rax*8 - 0x2ab]: fe84c455fdffff
shl rcx, 0x49: 48c1e149
sal si, 0x6d: 66c1f66d
dec r8d: 41ffc8
ror r8d, 1: 41d1c8
dec r8d: 41ffc8
cdq: 99
bswap r8d: 410fc8
mov qword ptr [rsp + rax - 0x56], rbp: 48896c04aa
or eax, edx: 0bc2
cdqe: 4898
xor dword ptr [rsp + rax*2 - 0xac], r8d: 4431844454ffffff
pop rbp: 5d
movsx edi, r10w: 410fbffa
push rdx: 52
not rdi: 48f7d7
movsxd r8, r8d: 4d63c0
push rax: 50
shl byte ptr [rsp + rax - 0x56], 0xa4: c06404aaa4
add r9, r8: 4d03c8
xchg byte ptr [rsp + rax - 0x48], dl: 865404b8
call 0x7ffb72d5ee77: e8d4bf3e00

bytecode len: 298 -   8b44240b504180e8a841f6d041fec80fbef048897404b2ffce4132e858488d8c4019a92a924e8d4404104a8b7c00aa48897c03a258458b4403ab4c8d14b59e5429164e8d5c18af4433c5fe84c455fdffff48c1e14966c1f66d41ffc841d1c841ffc899410fc848896c04aa0bc248984431844454ffffff5d410fbffa5248f7d74d63c050c06404aaa44d03c8865404b8e8d4bf3e00

block IDs [duplicates]: [104]
['call 0x7ffb72964937']

bytes: call 0x7ffb72964937: e8076af7ff

bytecode len: 10 -   e8076af7ff

block IDs [duplicates]: [105]
['mov rax, qword ptr [rbx]', 'mov qword ptr [rsp], -0x85cb880', 'sal word ptr [rsp + rdx - 0x2213b869], 0x8f', 'lea rbx, [rdx + rbx - 0x2213b866]', 'lea rdi, [r8*2 - 0x1875a862]', 'adc edx, dword ptr [rsp + rdx - 0x2213b86d]', 'mov qword ptr [rsp + rdx - 0x2213b96d], r9', 'ret 0x10']

bytes: mov rax, qword ptr [rbx]: 488b03
mov qword ptr [rsp], -0x85cb880: 48c74424008047a3f7
sal word ptr [rsp + rdx - 0x2213b869], 0x8f: 66c1b4149747ecdd8f
lea rbx, [rdx + rbx - 0x2213b866]: 488d9c1a9a47ecdd
lea rdi, [r8*2 - 0x1875a862]: 4a8d3c459e578ae7
adc edx, dword ptr [rsp + rdx - 0x2213b86d]: 1394149347ecdd
mov qword ptr [rsp + rdx - 0x2213b96d], r9: 4c898c149346ecdd
ret 0x10: c21000

bytecode len: 110 -   488b0348c74424008047a3f766c1b4149747ecdd8f488d9c1a9a47ecdd4a8d3c459e578ae71394149347ecdd4c898c149346ecddc21000

block IDs [duplicates]: [106]
['mov r8d, 0x7894e2a1', 'lea rax, [r8 + r8*8 + 0x60018c3a]', 'mov rcx, qword ptr [rbx + r8 - 0x7894e2a1]', 'mov r8, qword ptr [rbx + r8 - 0x7894e299]', 'movzx esi, ax', 'add rcx, r8', 'mov qword ptr [rbx + rsi - 0x83db], rcx', 'mov esi, dword ptr [rsi + r11 - 0x83e3]', 'mov ecx, dword ptr [r11]', 'mov edx, 0x2c29210a', 'mov edi, edx', 'xor ecx, ebp', 'push rdi', 'neg ecx', 'sar dx, 0xca', 'sbb dword ptr [rsp + rdx*2 - 0x5852000e], edx', 'movsx r8d, dx', 'sbb ecx, 0x859d3727', 'not r8w', 'adc dl, 0x31', 'and word ptr [rsp + r10 + 0xc], r10w', 'mov qword ptr [rsp + r10], rsi', 'neg qword ptr [rsp + r10*2 + 9]', 'xor bpl, dl', 'shl qword ptr [rsp + r10 + 5], 0xbf', 'lea rdx, [rsp + rdx + 0x18]', 'mov byte ptr [rsp + r10*8 + 0xc], sil', 'shr r10d, cl', 'jne 0x7ffb72bc1057']

bytes: mov r8d, 0x7894e2a1: 41b8a1e29478
lea rax, [r8 + r8*8 + 0x60018c3a]: 4b8d84c03a8c0160
mov rcx, qword ptr [rbx + r8 - 0x7894e2a1]: 4a8b8c035f1d6b87
mov r8, qword ptr [rbx + r8 - 0x7894e299]: 4e8b8403671d6b87
movzx esi, ax: 0fb7f0
add rcx, r8: 4903c8
mov qword ptr [rbx + rsi - 0x83db], rcx: 48898c33257cffff
mov esi, dword ptr [rsi + r11 - 0x83e3]: 428bb41e1d7cffff
mov ecx, dword ptr [r11]: 418b0b
mov edx, 0x2c29210a: ba0a21292c
mov edi, edx: 8bfa
xor ecx, ebp: 33cd
push rdi: 57
neg ecx: f7d9
sar dx, 0xca: 66c1faca
sbb dword ptr [rsp + rdx*2 - 0x5852000e], edx: 199454f2ffada7
movsx r8d, dx: 440fbfc2
sbb ecx, 0x859d3727: 81d927379d85
not r8w: 6641f7d0
adc dl, 0x31: 80d231
and word ptr [rsp + r10 + 0xc], r10w: 66462154140c
mov qword ptr [rsp + r10], rsi: 4a893414
neg qword ptr [rsp + r10*2 + 9]: 4af75c5409
xor bpl, dl: 4032ea
shl qword ptr [rsp + r10 + 5], 0xbf: 4ac1641405bf
lea rdx, [rsp + rdx + 0x18]: 488d541418
mov byte ptr [rsp + r10*8 + 0xc], sil: 428874d40c
shr r10d, cl: 41d3ea
jne 0x7ffb72bc1057: 0f85a2af0400

bytecode len: 276 -   41b8a1e294784b8d84c03a8c01604a8b8c035f1d6b874e8b8403671d6b870fb7f04903c848898c33257cffff428bb41e1d7cffff418b0bba0a21292c8bfa33cd57f7d966c1faca199454f2ffada7440fbfc281d927379d856641f7d080d23166462154140c4a8934144af75c54094032ea4ac1641405bf488d541418428874d40c41d3ea0f85a2af0400

block IDs [duplicates]: [107]
['sal rdx, 0xe', 'inc r8d', 'movzx eax, r10w', 'not r8d', 'push rax', 'sub r8d, 0xe9243939', 'btc rax, 0x2e', 'pop rdi', 'not r8d', 'call 0x7ffb72c0360d']

bytes: sal rdx, 0xe: 48c1f20e
inc r8d: 41ffc0
movzx eax, r10w: 410fb7c2
not r8d: 41f7d0
push rax: 50
sub r8d, 0xe9243939: 4181e8393924e9
btc rax, 0x2e: 480fbaf82e
pop rdi: 5f
not r8d: 41f7d0
call 0x7ffb72c0360d: e8ca691600

bytecode len: 72 -   48c1f20e41ffc0410fb7c241f7d0504181e8393924e9480fbaf82e5f41f7d0e8ca691600

block IDs [duplicates]: [108]
['dec dword ptr [rsp + r8 - 0x462c01fa]', 'setne sil', 'lea rcx, [r8 + rcx + 0x30c33446]', 'neg rcx', 'inc rcx', 'ror r8b, 0xa1', 'cmovno ax, word ptr [rsp + r8 - 0x462c01f2]', 'cwde', 'xor rcx, 0xffffffff95af2610', 'neg rcx', 'sal dil, 0xc3', 'sar dx, 0xc1', 'btr rdi, 0x9b', 'xor rbp, rcx', 'mov qword ptr [rbx + rax*4 - 0x410], rcx', 'bts edx, esi', 'mov eax, dword ptr [rax + r11 - 0xf7]', 'sbb r8, -0x76f0d6d3', 'or dword ptr [rsp + 7], r8d', 'xor eax, ebp', 'lea rcx, [rdx*4 + 0x333a9e34]', 'shl dil, 0x87', 'neg eax', 'xor r8w, 0x3dbd', 'setno dil', 'lea eax, [rax + r8 - 0x23818e3e]', 'call 0x7ffb72c53b73']

bytes: dec dword ptr [rsp + r8 - 0x462c01fa]: 42ff8c0406fed3b9
setne sil: 400f95c6
lea rcx, [r8 + rcx + 0x30c33446]: 498d8c084634c330
neg rcx: 48f7d9
inc rcx: 48ffc1
ror r8b, 0xa1: 41c0c8a1
cmovno ax, word ptr [rsp + r8 - 0x462c01f2]: 66420f4184040efed3b9
cwde: 98
xor rcx, 0xffffffff95af2610: 4881f11026af95
neg rcx: 48f7d9
sal dil, 0xc3: 40c0f7c3
sar dx, 0xc1: 66c1fac1
btr rdi, 0x9b: 480fbaf79b
xor rbp, rcx: 4833e9
mov qword ptr [rbx + rax*4 - 0x410], rcx: 48898c83f0fbffff
bts edx, esi: 0fabf2
mov eax, dword ptr [rax + r11 - 0xf7]: 428b841809ffffff
sbb r8, -0x76f0d6d3: 4981d82d290f89
or dword ptr [rsp + 7], r8d: 4409442407
xor eax, ebp: 33c5
lea rcx, [rdx*4 + 0x333a9e34]: 488d0c95349e3a33
shl dil, 0x87: 40c0e787
neg eax: f7d8
xor r8w, 0x3dbd: 664181f0bd3d
setno dil: 400f91c7
lea eax, [rax + r8 - 0x23818e3e]: 428d8400c2717edc
call 0x7ffb72c53b73: e8dd180b00

bytecode len: 274 -   42ff8c0406fed3b9400f95c6498d8c084634c33048f7d948ffc141c0c8a166420f4184040efed3b9984881f11026af9548f7d940c0f7c366c1fac1480fbaf79b4833e948898c83f0fbffff0fabf2428b841809ffffff4981d82d290f89440944240733c5488d0c95349e3a3340c0e787f7d8664181f0bd3d400f91c7428d8400c2717edce8dd180b00

block IDs [duplicates]: [109]
['push r8', 'xor r10, 0xffffffff95af2610', 'dec ax', 'btr si, dx', 'cwd', 'neg r10', 'xor rbp, r10', 'pop rdi', 'mov qword ptr [rbx + rax*8 - 0x380], r10', 'lea rbx, [rbx + rax*4 - 0x1cc]', 'or qword ptr [rsp + rax*4 - 0x19c], rax', 'pop rcx', 'pop rdi', 'pop r10', 'pop rcx', 'jge 0x7ffb72eb83a2']

bytes: push r8: 4150
xor r10, 0xffffffff95af2610: 4981f21026af95
dec ax: 66ffc8
btr si, dx: 660fb3d6
cwd: 6699
neg r10: 49f7da
xor rbp, r10: 4933ea
pop rdi: 5f
mov qword ptr [rbx + rax*8 - 0x380], r10: 4c8994c380fcffff
lea rbx, [rbx + rax*4 - 0x1cc]: 488d9c8334feffff
or qword ptr [rsp + rax*4 - 0x19c], rax: 4809848464feffff
pop rcx: 59
pop rdi: 5f
pop r10: 415a
pop rcx: 59
jge 0x7ffb72eb83a2: 0f8de3ab4d00

bytecode len: 120 -   41504981f21026af9566ffc8660fb3d6669949f7da4933ea5f4c8994c380fcffff488d9c8334feffff4809848464feffff595f415a590f8de3ab4d00

block IDs [duplicates]: [111]
['mov edi, 0xb5077482', 'mov r8, qword ptr [rbx]', 'movsx esi, dil', 'mov rax, qword ptr [rbx + 8]', 'push rdi', 'ror word ptr [rsp + 3], 0xac', 'adc r8, rax', 'movsx eax, dil', 'shl eax, 0xc2', 'mov rcx, r8', 'sal rax, 0x9a', 'mov r10, qword ptr [rbx + 0x10]', 'and rcx, r10', 'lea r8, [rsi + rdi*8 - 0x4bc9cd4a]', 'sal word ptr [rsp + 3], 0xe7', 'not rcx', 'lea rsi, [rdi*8 + 0x733da337]', 'or qword ptr [rsp], 0xffffffffa80c4cbf', 'or word ptr [rsp + 6], r8w', 'mov qword ptr [rbx + 0x10], rcx', 'call 0x7ffb72cab9f8']

bytes: mov edi, 0xb5077482: bf827407b5
mov r8, qword ptr [rbx]: 4c8b0423
movsx esi, dil: 400fbef7
mov rax, qword ptr [rbx + 8]: 488b442308
push rdi: 57
ror word ptr [rsp + 3], 0xac: 66c14c2403ac
adc r8, rax: 4c13c0
movsx eax, dil: 400fbec7
shl eax, 0xc2: c1e0c2
mov rcx, r8: 498bc8
sal rax, 0x9a: 48c1f09a
mov r10, qword ptr [rbx + 0x10]: 4c8b542310
and rcx, r10: 4923ca
lea r8, [rsi + rdi*8 - 0x4bc9cd4a]: 4c8d84feb63236b4
sal word ptr [rsp + 3], 0xe7: 66c1742403e7
not rcx: 48f7d1
lea rsi, [rdi*8 + 0x733da337]: 488d34fd37a33d73
or qword ptr [rsp], 0xffffffffa80c4cbf: 48814c2400bf4c0ca8
or word ptr [rsp + 6], r8w: 664409442406
mov qword ptr [rbx + 0x10], rcx: 48894c2310
call 0x7ffb72cab9f8: e8baf03b00

bytecode len: 200 -   bf827407b54c8b0423400fbef7488b4423085766c14c2403ac4c13c0400fbec7c1e0c2498bc848c1f09a4c8b5423104923ca4c8d84feb63236b466c1742403e748f7d1488d34fd37a33d7348814c2400bf4c0ca866440944240648894c2310e8baf03b00

block IDs [duplicates]: [112]
['xor edi, ebp', 'shl esi, 0x11', 'neg edi', 'lea edi, [rdi + rsi - 0x3264924e]', 'mov qword ptr [rsp + 8], rax', 'lea rdx, [rsi + 0x6c1853be]', 'btr dx, si', 'bswap edi', 'ror edi, 2', 'cdqe', 'lea edi, [rdi + rax*8 - 0x1b65a577]', 'shl word ptr [rsp + rax - 0x1ffffff6], 0xe1', 'mov qword ptr [rsp + rax*4 - 0x7ffffff8], rbp', 'cmovb eax, esi', 'adc rax, rcx', 'xor dword ptr [rsp + 8], edi', 'ror eax, 0x5f', 'mov rbp, qword ptr [rsp + rax*2 - 0x7ffe9ff8]', 'call 0x7ffb72c5ee93']

bytes: xor edi, ebp: 33fd
shl esi, 0x11: c1e611
neg edi: f7df
lea edi, [rdi + rsi - 0x3264924e]: 8dbc37b26d9bcd
mov qword ptr [rsp + 8], rax: 4889442408
lea rdx, [rsi + 0x6c1853be]: 488d96be53186c
btr dx, si: 660fb3f2
bswap edi: 0fcf
ror edi, 2: c1cf02
cdqe: 4898
lea edi, [rdi + rax*8 - 0x1b65a577]: 8dbcc7895a9ae4
shl word ptr [rsp + rax - 0x1ffffff6], 0xe1: 66c1a4040a0000e0e1
mov qword ptr [rsp + rax*4 - 0x7ffffff8], rbp: 4889ac8408000080
cmovb eax, esi: 0f42c6
adc rax, rcx: 4813c1
xor dword ptr [rsp + 8], edi: 317c2408
ror eax, 0x5f: c1c85f
mov rbp, qword ptr [rsp + rax*2 - 0x7ffe9ff8]: 488bac4408600180
call 0x7ffb72c5ee93: e8eb5b0f00

bytecode len: 174 -   33fdc1e611f7df8dbc37b26d9bcd4889442408488d96be53186c660fb3f20fcfc1cf0248988dbcc7895a9ae466c1a4040a0000e0e14889ac84080000800f42c64813c1317c2408c1c85f488bac4408600180e8eb5b0f00

block IDs [duplicates]: [114]
['movzx edx, byte ptr [r11]', 'mov ecx, 0xa636301e', 'xor dl, bpl', 'lea r9, [rcx + rcx*8 - 0x38e81b60]', 'movsx r8d, r9b', 'dec dl', 'sub r9b, 0x2a', 'mov r11d, 0xb2ba3cac', 'rol dl, 1', 'neg dl', 'btr ecx, r11d', 'adc ecx, 0x7a8af914', 'mov esi, r9d', 'not dl', 'call 0x7ffb72d9a9d5']

bytes: movzx edx, byte ptr [r11]: 410fb61423
mov ecx, 0xa636301e: b91e3036a6
xor dl, bpl: 4032d5
lea r9, [rcx + rcx*8 - 0x38e81b60]: 4c8d8cc9a0e417c7
movsx r8d, r9b: 450fbec1
dec dl: feca
sub r9b, 0x2a: 4180e92a
mov r11d, 0xb2ba3cac: 41bbac3cbab2
rol dl, 1: d0c2
neg dl: f6da
btr ecx, r11d: 440fb3d9
adc ecx, 0x7a8af914: 81d114f98a7a
mov esi, r9d: 418bf1
not dl: f6d2
call 0x7ffb72d9a9d5: e857e03b00

bytecode len: 122 -   410fb61423b91e3036a64032d54c8d8cc9a0e417c7450fbec1feca4180e92a41bbac3cbab2d0c2f6da440fb3d981d114f98a7a418bf1f6d2e857e03b00

block IDs [duplicates]: [115]
['neg byte ptr [rsp + rdx + 3]', 'jge 0x7ffb72b88eab']

bytes: neg byte ptr [rsp + rdx + 3]: f65c1403
jge 0x7ffb72b88eab: 0f8d91480800

bytecode len: 20 -   f65c14030f8d91480800

block IDs [duplicates]: [116]
['xor dword ptr [rsp + rdx*2 + 0x18], r9d', 'rol word ptr [rsp + rdx*8 + 0xf], 0xa8', 'mov r10, qword ptr [rsp + rdx + 0x18]', 'movsxd r9, r9d', 'adc dword ptr [rsp + rdx*2 + 0x10], esi', 'adc rbp, r9', 'mov qword ptr [rsp + rdx], rbp', 'ret 0x18']

bytes: xor dword ptr [rsp + rdx*2 + 0x18], r9d: 44314c5418
rol word ptr [rsp + rdx*8 + 0xf], 0xa8: 66c144d40fa8
mov r10, qword ptr [rsp + rdx + 0x18]: 4c8b541418
movsxd r9, r9d: 4d63c9
adc dword ptr [rsp + rdx*2 + 0x10], esi: 11745410
adc rbp, r9: 4913e9
mov qword ptr [rsp + rdx], rbp: 48892c14
ret 0x18: c21800

bytecode len: 66 -   44314c541866c144d40fa84c8b5414184d63c9117454104913e948892c14c21800

block IDs [duplicates]: [117]
['mov esi, 0x7999d01a', 'mov edx, esi', 'mov rcx, qword ptr [rsi + r8 - 0x7999d01a]', 'mov r9b, byte ptr [rbx + rsi - 0x7999d01a]', 'lea r11, [rdx + rsi*8 - 0x1ec425ee]', 'mov edi, edx', 'xor r9b, r10b', 'dec r9b', 'neg r9b', 'xchg rax, rdi', 'xor r9b, 0x9e', 'cdq', 'call 0x7ffb728bd997']

bytes: mov esi, 0x7999d01a: be1ad09979
mov edx, esi: 8bd6
mov rcx, qword ptr [rsi + r8 - 0x7999d01a]: 4a8b8c06e62f6686
mov r9b, byte ptr [rbx + rsi - 0x7999d01a]: 448a8c33e62f6686
lea r11, [rdx + rsi*8 - 0x1ec425ee]: 4c8d9cf212da3be1
mov edi, edx: 8bfa
xor r9b, r10b: 4532ca
dec r9b: 41fec9
neg r9b: 41f6d9
xchg rax, rdi: 4897
xor r9b, 0x9e: 4180f19e
cdq: 99
call 0x7ffb728bd997: e81a1cfdff

bytecode len: 108 -   be1ad099798bd64a8b8c06e62f6686448a8c33e62f66864c8d9cf212da3be18bfa4532ca41fec941f6d948974180f19e99e81a1cfdff

block IDs [duplicates]: [118]
['dec r9b', 'and rdi, 0x1a373c9a', 'ror edi, 0xb5', 'neg r9b', 'push r11', 'add dword ptr [rsp + rsi - 0x7999d016], esi', 'xor r10b, r9b', 'cwd', 'or rax, rdi', 'mov qword ptr [rsp + rdx*2 - 0x1fff6], rdi', 'lea r9, [rsp + r9 + 0x10]', 'adc rax, 0x2831ca3e', 'mov qword ptr [rsi + r9 - 0x7999d01a], rcx', 'mov edx, dword ptr [rbx + rsi - 0x7999d019]', 'bswap rax', 'xor r11d, dword ptr [rsp + rsi - 0x7999d019]', 'xor edx, r10d', 'inc edx', 'lea rsi, [rax*4 - 0x7c7863f7]', 'not edx', 'or dword ptr [rsp + r11 - 0x39838ed6], eax', 'inc dword ptr [rsp + r11*2 - 0x73071da0]', 'ja 0x7ffb72e0837d']

bytes: dec r9b: 41fec9
and rdi, 0x1a373c9a: 4881e79a3c371a
ror edi, 0xb5: c1cfb5
neg r9b: 41f6d9
push r11: 4153
add dword ptr [rsp + rsi - 0x7999d016], esi: 01b434ea2f6686
xor r10b, r9b: 4532d1
cwd: 6699
or rax, rdi: 480bc7
mov qword ptr [rsp + rdx*2 - 0x1fff6], rdi: 4889bc540a00feff
lea r9, [rsp + r9 + 0x10]: 4e8d4c0c10
adc rax, 0x2831ca3e: 4881d03eca3128
mov qword ptr [rsi + r9 - 0x7999d01a], rcx: 4a898c0ee62f6686
mov edx, dword ptr [rbx + rsi - 0x7999d019]: 8b9433e72f6686
bswap rax: 480fc8
xor r11d, dword ptr [rsp + rsi - 0x7999d019]: 44339c34e72f6686
xor edx, r10d: 4133d2
inc edx: ffc2
lea rsi, [rax*4 - 0x7c7863f7]: 488d3485099c8783
not edx: f7d2
or dword ptr [rsp + r11 - 0x39838ed6], eax: 4209841c2a717cc6
inc dword ptr [rsp + r11*2 - 0x73071da0]: 42ff845c60e2f88c
ja 0x7ffb72e0837d: 0f876da95400

bytecode len: 232 -   41fec94881e79a3c371ac1cfb541f6d9415301b434ea2f66864532d16699480bc74889bc540a00feff4e8d4c0c104881d03eca31284a898c0ee62f66868b9433e72f6686480fc844339c34e72f66864133d2ffc2488d3485099c8783f7d24209841c2a717cc642ff845c60e2f88c0f876da95400

block IDs [duplicates]: [119]
['rol r11w, 1', 'shr al, cl', 'adc byte ptr [rsp + 0x1c], 0x1b', 'adc dword ptr [rsp + 0xf], ecx', 'sbb r11w, 0x7c26', 'not r11w', 'or r9, qword ptr [rsp + 2]', 'dec al', 'xor r10w, r11w', 'xor r9, 0xffffffffb9255b97', 'call 0x7ffb72aa787a']

bytes: rol r11w, 1: 6641d1c3
shr al, cl: d2e8
adc byte ptr [rsp + 0x1c], 0x1b: 8054241c1b
adc dword ptr [rsp + 0xf], ecx: 114c240f
sbb r11w, 0x7c26: 664181db267c
not r11w: 6641f7d3
or r9, qword ptr [rsp + 2]: 4c0b4c2402
dec al: fec8
xor r10w, r11w: 664533d3
xor r9, 0xffffffffb9255b97: 4981f1975b25b9
call 0x7ffb72aa787a: e8f89e0d00

bytecode len: 96 -   6641d1c3d2e88054241c1b114c240f664181db267c6641f7d34c0b4c2402fec8664533d34981f1975b25b9e8f89e0d00

block IDs [duplicates]: [120]
['lea r11, [rsp + r11 + 0x28]', 'adc eax, ecx', 'neg r9d', 'xor esi, dword ptr [rsp + r9 - 0x7975e905]', 'mov qword ptr [r11 + rsi - 0x1f1db300], rdi', 'lea r11, [rax + rcx*8 - 0x12756bc5]', 'mov edx, dword ptr [rsp + rsi*2 - 0x3e3b65e4]', 'inc byte ptr [rsp + rsi - 0x1f1db2f5]', 'mov qword ptr [rsp + rsi*4 - 0x7c76cc00], rbp', 'ret 0x20']

bytes: lea r11, [rsp + r11 + 0x28]: 4e8d5c1c28
adc eax, ecx: 13c1
neg r9d: 41f7d9
xor esi, dword ptr [rsp + r9 - 0x7975e905]: 4233b40cfb168a86
mov qword ptr [r11 + rsi - 0x1f1db300], rdi: 4989bc33004de2e0
lea r11, [rax + rcx*8 - 0x12756bc5]: 4c8d9cc83b948aed
mov edx, dword ptr [rsp + rsi*2 - 0x3e3b65e4]: 8b94741c9ac4c1
inc byte ptr [rsp + rsi - 0x1f1db2f5]: fe84340b4de2e0
mov qword ptr [rsp + rsi*4 - 0x7c76cc00], rbp: 4889acb400348983
ret 0x20: c22000

bytecode len: 118 -   4e8d5c1c2813c141f7d94233b40cfb168a864989bc33004de2e04c8d9cc83b948aed8b94741c9ac4c1fe84340b4de2e04889acb400348983c22000

block IDs [duplicates]: [121]
['lea rdx, [rsp + rdx + 0x18]', 'mov qword ptr [rsp + 8], rcx', 'mov qword ptr [rdx], rdi', 'mov r9d, dword ptr [rbx + 1]', 'mov esi, ecx', 'cbw', 'bts rcx, 0xa2', 'xor r9d, r10d', 'mov qword ptr [rsp + 8], rax', 'inc r9d', 'cdqe', 'sal al, 0xc3', 'push rax', 'ror r9d, 2', 'or byte ptr [rsp + rax + 0x78260106], 0x27', 'movsx edi, sil', 'dec r9d', 'rol r9d, 3', 'cdqe', 'and ecx, eax', 'mov qword ptr [rsp + rax + 0x78260100], r10', 'sub di, ax', 'push rcx', 'xor dword ptr [rsp + rax + 0x78260108], r9d', 'call 0x7ffb72d6c847']

bytes: lea rdx, [rsp + rdx + 0x18]: 488d541418
mov qword ptr [rsp + 8], rcx: 48894c2408
mov qword ptr [rdx], rdi: 48893c22
mov r9d, dword ptr [rbx + 1]: 448b4c2301
mov esi, ecx: 8bf1
cbw: 6698
bts rcx, 0xa2: 480fbae9a2
xor r9d, r10d: 4533ca
mov qword ptr [rsp + 8], rax: 4889442408
inc r9d: 41ffc1
cdqe: 4898
sal al, 0xc3: c0f0c3
push rax: 50
ror r9d, 2: 41c1c902
or byte ptr [rsp + rax + 0x78260106], 0x27: 808c040601267827
movsx edi, sil: 400fbefe
dec r9d: 41ffc9
rol r9d, 3: 41c1c103
cdqe: 4898
and ecx, eax: 23c8
mov qword ptr [rsp + rax + 0x78260100], r10: 4c89940400012678
sub di, ax: 662bf8
push rcx: 51
xor dword ptr [rsp + rax + 0x78260108], r9d: 44318c0408012678
call 0x7ffb72d6c847: e8ab9c2c00

bytecode len: 194 -   488d54141848894c240848893c22448b4c23018bf16698480fbae9a24533ca488944240841ffc14898c0f0c35041c1c902808c040601267827400fbefe41ffc941c1c103489823c84c89940400012678662bf85144318c0408012678e8ab9c2c00

block IDs [duplicates]: [122]
['btc eax, 0x85', 'lea rax, [rsp + rax - 0x7d379f42]', 'jae 0x7ffb728bbe12']

bytes: btc eax, 0x85: 0fbaf885
lea rax, [rsp + rax - 0x7d379f42]: 488d8404be60c882
jae 0x7ffb728bbe12: 0f839f62dbff

bytecode len: 36 -   0fbaf885488d8404be60c8820f839f62dbff

block IDs [duplicates]: [123]
['call 0x7ffb72c9da56']

bytes: call 0x7ffb72c9da56: e8dcab1100

bytecode len: 10 -   e8dcab1100

block IDs [duplicates]: [124]
['jmp rbp']

bytes: jmp rbp: ffe5

bytecode len: 4 -   ffe5

block IDs [duplicates]: [125]
['mov eax, 0xbc205814', 'dec cx', 'mov rcx, qword ptr [r8]', 'mov rdi, qword ptr [rcx]', 'jne 0x7ffb72c476f5']

bytes: mov eax, 0xbc205814: b8145820bc
dec cx: 66ffc9
mov rcx, qword ptr [r8]: 498b0c20
mov rdi, qword ptr [rcx]: 488b3c21
jne 0x7ffb72c476f5: 0f85f6321900

bytecode len: 44 -   b8145820bc66ffc9498b0c20488b3c210f85f6321900

block IDs [duplicates]: [126]
['cqo', 'xor r9, qword ptr [rsp + rcx - 0x5814]', 'not r11d', 'mov esi, dword ptr [rsp + rdx + 4]', 'jns 0x7ffb72d84dfb']

bytes: cqo: 4899
xor r9, qword ptr [rsp + rcx - 0x5814]: 4c338c0ceca7ffff
not r11d: 41f7d3
mov esi, dword ptr [rsp + rdx + 4]: 8b741404
jns 0x7ffb72d84dfb: 0f8957e03500

bytecode len: 46 -   48994c338c0ceca7ffff41f7d38b7414040f8957e03500

block IDs [duplicates]: [127]
['call 0x7ffb72cc9702']

bytes: call 0x7ffb72cc9702: e865722c00

bytecode len: 10 -   e865722c00

block IDs [duplicates]: [128]
['movsx edx, di', 'mov r11d, edx', 'movzx edi, byte ptr [rdi + rbx - 0x78a2de1c]', 'sub r11d, 0xc50b6183', 'lea r9, [r11*4 - 0x5d40cdd8]', 'not edx', 'xor dil, r10b', 'btc r9, rdx', 'not dx', 'sbb dil, 4', 'rol dl, 0xa1', 'push r9', 'xor dil, r9b', 'push r9', 'neg dil', 'add qword ptr [rsp + rdx - 0xde33], r9', 'and word ptr [rsp + rdx - 0xde35], r11w', 'lea rcx, [r11*8 + 0x109e031]', 'inc dil', 'add qword ptr [rsp + rdx*4 - 0x378d8], 0x13a995a7', 'and r11w, 0x312', 'sub dx, 0x6b5', 'xor r10b, dil', 'lea rdi, [rsp + rdi + 0x10]', 'btc r9w, r11w', 'jae 0x7ffb72ca928c']

bytes: movsx edx, di: 0fbfd7
mov r11d, edx: 448bda
movzx edi, byte ptr [rdi + rbx - 0x78a2de1c]: 0fb6bc1fe4215d87
sub r11d, 0xc50b6183: 4181eb83610bc5
lea r9, [r11*4 - 0x5d40cdd8]: 4e8d0c9d2832bfa2
not edx: f7d2
xor dil, r10b: 4132fa
btc r9, rdx: 490fbbd1
not dx: 66f7d2
sbb dil, 4: 4080df04
rol dl, 0xa1: c0c2a1
push r9: 4151
xor dil, r9b: 4132f9
push r9: 4151
neg dil: 40f6df
add qword ptr [rsp + rdx - 0xde33], r9: 4c018c14cd21ffff
and word ptr [rsp + rdx - 0xde35], r11w: 6644219c14cb21ffff
lea rcx, [r11*8 + 0x109e031]: 4a8d0cdd31e00901
inc dil: 40fec7
add qword ptr [rsp + rdx*4 - 0x378d8], 0x13a995a7: 488184942887fcffa795a913
and r11w, 0x312: 664181e31203
sub dx, 0x6b5: 6681eab506
xor r10b, dil: 4432d7
lea rdi, [rsp + rdi + 0x10]: 488d7c3c10
btc r9w, r11w: 66450fbbd9
jae 0x7ffb72ca928c: 0f83dd422c00

bytecode len: 256 -   0fbfd7448bda0fb6bc1fe4215d874181eb83610bc54e8d0c9d2832bfa2f7d24132fa490fbbd166f7d24080df04c0c2a141514132f9415140f6df4c018c14cd21ffff6644219c14cb21ffff4a8d0cdd31e0090140fec7488184942887fcffa795a913664181e312036681eab5064432d7488d7c3c1066450fbbd90f83dd422c00

block IDs [duplicates]: [129]
['mov dword ptr [r8 + rcx*2 - 0x82], eax', 'mov eax, 0xc48b9f19', 'lea r9, [r8 + rcx*2 - 0x82]', 'cbw', 'mov rdx, r9', 'movsx edi, word ptr [rsp + rcx*2 - 0x7d]', 'movzx r9d, ax', 'dec dword ptr [rsp + rcx*4 - 0x103]', 'mov eax, dword ptr ss:[rdx + rcx - 0x43]', 'mov qword ptr [rsp + rcx - 0x43], 0x7c968f06', 'jge 0x7ffb72e5eb9e']

bytes: mov dword ptr [r8 + rcx*2 - 0x82], eax: 418984487effffff
mov eax, 0xc48b9f19: b8199f8bc4
lea r9, [r8 + rcx*2 - 0x82]: 4d8d8c487effffff
cbw: 6698
mov rdx, r9: 498bd1
movsx edi, word ptr [rsp + rcx*2 - 0x7d]: 0fbf7c4c83
movzx r9d, ax: 440fb7c8
dec dword ptr [rsp + rcx*4 - 0x103]: ff8c8cfdfeffff
mov eax, dword ptr ss:[rdx + rcx - 0x43]: 368b440abd
mov qword ptr [rsp + rcx - 0x43], 0x7c968f06: 48c7440cbd068f967c
jge 0x7ffb72e5eb9e: 0f8de1025700

bytecode len: 124 -   418984487effffffb8199f8bc44d8d8c487effffff6698498bd10fbf7c4c83440fb7c8ff8c8cfdfeffff368b440abd48c7440cbd068f967c0f8de1025700

block IDs [duplicates]: [130]
['mov r9d, dword ptr [r8]', 'mov esi, 0x53341499', 'movzx edx, si', 'push rsi', 'mov eax, dword ptr [r8 + rsi - 0x53341495]', 'not r9d', 'ror rdx, 0xbf', 'not eax', 'mov r11d, esi', 'lea rcx, [r11 + r11*4 + 0x5e14ada6]', 'or r9d, eax', 'mov dword ptr [r8 + rdx*4 - 0xa4c4], r9d', 'call 0x7ffb72dafb37']

bytes: mov r9d, dword ptr [r8]: 458b08
mov esi, 0x53341499: be99143453
movzx edx, si: 0fb7d6
push rsi: 56
mov eax, dword ptr [r8 + rsi - 0x53341495]: 418b84306bebcbac
not r9d: 41f7d1
ror rdx, 0xbf: 48c1cabf
not eax: f7d0
mov r11d, esi: 448bde
lea rcx, [r11 + r11*4 + 0x5e14ada6]: 4b8d8c9ba6ad145e
or r9d, eax: 440bc8
mov dword ptr [r8 + rdx*4 - 0xa4c4], r9d: 45898c903c5bffff
call 0x7ffb72dafb37: e8bf474f00

bytecode len: 112 -   458b08be991434530fb7d656418b84306bebcbac41f7d148c1cabff7d0448bde4b8d8c9ba6ad145e440bc845898c903c5bffffe8bf474f00

block IDs [duplicates]: [131]
['xor eax, r10d', 'movzx esi, dl', 'ror rsi, cl', 'mov edi, r9d', 'sbb eax, 0xfc81ef17', 'neg eax', 'dec eax', 'btc rdi, rsi', 'btr rcx, rsi', 'neg eax', 'call 0x7ffb72dff7c1']

bytes: xor eax, r10d: 4133c2
movzx esi, dl: 0fb6f2
ror rsi, cl: 48d3ce
mov edi, r9d: 418bf9
sbb eax, 0xfc81ef17: 1d17ef81fc
neg eax: f7d8
dec eax: ffc8
btc rdi, rsi: 480fbbf7
btr rcx, rsi: 480fb3f1
neg eax: f7d8
call 0x7ffb72dff7c1: e8ed823c00

bytecode len: 72 -   4133c20fb6f248d3ce418bf91d17ef81fcf7d8ffc8480fbbf7480fb3f1f7d8e8ed823c00

block IDs [duplicates]: [132]
['mov esi, 0xda2ca506', 'not sil', 'mov dil, byte ptr [rbx + rdi - 6]', 'movsx r9d, si', 'xor dil, r10b', 'ror dil, 1', 'movzx r11d, si', 'not dil', 'xchg rsi, r11', 'mov eax, esi', 'bts si, 0x15', 'dec dil', 'sar r11d, 0xd4', 'and sil, r11b', 'xor dil, 0x30', 'sar r11, 0x5f', 'xor r10b, dil', 'bswap esi', 'add rdi, rsp', 'mov ecx, 0x578ee096', 'mov edx, dword ptr [rdi + r11*2 - 2]', 'rol r9, cl', 'shl sil, 0x24', 'sal r9b, 0x26', 'mov dword ptr [r8 + r11*2 - 6], edx', 'mov edi, dword ptr [rbx + r11*2 - 1]', 'btc r11w, 0x22', 'lea rdx, [rsi + r9*2 + 0x5a1bca8d]', 'xor edi, r10d', 'ror edi, 3', 'lea rcx, [rdx*2 + 0xf2bd0ab]', 'shr rax, 0xcf', 'adc edi, eax', 'neg edi', 'xor edi, 0x843f2b8e', 'call 0x7ffb72c8425d']

bytes: mov esi, 0xda2ca506: be06a52cda
not sil: 40f6d6
mov dil, byte ptr [rbx + rdi - 6]: 408a7c3bfa
movsx r9d, si: 440fbfce
xor dil, r10b: 4132fa
ror dil, 1: 40d0cf
movzx r11d, si: 440fb7de
not dil: 40f6d7
xchg rsi, r11: 4c87de
mov eax, esi: 8bc6
bts si, 0x15: 660fbaee15
dec dil: 40fecf
sar r11d, 0xd4: 41c1fbd4
and sil, r11b: 4122f3
xor dil, 0x30: 4080f730
sar r11, 0x5f: 49c1fb5f
xor r10b, dil: 4432d7
bswap esi: 0fce
add rdi, rsp: 4803fc
mov ecx, 0x578ee096: b996e08e57
mov edx, dword ptr [rdi + r11*2 - 2]: 428b545ffe
rol r9, cl: 49d3c1
shl sil, 0x24: 40c0e624
sal r9b, 0x26: 41c0f126
mov dword ptr [r8 + r11*2 - 6], edx: 43895458fa
mov edi, dword ptr [rbx + r11*2 - 1]: 428b7c5bff
btc r11w, 0x22: 66410fbafb22
lea rdx, [rsi + r9*2 + 0x5a1bca8d]: 4a8d944e8dca1b5a
xor edi, r10d: 4133fa
ror edi, 3: c1cf03
lea rcx, [rdx*2 + 0xf2bd0ab]: 488d0c55abd02b0f
shr rax, 0xcf: 48c1e8cf
adc edi, eax: 13f8
neg edi: f7df
xor edi, 0x843f2b8e: 81f78e2b3f84
call 0x7ffb72c8425d: e8c32c2500

bytecode len: 288 -   be06a52cda40f6d6408a7c3bfa440fbfce4132fa40d0cf440fb7de40f6d74c87de8bc6660fbaee1540fecf41c1fbd44122f34080f73049c1fb5f4432d70fce4803fcb996e08e57428b545ffe49d3c140c0e62441c0f12643895458fa428b7c5bff66410fbafb224a8d944e8dca1b5a4133fac1cf03488d0c55abd02b0f48c1e8cf13f8f7df81f78e2b3f84e8c32c2500

block IDs [duplicates]: [133]
['movsxd rcx, ecx', 'adc rbp, rcx', 'mov r11d, dword ptr [rdx + rbx + 4]', 'xor r11d, r10d', 'not r11d', 'rol r11d, 2', 'inc sil', 'xor rdx, qword ptr [rsp + rdx + 4]', 'xor r11d, 0x84bdb4a7', 'push rdi', 'xor di, dx', 'bswap r11d', 'sal r9w, 0x6e', 'lea r11d, [r11 + r9*2 - 0x3dc0d21d]', 'pop rax', 'xor word ptr [rsp + rdi + 0xe], ax', 'mov qword ptr [rsp + rdi + 0x10], r10', 'cwd', 'not di', 'mov dword ptr [rsp + rdi - 0xfff7], edi', 'xor dword ptr [rsp + rdi*2 - 0x1ffee], r11d', 'or rdx, qword ptr [rsp + rdi*2 - 0x1fffa]', 'shl si, 0x84', 'movsx ecx, word ptr [rsp + rdi - 0xfff6]', 'mov r10, qword ptr [rsp + rdi*2 - 0x1ffee]', 'rol qword ptr [rsp + rdi - 0xfffc], 0xa0', 'push rdx', 'mov dword ptr [r8 + rdi*2 - 0x20002], r11d', 'or r9w, ax', 'mov r11, qword ptr [rbx + rdi*2 - 0x1fff6]', 'lea rbx, [rdi + rbx - 0xffef]', 'rol word ptr [rsp + rdi*8 - 0x7fff4], 0xcd', 'cbw', 'cmovb rdi, qword ptr [rsp + rdi - 0xffef]', 'xor r11, r10', 'add word ptr [rsp + rax*2 + 7], cx', 'neg r11', 'btr rsi, rdi', 'lea r11, [r11 + rax*2 + 0x4e3c2026]', 'sbb dl, 0x83', 'sar r9w, 0x2d', 'rol r11, 2', 'xadd qword ptr [rsp + rax + 0x10], r9', 'lea r11, [r11 + rax*2 - 0x10804886]', 'not r11', 'xor r10, r11', 'add dword ptr [rsp + 0x11], edx', 'mov qword ptr [r8 - 0xc], r11', 'sub rcx, rcx', 'mov r11d, dword ptr [rsp + rcx*2 + 0x12]', 'and rsi, qword ptr [rsp + rcx*4]', 'lea r8, [r8 + rcx*4 - 0xc]', 'and dword ptr [rsp + rcx*4], edx', 'sar dword ptr [rsp + rcx + 0x14], 0xdc', 'pop r9', 'pop rax', 'pop rax', 'pop r9', 'jns 0x7ffb72b05b5c']

bytes: movsxd rcx, ecx: 4863c9
adc rbp, rcx: 4813e9
mov r11d, dword ptr [rdx + rbx + 4]: 448b5c1a04
xor r11d, r10d: 4533da
not r11d: 41f7d3
rol r11d, 2: 41c1c302
inc sil: 40fec6
xor rdx, qword ptr [rsp + rdx + 4]: 4833541404
xor r11d, 0x84bdb4a7: 4181f3a7b4bd84
push rdi: 57
xor di, dx: 6633fa
bswap r11d: 410fcb
sal r9w, 0x6e: 6641c1f16e
lea r11d, [r11 + r9*2 - 0x3dc0d21d]: 478d9c4be32d3fc2
pop rax: 58
xor word ptr [rsp + rdi + 0xe], ax: 6631443c0e
mov qword ptr [rsp + rdi + 0x10], r10: 4c89543c10
cwd: 6699
not di: 66f7d7
mov dword ptr [rsp + rdi - 0xfff7], edi: 89bc3c0900ffff
xor dword ptr [rsp + rdi*2 - 0x1ffee], r11d: 44319c7c1200feff
or rdx, qword ptr [rsp + rdi*2 - 0x1fffa]: 480b947c0600feff
shl si, 0x84: 66c1e684
movsx ecx, word ptr [rsp + rdi - 0xfff6]: 0fbf8c3c0a00ffff
mov r10, qword ptr [rsp + rdi*2 - 0x1ffee]: 4c8b947c1200feff
rol qword ptr [rsp + rdi - 0xfffc], 0xa0: 48c1843c0400ffffa0
push rdx: 52
mov dword ptr [r8 + rdi*2 - 0x20002], r11d: 45899c78fefffdff
or r9w, ax: 66440bc8
mov r11, qword ptr [rbx + rdi*2 - 0x1fff6]: 4c8b9c7b0a00feff
lea rbx, [rdi + rbx - 0xffef]: 488d9c1f1100ffff
rol word ptr [rsp + rdi*8 - 0x7fff4], 0xcd: 66c184fc0c00f8ffcd
cbw: 6698
cmovb rdi, qword ptr [rsp + rdi - 0xffef]: 480f42bc3c1100ffff
xor r11, r10: 4d33da
add word ptr [rsp + rax*2 + 7], cx: 66014c4407
neg r11: 49f7db
btr rsi, rdi: 480fb3fe
lea r11, [r11 + rax*2 + 0x4e3c2026]: 4d8d9c4326203c4e
sbb dl, 0x83: 80da83
sar r9w, 0x2d: 6641c1f92d
rol r11, 2: 49c1c302
xadd qword ptr [rsp + rax + 0x10], r9: 4c0fc14c0410
lea r11, [r11 + rax*2 - 0x10804886]: 4d8d9c437ab77fef
not r11: 49f7d3
xor r10, r11: 4d33d3
add dword ptr [rsp + 0x11], edx: 01542411
mov qword ptr [r8 - 0xc], r11: 4d895c20f4
sub rcx, rcx: 482bc9
mov r11d, dword ptr [rsp + rcx*2 + 0x12]: 448b5c4c12
and rsi, qword ptr [rsp + rcx*4]: 4823348c
lea r8, [r8 + rcx*4 - 0xc]: 4d8d4488f4
and dword ptr [rsp + rcx*4], edx: 21148c
sar dword ptr [rsp + rcx + 0x14], 0xdc: c17c0c14dc
pop r9: 4159
pop rax: 58
pop rax: 58
pop r9: 4159
jns 0x7ffb72b05b5c: 0f8919581800

bytecode len: 548 -   4863c94813e9448b5c1a044533da41f7d341c1c30240fec648335414044181f3a7b4bd84576633fa410fcb6641c1f16e478d9c4be32d3fc2586631443c0e4c89543c10669966f7d789bc3c0900ffff44319c7c1200feff480b947c0600feff66c1e6840fbf8c3c0a00ffff4c8b947c1200feff48c1843c0400ffffa05245899c78fefffdff66440bc84c8b9c7b0a00feff488d9c1f1100ffff66c184fc0c00f8ffcd6698480f42bc3c1100ffff4d33da66014c440749f7db480fb3fe4d8d9c4326203c4e80da836641c1f92d49c1c3024c0fc14c04104d8d9c437ab77fef49f7d34d33d3015424114d895c20f4482bc9448b5c4c124823348c4d8d4488f421148cc17c0c14dc4159585841590f8919581800

block IDs [duplicates]: [134]
['lea rbx, [rbx + rdx + 6]', 'xor sil, r10b', 'lea rcx, [r11*2 - 0x116eba7f]', 'inc dword ptr [rsp + r11 - 0x13a48b17]', 'rol sil, 1', 'lea rax, [r11*8 - 0x606607ec]', 'rol rdi, 0x74', 'neg sil', 'cbw', 'xchg byte ptr [rsp + r11*2 - 0x27491648], al', 'dec sil', 'rol sil, 1', 'or cl, byte ptr [rsp + r11 - 0x13a48b1e]', 'or cl, byte ptr [rsp + r11*2 - 0x27491658]', 'inc sil', 'xor r10b, sil', 'neg r11', 'adc word ptr [rsp + r11 + 0x13a48b41], 0xff99', 'lea rsi, [rsp + rsi + 0x20]', 'shr di, 0xe3', 'sub cl, 0x2a', 'mov r11, qword ptr [rsi + r11*2 + 0x27491666]', 'sub byte ptr [rsp + rdx + 0xc], dil', 'and dword ptr [rsp + rdx*2 + 0x1c], 0x6ea3f432', 'mov qword ptr [rsp + rdx], rcx', 'mov qword ptr [r8 + rdx - 4], r11', 'lea r8, [rdx + r8 - 4]', 'pop rax', 'pop rdi', 'pop r9', 'pop rdx', 'ja 0x7ffb72b05b5c']

bytes: lea rbx, [rbx + rdx + 6]: 488d5c1306
xor sil, r10b: 4132f2
lea rcx, [r11*2 - 0x116eba7f]: 4a8d0c5d814591ee
inc dword ptr [rsp + r11 - 0x13a48b17]: 42ff841ce9745bec
rol sil, 1: 40d0c6
lea rax, [r11*8 - 0x606607ec]: 4a8d04dd14f8999f
rol rdi, 0x74: 48c1c774
neg sil: 40f6de
cbw: 6698
xchg byte ptr [rsp + r11*2 - 0x27491648], al: 4286845cb8e9b6d8
dec sil: 40fece
rol sil, 1: 40d0c6
or cl, byte ptr [rsp + r11 - 0x13a48b1e]: 420a8c1ce2745bec
or cl, byte ptr [rsp + r11*2 - 0x27491658]: 420a8c5ca8e9b6d8
inc sil: 40fec6
xor r10b, sil: 4432d6
neg r11: 49f7db
adc word ptr [rsp + r11 + 0x13a48b41], 0xff99: 664281941c418ba41399ff
lea rsi, [rsp + rsi + 0x20]: 488d743420
shr di, 0xe3: 66c1efe3
sub cl, 0x2a: 80e92a
mov r11, qword ptr [rsi + r11*2 + 0x27491666]: 4e8b9c5e66164927
sub byte ptr [rsp + rdx + 0xc], dil: 40287c140c
and dword ptr [rsp + rdx*2 + 0x1c], 0x6ea3f432: 8164541c32f4a36e
mov qword ptr [rsp + rdx], rcx: 48890c14
mov qword ptr [r8 + rdx - 4], r11: 4d895c10fc
lea r8, [rdx + r8 - 4]: 4e8d4402fc
pop rax: 58
pop rdi: 5f
pop r9: 4159
pop rdx: 5a
ja 0x7ffb72b05b5c: 0f87a5462400

bytecode len: 304 -   488d5c13064132f24a8d0c5d814591ee42ff841ce9745bec40d0c64a8d04dd14f8999f48c1c77440f6de66984286845cb8e9b6d840fece40d0c6420a8c1ce2745bec420a8c5ca8e9b6d840fec64432d649f7db664281941c418ba41399ff488d74342066c1efe380e92a4e8b9c5e6616492740287c140c8164541c32f4a36e48890c144d895c10fc4e8d4402fc585f41595a0f87a5462400

block IDs [duplicates]: [135]
['add esi, eax', 'add rbp, rcx', 'xor r11, qword ptr [r11 + rbx + 5]', 'sub rax, 0x7e84b31a', 'jb 0x7ffb72de4ccb']

bytes: add esi, eax: 03f0
add rbp, rcx: 4803e9
xor r11, qword ptr [r11 + rbx + 5]: 4d335c1b05
sub rax, 0x7e84b31a: 4881e81ab3847e
jb 0x7ffb72de4ccb: 0f8226e93400

bytecode len: 46 -   03f04803e94d335c1b054881e81ab3847e0f8226e93400

block IDs [duplicates]: [136]
['add rax, -0x2dc14b7a', 'lea rbx, [rbx + rdi + 0x2ed33ca4]', 'movsx ecx, r9b', 'xor cx, 0xe4a3', 'xor r11, r10', 'cwde', 'neg si', 'bswap r11', 'add r9, rcx', 'dec r11', 'call 0x7ffb72cb8221']

bytes: add rax, -0x2dc14b7a: 4881c086b43ed2
lea rbx, [rbx + rdi + 0x2ed33ca4]: 488d9c3ba43cd32e
movsx ecx, r9b: 410fbec9
xor cx, 0xe4a3: 6681f1a3e4
xor r11, r10: 4d33da
cwde: 98
neg si: 66f7de
bswap r11: 490fcb
add r9, rcx: 4c03c9
dec r11: 49ffcb
call 0x7ffb72cb8221: e84f1e2200

bytecode len: 90 -   4881c086b43ed2488d9c3ba43cd32e410fbec96681f1a3e44d33da9866f7de490fcb4c03c949ffcbe84f1e2200

block IDs [duplicates]: [137]
['mov rdx, qword ptr [r8]', 'mov r9d, 0xe32af400', 'mov r11, qword ptr [r8 + 8]', 'lea rsi, [r9 + r9 - 0x6bc79800]', 'add r8, 0x10', 'movsx eax, r9b', 'push rsi', 'push rsi', 'mov qword ptr ss:[rdx + rax*4], r11', 'mov r9d, dword ptr [rax + rbx]', 'movzx ecx, si', 'and dword ptr [rsp + rax + 7], 0x2305bab', 'dec dword ptr [rsp + rax + 2]', 'lea rbx, [rbx + rax*8 + 4]', 'bts esi, ecx', 'xor r9d, r10d', 'bswap rcx', 'not r9d', 'ror r9d, 1', 'sal cl, 0xc6', 'setne sil', 'xor r9d, 0xc59adc0d', 'sar esi, 0x59', 'sbb r9d, 0xbeb4dda3', 'pop rdx', 'not r9d', 'cwde', 'movsx edi, si', 'dec r9d', 'cqo', 'dec dl', 'mov qword ptr [rsp + rsi*2 - 0x5a], r10', 'push rsi', 'mov r11d, edx', 'xor dword ptr [rsp + rsi*4 - 0xac], r9d', 'mov r10, qword ptr [rsp + rsi - 0x25]', 'sal al, 0xe1', 'jno 0x7ffb72c65445']

bytes: mov rdx, qword ptr [r8]: 498b10
mov r9d, 0xe32af400: 41b900f42ae3
mov r11, qword ptr [r8 + 8]: 4d8b5c2008
lea rsi, [r9 + r9 - 0x6bc79800]: 4b8db40900683894
add r8, 0x10: 4981c010000000
movsx eax, r9b: 410fbec1
push rsi: 56
push rsi: 56
mov qword ptr ss:[rdx + rax*4], r11: 364c891c82
mov r9d, dword ptr [rax + rbx]: 448b0c18
movzx ecx, si: 0fb7ce
and dword ptr [rsp + rax + 7], 0x2305bab: 81640407ab5b3002
dec dword ptr [rsp + rax + 2]: ff4c0402
lea rbx, [rbx + rax*8 + 4]: 488d5cc304
bts esi, ecx: 0fabce
xor r9d, r10d: 4533ca
bswap rcx: 480fc9
not r9d: 41f7d1
ror r9d, 1: 41d1c9
sal cl, 0xc6: c0f1c6
setne sil: 400f95c6
xor r9d, 0xc59adc0d: 4181f10ddc9ac5
sar esi, 0x59: c1fe59
sbb r9d, 0xbeb4dda3: 4181d9a3ddb4be
pop rdx: 5a
not r9d: 41f7d1
cwde: 98
movsx edi, si: 0fbffe
dec r9d: 41ffc9
cqo: 4899
dec dl: feca
mov qword ptr [rsp + rsi*2 - 0x5a], r10: 4c895474a6
push rsi: 56
mov r11d, edx: 448bda
xor dword ptr [rsp + rsi*4 - 0xac], r9d: 44318cb454ffffff
mov r10, qword ptr [rsp + rsi - 0x25]: 4c8b5434db
sal al, 0xe1: c0f0e1
jno 0x7ffb72c65445: 0f8106640e00

bytecode len: 298 -   498b1041b900f42ae34d8b5c20084b8db409006838944981c010000000410fbec15656364c891c82448b0c180fb7ce81640407ab5b3002ff4c0402488d5cc3040fabce4533ca480fc941f7d141d1c9c0f1c6400f95c64181f10ddc9ac5c1fe594181d9a3ddb4be5a41f7d1980fbffe41ffc94899feca4c895474a656448bda44318cb454ffffff4c8b5434dbc0f0e10f8106640e00

block IDs [duplicates]: [138]
['mov qword ptr [rsp + rdi*4 + 0x20], r10', 'call 0x7ffb72eff0f9']

bytes: mov qword ptr [rsp + rdi*4 + 0x20], r10: 4c8954bc20
call 0x7ffb72eff0f9: e819144a00

bytecode len: 20 -   4c8954bc20e819144a00

block IDs [duplicates]: [139]
['mov r10, qword ptr [rsp + rdi + 0x20]', 'sal sil, 0xa1', 'movsxd r9, r9d', 'inc rcx', 'push rdx', 'not dx', 'adc rbp, r9', 'mov qword ptr [rsp + rdi*8], rbp', 'ret 0x28']

bytes: mov r10, qword ptr [rsp + rdi + 0x20]: 4c8b543c20
sal sil, 0xa1: 40c0f6a1
movsxd r9, r9d: 4d63c9
inc rcx: 48ffc1
push rdx: 52
not dx: 66f7d2
adc rbp, r9: 4913e9
mov qword ptr [rsp + rdi*8], rbp: 48892cfc
ret 0x28: c22800

bytecode len: 58 -   4c8b543c2040c0f6a14d63c948ffc15266f7d24913e948892cfcc22800

block IDs [duplicates]: [140]
['movsx r9d, si', 'movzx ecx, r9b', 'and r9d, eax', 'not r9b', 'push r9', 'lea r11, [rcx + r11 - 0x7ebc63d6]', 'pop rax', 'xor r10, r11', 'mov qword ptr [r8 + rcx - 0x3b], r11', 'mov esi, dword ptr [rcx + rbx - 0x2b]', 'cdq', 'and r9b, 0x39', 'xor esi, r10d', 'call 0x7ffb72bef813']

bytes: movsx r9d, si: 440fbfce
movzx ecx, r9b: 410fb6c9
and r9d, eax: 4423c8
not r9b: 41f6d1
push r9: 4151
lea r11, [rcx + r11 - 0x7ebc63d6]: 4e8d9c192a9c4381
pop rax: 58
xor r10, r11: 4d33d3
mov qword ptr [r8 + rcx - 0x3b], r11: 4d895c08c5
mov esi, dword ptr [rcx + rbx - 0x2b]: 8b7419d5
cdq: 99
and r9b, 0x39: 4180e139
xor esi, r10d: 4133f2
call 0x7ffb72bef813: e833fa1d00

bytecode len: 100 -   440fbfce410fb6c94423c841f6d141514e8d9c192a9c4381584d33d34d895c08c58b7419d5994180e1394133f2e833fa1d00

block IDs [duplicates]: [141]
['mov rdi, r8', 'mov edx, 0xdc3ab90e', 'mov r11d, 0x28046523', 'shr r11d, 0xc7', 'mov qword ptr [r8 + r11*2 - 0xa0119c], rdi', 'movzx esi, word ptr [r11 + rbx - 0x5008ca]', 'lea rax, [rdx*2 - 0x4ffc2676]', 'mov ecx, r11d', 'xor si, r10w', 'mov edi, 0x3895853b', 'add si, 0x2b2f', 'mov r9d, ecx', 'ror si, 1', 'add r11, -0x1dfc4eca', 'not r9b', 'sbb si, 0x3c00', 'call 0x7ffb72c6a757']

bytes: mov rdi, r8: 498bf8
mov edx, 0xdc3ab90e: ba0eb93adc
mov r11d, 0x28046523: 41bb23650428
shr r11d, 0xc7: 41c1ebc7
mov qword ptr [r8 + r11*2 - 0xa0119c], rdi: 4b89bc5864ee5fff
movzx esi, word ptr [r11 + rbx - 0x5008ca]: 410fb7b41b36f7afff
lea rax, [rdx*2 - 0x4ffc2676]: 488d04558ad903b0
mov ecx, r11d: 418bcb
xor si, r10w: 664133f2
mov edi, 0x3895853b: bf3b859538
add si, 0x2b2f: 6681c62f2b
mov r9d, ecx: 448bc9
ror si, 1: 66d1ce
add r11, -0x1dfc4eca: 4981c336b103e2
not r9b: 41f6d1
sbb si, 0x3c00: 6681de003c
call 0x7ffb72c6a757: e8a0e72d00

bytecode len: 172 -   498bf8ba0eb93adc41bb2365042841c1ebc74b89bc5864ee5fff410fb7b41b36f7afff488d04558ad903b0418bcb664133f2bf3b8595386681c62f2b448bc966d1ce4981c336b103e241f6d16681de003ce8a0e72d00

block IDs [duplicates]: [142]
['mov qword ptr [rsp + rdi*2 - 0x735c9e54], rax', 'movsxd rdx, edx', 'push rdi', 'xchg byte ptr [rsp + rax*2 - 0x1a6e6], dil', 'add rbp, rdx', 'pop rax', 'movzx esi, al', 'sub r9, qword ptr [rsp + rax*2 - 0x735c9e54]', 'mov edi, dword ptr [rbx + rdi - 0x39ae4f73]', 'lea rbx, [rbx + rax - 0x39ae4f22]', 'call 0x7ffb729dd9dd']

bytes: mov qword ptr [rsp + rdi*2 - 0x735c9e54], rax: 4889847cac61a38c
movsxd rdx, edx: 4863d2
push rdi: 57
xchg byte ptr [rsp + rax*2 - 0x1a6e6], dil: 4086bc441a59feff
add rbp, rdx: 4803ea
pop rax: 58
movzx esi, al: 0fb6f0
sub r9, qword ptr [rsp + rax*2 - 0x735c9e54]: 4c2b8c44ac61a38c
mov edi, dword ptr [rbx + rdi - 0x39ae4f73]: 8bbc3b8db051c6
lea rbx, [rbx + rax - 0x39ae4f22]: 488d9c03deb051c6
call 0x7ffb729dd9dd: e858b7f9ff

bytecode len: 110 -   4889847cac61a38c4863d2574086bc441a59feff4803ea580fb6f04c2b8c44ac61a38c8bbc3b8db051c6488d9c03deb051c6e858b7f9ff

block IDs [duplicates]: [143]
['mov qword ptr [rsp + rax - 0x39ae4f22], r9', 'adc qword ptr [rsp + rax - 0x39ae4f22], 0x5c25a903', 'xor edi, r10d', 'mov edx, 0xa72c34be', 'sal dword ptr [rsp + rax - 0x39ae4f22], 0x57', 'ror edi, 2', 'bswap edi', 'cwde', 'ror dword ptr [rsp + rax*4 - 0x13c9e], 0x90', 'inc edi', 'sub cx, r9w', 'xadd qword ptr [rsp + rax - 0x4f22], rdx', 'rol edi, 2', 'neg edi', 'and dx, 0xc68b', 'xchg byte ptr [rsp + rax*4 - 0x13c9f], r9b', 'mov qword ptr [rsp + rax*2 - 0x9e4c], r10', 'bswap rdx', 'mov qword ptr [rsp + rsi - 0x2a], rdx', 'xor dword ptr [rsp + rax*4 - 0x13ca0], edi', 'and byte ptr [rsp + rsi - 0x24], 0x32', 'mov r10, qword ptr [rsp + rax - 0x4f22]', 'mov dword ptr [r8 + rax*4 - 0x13ca8], edi', 'jb 0x7ffb72b533be']

bytes: mov qword ptr [rsp + rax - 0x39ae4f22], r9: 4c898c04deb051c6
adc qword ptr [rsp + rax - 0x39ae4f22], 0x5c25a903: 48819404deb051c603a9255c
xor edi, r10d: 4133fa
mov edx, 0xa72c34be: babe342ca7
sal dword ptr [rsp + rax - 0x39ae4f22], 0x57: c1b404deb051c657
ror edi, 2: c1cf02
bswap edi: 0fcf
cwde: 98
ror dword ptr [rsp + rax*4 - 0x13c9e], 0x90: c18c8462c3feff90
inc edi: ffc7
sub cx, r9w: 66412bc9
xadd qword ptr [rsp + rax - 0x4f22], rdx: 480fc19404deb0ffff
rol edi, 2: c1c702
neg edi: f7df
and dx, 0xc68b: 6681e28bc6
xchg byte ptr [rsp + rax*4 - 0x13c9f], r9b: 44868c8461c3feff
mov qword ptr [rsp + rax*2 - 0x9e4c], r10: 4c899444b461ffff
bswap rdx: 480fca
mov qword ptr [rsp + rsi - 0x2a], rdx: 48895434d6
xor dword ptr [rsp + rax*4 - 0x13ca0], edi: 31bc8460c3feff
and byte ptr [rsp + rsi - 0x24], 0x32: 806434dc32
mov r10, qword ptr [rsp + rax - 0x4f22]: 4c8b9404deb0ffff
mov dword ptr [r8 + rax*4 - 0x13ca8], edi: 4189bc8058c3feff
jb 0x7ffb72b533be: 0f8256591700

bytecode len: 266 -   4c898c04deb051c648819404deb051c603a9255c4133fababe342ca7c1b404deb051c657c1cf020fcf98c18c8462c3feff90ffc766412bc9480fc19404deb0ffffc1c702f7df6681e28bc644868c8461c3feff4c899444b461ffff480fca48895434d631bc8460c3feff806434dc324c8b9404deb0ffff4189bc8058c3feff0f8256591700

block IDs [duplicates]: [144]
['mov qword ptr [rsp + rax - 0x4f2a], rbp', 'ret 8']

bytes: mov qword ptr [rsp + rax - 0x4f2a], rbp: 4889ac04d6b0ffff
ret 8: c20800

bytecode len: 22 -   4889ac04d6b0ffffc20800

block IDs [duplicates]: [145]
['mov ecx, dword ptr [rbx]', 'mov esi, 0xf3b40e3a', 'xor ecx, r10d', 'rol esi, 0x25', 'jae 0x7ffb72900871']

bytes: mov ecx, dword ptr [rbx]: 8b0b
mov esi, 0xf3b40e3a: be3a0eb4f3
xor ecx, r10d: 4133ca
rol esi, 0x25: c1c625
jae 0x7ffb72900871: 0f83ac86e9ff

bytecode len: 38 -   8b0bbe3a0eb4f34133cac1c6250f83ac86e9ff

block IDs [duplicates]: [146]
['bswap esi', 'ror ecx, 1', 'mov edi, 0xf40b6f93', 'movzx r11d, dil', 'xor ecx, 0xfaef885', 'lea rax, [r11*4 - 0x63db297e]', 'cbw', 'inc ecx', 'bswap ecx', 'ror sil, 0x83', 'sar sil, 0x84', 'lea ecx, [rcx + rax*2 - 0x56b1db4]', 'mov edx, eax', 'xchg edi, esi', 'push r10', 'cmovae rax, rdx', 'xor dword ptr [rsp + r11*2 - 0x126], ecx', 'pop r10', 'mov r9d, 0x7ea7ad17', 'add si, r9w', 'shl r9d, 0x2a', 'movsxd rcx, ecx', 'push rdx', 'adc rbp, rcx', 'call 0x7ffb72a71121']

bytes: bswap esi: 0fce
ror ecx, 1: d1c9
mov edi, 0xf40b6f93: bf936f0bf4
movzx r11d, dil: 440fb6df
xor ecx, 0xfaef885: 81f185f8ae0f
lea rax, [r11*4 - 0x63db297e]: 4a8d049d82d6249c
cbw: 6698
inc ecx: ffc1
bswap ecx: 0fc9
ror sil, 0x83: 40c0ce83
sar sil, 0x84: 40c0fe84
lea ecx, [rcx + rax*2 - 0x56b1db4]: 8d8c414ce294fa
mov edx, eax: 8bd0
xchg edi, esi: 87f7
push r10: 4152
cmovae rax, rdx: 480f43c2
xor dword ptr [rsp + r11*2 - 0x126], ecx: 42318c5cdafeffff
pop r10: 415a
mov r9d, 0x7ea7ad17: 41b917ada77e
add si, r9w: 664103f1
shl r9d, 0x2a: 41c1e12a
movsxd rcx, ecx: 4863c9
push rdx: 52
adc rbp, rcx: 4813e9
call 0x7ffb72a71121: e84c081700

bytecode len: 188 -   0fced1c9bf936f0bf4440fb6df81f185f8ae0f4a8d049d82d6249c6698ffc10fc940c0ce8340c0fe848d8c414ce294fa8bd087f74152480f43c242318c5cdafeffff415a41b917ada77e664103f141c1e12a4863c9524813e9e84c081700

block IDs [duplicates]: [147]
['mov eax, dword ptr [r8 + r11*2 - 0x126]', 'xchg edi, esi', 'mov esi, dword ptr [r8 + rsi - 0x4ec781f8]', 'or eax, esi', 'shr r11d, 0xb', 'not r11b', 'not eax', 'sar qword ptr [rsp + r11*4 - 0x3f4], 0xa3', 'movzx ecx, r9w', 'mov dword ptr [r8 + r11*2 - 0x1fa], eax', 'dec dil', 'not r11b', 'jp 0x7ffb729bf974']

bytes: mov eax, dword ptr [r8 + r11*2 - 0x126]: 438b8458dafeffff
xchg edi, esi: 87f7
mov esi, dword ptr [r8 + rsi - 0x4ec781f8]: 418bb430087e38b1
or eax, esi: 0bc6
shr r11d, 0xb: 41c1eb0b
not r11b: 41f6d3
not eax: f7d0
sar qword ptr [rsp + r11*4 - 0x3f4], 0xa3: 4ac1bc9c0cfcffffa3
movzx ecx, r9w: 410fb7c9
mov dword ptr [r8 + r11*2 - 0x1fa], eax: 4389845806feffff
dec dil: 40fecf
not r11b: 41f6d3
jp 0x7ffb729bf974: 0f8a15e8f4ff

bytecode len: 124 -   438b8458dafeffff87f7418bb430087e38b10bc641c1eb0b41f6d3f7d04ac1bc9c0cfcffffa3410fb7c94389845806feffff40fecf41f6d30f8a15e8f4ff

block IDs [duplicates]: [148]
['mov eax, dword ptr [r11 + rbx + 4]', 'push r9', 'lea rbx, [r11 + rbx + 8]', 'btr r9w, 0xaa', 'sal r11w, 0x22', 'xor eax, r10d', 'mov qword ptr [rsp + r11 + 8], r9', 'call 0x7ffb729d2d09']

bytes: mov eax, dword ptr [r11 + rbx + 4]: 418b441b04
push r9: 4151
lea rbx, [r11 + rbx + 8]: 498d5c1b08
btr r9w, 0xaa: 66410fbaf1aa
sal r11w, 0x22: 6641c1f322
xor eax, r10d: 4133c2
mov qword ptr [rsp + r11 + 8], r9: 4e894c1c08
call 0x7ffb729d2d09: e8861bf6ff

bytecode len: 72 -   418b441b044151498d5c1b0866410fbaf1aa6641c1f3224133c24e894c1c08e8861bf6ff

block IDs [duplicates]: [149]
['shl r11w, 0x62', 'sbb edx, r9d', 'pop rsi', 'not word ptr [rsp + r11 + 0xd]', 'btc eax, 0x85', 'lea rax, [rsp + rax - 0x7d379f42]', 'jae 0x7ffb728bbe12']

bytes: shl r11w, 0x62: 6641c1e362
sbb edx, r9d: 411bd1
pop rsi: 5e
not word ptr [rsp + r11 + 0xd]: 6642f7541c0d
btc eax, 0x85: 0fbaf885
lea rax, [rsp + rax - 0x7d379f42]: 488d8404be60c882
jae 0x7ffb728bbe12: 0f839f62dbff

bytecode len: 66 -   6641c1e362411bd15e6642f7541c0d0fbaf885488d8404be60c8820f839f62dbff

block IDs [duplicates]: [170, 170]
['mov edx, 0x10003f89', 'mov eax, edx', 'mov r9d, dword ptr [rbx + rdx*2 - 0x20007f12]', 'movsx r11d, ax', 'lea rbx, [rbx + rdx*4 - 0x4000fe20]', 'not r11w', 'lea rsi, [r11 + r11 - 0x4bf67c5e]', 'xor r9d, r10d', 'neg r9d', 'shr rsi, 0xcc', 'sbb rdx, rdx', 'movsx ecx, al', 'dec r9d', 'bswap r9d', 'lea r9d, [r9 + rdx + 0xdb9523b]', 'ror rsi, cl', 'push r10', 'lea r10, [rdx + rsi + 0x491b9297]', 'bts rdx, rsi', 'xor dword ptr [rsp + rax - 0x10003f89], r9d', 'add dil, r9b', 'mov qword ptr [rsp + 0x18], r10', 'bts r11w, cx', 'xadd ecx, edx', 'xor dword ptr [rsp + 0x18], eax', 'movzx esi, cl', 'mov r10, qword ptr [rsp + rsi - 0xe7]', 'movsxd rax, eax', 'sub si, di', 'add rbp, rax', 'mov qword ptr [rsp + rsi*4 - 0x39ed0], rcx', 'or sil, 0xb1', 'pop rax', 'shl ecx, 0x78', 'lea rbx, [rbx + rsi*2 - 0x1cf68]', 'shl edi, 0x50', 'mov eax, r11d', 'shl rax, 0x3c', 'cwde', 'xchg word ptr [rsp + rdi*4 - 0x6513fff0], r11w', 'push rsi', 'xor byte ptr [rsp + rdi - 0x1944ffff], 1', 'lea r9, [rdi + r9 + 0xbd3e1ad]', 'xchg esi, edx', 'shr rax, 0x3d', 'rol r9, 7', 'xor r10, r9', 'sar dx, 0xa8', 'dec r11b', 'mov qword ptr [r8 + rdx*4 - 0x3ffa4], r9', 'lea r8, [r8 + rdx - 0xffef]', 'mov rdi, qword ptr [rsp + 8]', 'add rdi, 0x11d958', 'jmp rdi']

bytes: mov edx, 0x10003f89: ba893f0010
mov eax, edx: 8bc2
mov r9d, dword ptr [rbx + rdx*2 - 0x20007f12]: 448b8c53ee80ffdf
movsx r11d, ax: 440fbfd8
lea rbx, [rbx + rdx*4 - 0x4000fe20]: 488d9c93e001ffbf
not r11w: 6641f7d3
lea rsi, [r11 + r11 - 0x4bf67c5e]: 4b8db41ba28309b4
xor r9d, r10d: 4533ca
neg r9d: 41f7d9
shr rsi, 0xcc: 48c1eecc
sbb rdx, rdx: 481bd2
movsx ecx, al: 0fbec8
dec r9d: 41ffc9
bswap r9d: 410fc9
lea r9d, [r9 + rdx + 0xdb9523b]: 458d8c113b52b90d
ror rsi, cl: 48d3ce
push r10: 4152
lea r10, [rdx + rsi + 0x491b9297]: 4c8d943297921b49
bts rdx, rsi: 480fabf2
xor dword ptr [rsp + rax - 0x10003f89], r9d: 44318c0477c0ffef
add dil, r9b: 4102f9
mov qword ptr [rsp + 0x18], r10: 4c89542418
bts r11w, cx: 66410fabcb
xadd ecx, edx: 0fc1d1
xor dword ptr [rsp + 0x18], eax: 31442418
movzx esi, cl: 0fb6f1
mov r10, qword ptr [rsp + rsi - 0xe7]: 4c8b943419ffffff
movsxd rax, eax: 4863c0
sub si, di: 662bf7
add rbp, rax: 4803e8
mov qword ptr [rsp + rsi*4 - 0x39ed0], rcx: 48898cb43061fcff
or sil, 0xb1: 4080ceb1
pop rax: 58
shl ecx, 0x78: c1e178
lea rbx, [rbx + rsi*2 - 0x1cf68]: 488d9c739830feff
shl edi, 0x50: c1e750
mov eax, r11d: 418bc3
shl rax, 0x3c: 48c1e03c
cwde: 98
xchg word ptr [rsp + rdi*4 - 0x6513fff0], r11w: 6644879cbc1000ec9a
push rsi: 56
xor byte ptr [rsp + rdi - 0x1944ffff], 1: 80b43c0100bbe601
lea r9, [rdi + r9 + 0xbd3e1ad]: 4e8d8c0fade1d30b
xchg esi, edx: 87d6
shr rax, 0x3d: 48c1e83d
rol r9, 7: 49c1c107
xor r10, r9: 4d33d1
sar dx, 0xa8: 66c1faa8
dec r11b: 41fecb
mov qword ptr [r8 + rdx*4 - 0x3ffa4], r9: 4d898c905c00fcff
lea r8, [r8 + rdx - 0xffef]: 4d8d84101100ffff
mov rdi, qword ptr [rsp + 8]: 488b7c2408
add rdi, 0x11d958: 4881c758d91100
jmp rdi: ffe7

bytecode len: 490 -   ba893f00108bc2448b8c53ee80ffdf440fbfd8488d9c93e001ffbf6641f7d34b8db41ba28309b44533ca41f7d948c1eecc481bd20fbec841ffc9410fc9458d8c113b52b90d48d3ce41524c8d943297921b49480fabf244318c0477c0ffef4102f94c8954241866410fabcb0fc1d1314424180fb6f14c8b943419ffffff4863c0662bf74803e848898cb43061fcff4080ceb158c1e178488d9c739830feffc1e750418bc348c1e03c986644879cbc1000ec9a5680b43c0100bbe6014e8d8c0fade1d30b87d648c1e83d49c1c1074d33d166c1faa841fecb4d898c905c00fcff4d8d84101100ffff488b7c24084881c758d91100ffe7

block IDs [duplicates]: [151]
['mov r11, qword ptr [r8]', 'call 0x7ffb72e7a898']

bytes: mov r11, qword ptr [r8]: 4d8b18
call 0x7ffb72e7a898: e878cb4e00

bytecode len: 16 -   4d8b18e878cb4e00

block IDs [duplicates]: [152]
['xchg ax, r9w', 'ror r11d, 3', 'mov qword ptr [rsp + rdi*2], rcx', 'sal byte ptr [rsp + rdi + 7], 0x81', 'adc r11d, edx', 'inc dx', 'shr r9, 0xb6', 'sar qword ptr [rsp + r9], cl', 'rol r11d, 3', 'neg qword ptr [rsp + r9]', 'sub r9w, word ptr [rsp + r9*2 + 5]', 'not r11d', 'mov qword ptr [rsp + r9*8 - 8], r10', 'movsx esi, cx', 'xor dword ptr [rsp + r9 - 1], r11d', 'or eax, esi', 'xchg rsi, rdx', 'pop r10', 'movsxd r11, r11d', 'cdqe', 'add rbp, r11', 'mov r9, qword ptr [rbx + r9*8 - 2]', 'movsx r11d, cx', 'sar dil, 0x66', 'dec cx', 'xor r9, r10', 'call 0x7ffb72cbd11c']

bytes: xchg ax, r9w: 664191
ror r11d, 3: 41c1cb03
mov qword ptr [rsp + rdi*2], rcx: 48890c7c
sal byte ptr [rsp + rdi + 7], 0x81: c0743c0781
adc r11d, edx: 4413da
inc dx: 66ffc2
shr r9, 0xb6: 49c1e9b6
sar qword ptr [rsp + r9], cl: 4ad33c0c
rol r11d, 3: 41c1c303
neg qword ptr [rsp + r9]: 4af71c0c
sub r9w, word ptr [rsp + r9*2 + 5]: 66462b4c4c05
not r11d: 41f7d3
mov qword ptr [rsp + r9*8 - 8], r10: 4e8954ccf8
movsx esi, cx: 0fbff1
xor dword ptr [rsp + r9 - 1], r11d: 46315c0cff
or eax, esi: 0bc6
xchg rsi, rdx: 4887d6
pop r10: 415a
movsxd r11, r11d: 4d63db
cdqe: 4898
add rbp, r11: 4903eb
mov r9, qword ptr [rbx + r9*8 - 2]: 4e8b4ccbfe
movsx r11d, cx: 440fbfd9
sar dil, 0x66: 40c0ff66
dec cx: 66ffc9
xor r9, r10: 4d33ca
call 0x7ffb72cbd11c: e882f92c00

bytecode len: 198 -   66419141c1cb0348890c7cc0743c07814413da66ffc249c1e9b64ad33c0c41c1c3034af71c0c66462b4c4c0541f7d34e8954ccf80fbff146315c0cff0bc64887d6415a4d63db48984903eb4e8b4ccbfe440fbfd940c0ff6666ffc94d33cae882f92c00

block IDs [duplicates]: [153]
['lea rdi, [rsp + rdi + 0x18]', 'mov rcx, qword ptr [rcx + rdi - 0x107405]', 'xchg rax, rsi', 'shl word ptr [rsp + rsi*2 + 0x1c002], 6', 'mov qword ptr [r8 + rsi + 0xdfe4], rcx', 'lea r8, [rsi + r8 + 0xdfe4]', 'cqo', 'mov qword ptr [rsp + rsi + 0xdff6], rax', 'pop rax', 'pop rax', 'pop rax', 'js 0x7ffb72b05b5c']

bytes: lea rdi, [rsp + rdi + 0x18]: 488d7c3c18
mov rcx, qword ptr [rcx + rdi - 0x107405]: 488b8c39fb8befff
xchg rax, rsi: 4896
shl word ptr [rsp + rsi*2 + 0x1c002], 6: 66c1a47402c0010006
mov qword ptr [r8 + rsi + 0xdfe4], rcx: 49898c30e4df0000
lea r8, [rsi + r8 + 0xdfe4]: 4e8d8406e4df0000
cqo: 4899
mov qword ptr [rsp + rsi + 0xdff6], rax: 48898434f6df0000
pop rax: 58
pop rax: 58
pop rax: 58
js 0x7ffb72b05b5c: 0f8824ee1200

bytecode len: 118 -   488d7c3c18488b8c39fb8befff489666c1a47402c001000649898c30e4df00004e8d8406e4df0000489948898434f6df00005858580f8824ee1200

block IDs [duplicates]: [154]
['add rbp, rax', 'lea rax, [r11 + rsi*4 - 0x5ccb1bdd]', 'mov qword ptr [rsp + rdi], rbp', 'ret']

bytes: add rbp, rax: 4803e8
lea rax, [r11 + rsi*4 - 0x5ccb1bdd]: 498d84b323e434a3
mov qword ptr [rsp + rdi], rbp: 48892c3c
ret: c3

bytecode len: 32 -   4803e8498d84b323e434a348892c3cc3

block IDs [duplicates]: [155]
['xor al, 0x8f', 'neg al', 'xchg di, r9w', 'neg rdi', 'ror r9w, 0xab', 'dec al', 'add r11d, esi', 'xor al, 0x25', 'neg edi', 'setge cl', 'rol al, 1', 'shl sil, 0x22', 'or sil, cl', 'xor r10b, al', 'btc cx, si', 'bswap rdi', 'jae 0x7ffb72c85aec']

bytes: xor al, 0x8f: 348f
neg al: f6d8
xchg di, r9w: 664487cf
neg rdi: 48f7df
ror r9w, 0xab: 6641c1c9ab
dec al: fec8
add r11d, esi: 4403de
xor al, 0x25: 3425
neg edi: f7df
setge cl: 0f9dc1
rol al, 1: d0c0
shl sil, 0x22: 40c0e622
or sil, cl: 400af1
xor r10b, al: 4432d0
btc cx, si: 660fbbf1
bswap rdi: 480fcf
jae 0x7ffb72c85aec: 0f83cc513600

bytecode len: 106 -   348ff6d8664487cf48f7df6641c1c9abfec84403de3425f7df0f9dc1d0c040c0e622400af14432d0660fbbf1480fcf0f83cc513600

block IDs [duplicates]: [156]
['xchg r11, rdi', 'pop r10', 'mov ecx, 0x1faa9a97', 'lea rdx, [rsp + rdx + 0x18]', 'mov qword ptr [rsp + 8], rcx', 'mov qword ptr [rdx], rdi', 'mov r9d, dword ptr [rbx + 1]', 'mov esi, ecx', 'cbw', 'bts rcx, 0xa2', 'xor r9d, r10d', 'mov qword ptr [rsp + 8], rax', 'inc r9d', 'cdqe', 'sal al, 0xc3', 'push rax', 'ror r9d, 2', 'or byte ptr [rsp + rax + 0x78260106], 0x27', 'movsx edi, sil', 'dec r9d', 'rol r9d, 3', 'cdqe', 'and ecx, eax', 'mov qword ptr [rsp + rax + 0x78260100], r10', 'sub di, ax', 'push rcx', 'xor dword ptr [rsp + rax + 0x78260108], r9d', 'call 0x7ffb72d6c847']

bytes: xchg r11, rdi: 4987fb
pop r10: 415a
mov ecx, 0x1faa9a97: b9979aaa1f
lea rdx, [rsp + rdx + 0x18]: 488d541418
mov qword ptr [rsp + 8], rcx: 48894c2408
mov qword ptr [rdx], rdi: 48893c22
mov r9d, dword ptr [rbx + 1]: 448b4c2301
mov esi, ecx: 8bf1
cbw: 6698
bts rcx, 0xa2: 480fbae9a2
xor r9d, r10d: 4533ca
mov qword ptr [rsp + 8], rax: 4889442408
inc r9d: 41ffc1
cdqe: 4898
sal al, 0xc3: c0f0c3
push rax: 50
ror r9d, 2: 41c1c902
or byte ptr [rsp + rax + 0x78260106], 0x27: 808c040601267827
movsx edi, sil: 400fbefe
dec r9d: 41ffc9
rol r9d, 3: 41c1c103
cdqe: 4898
and ecx, eax: 23c8
mov qword ptr [rsp + rax + 0x78260100], r10: 4c89940400012678
sub di, ax: 662bf8
push rcx: 51
xor dword ptr [rsp + rax + 0x78260108], r9d: 44318c0408012678
call 0x7ffb72d6c847: e8ab9c2c00

bytecode len: 214 -   4987fb415ab9979aaa1f488d54141848894c240848893c22448b4c23018bf16698480fbae9a24533ca488944240841ffc14898c0f0c35041c1c902808c040601267827400fbefe41ffc941c1c103489823c84c89940400012678662bf85144318c0408012678e8ab9c2c00

block IDs [duplicates]: [157]
['mov edi, dword ptr [rbx]', 'xor edi, r10d', 'mov r11d, 0x8b0da487', 'movsx ecx, r11b', 'inc edi', 'movzx r9d, cl', 'ror edi, 2', 'call 0x7ffb72927726']

bytes: mov edi, dword ptr [rbx]: 8b3b
xor edi, r10d: 4133fa
mov r11d, 0x8b0da487: 41bb87a40d8b
movsx ecx, r11b: 410fbecb
inc edi: ffc7
movzx r9d, cl: 440fb6c9
ror edi, 2: c1cf02
call 0x7ffb72927726: e88246f4ff

bytecode len: 58 -   8b3b4133fa41bb87a40d8b410fbecbffc7440fb6c9c1cf02e88246f4ff

block IDs [duplicates]: [158]
['dec edi', 'ror r11d, 0x93', 'rol edi, 3', 'mov edx, r11d', 'mov qword ptr [rsp + r9*2 - 0x10e], r10', 'mov esi, 0x5498099d', 'xor dword ptr [rsp + r9*2 - 0x10e], edi', 'btr r9w, si', 'pop r10', 'movsxd rdi, edi', 'adc rbp, rdi', 'dec dl', 'movsx edi, cx', 'mov rcx, qword ptr [r9 + r8 - 0x87]', 'movzx r11d, byte ptr [rbx + r9 - 0x83]', 'sal rsi, 0x16', 'sub dx, r9w', 'btc esi, 0xba', 'xor r11b, r10b', 'inc r11b', 'call 0x7ffb72dd1f89']

bytes: dec edi: ffcf
ror r11d, 0x93: 41c1cb93
rol edi, 3: c1c703
mov edx, r11d: 418bd3
mov qword ptr [rsp + r9*2 - 0x10e], r10: 4e89944cf2feffff
mov esi, 0x5498099d: be9d099854
xor dword ptr [rsp + r9*2 - 0x10e], edi: 4231bc4cf2feffff
btr r9w, si: 66410fb3f1
pop r10: 415a
movsxd rdi, edi: 4863ff
adc rbp, rdi: 4813ef
dec dl: feca
movsx edi, cx: 0fbff9
mov rcx, qword ptr [r9 + r8 - 0x87]: 4b8b8c0179ffffff
movzx r11d, byte ptr [rbx + r9 - 0x83]: 460fb69c0b7dffffff
sal rsi, 0x16: 48c1f616
sub dx, r9w: 66412bd1
btc esi, 0xba: 0fbafeba
xor r11b, r10b: 4532da
inc r11b: 41fec3
call 0x7ffb72dd1f89: e804a84a00

bytecode len: 182 -   ffcf41c1cb93c1c703418bd34e89944cf2feffffbe9d0998544231bc4cf2feffff66410fb3f1415a4863ff4813effeca0fbff94b8b8c0179ffffff460fb69c0b7dffffff48c1f61666412bd10fbafeba4532da41fec3e804a84a00

block IDs [duplicates]: [159]
['mov r11d, 0xe09c309', 'ror r11d, 0xcc', 'call 0x7ffb72deba0f']

bytes: mov r11d, 0xe09c309: 41bb09c3090e
ror r11d, 0xcc: 41c1cbcc
call 0x7ffb72deba0f: e8b4073d00

bytecode len: 30 -   41bb09c3090e41c1cbcce8b4073d00

block IDs [duplicates]: [160]
['xor dil, r10b', 'dec dil', 'push r9', 'xor dil, 0xad', 'movzx r11d, sil', 'pop rcx', 'movsx eax, word ptr [rsp + rdx*8 - 0x7ffdc]', 'add dil, 0x28', 'xor dil, al', 'sal qword ptr [rsp + rdx - 0xfff8], cl', 'inc r9d', 'xchg dword ptr [rsp + rdx*8 - 0x7ffbf], eax', 'xor r10b, dil', 'sub qword ptr [rsp + rsi*4 - 0x34d04f9c], rdx', 'jno 0x7ffb72cf6e71']

bytes: xor dil, r10b: 4132fa
dec dil: 40fecf
push r9: 4151
xor dil, 0xad: 4080f7ad
movzx r11d, sil: 440fb6de
pop rcx: 59
movsx eax, word ptr [rsp + rdx*8 - 0x7ffdc]: 0fbf84d42400f8ff
add dil, 0x28: 4080c728
xor dil, al: 4032f8
sal qword ptr [rsp + rdx - 0xfff8], cl: 48d3b4140800ffff
inc r9d: 41ffc1
xchg dword ptr [rsp + rdx*8 - 0x7ffbf], eax: 8784d44100f8ff
xor r10b, dil: 4432d7
sub qword ptr [rsp + rsi*4 - 0x34d04f9c], rdx: 482994b464b02fcb
jno 0x7ffb72cf6e71: 0f81d7b33b00

bytecode len: 134 -   4132fa40fecf41514080f7ad440fb6de590fbf84d42400f8ff4080c7284032f848d3b4140800ffff41ffc18784d44100f8ff4432d7482994b464b02fcb0f81d7b33b00

block IDs [duplicates]: [161]
['not edx', 'mov byte ptr [rsp + rsi*2 - 0xa1fe1c], cl', 'push rax', 'and r11w, si', 'dec edx', 'movzx r9d, si', 'call 0x7ffb72a208a3']

bytes: not edx: f7d2
mov byte ptr [rsp + rsi*2 - 0xa1fe1c], cl: 888c74e4015eff
push rax: 50
and r11w, si: 664423de
dec edx: ffca
movzx r9d, si: 440fb7ce
call 0x7ffb72a208a3: e81c520a00

bytecode len: 50 -   f7d2888c74e4015eff50664423deffca440fb7cee81c520a00

block IDs [duplicates]: [162]
['mov qword ptr [rsp + rsi*2 - 0xa1fe12], r10', 'mov qword ptr [rsp + rsi*8 - 0x287f8a8], rax', 'xor dword ptr [rsp + rsi*8 - 0x287f890], edx', 'shl r11b, 0xc2', 'mov r10, qword ptr [rsp + rsi - 0x50fefd]', 'movsxd rdx, edx', 'push r9', 'call 0x7ffb72c1acca']

bytes: mov qword ptr [rsp + rsi*2 - 0xa1fe12], r10: 4c899474ee015eff
mov qword ptr [rsp + rsi*8 - 0x287f8a8], rax: 488984f4580778fd
xor dword ptr [rsp + rsi*8 - 0x287f890], edx: 3194f4700778fd
shl r11b, 0xc2: 41c0e3c2
mov r10, qword ptr [rsp + rsi - 0x50fefd]: 4c8b94340301afff
movsxd rdx, edx: 4863d2
push r9: 4151
call 0x7ffb72c1acca: e8f6a31f00

bytecode len: 90 -   4c899474ee015eff488984f4580778fd3194f4700778fd41c0e3c24c8b94340301afff4863d24151e8f6a31f00

block IDs [duplicates]: [163]
['mov qword ptr [rsp + r11*2 - 0x2270e272], -0x2951d0f6', 'cbw', 'lea rsi, [rsp + rsi + 0x10]', 'sal rcx, cl', 'mov rcx, qword ptr [rdi + rsi - 0x1bb]', 'jne 0x7ffb72c1bde9']

bytes: mov qword ptr [rsp + r11*2 - 0x2270e272], -0x2951d0f6: 4ac7845c8e1d8fdd0a2faed6
cbw: 6698
lea rsi, [rsp + rsi + 0x10]: 488d743410
sal rcx, cl: 48d3f1
mov rcx, qword ptr [rdi + rsi - 0x1bb]: 488b8c3745feffff
jne 0x7ffb72c1bde9: 0f85b8662b00

bytecode len: 72 -   4ac7845c8e1d8fdd0a2faed66698488d74341048d3f1488b8c3745feffff0f85b8662b00

block IDs [duplicates]: [164]
['mov qword ptr [rsp + rdx*2], 0x240e0e1d', 'mov r9, qword ptr [rsi + rcx - 0x70ab8ba2]', 'mov qword ptr [rdx + r8 - 0x10], r9', 'pop rdi', 'movsx r9d, word ptr [rsp + rsi - 0x70ab8ba0]', 'lea r8, [rsi + r8 - 0x70ab8bb2]', 'xchg byte ptr [rsp + rsi - 0x70ab8b9b], ah', 'mov ecx, dword ptr [rdi + rbx - 0x240e0e1c]', 'sal dil, 0x44', 'lea rbx, [rbx + rdi*2 - 0x481c1d9b]', 'xor ecx, r10d', 'sar rdx, 0x3e', 'lea ecx, [rcx + rdx*2 - 0x3c195d0c]', 'neg ecx', 'rol sil, 0x65', 'and dil, dl', 'ror dword ptr [rsp + rdi - 0x240e0dfc], 0xd8', 'lea ecx, [rcx + rdx*8 - 0x64801e2b]', 'bswap ecx', 'sbb word ptr [rsp + rsi - 0x70ab8b53], 0xe30b', 'sbb di, dx', 'inc ecx', 'sal dil, 0x45', 'and r9d, 0xfd0f29bd', 'not ecx', 'push rsi', 'cdqe', 'dec ecx', 'xadd dword ptr [rsp + rdi*2 - 0x481c1bb8], esi', 'sete byte ptr [rsp + rsi - 0x77dbc50c]', 'mov qword ptr [rsp + rdi - 0x240e0dd8], r10', 'dec dword ptr [rsp + rdi - 0x240e0ddf]', 'xor dword ptr [rsp + rsi - 0x77dbc510], ecx', 'mov r10, qword ptr [rsp + rsi - 0x77dbc510]', 'push r9', 'sub dword ptr [rsp + rsi - 0x77dbc50f], 0x13aaa31a', 'movsxd rcx, ecx', 'add rbp, rcx', 'pop r9', 'pop r9', 'pop r9', 'btc eax, 0x85', 'lea rax, [rsp + rax - 0x7d379f42]', 'jae 0x7ffb728bbe12']

bytes: mov qword ptr [rsp + rdx*2], 0x240e0e1d: 48c704541d0e0e24
mov r9, qword ptr [rsi + rcx - 0x70ab8ba2]: 4c8b8c0e5e74548f
mov qword ptr [rdx + r8 - 0x10], r9: 4e894c02f0
pop rdi: 5f
movsx r9d, word ptr [rsp + rsi - 0x70ab8ba0]: 440fbf8c346074548f
lea r8, [rsi + r8 - 0x70ab8bb2]: 4e8d84064e74548f
xchg byte ptr [rsp + rsi - 0x70ab8b9b], ah: 86a4346574548f
mov ecx, dword ptr [rdi + rbx - 0x240e0e1c]: 8b8c1fe4f1f1db
sal dil, 0x44: 40c0f744
lea rbx, [rbx + rdi*2 - 0x481c1d9b]: 488d9c7b65e2e3b7
xor ecx, r10d: 4133ca
sar rdx, 0x3e: 48c1fa3e
lea ecx, [rcx + rdx*2 - 0x3c195d0c]: 8d8c51f4a2e6c3
neg ecx: f7d9
rol sil, 0x65: 40c0c665
and dil, dl: 4022fa
ror dword ptr [rsp + rdi - 0x240e0dfc], 0xd8: c18c3c04f2f1dbd8
lea ecx, [rcx + rdx*8 - 0x64801e2b]: 8d8cd1d5e17f9b
bswap ecx: 0fc9
sbb word ptr [rsp + rsi - 0x70ab8b53], 0xe30b: 66819c34ad74548f0be3
sbb di, dx: 661bfa
inc ecx: ffc1
sal dil, 0x45: 40c0f745
and r9d, 0xfd0f29bd: 4181e1bd290ffd
not ecx: f7d1
push rsi: 56
cdqe: 4898
dec ecx: ffc9
xadd dword ptr [rsp + rdi*2 - 0x481c1bb8], esi: 0fc1b47c48e4e3b7
sete byte ptr [rsp + rsi - 0x77dbc50c]: 0f948434f43a2488
mov qword ptr [rsp + rdi - 0x240e0dd8], r10: 4c89943c28f2f1db
dec dword ptr [rsp + rdi - 0x240e0ddf]: ff8c3c21f2f1db
xor dword ptr [rsp + rsi - 0x77dbc510], ecx: 318c34f03a2488
mov r10, qword ptr [rsp + rsi - 0x77dbc510]: 4c8b9434f03a2488
push r9: 4151
sub dword ptr [rsp + rsi - 0x77dbc50f], 0x13aaa31a: 81ac34f13a24881aa3aa13
movsxd rcx, ecx: 4863c9
add rbp, rcx: 4803e9
pop r9: 4159
pop r9: 4159
pop r9: 4159
btc eax, 0x85: 0fbaf885
lea rax, [rsp + rax - 0x7d379f42]: 488d8404be60c882
jae 0x7ffb728bbe12: 0f839f62dbff

bytecode len: 454 -   48c704541d0e0e244c8b8c0e5e74548f4e894c02f05f440fbf8c346074548f4e8d84064e74548f86a4346574548f8b8c1fe4f1f1db40c0f744488d9c7b65e2e3b74133ca48c1fa3e8d8c51f4a2e6c3f7d940c0c6654022fac18c3c04f2f1dbd88d8cd1d5e17f9b0fc966819c34ad74548f0be3661bfaffc140c0f7454181e1bd290ffdf7d1564898ffc90fc1b47c48e4e3b70f948434f43a24884c89943c28f2f1dbff8c3c21f2f1db318c34f03a24884c8b9434f03a2488415181ac34f13a24881aa3aa134863c94803e94159415941590fbaf885488d8404be60c8820f839f62dbff

block IDs [duplicates]: [165]
['movzx r9d, word ptr [rbx]', 'mov r11d, 0x1d3c53b5', 'movsx edi, r11w', 'xor r9w, r10w', 'ror r9w, 1', 'push rdi', 'xor r9w, 0x289b', 'ror r9w, 1', 'sal word ptr [rsp + r11 - 0x1d1c53b3], 0xc2', 'inc r9w', 'movsx eax, dil', 'neg r9w', 'shr r11, 0x55', 'mov edx, 0x27140bb2', 'xor r10w, r9w', 'lea rdi, [rdx*8 - 0x166b7743]', 'lea r9, [rsp + r9 + 8]', 'mov r11, qword ptr [r11 + r9 - 0xe8]', 'btr eax, edi', 'rol dil, 0xa2', 'sal rdx, 0x31', 'mov qword ptr [r8 - 8], r11', 'bts ax, 0x3c', 'xor qword ptr [rsp], 0x75021d29', 'mov r11d, dword ptr [rbx + 2]', 'setnp byte ptr [rsp + 1]', 'mov ecx, edx', 'xor word ptr [rsp + rcx*2 + 6], dx', 'xor r11d, r10d', 'call 0x7ffb72d84612']

bytes: movzx r9d, word ptr [rbx]: 440fb70b
mov r11d, 0x1d3c53b5: 41bbb5533c1d
movsx edi, r11w: 410fbffb
xor r9w, r10w: 664533ca
ror r9w, 1: 6641d1c9
push rdi: 57
xor r9w, 0x289b: 664181f19b28
ror r9w, 1: 6641d1c9
sal word ptr [rsp + r11 - 0x1d1c53b3], 0xc2: 6642c1b41c4dace3e2c2
inc r9w: 6641ffc1
movsx eax, dil: 400fbec7
neg r9w: 6641f7d9
shr r11, 0x55: 49c1eb55
mov edx, 0x27140bb2: bab20b1427
xor r10w, r9w: 664533d1
lea rdi, [rdx*8 - 0x166b7743]: 488d3cd5bd8894e9
lea r9, [rsp + r9 + 8]: 4e8d4c0c08
mov r11, qword ptr [r11 + r9 - 0xe8]: 4f8b9c0b18ffffff
btr eax, edi: 0fb3f8
rol dil, 0xa2: 40c0c7a2
sal rdx, 0x31: 48c1f231
mov qword ptr [r8 - 8], r11: 4d895c20f8
bts ax, 0x3c: 660fbae83c
xor qword ptr [rsp], 0x75021d29: 4881742400291d0275
mov r11d, dword ptr [rbx + 2]: 448b5c2302
setnp byte ptr [rsp + 1]: 0f9b442401
mov ecx, edx: 8bca
xor word ptr [rsp + rcx*2 + 6], dx: 6631544c06
xor r11d, r10d: 4533da
call 0x7ffb72d84612: e89f1f3000

bytecode len: 288 -   440fb70b41bbb5533c1d410fbffb664533ca6641d1c957664181f19b286641d1c96642c1b41c4dace3e2c26641ffc1400fbec76641f7d949c1eb55bab20b1427664533d1488d3cd5bd8894e94e8d4c0c084f8b9c0b18ffffff0fb3f840c0c7a248c1f2314d895c20f8660fbae83c4881742400291d0275448b5c23020f9b4424018bca6631544c064533dae89f1f3000

block IDs [duplicates]: [166]
['mov qword ptr [rsp + rdi*8 - 0x200], -0x63fbfb49', 'not ax', 'add ax, 0x7616', 'sub byte ptr [rsp + rdi*2 - 0x7e], sil', 'not ax', 'rol byte ptr [rsp + rdi - 0x3c], 0x22', 'xadd qword ptr [rsp + rdi - 0x40], rdi', 'neg ax', 'xor r10w, ax', 'xor rdi, rsi', 'lea rax, [rsp + rax + 8]', 'shr qword ptr [rsp], 0xc7', 'mov r9, qword ptr [rax]', 'mov qword ptr [r8 - 8], r9', 'setbe dil', 'push rdi', 'movzx r9d, word ptr [rbx + 2]', 'shr rdi, 0x88', 'xor r9w, r10w', 'add dword ptr [rsp + 8], 0xee16b905', 'pop rcx', 'not r9w', 'call 0x7ffb72a88e54']

bytes: mov qword ptr [rsp + rdi*8 - 0x200], -0x63fbfb49: 48c784fc00feffffb704049c
not ax: 66f7d0
add ax, 0x7616: 66051676
sub byte ptr [rsp + rdi*2 - 0x7e], sil: 4028747c82
not ax: 66f7d0
rol byte ptr [rsp + rdi - 0x3c], 0x22: c0443cc422
xadd qword ptr [rsp + rdi - 0x40], rdi: 480fc17c3cc0
neg ax: 66f7d8
xor r10w, ax: 664433d0
xor rdi, rsi: 4833fe
lea rax, [rsp + rax + 8]: 488d440408
shr qword ptr [rsp], 0xc7: 48c16c2400c7
mov r9, qword ptr [rax]: 4c8b0c20
mov qword ptr [r8 - 8], r9: 4d894c20f8
setbe dil: 400f96c7
push rdi: 57
movzx r9d, word ptr [rbx + 2]: 440fb74c2302
shr rdi, 0x88: 48c1ef88
xor r9w, r10w: 664533ca
add dword ptr [rsp + 8], 0xee16b905: 8144240805b916ee
pop rcx: 59
not r9w: 6641f7d1
call 0x7ffb72a88e54: e8233b0700

bytecode len: 210 -   48c784fc00feffffb704049c66f7d0660516764028747c8266f7d0c0443cc422480fc17c3cc066f7d8664433d04833fe488d44040848c16c2400c74c8b0c204d894c20f8400f96c757440fb74c230248c1ef88664533ca8144240805b916ee596641f7d1e8233b0700

block IDs [duplicates]: [167]
['adc word ptr [rsp + 8], 0x28b3', 'adc r9w, 0x2e2a', 'rol r9w, cl', 'movzx edx, dil', 'dec r9w', 'not dword ptr [rsp + rdx*2 - 0x12f]', 'pop rsi', 'neg rdi', 'xor r10w, r9w', 'sal dword ptr [rsp + rdx - 0x9c], 0xbc', 'mov word ptr [rdx + r8 - 0xa6], r9w', 'movzx esi, cl', 'mov ecx, dword ptr [rbx + rdx*8 - 0x4dc]', 'pop r9', 'xor ecx, r10d', 'sar edx, 0x6b', 'neg ecx', 'inc dl', 'xadd rdx, rdi', 'ror ecx, 1', 'lea rax, [rdx + rdx*2 + 0x222550c]', 'not ecx', 'sub ecx, 0xa6857537', 'bswap r9d', 'push r10', 'xor dword ptr [rsp + rsi*2 - 2], ecx', 'pop r10', 'movsxd rcx, ecx', 'sar eax, 0xd3', 'setnp al', 'adc rbp, rcx', 'cdq', 'neg rdx', 'cwde', 'mov rdi, qword ptr [rbx + rdx*2 + 8]', 'lea r11, [rsi + r9*4 - 0x184546fc]', 'and dx, 0xcb0a', 'push rax', 'lea rbx, [rbx + rdx*2 + 0x10]', 'xor rdi, r10', 'pop rdx', 'neg rdi', 'add rdi, rdx', 'btc eax, 0x33', 'sub dx, r11w', 'movsx ecx, ax', 'ror rdi, 4', 'add rdi, rsi', 'shr al, 0xc3', 'neg rdi', 'sar ax, cl', 'push rsi', 'xor r10, rdi', 'mov qword ptr [r8 + rdx*2 - 0x8d0a], rdi', 'inc dword ptr [rsp + rdx*2 - 0x8cf7]', 'lea r8, [r8 + rdx*4 - 0x11a02]', 'or al, 0x36', 'pop rsi', 'jns 0x7ffb72b05b5c']

bytes: adc word ptr [rsp + 8], 0x28b3: 6681542408b328
adc r9w, 0x2e2a: 664181d12a2e
rol r9w, cl: 6641d3c1
movzx edx, dil: 400fb6d7
dec r9w: 6641ffc9
not dword ptr [rsp + rdx*2 - 0x12f]: f79454d1feffff
pop rsi: 5e
neg rdi: 48f7df
xor r10w, r9w: 664533d1
sal dword ptr [rsp + rdx - 0x9c], 0xbc: c1b41464ffffffbc
mov word ptr [rdx + r8 - 0xa6], r9w: 6646898c025affffff
movzx esi, cl: 0fb6f1
mov ecx, dword ptr [rbx + rdx*8 - 0x4dc]: 8b8cd324fbffff
pop r9: 4159
xor ecx, r10d: 4133ca
sar edx, 0x6b: c1fa6b
neg ecx: f7d9
inc dl: fec2
xadd rdx, rdi: 480fc1fa
ror ecx, 1: d1c9
lea rax, [rdx + rdx*2 + 0x222550c]: 488d84520c552202
not ecx: f7d1
sub ecx, 0xa6857537: 81e9377585a6
bswap r9d: 410fc9
push r10: 4152
xor dword ptr [rsp + rsi*2 - 2], ecx: 314c74fe
pop r10: 415a
movsxd rcx, ecx: 4863c9
sar eax, 0xd3: c1f8d3
setnp al: 0f9bc0
adc rbp, rcx: 4813e9
cdq: 99
neg rdx: 48f7da
cwde: 98
mov rdi, qword ptr [rbx + rdx*2 + 8]: 488b7c5308
lea r11, [rsi + r9*4 - 0x184546fc]: 4e8d9c8e04b9bae7
and dx, 0xcb0a: 6681e20acb
push rax: 50
lea rbx, [rbx + rdx*2 + 0x10]: 488d5c5310
xor rdi, r10: 4933fa
pop rdx: 5a
neg rdi: 48f7df
add rdi, rdx: 4803fa
btc eax, 0x33: 0fbaf833
sub dx, r11w: 66412bd3
movsx ecx, ax: 0fbfc8
ror rdi, 4: 48c1cf04
add rdi, rsi: 4803fe
shr al, 0xc3: c0e8c3
neg rdi: 48f7df
sar ax, cl: 66d3f8
push rsi: 56
xor r10, rdi: 4c33d7
mov qword ptr [r8 + rdx*2 - 0x8d0a], rdi: 4989bc50f672ffff
inc dword ptr [rsp + rdx*2 - 0x8cf7]: ff84540973ffff
lea r8, [r8 + rdx*4 - 0x11a02]: 4d8d8490fee5feff
or al, 0x36: 0c36
pop rsi: 5e
jns 0x7ffb72b05b5c: 0f8919581800

bytecode len: 452 -   6681542408b328664181d12a2e6641d3c1400fb6d76641ffc9f79454d1feffff5e48f7df664533d1c1b41464ffffffbc6646898c025affffff0fb6f18b8cd324fbffff41594133cac1fa6bf7d9fec2480fc1fad1c9488d84520c552202f7d181e9377585a6410fc94152314c74fe415a4863c9c1f8d30f9bc04813e99948f7da98488b7c53084e8d9c8e04b9bae76681e20acb50488d5c53104933fa5a48f7df4803fa0fbaf83366412bd30fbfc848c1cf044803fec0e8c348f7df66d3f8564c33d74989bc50f672ffffff84540973ffff4d8d8490fee5feff0c365e0f8919581800

block IDs [duplicates]: [168]
['mov rsp, rdx', 'pushfq', 'mov rsi, r9', 'push 0x5d811808', 'ror qword ptr [rsp], 0x44', 'cld', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'rep movsb byte ptr [rdi], byte ptr [rsi]', 'call 0x7ffb72afe760']

bytes: mov rsp, rdx: 488be2
pushfq: 9c
mov rsi, r9: 498bf1
push 0x5d811808: 680818815d
ror qword ptr [rsp], 0x44: 48c14c240044
cld: fc
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
rep movsb byte ptr [rdi], byte ptr [rsi]: f3a4
call 0x7ffb72afe760: e85b5a0200

bytecode len: 1552 -   488be29c498bf1680818815d48c14c240044fcf3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4f3a4e85b5a0200

block IDs [duplicates]: [169]
['mov qword ptr [rsp], -0xfcb1aee', 'push -0x37eeb8fa', 'push qword ptr [rsp + 0x18]', 'popfq', 'lea rsp, [rsp + 0x20]', 'jmp rbp']

bytes: mov qword ptr [rsp], -0xfcb1aee: 48c744240012e534f0
push -0x37eeb8fa: 68064711c8
push qword ptr [rsp + 0x18]: ff742418
popfq: 9d
lea rsp, [rsp + 0x20]: 488d642420
jmp rbp: ffe5

bytecode len: 52 -   48c744240012e534f068064711c8ff7424189d488d642420ffe5

block IDs [duplicates]: [171]
['xadd ecx, edi', 'dec sil', 'xor sil, 0x30', 'xadd dil, r11b', 'sbb al, dil', 'xor r10b, sil', 'xchg dx, r9w', 'add rsi, rsp', 'push rdx', 'ror qword ptr [rsp + r11 - 0xf5f6], cl', 'mov edi, dword ptr [r11 + rsi - 0xf5f6]', 'neg dx', 'mov dword ptr [r11 + r8 - 0xf5fa], edi', 'xadd qword ptr [rsp + r11 - 0xf5f6], r11', 'mov r9d, dword ptr [rbx + 1]', 'pop r11', 'adc rbx, 5', 'xor r9d, r10d', 'xor r11d, eax', 'ror r9d, 3', 'movsx edi, al', 'lea rsi, [rdx*2 + 0x7c8d3833]', 'inc r9d', 'and eax, 0xfa907d30', 'neg r9d', 'xor r9d, 0x843f2b8e', 'sar r11w, 0x4f', 'shr esi, cl', 'sal ax, 0x8d', 'push r10', 'bswap r11d', 'xor dword ptr [rsp + rdi - 0x6a], r9d', 'or r11w, 0x263a', 'push rax', 'mov r10, qword ptr [rsp + rdi*2 - 0xcc]', 'jnp 0x7ffb72c845d5']

bytes: xadd ecx, edi: 0fc1f9
dec sil: 40fece
xor sil, 0x30: 4080f630
xadd dil, r11b: 440fc0df
sbb al, dil: 401ac7
xor r10b, sil: 4432d6
xchg dx, r9w: 664487ca
add rsi, rsp: 4803f4
push rdx: 52
ror qword ptr [rsp + r11 - 0xf5f6], cl: 4ad38c1c0a0affff
mov edi, dword ptr [r11 + rsi - 0xf5f6]: 418bbc330a0affff
neg dx: 66f7da
mov dword ptr [r11 + r8 - 0xf5fa], edi: 4389bc03060affff
xadd qword ptr [rsp + r11 - 0xf5f6], r11: 4e0fc19c1c0a0affff
mov r9d, dword ptr [rbx + 1]: 448b4c2301
pop r11: 415b
adc rbx, 5: 4883d305
xor r9d, r10d: 4533ca
xor r11d, eax: 4433d8
ror r9d, 3: 41c1c903
movsx edi, al: 0fbef8
lea rsi, [rdx*2 + 0x7c8d3833]: 488d345533388d7c
inc r9d: 41ffc1
and eax, 0xfa907d30: 25307d90fa
neg r9d: 41f7d9
xor r9d, 0x843f2b8e: 4181f18e2b3f84
sar r11w, 0x4f: 6641c1fb4f
shr esi, cl: d3ee
sal ax, 0x8d: 66c1f08d
push r10: 4152
bswap r11d: 410fcb
xor dword ptr [rsp + rdi - 0x6a], r9d: 44314c3c96
or r11w, 0x263a: 664181cb3a26
push rax: 50
mov r10, qword ptr [rsp + rdi*2 - 0xcc]: 4c8b947c34ffffff
jnp 0x7ffb72c845d5: 0f8b678b2e00

bytecode len: 312 -   0fc1f940fece4080f630440fc0df401ac74432d6664487ca4803f4524ad38c1c0a0affff418bbc330a0affff66f7da4389bc03060affff4e0fc19c1c0a0affff448b4c2301415b4883d3054533ca4433d841c1c9030fbef8488d345533388d7c41ffc125307d90fa41f7d94181f18e2b3f846641c1fb4fd3ee66c1f08d4152410fcb44314c3c96664181cb3a26504c8b947c34ffffff0f8b678b2e00

block IDs [duplicates]: [172]
['mov qword ptr [rsp + rcx + 0xf9fc], rbp', 'ret 8']

bytes: mov qword ptr [rsp + rcx + 0xf9fc], rbp: 4889ac0cfcf90000
ret 8: c20800

bytecode len: 22 -   4889ac0cfcf90000c20800

block IDs [duplicates]: [173]
['inc edx', 'rol di, 0x81', 'shl r9d, cl', 'not edx', 'not r11w', 'xadd r9w, r11w', 'ror edx, 1', 'xor edx, 0xd12ac05', 'rol edi, cl', 'call 0x7ffb72c184d6']

bytes: inc edx: ffc2
rol di, 0x81: 66c1c781
shl r9d, cl: 41d3e1
not edx: f7d2
not r11w: 6641f7d3
xadd r9w, r11w: 66450fc1d9
ror edx, 1: d1ca
xor edx, 0xd12ac05: 81f205ac120d
rol edi, cl: d3c7
call 0x7ffb72c184d6: e8e8d92800

bytecode len: 70 -   ffc266c1c78141d3e1f7d26641f7d366450fc1d9d1ca81f205ac120dd3c7e8e8d92800

block IDs [duplicates]: [174]
['mov r11d, 0xd5a83fb7', 'mov eax, r11d', 'mov r9, qword ptr [r8]', 'call 0x7ffb72ac6231']

bytes: mov r11d, 0xd5a83fb7: 41bbb73fa8d5
mov eax, r11d: 418bc3
mov r9, qword ptr [r8]: 4d8b0c20
call 0x7ffb72ac6231: e87bc6fdff

bytecode len: 36 -   41bbb73fa8d5418bc34d8b0c20e87bc6fdff

block IDs [duplicates]: [175]
['add r8, 8', 'mov rbx, r9', 'pop rsi', 'neg byte ptr [rsp + rdx + 3]', 'jge 0x7ffb72b88eab']

bytes: add r8, 8: 4981c008000000
mov rbx, r9: 498bd9
pop rsi: 5e
neg byte ptr [rsp + rdx + 3]: f65c1403
jge 0x7ffb72b88eab: 0f8d91480800

bytecode len: 42 -   4981c008000000498bd95ef65c14030f8d91480800

block IDs [duplicates]: [176]
['lea rax, [rcx + rax*2 - 0x237b3d00]', 'lea rcx, [rcx - 0x40ffaf73]', 'dec r11b', 'xor r10b, r11b', 'push rax', 'ror dword ptr [rsp + rdi*2], cl', 'sub byte ptr [rsp + rdi + 7], al', 'lea r11, [rsp + r11 + 8]', 'xchg cl, sil', 'movzx edx, byte ptr [rsp + rdi + 2]', 'btc rcx, rdi', 'mov qword ptr [r11 + rdi*4], r9', 'sar rsi, 0x26', 'add edi, dword ptr [rdi + rbx + 1]', 'btc ecx, 0xa0', 'cwde', 'lea rbx, [rbx + rsi*8 + 0xd]', 'sal dword ptr [rsp + rsi*2 + 0x204], cl', 'adc esi, 0x9aa91b0f', 'xor edi, r10d', 'ror dx, cl', 'inc edi', 'ror byte ptr [rsp + rdx - 0x87a], 0x23', 'inc byte ptr [rsp + rdx*8 - 0x43fb]', 'sal qword ptr [rsp + rdx - 0x880], cl', 'ror edi, 2', 'xadd qword ptr [rsp + rdx - 0x880], rcx', 'movzx r9d, byte ptr [rsp + rdx*2 - 0x10ff]', 'jge 0x7ffb72c09547']

bytes: lea rax, [rcx + rax*2 - 0x237b3d00]: 488d844100c384dc
lea rcx, [rcx - 0x40ffaf73]: 488d898d5000bf
dec r11b: 41fecb
xor r10b, r11b: 4532d3
push rax: 50
ror dword ptr [rsp + rdi*2], cl: d30c7c
sub byte ptr [rsp + rdi + 7], al: 28443c07
lea r11, [rsp + r11 + 8]: 4e8d5c1c08
xchg cl, sil: 4086f1
movzx edx, byte ptr [rsp + rdi + 2]: 0fb6543c02
btc rcx, rdi: 480fbbf9
mov qword ptr [r11 + rdi*4], r9: 4d890cbb
sar rsi, 0x26: 48c1fe26
add edi, dword ptr [rdi + rbx + 1]: 037c1f01
btc ecx, 0xa0: 0fbaf9a0
cwde: 98
lea rbx, [rbx + rsi*8 + 0xd]: 488d5cf30d
sal dword ptr [rsp + rsi*2 + 0x204], cl: d3b47404020000
adc esi, 0x9aa91b0f: 81d60f1ba99a
xor edi, r10d: 4133fa
ror dx, cl: 66d3ca
inc edi: ffc7
ror byte ptr [rsp + rdx - 0x87a], 0x23: c08c1486f7ffff23
inc byte ptr [rsp + rdx*8 - 0x43fb]: fe84d405bcffff
sal qword ptr [rsp + rdx - 0x880], cl: 48d3b41480f7ffff
ror edi, 2: c1cf02
xadd qword ptr [rsp + rdx - 0x880], rcx: 480fc18c1480f7ffff
movzx r9d, byte ptr [rsp + rdx*2 - 0x10ff]: 440fb68c5401efffff
jge 0x7ffb72c09547: 0f8d028d1900

bytecode len: 278 -   488d844100c384dc488d898d5000bf41fecb4532d350d30c7c28443c074e8d5c1c084086f10fb6543c02480fbbf94d890cbb48c1fe26037c1f010fbaf9a098488d5cf30dd3b4740402000081d60f1ba99a4133fa66d3caffc7c08c1486f7ffff23fe84d405bcffff48d3b41480f7ffffc1cf02480fc18c1480f7ffff440fb68c5401efffff0f8d028d1900

block IDs [duplicates]: [177]
['mov qword ptr [rsp + rdx - 0x880], r10', 'xor dword ptr [rsp + rdx - 0x880], edi', 'and rsi, rdx', 'setb dl', 'rol rsi, 0x55', 'pop r10', 'movsxd rdi, edi', 'add rbp, rdi', 'ror edx, 0x85', 'jmp rbp']

bytes: mov qword ptr [rsp + rdx - 0x880], r10: 4c89941480f7ffff
xor dword ptr [rsp + rdx - 0x880], edi: 31bc1480f7ffff
and rsi, rdx: 4823f2
setb dl: 0f92c2
rol rsi, 0x55: 48c1c655
pop r10: 415a
movsxd rdi, edi: 4863ff
add rbp, rdi: 4803ef
ror edx, 0x85: c1ca85
jmp rbp: ffe5

bytecode len: 76 -   4c89941480f7ffff31bc1480f7ffff4823f20f92c248c1c655415a4863ff4803efc1ca85ffe5

block IDs [duplicates]: [178]
['not eax', 'adc rdx, rcx', 'sbb eax, 0x9f277b80', 'ror eax, 1', 'bswap eax', 'bswap rcx', 'dec eax', 'or r9w, r11w', 'or r11, rdx', 'dec dx', 'push r10', 'xor dword ptr [rsp + rdx - 0x52962491], eax', 'lea r9, [r9 + 0x69943113]', 'pop r10', 'inc r9', 'btr rcx, r11', 'mov edi, r11d', 'movsxd rax, eax', 'call 0x7ffb72e6154e']

bytes: not eax: f7d0
adc rdx, rcx: 4813d1
sbb eax, 0x9f277b80: 1d807b279f
ror eax, 1: d1c8
bswap eax: 0fc8
bswap rcx: 480fc9
dec eax: ffc8
or r9w, r11w: 66450bcb
or r11, rdx: 4c0bda
dec dx: 66ffca
push r10: 4152
xor dword ptr [rsp + rdx - 0x52962491], eax: 3184146fdb69ad
lea r9, [r9 + 0x69943113]: 4d8d8913319469
pop r10: 415a
inc r9: 49ffc1
btr rcx, r11: 4c0fb3d9
mov edi, r11d: 418bfb
movsxd rax, eax: 4863c0
call 0x7ffb72e6154e: e855684600

bytecode len: 130 -   f7d04813d11d807b279fd1c80fc8480fc9ffc866450bcb4c0bda66ffca41523184146fdb69ad4d8d8913319469415a49ffc14c0fb3d9418bfb4863c0e855684600

block IDs [duplicates]: [179]
['adc rbp, rax', 'mov qword ptr [rsp + rdx - 0x52962491], r9', 'mov rax, qword ptr [r11 + r8 - 0x5adf2cbb]', 'movzx edx, word ptr [r11 + rbx - 0x5adf2cb7]', 'call 0x7ffb72dda795']

bytes: adc rbp, rax: 4813e8
mov qword ptr [rsp + rdx - 0x52962491], r9: 4c898c146fdb69ad
mov rax, qword ptr [r11 + r8 - 0x5adf2cbb]: 4b8b840345d320a5
movzx edx, word ptr [r11 + rbx - 0x5adf2cb7]: 410fb7941b49d320a5
call 0x7ffb72dda795: e8de793200

bytecode len: 66 -   4813e84c898c146fdb69ad4b8b840345d320a5410fb7941b49d320a5e8de793200

block IDs [duplicates]: [180]
['pop rsi', 'inc dx', 'xor dx, 0xb795', 'inc dx', 'inc dil', 'neg rdi', 'neg dx', 'neg qword ptr [rsp + r11 - 0x5adf2cb3]', 'xor r10w, dx', 'dec r11w', 'call 0x7ffb72aae57f']

bytes: pop rsi: 5e
inc dx: 66ffc2
xor dx, 0xb795: 6681f295b7
inc dx: 66ffc2
inc dil: 40fec7
neg rdi: 48f7df
neg dx: 66f7da
neg qword ptr [rsp + r11 - 0x5adf2cb3]: 4af79c1c4dd320a5
xor r10w, dx: 664433d2
dec r11w: 6641ffcb
call 0x7ffb72aae57f: e897500700

bytecode len: 84 -   5e66ffc26681f295b766ffc240fec748f7df66f7da4af79c1c4dd320a5664433d26641ffcbe897500700

block IDs [duplicates]: [181]
['lea rdx, [rsp + rdx + 0x18]', 'movzx esi, byte ptr [rsp + r11 - 0x5adf2ca6]', 'mov qword ptr [rsp + r11 - 0x5adf2cb2], rsi', 'or sil, dil', 'mov qword ptr [rdx + r11 - 0x5adf2cba], rax', 'sal dword ptr [rsp + rsi - 0xeb], 0x70', 'mov r11, qword ptr [r8 + rsi - 0xf7]', 'setns byte ptr [rsp + rsi - 0xef]', 'movzx eax, di', 'lea r8, [r8 + rsi*2 - 0x1ee]', 'xchg dword ptr [rsp + rsi*2 - 0x1ef], esi', 'inc r9w', 'movzx ecx, word ptr [rax + rbx - 0x3ee0]', 'not r9d', 'lea rbx, [rbx + r9 - 0x70e76f35]', 'xor cx, r10w', 'cdq', 'neg byte ptr [rsp + r9 - 0x70e7de6f]', 'rol cx, 1', 'neg cx', 'mov qword ptr [rsp + r9 - 0x70e7de7a], -0x55d358c9', 'inc cx', 'xchg byte ptr [rsp + r9 - 0x70e7de65], dl', 'call 0x7ffb72d17f30']

bytes: lea rdx, [rsp + rdx + 0x18]: 488d541418
movzx esi, byte ptr [rsp + r11 - 0x5adf2ca6]: 420fb6b41c5ad320a5
mov qword ptr [rsp + r11 - 0x5adf2cb2], rsi: 4a89b41c4ed320a5
or sil, dil: 400af7
mov qword ptr [rdx + r11 - 0x5adf2cba], rax: 4a89841a46d320a5
sal dword ptr [rsp + rsi - 0xeb], 0x70: c1b43415ffffff70
mov r11, qword ptr [r8 + rsi - 0xf7]: 4d8b9c3009ffffff
setns byte ptr [rsp + rsi - 0xef]: 0f99843411ffffff
movzx eax, di: 0fb7c7
lea r8, [r8 + rsi*2 - 0x1ee]: 4d8d847012feffff
xchg dword ptr [rsp + rsi*2 - 0x1ef], esi: 87b47411feffff
inc r9w: 6641ffc1
movzx ecx, word ptr [rax + rbx - 0x3ee0]: 0fb78c1820c1ffff
not r9d: 41f7d1
lea rbx, [rbx + r9 - 0x70e76f35]: 4a8d9c0bcb90188f
xor cx, r10w: 664133ca
cdq: 99
neg byte ptr [rsp + r9 - 0x70e7de6f]: 42f69c0c9121188f
rol cx, 1: 66d1c1
neg cx: 66f7d9
mov qword ptr [rsp + r9 - 0x70e7de7a], -0x55d358c9: 4ac7840c8621188f37a72caa
inc cx: 66ffc1
xchg byte ptr [rsp + r9 - 0x70e7de65], dl: 4286940c9b21188f
call 0x7ffb72d17f30: e80f992600

bytecode len: 290 -   488d541418420fb6b41c5ad320a54a89b41c4ed320a5400af74a89841a46d320a5c1b43415ffffff704d8b9c3009ffffff0f99843411ffffff0fb7c74d8d847012feffff87b47411feffff6641ffc10fb78c1820c1ffff41f7d14a8d9c0bcb90188f664133ca9942f69c0c9121188f66d1c166f7d94ac7840c8621188f37a72caa66ffc14286940c9b21188fe80f992600

block IDs [duplicates]: [182]
['mov esi, dword ptr [r11 + rbx - 0x18d]', 'and r11, 0xffffffff9b302c25', 'xor esi, r10d', 'ror dword ptr [rsp + r11 - 3], 0x9c', 'lea esi, [rsi + r11*2 - 0x54a32794]', 'jae 0x7ffb72c03357']

bytes: mov esi, dword ptr [r11 + rbx - 0x18d]: 418bb41b73feffff
and r11, 0xffffffff9b302c25: 4981e3252c309b
xor esi, r10d: 4133f2
ror dword ptr [rsp + r11 - 3], 0x9c: 42c14c1cfd9c
lea esi, [rsi + r11*2 - 0x54a32794]: 428db45e6cd85cab
jae 0x7ffb72c03357: 0f83a04c3300

bytecode len: 76 -   418bb41b73feffff4981e3252c309b4133f242c14c1cfd9c428db45e6cd85cab0f83a04c3300

block IDs [duplicates]: [261, 261]
['mov eax, 0xcc98c118', 'mov rbx, r8', 'movabs r10, 0x7ff9e7130000', 'sub rbx, r10', 'lea rdi, [rip - 7]', 'mov edx, 0x1c94e937', 'movsx r9d, dx', 'mov edx, dword ptr [r8 + rdx - 0x1c94e937]', 'add r8, 4', 'movzx r10d, r9w', 'xor edx, ebx', 'neg edx', 'not edx', 'not r9b', 'xor bl, r9b', 'mov ecx, r10d', 'lea r9, [rsp + r9 + 8]', 'mov qword ptr [r9 + rax*4 - 0x484150d0], rdx', 'mov qword ptr [rsp + rax*2 - 0x2420a868], r10', 'mov r11d, dword ptr [rax + r8 - 0x12105433]', 'sal cl, 0x64', 'xor r11d, ebx', 'xor rax, 0xffffffffec3e78b1', 'movsx ebp, byte ptr [rsp + rax + 0x1d1d37c]', 'movzx r9d, bp', 'neg r11d', 'inc r11d', 'cqo', 'xor qword ptr [rsp + rax*2 + 0x3a3a6f6], rcx', 'jge 0x7ffb729cc9ba']

bytes: mov eax, 0xcc98c118: b818c198cc
mov rbx, r8: 498bd8
movabs r10, 0x7ff9e7130000: 49ba000013e7f97f0000
sub rbx, r10: 492bda
lea rdi, [rip - 7]: 488d3df9ffffff
mov edx, 0x1c94e937: ba37e9941c
movsx r9d, dx: 440fbfca
mov edx, dword ptr [r8 + rdx - 0x1c94e937]: 418b9410c9166be3
add r8, 4: 4981c004000000
movzx r10d, r9w: 450fb7d1
xor edx, ebx: 33d3
neg edx: f7da
not edx: f7d2
not r9b: 41f6d1
xor bl, r9b: 4132d9
mov ecx, r10d: 418bca
lea r9, [rsp + r9 + 8]: 4e8d4c0c08
mov qword ptr [r9 + rax*4 - 0x484150d0], rdx: 4989948130afbeb7
mov qword ptr [rsp + rax*2 - 0x2420a868], r10: 4c8994449857dfdb
mov r11d, dword ptr [rax + r8 - 0x12105433]: 468b9c00cdabefed
sal cl, 0x64: c0f164
xor r11d, ebx: 4433db
xor rax, 0xffffffffec3e78b1: 4881f0b1783eec
movsx ebp, byte ptr [rsp + rax + 0x1d1d37c]: 0fbeac047cd3d101
movzx r9d, bp: 440fb7cd
neg r11d: 41f7db
inc r11d: 41ffc3
cqo: 4899
xor qword ptr [rsp + rax*2 + 0x3a3a6f6], rcx: 48318c44f6a6a303
jge 0x7ffb729cc9ba: 0f8d5de40d00

bytecode len: 294 -   b818c198cc498bd849ba000013e7f97f0000492bda488d3df9ffffffba37e9941c440fbfca418b9410c9166be34981c004000000450fb7d133d3f7daf7d241f6d14132d9418bca4e8d4c0c084989948130afbeb74c8994449857dfdb468b9c00cdabefedc0f1644433db4881f0b1783eec0fbeac047cd3d101440fb7cd41f7db41ffc3489948318c44f6a6a3030f8d5de40d00

block IDs [duplicates]: [184]
['or dword ptr [rsp + r11 - 0xdf0d], r9d', 'neg bp', 'push rdx', 'sub bp, 0x1b15', 'lea r9, [r11 + rcx*8 + 0x540c0baf]', 'call 0x7ffb72d7a452']

bytes: or dword ptr [rsp + r11 - 0xdf0d], r9d: 46098c1cf320ffff
neg bp: 66f7dd
push rdx: 52
sub bp, 0x1b15: 6681ed151b
lea r9, [r11 + rcx*8 + 0x540c0baf]: 4d8d8ccbaf0b0c54
call 0x7ffb72d7a452: e8a5f34800

bytecode len: 60 -   46098c1cf320ffff66f7dd526681ed151b4d8d8ccbaf0b0c54e8a5f34800

block IDs [duplicates]: [185]
['neg bpl', 'inc dword ptr [rsp + r11*4 - 0x282d]', 'pop rcx', 'xor bl, bpl', 'lea rbp, [rsp + rbp + 0x18]', 'shr dword ptr [rsp + r11*2 - 0x141d], 0xa1', 'shr r11d, 0xe9', 'mov qword ptr [r11 + rbp - 5], r10', 'xadd cl, al', 'pop r11', 'mov r11, qword ptr [rsi + 0x10]', 'call 0x7ffb72ce7c92']

bytes: neg bpl: 40f6dd
inc dword ptr [rsp + r11*4 - 0x282d]: 42ff849cd3d7ffff
pop rcx: 59
xor bl, bpl: 4032dd
lea rbp, [rsp + rbp + 0x18]: 488d6c2c18
shr dword ptr [rsp + r11*2 - 0x141d], 0xa1: 42c1ac5ce3ebffffa1
shr r11d, 0xe9: 41c1ebe9
mov qword ptr [r11 + rbp - 5], r10: 4d89542bfb
xadd cl, al: 0fc0c1
pop r11: 415b
mov r11, qword ptr [rsi + 0x10]: 4c8b5c2610
call 0x7ffb72ce7c92: e888532c00

bytecode len: 106 -   40f6dd42ff849cd3d7ffff594032dd488d6c2c1842c1ac5ce3ebffffa141c1ebe94d89542bfb0fc0c1415b4c8b5c2610e888532c00

block IDs [duplicates]: [186]
['xor al, bl', 'or dl, 0x22', 'or word ptr [rsp + 0xd], 0xce95', 'not al', 'mov r10d, edx', 'xor r10d, edx', 'sbb r9, qword ptr [rsp + r10 + 0x10]', 'xor al, 0x91', 'neg al', 'add al, 0x20', 'xor cl, byte ptr [rsp + r10 + 0xd]', 'xor bl, al', 'pop rbp', 'add rbp, -0xb968e', 'jmp rbp']

bytes: xor al, bl: 32c3
or dl, 0x22: 80ca22
or word ptr [rsp + 0xd], 0xce95: 66814c240d95ce
not al: f6d0
mov r10d, edx: 448bd2
xor r10d, edx: 4433d2
sbb r9, qword ptr [rsp + r10 + 0x10]: 4e1b4c1410
xor al, 0x91: 3491
neg al: f6d8
add al, 0x20: 0420
xor cl, byte ptr [rsp + r10 + 0xd]: 42324c140d
xor bl, al: 32d8
pop rbp: 5d
add rbp, -0xb968e: 4881c57269f4ff
jmp rbp: ffe5

bytecode len: 96 -   32c380ca2266814c240d95cef6d0448bd24433d24e1b4c14103491f6d8042042324c140d32d85d4881c57269f4ffffe5

block IDs [duplicates]: [187]
['call 0x7ffb72bd1c7f']

bytes: call 0x7ffb72bd1c7f: e8d8870400

bytecode len: 10 -   e8d8870400

block IDs [duplicates]: [188]
['mov r11d, dword ptr [r8]', 'mov ebp, 0x1c286c1a', 'xor r11d, ebx', 'mov edx, ebp', 'neg r11d', 'lea rcx, [rbp + rdx + 0x5889aca7]', 'lea r9, [rbp*2 - 0x6bdd6af9]', 'ror r9w, 0x23', 'inc r11d', 'neg rbp', 'movzx r10d, dx', 'neg r11d', 'sub cx, r10w', 'btc ecx, 0x24', 'xor r11d, 0x3fbfdd22', 'push rbx', 'xor dword ptr [rsp + rbp*2 + 0x3850d834], r11d', 'pop rbx', 'movsxd r11, r11d', 'add rdi, r11', 'mov r10, qword ptr [rsi + rbp + 0x1c286c1a]', 'add bp, r9w', 'movzx edx, byte ptr [r8 + rbp + 0x1c28fe77]', 'lea rax, [r9 + r9*4 - 0x58422a5b]', 'xor dl, bl', 'or r9b, cl', 'inc ebp', 'not dl', 'or r9, rbp', 'adc dl, r9b', 'neg dl', 'cwde', 'ror dl, 1', 'neg r9d', 'lea r11, [r9*8 - 0x466b7978]', 'shl r9, cl', 'sbb dl, 0x38', 'lea r9, [r9 + rcx*8 + 0x629f4a1c]', 'or r9d, r11d', 'or r9w, cx', 'not dl', 'btc ecx, 5', 'xor bl, dl', 'sar r9w, 0x6f', 'push rax', 'lea rdx, [rsp + rdx + 8]', 'inc byte ptr [rsp + r9*2 - 0x7bf1fffc]', 'mov qword ptr [rdx + r9*2 - 0x7bf20000], r10', 'dec cl', 'mov rbp, qword ptr [rsi + r9 - 0x3df8fff8]', 'bswap r11', 'lea rsi, [rsi + r9 - 0x3df8fff0]', 'movsx edx, r9w', 'sar qword ptr [rsp + r9*2 - 0x7bf20000], cl', 'movzx ecx, byte ptr [r9 + r8 - 0x3df8fffb]', 'lea r8, [r8 + r9 - 0x3df8fffa]', 'xor cl, bl', 'neg cl', 'sub rdx, 0x27211a2a', 'setle byte ptr [rsp + r9 - 0x3df90000]', 'adc cl, r9b', 'pop rax', 'call 0x7ffb72c13988']

bytes: mov r11d, dword ptr [r8]: 458b18
mov ebp, 0x1c286c1a: bd1a6c281c
xor r11d, ebx: 4433db
mov edx, ebp: 8bd5
neg r11d: 41f7db
lea rcx, [rbp + rdx + 0x5889aca7]: 488d8c15a7ac8958
lea r9, [rbp*2 - 0x6bdd6af9]: 4c8d0c6d07952294
ror r9w, 0x23: 6641c1c923
inc r11d: 41ffc3
neg rbp: 48f7dd
movzx r10d, dx: 440fb7d2
neg r11d: 41f7db
sub cx, r10w: 66412bca
btc ecx, 0x24: 0fbaf924
xor r11d, 0x3fbfdd22: 4181f322ddbf3f
push rbx: 53
xor dword ptr [rsp + rbp*2 + 0x3850d834], r11d: 44319c6c34d85038
pop rbx: 5b
movsxd r11, r11d: 4d63db
add rdi, r11: 4903fb
mov r10, qword ptr [rsi + rbp + 0x1c286c1a]: 4c8b942e1a6c281c
add bp, r9w: 664103e9
movzx edx, byte ptr [r8 + rbp + 0x1c28fe77]: 410fb6942877fe281c
lea rax, [r9 + r9*4 - 0x58422a5b]: 4b8d8489a5d5bda7
xor dl, bl: 32d3
or r9b, cl: 440ac9
inc ebp: ffc5
not dl: f6d2
or r9, rbp: 4c0bcd
adc dl, r9b: 4112d1
neg dl: f6da
cwde: 98
ror dl, 1: d0ca
neg r9d: 41f7d9
lea r11, [r9*8 - 0x466b7978]: 4e8d1ccd888694b9
shl r9, cl: 49d3e1
sbb dl, 0x38: 80da38
lea r9, [r9 + rcx*8 + 0x629f4a1c]: 4d8d8cc91c4a9f62
or r9d, r11d: 450bcb
or r9w, cx: 66440bc9
not dl: f6d2
btc ecx, 5: 0fbaf905
xor bl, dl: 32da
sar r9w, 0x6f: 6641c1f96f
push rax: 50
lea rdx, [rsp + rdx + 8]: 488d541408
inc byte ptr [rsp + r9*2 - 0x7bf1fffc]: 42fe844c04000e84
mov qword ptr [rdx + r9*2 - 0x7bf20000], r10: 4e89944a00000e84
dec cl: fec9
mov rbp, qword ptr [rsi + r9 - 0x3df8fff8]: 4a8bac0e080007c2
bswap r11: 490fcb
lea rsi, [rsi + r9 - 0x3df8fff0]: 4a8db40e100007c2
movsx edx, r9w: 410fbfd1
sar qword ptr [rsp + r9*2 - 0x7bf20000], cl: 4ad3bc4c00000e84
movzx ecx, byte ptr [r9 + r8 - 0x3df8fffb]: 430fb68c01050007c2
lea r8, [r8 + r9 - 0x3df8fffa]: 4f8d8408060007c2
xor cl, bl: 32cb
neg cl: f6d9
sub rdx, 0x27211a2a: 4881ea2a1a2127
setle byte ptr [rsp + r9 - 0x3df90000]: 420f9e840c000007c2
adc cl, r9b: 4112c9
pop rax: 58
call 0x7ffb72c13988: e8db992b00

bytecode len: 552 -   458b18bd1a6c281c4433db8bd541f7db488d8c15a7ac89584c8d0c6d079522946641c1c92341ffc348f7dd440fb7d241f7db66412bca0fbaf9244181f322ddbf3f5344319c6c34d850385b4d63db4903fb4c8b942e1a6c281c664103e9410fb6942877fe281c4b8d8489a5d5bda732d3440ac9ffc5f6d24c0bcd4112d1f6da98d0ca41f7d94e8d1ccd888694b949d3e180da384d8d8cc91c4a9f62450bcb66440bc9f6d20fbaf90532da6641c1f96f50488d54140842fe844c04000e844e89944a00000e84fec94a8bac0e080007c2490fcb4a8db40e100007c2410fbfd14ad3bc4c00000e84430fb68c01050007c24f8d8408060007c232cbf6d94881ea2a1a2127420f9e840c000007c24112c958e8db992b00

block IDs [duplicates]: [189]
['not r9b', 'xor bl, r9b', 'mov ecx, r10d', 'lea r9, [rsp + r9 + 8]', 'mov qword ptr [r9 + rax*4 - 0x484150d0], rdx', 'mov qword ptr [rsp + rax*2 - 0x2420a868], r10', 'mov r11d, dword ptr [rax + r8 - 0x12105433]', 'sal cl, 0x64', 'xor r11d, ebx', 'xor rax, 0xffffffffec3e78b1', 'movsx ebp, byte ptr [rsp + rax + 0x1d1d37c]', 'movzx r9d, bp', 'neg r11d', 'inc r11d', 'cqo', 'xor qword ptr [rsp + rax*2 + 0x3a3a6f6], rcx', 'jge 0x7ffb729cc9ba']

bytes: not r9b: 41f6d1
xor bl, r9b: 4132d9
mov ecx, r10d: 418bca
lea r9, [rsp + r9 + 8]: 4e8d4c0c08
mov qword ptr [r9 + rax*4 - 0x484150d0], rdx: 4989948130afbeb7
mov qword ptr [rsp + rax*2 - 0x2420a868], r10: 4c8994449857dfdb
mov r11d, dword ptr [rax + r8 - 0x12105433]: 468b9c00cdabefed
sal cl, 0x64: c0f164
xor r11d, ebx: 4433db
xor rax, 0xffffffffec3e78b1: 4881f0b1783eec
movsx ebp, byte ptr [rsp + rax + 0x1d1d37c]: 0fbeac047cd3d101
movzx r9d, bp: 440fb7cd
neg r11d: 41f7db
inc r11d: 41ffc3
cqo: 4899
xor qword ptr [rsp + rax*2 + 0x3a3a6f6], rcx: 48318c44f6a6a303
jge 0x7ffb729cc9ba: 0f8d5de40d00

bytecode len: 170 -   41f6d14132d9418bca4e8d4c0c084989948130afbeb74c8994449857dfdb468b9c00cdabefedc0f1644433db4881f0b1783eec0fbeac047cd3d101440fb7cd41f7db41ffc3489948318c44f6a6a3030f8d5de40d00

block IDs [duplicates]: [190]
['neg r11d', 'xchg byte ptr [rsp + rax*4 + 0x7474df0], r10b', 'bswap rcx', 'xor r11d, 0x3fbfdd22', 'push rax', 'mov qword ptr [rsp + rax*2 + 0x3a3a6fe], rbx', 'shl ebp, 0x1d', 'xor dword ptr [rsp + rax*4 + 0x7474df4], r11d', 'mov rbx, qword ptr [rsp + rax*2 + 0x3a3a6fe]', 'mov qword ptr [rsp + rdx*4 + 0xc], rcx', 'or ax, bp', 'movsxd r11, r11d', 'sub dword ptr [rsp + rax + 0x1d1d380], eax', 'add rdi, r11', 'mov rdx, qword ptr [rsi + rax + 0x1d1d383]', 'movzx ecx, word ptr [r8 + rax + 0x1d1d380]', 'movsx r11d, r9b', 'inc r10d', 'xor cx, bx', 'sar r10, 0x8f', 'adc cx, 0xe384', 'and r9b, r9b', 'sets r11b', 'xor cx, 0x3aa4', 'or r11b, 0x15', 'adc cx, 0x3e06', 'cbw', 'neg bp', 'and dword ptr [rsp + rax*2 + 0x3a20101], r9d', 'neg cx', 'add r9b, 0xaf', 'inc cx', 'rol cx, 1', 'cdqe', 'xor bx, cx', 'btc r10, r11', 'jb 0x7ffb72bcf292']

bytes: neg r11d: 41f7db
xchg byte ptr [rsp + rax*4 + 0x7474df0], r10b: 44869484f04d4707
bswap rcx: 480fc9
xor r11d, 0x3fbfdd22: 4181f322ddbf3f
push rax: 50
mov qword ptr [rsp + rax*2 + 0x3a3a6fe], rbx: 48899c44fea6a303
shl ebp, 0x1d: c1e51d
xor dword ptr [rsp + rax*4 + 0x7474df4], r11d: 44319c84f44d4707
mov rbx, qword ptr [rsp + rax*2 + 0x3a3a6fe]: 488b9c44fea6a303
mov qword ptr [rsp + rdx*4 + 0xc], rcx: 48894c940c
or ax, bp: 660bc5
movsxd r11, r11d: 4d63db
sub dword ptr [rsp + rax + 0x1d1d380], eax: 29840480d3d101
add rdi, r11: 4903fb
mov rdx, qword ptr [rsi + rax + 0x1d1d383]: 488b940683d3d101
movzx ecx, word ptr [r8 + rax + 0x1d1d380]: 410fb78c0080d3d101
movsx r11d, r9b: 450fbed9
inc r10d: 41ffc2
xor cx, bx: 6633cb
sar r10, 0x8f: 49c1fa8f
adc cx, 0xe384: 6681d184e3
and r9b, r9b: 4522c9
sets r11b: 410f98c3
xor cx, 0x3aa4: 6681f1a43a
or r11b, 0x15: 4180cb15
adc cx, 0x3e06: 6681d1063e
cbw: 6698
neg bp: 66f7dd
and dword ptr [rsp + rax*2 + 0x3a20101], r9d: 44218c440101a203
neg cx: 66f7d9
add r9b, 0xaf: 4180c1af
inc cx: 66ffc1
rol cx, 1: 66d1c1
cdqe: 4898
xor bx, cx: 6633d9
btc r10, r11: 4d0fbbda
jb 0x7ffb72bcf292: 0f8226282000

bytecode len: 336 -   41f7db44869484f04d4707480fc94181f322ddbf3f5048899c44fea6a303c1e51d44319c84f44d4707488b9c44fea6a30348894c940c660bc54d63db29840480d3d1014903fb488b940683d3d101410fb78c0080d3d101450fbed941ffc26633cb49c1fa8f6681d184e34522c9410f98c36681f1a43a4180cb156681d1063e669866f7dd44218c440101a20366f7d94180c1af66ffc166d1c148986633d94d0fbbda0f8226282000

block IDs [duplicates]: [191]
['jae 0x7ffb72c7a0cd']

bytes: jae 0x7ffb72c7a0cd: 0f835bd62a00

bytecode len: 12 -   0f835bd62a00

block IDs [duplicates]: [192]
['movsxd rax, eax', 'and r10w, 0xe732', 'xor r11, r9', 'adc rdi, rax', 'shl ecx, 0xa5', 'jae 0x7ffb72dc8bc8']

bytes: movsxd rax, eax: 4863c0
and r10w, 0xe732: 664181e232e7
xor r11, r9: 4d33d9
adc rdi, rax: 4813f8
shl ecx, 0xa5: c1e1a5
jae 0x7ffb72dc8bc8: 0f837d5b4300

bytecode len: 48 -   4863c0664181e232e74d33d94813f8c1e1a50f837d5b4300

block IDs [duplicates]: [193]
['mov ecx, 0x8028af23', 'xor dword ptr [rsp + r10 - 0x6aad0174], eax', 'or dword ptr [rsp + r10 - 0x6aad017d], ebp', 'xchg word ptr [rsp + r10 - 0x6aad0177], dx', 'sub r11w, cx', 'mov rbx, qword ptr [rsp + r10 - 0x6aad0174]', 'shl rbp, cl', 'bswap r10', 'xadd dword ptr [rsp + 8], r11d', 'movsxd rax, eax', 'jbe 0x7ffb72df9656']

bytes: mov ecx, 0x8028af23: b923af2880
xor dword ptr [rsp + r10 - 0x6aad0174], eax: 423184148cfe5295
or dword ptr [rsp + r10 - 0x6aad017d], ebp: 4209ac1483fe5295
xchg word ptr [rsp + r10 - 0x6aad0177], dx: 664287941489fe5295
sub r11w, cx: 66442bd9
mov rbx, qword ptr [rsp + r10 - 0x6aad0174]: 4a8b9c148cfe5295
shl rbp, cl: 48d3e5
bswap r10: 490fca
xadd dword ptr [rsp + 8], r11d: 440fc15c2408
movsxd rax, eax: 4863c0
jbe 0x7ffb72df9656: 0f86c6162600

bytecode len: 126 -   b923af2880423184148cfe52954209ac1483fe5295664287941489fe529566442bd94a8b9c148cfe529548d3e5490fca440fc15c24084863c00f86c6162600

block IDs [duplicates]: [194]
['cmp rsi, r9', 'ja 0x7ffb72ac6561']

bytes: cmp rsi, r9: 493bf1
ja 0x7ffb72ac6561: 0f87d7d0f7ff

bytecode len: 18 -   493bf10f87d7d0f7ff

block IDs [duplicates]: [195]
['push -0x4d5b8a56', 'call 0x7ffb72bc03d2']

bytes: push -0x4d5b8a56: 68aa75a4b2
call 0x7ffb72bc03d2: e8679e0f00

bytecode len: 20 -   68aa75a4b2e8679e0f00

block IDs [duplicates]: [263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263]
['mov r10d, 0x493ed594', 'mov r11d, dword ptr [r8 + r10 - 0x493ed594]', 'movsx eax, r10b', 'push rax', 'xor r11d, ebx', 'dec r11d', 'cqo', 'movsx ecx, dx', 'neg r11d', 'dec qword ptr [rsp + r10 - 0x493ed594]', 'lea r9, [rcx*8 - 0x5bc03067]', 'cdq', 'sub r11d, edx', 'or r11b, cl', 'not bpl', 'bts rcx, r10', 'xor r9b, r11b', 'rol bpl, 1', 'call 0x7ffb72dc1c24']

bytes: mov r10d, 0x493ed594: 41ba94d53e49
mov r11d, dword ptr [r8 + r10 - 0x493ed594]: 478b9c106c2ac1b6
movsx eax, r10b: 410fbec2
push rax: 50
xor r11d, ebx: 4433db
dec r11d: 41ffcb
cqo: 4899
movsx ecx, dx: 0fbfca
neg r11d: 41f7db
dec qword ptr [rsp + r10 - 0x493ed594]: 4aff8c146c2ac1b6
lea r9, [rcx*8 - 0x5bc03067]: 4c8d0ccd99cf3fa4
cdq: 99
sub r11d, edx: 442bda
or r11b, cl: 440ad9
not bpl: 40f6d5
bts rcx, r10: 4c0fabd1
xor r9b, r11b: 4532cb
rol bpl, 1: 40d0c5
call 0x7ffb72dc1c24: e840854700

bytecode len: 148 -   41ba94d53e49478b9c106c2ac1b6410fbec2504433db41ffcb48990fbfca41f7db4aff8c146c2ac1b64c8d0ccd99cf3fa499442bda440ad940f6d54c0fabd14532cb40d0c5e840854700

block IDs [duplicates]: [197]
['not eax', 'push r10', 'mov qword ptr [rsp + 8], rbx', 'xor dword ptr [rsp + 8], eax', 'xadd qword ptr [rsp], rbp', 'xadd dx, r9w', 'mov rbx, qword ptr [rsp + 8]', 'movsxd rax, eax', 'add rdi, rax', 'call 0x7ffb72d6d107']

bytes: not eax: f7d0
push r10: 4152
mov qword ptr [rsp + 8], rbx: 48895c2408
xor dword ptr [rsp + 8], eax: 31442408
xadd qword ptr [rsp], rbp: 480fc16c2400
xadd dx, r9w: 66440fc1ca
mov rbx, qword ptr [rsp + 8]: 488b5c2408
movsxd rax, eax: 4863c0
add rdi, rax: 4803f8
call 0x7ffb72d6d107: e86aa24800

bytecode len: 80 -   f7d0415248895c240831442408480fc16c240066440fc1ca488b5c24084863c04803f8e86aa24800

block IDs [duplicates]: [198]
['movzx edx, byte ptr [r8]', 'mov r11d, 0x7e145f96', 'movsx ecx, r11w', 'xor dl, bl', 'not dl', 'push rcx', 'movzx eax, cx', 'push rcx', 'neg dl', 'not rax', 'xchg dword ptr [rsp + rcx - 0x5f91], eax', 'inc dl', 'rol dl, 1', 'add dl, 0xd', 'not dword ptr [rsp + rcx - 0x5f96]', 'push rax', 'cwde', 'neg dl', 'xor bl, dl', 'lea rdx, [rsp + rdx + 0x18]', 'mov ebp, 0xb01123b7', 'push rax', 'shl r11b, 0xe5', 'mov r9, qword ptr [r11 + rdx - 0x7e145fc0]', 'movsx r10d, word ptr [rsp + r11 - 0x7e145fb5]', 'jne 0x7ffb729f10ab']

bytes: movzx edx, byte ptr [r8]: 410fb61420
mov r11d, 0x7e145f96: 41bb965f147e
movsx ecx, r11w: 410fbfcb
xor dl, bl: 32d3
not dl: f6d2
push rcx: 51
movzx eax, cx: 0fb7c1
push rcx: 51
neg dl: f6da
not rax: 48f7d0
xchg dword ptr [rsp + rcx - 0x5f91], eax: 87840c6fa0ffff
inc dl: fec2
rol dl, 1: d0c2
add dl, 0xd: 80c20d
not dword ptr [rsp + rcx - 0x5f96]: f7940c6aa0ffff
push rax: 50
cwde: 98
neg dl: f6da
xor bl, dl: 32da
lea rdx, [rsp + rdx + 0x18]: 488d541418
mov ebp, 0xb01123b7: bdb72311b0
push rax: 50
shl r11b, 0xe5: 41c0e3e5
mov r9, qword ptr [r11 + rdx - 0x7e145fc0]: 4d8b8c1340a0eb81
movsx r10d, word ptr [rsp + r11 - 0x7e145fb5]: 460fbf941c4ba0eb81
jne 0x7ffb729f10ab: 0f8511c0e5ff

bytecode len: 188 -   410fb6142041bb965f147e410fbfcb32d3f6d2510fb7c151f6da48f7d087840c6fa0fffffec2d0c280c20df7940c6aa0ffff5098f6da32da488d541418bdb72311b05041c0e3e54d8b8c1340a0eb81460fbf941c4ba0eb810f8511c0e5ff

block IDs [duplicates]: [199]
['mov r11, r9', 'mov rbp, qword ptr [rcx + rsi - 0x5f96]', 'lea rsi, [rsi + rcx*2 - 0xbf24]', 'add r10, qword ptr [rsp + rcx - 0x5f7e]', 'neg eax', 'sar r10d, 0xff', 'adc r11, rbp', 'mov rbp, r11', 'push rcx', 'dec rcx', 'not word ptr [rsp + rcx*2 - 0xbf04]', 'add ax, word ptr [r8 + rcx - 0x5f94]', 'rol cx, 0x63', 'xor ax, bx', 'xor ax, 0x3c92', 'inc ax', 'movzx edx, byte ptr [rsp + rcx - 0x3f2a7e8]', 'ror ax, 1', 'neg ax', 'ror ax, 1', 'mov r9d, edx', 'rol dl, 0x83', 'sbb ax, r10w', 'ror dl, 0x22', 'shr word ptr [rsp + rcx*2 - 0x7e54ff0], 0x81', 'je 0x7ffb72ba2296']

bytes: mov r11, r9: 4d8bd9
mov rbp, qword ptr [rcx + rsi - 0x5f96]: 488bac316aa0ffff
lea rsi, [rsi + rcx*2 - 0xbf24]: 488db44edc40ffff
add r10, qword ptr [rsp + rcx - 0x5f7e]: 4c03940c82a0ffff
neg eax: f7d8
sar r10d, 0xff: 41c1faff
adc r11, rbp: 4c13dd
mov rbp, r11: 498beb
push rcx: 51
dec rcx: 48ffc9
not word ptr [rsp + rcx*2 - 0xbf04]: 66f7944cfc40ffff
add ax, word ptr [r8 + rcx - 0x5f94]: 66410384086ca0ffff
rol cx, 0x63: 66c1c163
xor ax, bx: 6633c3
xor ax, 0x3c92: 6635923c
inc ax: 66ffc0
movzx edx, byte ptr [rsp + rcx - 0x3f2a7e8]: 0fb6940c18580dfc
ror ax, 1: 66d1c8
neg ax: 66f7d8
ror ax, 1: 66d1c8
mov r9d, edx: 448bca
rol dl, 0x83: c0c283
sbb ax, r10w: 66411bc2
ror dl, 0x22: c0ca22
shr word ptr [rsp + rcx*2 - 0x7e54ff0], 0x81: 66c1ac4c10b01af881
je 0x7ffb72ba2296: 0f846c111b00

bytecode len: 238 -   4d8bd9488bac316aa0ffff488db44edc40ffff4c03940c82a0fffff7d841c1faff4c13dd498beb5148ffc966f7944cfc40ffff66410384086ca0ffff66c1c1636633c36635923c66ffc00fb6940c18580dfc66d1c866f7d866d1c8448bcac0c28366411bc2c0ca2266c1ac4c10b01af8810f846c111b00

block IDs [duplicates]: [200]
['xor bx, ax', 'shr cl, 0x41', 'bt r10d, 0x24', 'not rdx', 'lea rax, [rsp + rax + 0x28]', 'jae 0x7ffb729f8fb9']

bytes: xor bx, ax: 6633d8
shr cl, 0x41: c0e941
bt r10d, 0x24: 410fbae224
not rdx: 48f7d2
lea rax, [rsp + rax + 0x28]: 488d440428
jae 0x7ffb729f8fb9: 0f830a6de5ff

bytecode len: 50 -   6633d8c0e941410fbae22448f7d2488d4404280f830a6de5ff

block IDs [duplicates]: [201]
['mov qword ptr [rcx + rax - 0x3f2a800], rbp', 'mov ecx, dword ptr [rcx + r8 - 0x3f2a7fd]', 'movsx eax, r10b', 'lea r8, [r10 + r8 + 7]', 'shr dword ptr [rsp + r10 + 0x16], 0xd2', 'and dword ptr [rsp + r10*8 + 0x23], edx', 'neg word ptr [rsp + rdx + 0xd9]', 'xor ecx, ebx', 'lea rdx, [rdx + rdx*8 + 0x3929371b]', 'movsx ebp, al', 'or byte ptr [rsp + r10*4 + 0x19], r10b', 'not ecx', 'bswap ecx', 'cqo', 'lea ecx, [rcx + r10*4 - 0x640b2a1c]', 'rol ecx, 1', 'call 0x7ffb72e81a09']

bytes: mov qword ptr [rcx + rax - 0x3f2a800], rbp: 4889ac0100580dfc
mov ecx, dword ptr [rcx + r8 - 0x3f2a7fd]: 428b8c0103580dfc
movsx eax, r10b: 410fbec2
lea r8, [r10 + r8 + 7]: 4f8d440207
shr dword ptr [rsp + r10 + 0x16], 0xd2: 42c16c1416d2
and dword ptr [rsp + r10*8 + 0x23], edx: 422154d423
neg word ptr [rsp + rdx + 0xd9]: 66f79c14d9000000
xor ecx, ebx: 33cb
lea rdx, [rdx + rdx*8 + 0x3929371b]: 488d94d21b372939
movsx ebp, al: 0fbee8
or byte ptr [rsp + r10*4 + 0x19], r10b: 4608549419
not ecx: f7d1
bswap ecx: 0fc9
cqo: 4899
lea ecx, [rcx + r10*4 - 0x640b2a1c]: 428d8c91e4d5f49b
rol ecx, 1: d1c1
call 0x7ffb72e81a09: e8fd894800

bytecode len: 166 -   4889ac0100580dfc428b8c0103580dfc410fbec24f8d44020742c16c1416d2422154d42366f79c14d900000033cb488d94d21b3729390fbee84608549419f7d10fc94899428d8c91e4d5f49bd1c1e8fd894800

block IDs [duplicates]: [202]
['mov edx, 0x87363633', 'movzx r10d, dl', 'mov r9d, dword ptr [r8 + r10*8 - 0x198]', 'xor r9d, ebx', 'mov eax, edx', 'xadd r10, rax', 'ror r9d, 1', 'movzx ebp, al', 'not r9d', 'mov ecx, r10d', 'lea r11, [rdx*2 + 0x3e934839]', 'and r10, rdx', 'neg r9d', 'sub rbp, r11', 'xor cl, r10b', 'shr edx, cl', 'rol r9d, 1', 'xor r10w, cx', 'push rbx', 'btc rbp, 0x89', 'xor dword ptr [rsp + rdx*2 - 0x10e6c6c6], r9d', 'not al', 'btr r10d, 0x29', 'pop rbx', 'bswap eax', 'sbb r10w, ax', 'mov dword ptr [rsi + rdx - 0x8736367], r9d', 'shl r11w, 0x49', 'movzx r9d, dl', 'sar r9w, 0xe1', 'mov ecx, dword ptr [r8 + rdx*2 - 0x10e6c6c2]', 'xadd r11b, al', 'xor ecx, ebx', 'not r10w', 'push r10', 'btc r11, r9', 'lea ecx, [rcx + r10 + 0x16f5023]', 'call 0x7ffb72dba9bb']

bytes: mov edx, 0x87363633: ba33363687
movzx r10d, dl: 440fb6d2
mov r9d, dword ptr [r8 + r10*8 - 0x198]: 478b8cd068feffff
xor r9d, ebx: 4433cb
mov eax, edx: 8bc2
xadd r10, rax: 490fc1c2
ror r9d, 1: 41d1c9
movzx ebp, al: 0fb6e8
not r9d: 41f7d1
mov ecx, r10d: 418bca
lea r11, [rdx*2 + 0x3e934839]: 4c8d1c553948933e
and r10, rdx: 4c23d2
neg r9d: 41f7d9
sub rbp, r11: 492beb
xor cl, r10b: 4132ca
shr edx, cl: d3ea
rol r9d, 1: 41d1c1
xor r10w, cx: 664433d1
push rbx: 53
btc rbp, 0x89: 480fbafd89
xor dword ptr [rsp + rdx*2 - 0x10e6c6c6], r9d: 44318c543a3919ef
not al: f6d0
btr r10d, 0x29: 410fbaf229
pop rbx: 5b
bswap eax: 0fc8
sbb r10w, ax: 66441bd0
mov dword ptr [rsi + rdx - 0x8736367], r9d: 44898c16999c8cf7
shl r11w, 0x49: 6641c1e349
movzx r9d, dl: 440fb6ca
sar r9w, 0xe1: 6641c1f9e1
mov ecx, dword ptr [r8 + rdx*2 - 0x10e6c6c2]: 418b8c503e3919ef
xadd r11b, al: 410fc0c3
xor ecx, ebx: 33cb
not r10w: 6641f7d2
push r10: 4152
btc r11, r9: 4d0fbbcb
lea ecx, [rcx + r10 + 0x16f5023]: 428d8c1123506f01
call 0x7ffb72dba9bb: e865973300

bytecode len: 308 -   ba33363687440fb6d2478b8cd068feffff4433cb8bc2490fc1c241d1c90fb6e841f7d1418bca4c8d1c553948933e4c23d241f7d9492beb4132cad3ea41d1c1664433d153480fbafd8944318c543a3919eff6d0410fbaf2295b0fc866441bd044898c16999c8cf76641c1e349440fb6ca6641c1f9e1418b8c503e3919ef410fc0c333cb6641f7d241524d0fbbcb428d8c1123506f01e865973300

block IDs [duplicates]: [203]
['neg r11', 'ror r11, 1', 'inc r9b', 'lea r11, [r11 + rdx*2 - 0x5c91986f]', 'dec ax', 'rol r11, 5', 'cbw', 'ror byte ptr [rsp + rdx - 0x8736355], 0xc5', 'cdq', 'xor rbx, r11', 'and edx, 0x3237e912', 'mov qword ptr [rdx + rsi - 0xc], r11', 'lea rsi, [rdx + rsi - 0xc]', 'movzx r11d, word ptr [rsp + rdx + 6]', 'pop rdx', 'pop rbp', 'jae 0x7ffb72be239f']

bytes: neg r11: 49f7db
ror r11, 1: 49d1cb
inc r9b: 41fec1
lea r11, [r11 + rdx*2 - 0x5c91986f]: 4d8d9c5391676ea3
dec ax: 66ffc8
rol r11, 5: 49c1c305
cbw: 6698
ror byte ptr [rsp + rdx - 0x8736355], 0xc5: c08c14ab9c8cf7c5
cdq: 99
xor rbx, r11: 4933db
and edx, 0x3237e912: 81e212e93732
mov qword ptr [rdx + rsi - 0xc], r11: 4c895c32f4
lea rsi, [rdx + rsi - 0xc]: 488d7432f4
movzx r11d, word ptr [rsp + rdx + 6]: 440fb75c1406
pop rdx: 5a
pop rbp: 5d
jae 0x7ffb72be239f: 0f834b822700

bytecode len: 136 -   49f7db49d1cb41fec14d8d9c5391676ea366ffc849c1c3056698c08c14ab9c8cf7c5994933db81e212e937324c895c32f4488d7432f4440fb75c14065a5d0f834b822700

block IDs [duplicates]: [205]
['sub r11b, 0x92', 'xor bl, r11b', 'push rdx', 'lea r11, [rsp + r11 + 0x10]', 'cdqe', 'pop r9', 'mov dword ptr [r11 + rax - 0x37b30005], r10d', 'lea r11, [r9 + rbp*8 + 0x281c322]', 'cdq', 'lea ecx, [r9 + rcx - 0x478e75c2]', 'mov qword ptr [rsp + rax - 0x37b30005], r11', 'xor bp, ax', 'xor ecx, 0xe5246936', 'inc ecx', 'xor ecx, 0xfcb3462f', 'xor bpl, dl', 'mov qword ptr [rsp + rax - 0x37b30005], rbx', 'sbb r10, r10', 'push r11', 'cbw', 'xor dword ptr [rsp + rax*2 - 0x6f660002], ecx', 'dec r9b', 'or ebp, r11d', 'mov rbx, qword ptr [rsp + r9 - 0x4104ffb5]', 'cdq', 'or r9, 0xffffffffe6999a0f', 'mov dword ptr [r9 + rsi + 0x18620041], ecx', 'mov qword ptr [rsp + r9 + 0x18620049], r10', 'rol rax, 0xb5', 'xor rdx, qword ptr [r8 + r9 + 0x1862004a]', 'push r11', 'lea r8, [r8 + r9 + 0x18620052]', 'ror al, 0x86', 'btr ax, 0xb9', 'xchg dword ptr [rsp + rbp - 0x4386c7d8], r9d', 'xor rdx, rbx', 'sub word ptr [rsp + r9*8 - 0x213], r9w', 'neg rdx', 'not rdx', 'push r10', 'ror rdx, 1', 'bts rax, 0x31', 'ror r11d, 0x28', 'neg rdx', 'dec ebp', 'btc r9w, bp', 'xchg rcx, rbp', 'xor rbx, rdx', 'cmp rsi, r9', 'ja 0x7ffb72ac6561']

bytes: sub r11b, 0x92: 4180eb92
xor bl, r11b: 4132db
push rdx: 52
lea r11, [rsp + r11 + 0x10]: 4e8d5c1c10
cdqe: 4898
pop r9: 4159
mov dword ptr [r11 + rax - 0x37b30005], r10d: 45899403fbff4cc8
lea r11, [r9 + rbp*8 + 0x281c322]: 4d8d9ce922c38102
cdq: 99
lea ecx, [r9 + rcx - 0x478e75c2]: 418d8c093e8a71b8
mov qword ptr [rsp + rax - 0x37b30005], r11: 4c899c04fbff4cc8
xor bp, ax: 6633e8
xor ecx, 0xe5246936: 81f1366924e5
inc ecx: ffc1
xor ecx, 0xfcb3462f: 81f12f46b3fc
xor bpl, dl: 4032ea
mov qword ptr [rsp + rax - 0x37b30005], rbx: 48899c04fbff4cc8
sbb r10, r10: 4d1bd2
push r11: 4153
cbw: 6698
xor dword ptr [rsp + rax*2 - 0x6f660002], ecx: 318c44feff9990
dec r9b: 41fec9
or ebp, r11d: 410beb
mov rbx, qword ptr [rsp + r9 - 0x4104ffb5]: 4a8b9c0c4b00fbbe
cdq: 99
or r9, 0xffffffffe6999a0f: 4981c90f9a99e6
mov dword ptr [r9 + rsi + 0x18620041], ecx: 41898c3141006218
mov qword ptr [rsp + r9 + 0x18620049], r10: 4e89940c49006218
rol rax, 0xb5: 48c1c0b5
xor rdx, qword ptr [r8 + r9 + 0x1862004a]: 4b3394084a006218
push r11: 4153
lea r8, [r8 + r9 + 0x18620052]: 4f8d840852006218
ror al, 0x86: c0c886
btr ax, 0xb9: 660fbaf0b9
xchg dword ptr [rsp + rbp - 0x4386c7d8], r9d: 44878c2c283879bc
xor rdx, rbx: 4833d3
sub word ptr [rsp + r9*8 - 0x213], r9w: 6646298cccedfdffff
neg rdx: 48f7da
not rdx: 48f7d2
push r10: 4152
ror rdx, 1: 48d1ca
bts rax, 0x31: 480fbae831
ror r11d, 0x28: 41c1cb28
neg rdx: 48f7da
dec ebp: ffcd
btc r9w, bp: 66410fbbe9
xchg rcx, rbp: 4887e9
xor rbx, rdx: 4833da
cmp rsi, r9: 493bf1
ja 0x7ffb72ac6561: 0f87d7d0f7ff

bytecode len: 450 -   4180eb924132db524e8d5c1c104898415945899403fbff4cc84d8d9ce922c3810299418d8c093e8a71b84c899c04fbff4cc86633e881f1366924e5ffc181f12f46b3fc4032ea48899c04fbff4cc84d1bd241536698318c44feff999041fec9410beb4a8b9c0c4b00fbbe994981c90f9a99e641898c31410062184e89940c4900621848c1c0b54b3394084a00621841534f8d840852006218c0c886660fbaf0b944878c2c283879bc4833d36646298cccedfdffff48f7da48f7d2415248d1ca480fbae83141c1cb2848f7daffcd66410fbbe94887e94833da493bf10f87d7d0f7ff

block IDs [duplicates]: [207]
['mov edx, 0xf437be08', 'mov r9d, dword ptr [r8]', 'push rdx', 'xor r9d, ebx', 'shl dword ptr [rsp + 1], 0x83', 'lea rbp, [rdx - 0x25c6a1cf]', 'rol r9d, 3', 'neg r9d', 'bswap r9d', 'mov qword ptr [rsp + r10 - 0x2001c39], rbp', 'sub r9d, 0xe603452a', 'xor r9d, 0x128ad583', 'mov qword ptr [rsp + r10*2 - 0x4003814], rbx', 'cdqe', 'xor al, r10b', 'lea rbx, [rax + rax*2 - 0x25c4574a]', 'xor dword ptr [rsp + rax*2 - 0x3866], r9d', 'movzx r11d, bx', 'pop rbx', 'movsxd r9, r9d', 'neg r10b', 'adc rdi, r9', 'movzx edx, byte ptr [r10 + r8 - 0x2001cee]', 'lea r8, [r8 + rax*4 - 0x70c3]', 'movsx r9d, al', 'ror rax, 0x25', 'lea rbp, [rax*8 + 0x18a0f3a5]', 'xor dl, bl', 'xor bp, ax', 'adc dl, 0x95', 'add r11w, ax', 'lea rcx, [rax*8 - 0x1bde0fde]', 'cbw', 'not dl', 'ror dl, 1', 'call 0x7ffb729b5ec0']

bytes: mov edx, 0xf437be08: ba08be37f4
mov r9d, dword ptr [r8]: 458b08
push rdx: 52
xor r9d, ebx: 4433cb
shl dword ptr [rsp + 1], 0x83: c164240183
lea rbp, [rdx - 0x25c6a1cf]: 488daa315e39da
rol r9d, 3: 41c1c103
neg r9d: 41f7d9
bswap r9d: 410fc9
mov qword ptr [rsp + r10 - 0x2001c39], rbp: 4a89ac14c7e3fffd
sub r9d, 0xe603452a: 4181e92a4503e6
xor r9d, 0x128ad583: 4181f183d58a12
mov qword ptr [rsp + r10*2 - 0x4003814], rbx: 4a899c54ecc7fffb
cdqe: 4898
xor al, r10b: 4132c2
lea rbx, [rax + rax*2 - 0x25c4574a]: 488d9c40b6a83bda
xor dword ptr [rsp + rax*2 - 0x3866], r9d: 44318c449ac7ffff
movzx r11d, bx: 440fb7db
pop rbx: 5b
movsxd r9, r9d: 4d63c9
neg r10b: 41f6da
adc rdi, r9: 4913f9
movzx edx, byte ptr [r10 + r8 - 0x2001cee]: 430fb6940212e3fffd
lea r8, [r8 + rax*4 - 0x70c3]: 4d8d84803d8fffff
movsx r9d, al: 440fbec8
ror rax, 0x25: 48c1c825
lea rbp, [rax*8 + 0x18a0f3a5]: 488d2cc5a5f3a018
xor dl, bl: 32d3
xor bp, ax: 6633e8
adc dl, 0x95: 80d295
add r11w, ax: 664403d8
lea rcx, [rax*8 - 0x1bde0fde]: 488d0cc522f021e4
cbw: 6698
not dl: f6d2
ror dl, 1: d0ca
call 0x7ffb729b5ec0: e80f17f1ff

bytecode len: 326 -   ba08be37f4458b08524433cbc164240183488daa315e39da41c1c10341f7d9410fc94a89ac14c7e3fffd4181e92a4503e64181f183d58a124a899c54ecc7fffb48984132c2488d9c40b6a83bda44318c449ac7ffff440fb7db5b4d63c941f6da4913f9430fb6940212e3fffd4d8d84803d8fffff440fbec848c1c825488d2cc5a5f3a01832d36633e880d295664403d8488d0cc522f021e46698f6d2d0cae80f17f1ff

block IDs [duplicates]: [208]
['dec dl', 'rol dl, 1', 'xor bl, dl', 'pop r9', 'add r9, 0x3d54bf', 'jmp r9']

bytes: dec dl: feca
rol dl, 1: d0c2
xor bl, dl: 32da
pop r9: 4159
add r9, 0x3d54bf: 4981c1bf543d00
jmp r9: 41ffe1

bytecode len: 36 -   fecad0c232da41594981c1bf543d0041ffe1

block IDs [duplicates]: [209]
['mov dword ptr [r11 + rsi - 0xfd57], r10d', 'pop rdx', 'lea rsi, [rsi + r11*2 - 0x1faa6]', 'movzx r10d, r11b', 'cmp rsi, r9', 'ja 0x7ffb72ac6561']

bytes: mov dword ptr [r11 + rsi - 0xfd57], r10d: 45899433a902ffff
pop rdx: 5a
lea rsi, [rsi + r11*2 - 0x1faa6]: 4a8db45e5a05feff
movzx r10d, r11b: 450fb6d3
cmp rsi, r9: 493bf1
ja 0x7ffb72ac6561: 0f87d7d0f7ff

bytecode len: 60 -   45899433a902ffff5a4a8db45e5a05feff450fb6d3493bf10f87d7d0f7ff

block IDs [duplicates]: [210]
['mov r9d, 0xbb21e688', 'call 0x7ffb72d4e2a6']

bytes: mov r9d, 0xbb21e688: 41b988e621bb
call 0x7ffb72d4e2a6: e802703c00

bytecode len: 22 -   41b988e621bbe802703c00

block IDs [duplicates]: [211]
['sbb al, 0x93', 'xor al, 0x89', 'and r11w, bp', 'jae 0x7ffb72904421']

bytes: sbb al, 0x93: 1c93
xor al, 0x89: 3489
and r11w, bp: 664423dd
jae 0x7ffb72904421: 0f83388ff4ff

bytecode len: 28 -   1c933489664423dd0f83388ff4ff

block IDs [duplicates]: [214, 214]
['ror al, 1', 'mov r9d, r11d', 'xor bl, al', 'add rax, rsp', 'bswap ebp', 'bts cx, 0x13', 'mov r11d, dword ptr [rcx + rax - 0xb9d]', 'ror r9b, 0x27', 'bswap r9', 'or r9d, r11d', 'btc ecx, 0xb0', 'ror eax, 1', 'push rbx', 'movsx ebx, r9w', 'push rbx', 'neg bp', 'xor dword ptr [rsp + rbx*2 - 0x1b88], eax', 'dec byte ptr [rsp + r9 - 0xdc2]', 'inc word ptr [rsp + r9 - 0xdc8]', 'mov rbx, qword ptr [rsp + r9 - 0xdc0]', 'add cx, 0xdaa8', 'sbb bpl, bpl', 'lea rdx, [r11 + rbp*4 - 0x7d55b079]', 'movsxd rax, eax', 'setge bpl', 'btc r10d, 0xad', 'mov qword ptr [rsp + r9*8 - 0x6e38], -0x77cd8eec', 'add rdi, rax', 'sub qword ptr [rsp + r9*8 - 0x6e38], -0x387cf2ec', 'inc byte ptr [rsp + r9 - 0xdb9]', 'mov qword ptr [rsp + r9*2 - 0x1b90], rdi', 'ret 8']

bytes: ror al, 1: d0c8
mov r9d, r11d: 458bcb
xor bl, al: 32d8
add rax, rsp: 4803c4
bswap ebp: 0fcd
bts cx, 0x13: 660fbae913
mov r11d, dword ptr [rcx + rax - 0xb9d]: 448b9c0163f4ffff
ror r9b, 0x27: 41c0c927
bswap r9: 490fc9
or r9d, r11d: 450bcb
btc ecx, 0xb0: 0fbaf9b0
ror eax, 1: d1c8
push rbx: 53
movsx ebx, r9w: 410fbfd9
push rbx: 53
neg bp: 66f7dd
xor dword ptr [rsp + rbx*2 - 0x1b88], eax: 31845c78e4ffff
dec byte ptr [rsp + r9 - 0xdc2]: 42fe8c0c3ef2ffff
inc word ptr [rsp + r9 - 0xdc8]: 6642ff840c38f2ffff
mov rbx, qword ptr [rsp + r9 - 0xdc0]: 4a8b9c0c40f2ffff
add cx, 0xdaa8: 6681c1a8da
sbb bpl, bpl: 401aed
lea rdx, [r11 + rbp*4 - 0x7d55b079]: 498d94ab874faa82
movsxd rax, eax: 4863c0
setge bpl: 400f9dc5
btc r10d, 0xad: 410fbafaad
mov qword ptr [rsp + r9*8 - 0x6e38], -0x77cd8eec: 4ac784ccc891ffff14713288
add rdi, rax: 4803f8
sub qword ptr [rsp + r9*8 - 0x6e38], -0x387cf2ec: 4a81acccc891ffff140d83c7
inc byte ptr [rsp + r9 - 0xdb9]: 42fe840c47f2ffff
mov qword ptr [rsp + r9*2 - 0x1b90], rdi: 4a89bc4c70e4ffff
ret 8: c20800

bytecode len: 312 -   d0c8458bcb32d84803c40fcd660fbae913448b9c0163f4ffff41c0c927490fc9450bcb0fbaf9b0d1c853410fbfd95366f7dd31845c78e4ffff42fe8c0c3ef2ffff6642ff840c38f2ffff4a8b9c0c40f2ffff6681c1a8da401aed498d94ab874faa824863c0400f9dc5410fbafaad4ac784ccc891ffff147132884803f84a81acccc891ffff140d83c742fe840c47f2ffff4a89bc4c70e4ffffc20800

block IDs [duplicates]: [213]
['rol r10b, 1', 'mov qword ptr [rsp + rbp - 0xb5e6], r9', 'and qword ptr [rsp + rbp*8 - 0x5af30], rdx', 'inc qword ptr [rsp + rbp - 0xb5e6]', 'neg r10b', 'sub r10b, 0x94', 'neg r10b', 'adc r10b, 0xb7', 'xor r10b, 0xa5', 'mov r11d, dword ptr [rsp + rbp*2 - 0x16bcc]', 'xchg dword ptr [rsp + rbp - 0xb5e4], edx', 'xor bl, r10b', 'lea r10, [rsp + r10 + 8]', 'mov r9d, dword ptr [r10 + rbp*2 - 0x16bcc]', 'and dword ptr [rsp + rbp - 0xb5e3], 0x66a393ad', 'mov dword ptr [rsi + rbp - 0xb5ea], r9d', 'and r11b, cl', 'movzx ebp, byte ptr [r8 + rbp - 0xb5e5]', 'mov r9d, ecx', 'sal r9w, 0x82', 'shr byte ptr [rsp + rdx - 0xeffa], 0x26', 'xor bpl, bl', 'inc ecx', 'xor dx, ax', 'xor ecx, 0xf1911ba', 'push rdx', 'not r9d', 'mov qword ptr [rsp + rdx*2 + 0x18], rbx', 'sar dx, 0xaa', 'xor dword ptr [rsp + rdx + 0x18], ecx', 'shl dword ptr [rsp + rdx + 0x13], 0x12', 'mov rbx, qword ptr [rsp + rdx*2 + 0x18]', 'mov qword ptr [rsp + rdx*2 + 0x18], r9', 'movsxd rcx, ecx', 'adc rdi, rcx', 'or eax, dword ptr [rsp + rbp + 0x18]', 'pop r9', 'pop rdx', 'pop r10', 'pop r9', 'jae 0x7ffb72be239f']

bytes: rol r10b, 1: 41d0c2
mov qword ptr [rsp + rbp - 0xb5e6], r9: 4c898c2c1a4affff
and qword ptr [rsp + rbp*8 - 0x5af30], rdx: 482194ecd050faff
inc qword ptr [rsp + rbp - 0xb5e6]: 48ff842c1a4affff
neg r10b: 41f6da
sub r10b, 0x94: 4180ea94
neg r10b: 41f6da
adc r10b, 0xb7: 4180d2b7
xor r10b, 0xa5: 4180f2a5
mov r11d, dword ptr [rsp + rbp*2 - 0x16bcc]: 448b9c6c3494feff
xchg dword ptr [rsp + rbp - 0xb5e4], edx: 87942c1c4affff
xor bl, r10b: 4132da
lea r10, [rsp + r10 + 8]: 4e8d541408
mov r9d, dword ptr [r10 + rbp*2 - 0x16bcc]: 458b8c6a3494feff
and dword ptr [rsp + rbp - 0xb5e3], 0x66a393ad: 81a42c1d4affffad93a366
mov dword ptr [rsi + rbp - 0xb5ea], r9d: 44898c2e164affff
and r11b, cl: 4422d9
movzx ebp, byte ptr [r8 + rbp - 0xb5e5]: 410fb6ac281b4affff
mov r9d, ecx: 448bc9
sal r9w, 0x82: 6641c1f182
shr byte ptr [rsp + rdx - 0xeffa], 0x26: c0ac140610ffff26
xor bpl, bl: 4032eb
inc ecx: ffc1
xor dx, ax: 6633d0
xor ecx, 0xf1911ba: 81f1ba11190f
push rdx: 52
not r9d: 41f7d1
mov qword ptr [rsp + rdx*2 + 0x18], rbx: 48895c5418
sar dx, 0xaa: 66c1faaa
xor dword ptr [rsp + rdx + 0x18], ecx: 314c1418
shl dword ptr [rsp + rdx + 0x13], 0x12: c164141312
mov rbx, qword ptr [rsp + rdx*2 + 0x18]: 488b5c5418
mov qword ptr [rsp + rdx*2 + 0x18], r9: 4c894c5418
movsxd rcx, ecx: 4863c9
adc rdi, rcx: 4813f9
or eax, dword ptr [rsp + rbp + 0x18]: 0b442c18
pop r9: 4159
pop rdx: 5a
pop r10: 415a
pop r9: 4159
jae 0x7ffb72be239f: 0f834b822700

bytecode len: 384 -   41d0c24c898c2c1a4affff482194ecd050faff48ff842c1a4affff41f6da4180ea9441f6da4180d2b74180f2a5448b9c6c3494feff87942c1c4affff4132da4e8d541408458b8c6a3494feff81a42c1d4affffad93a36644898c2e164affff4422d9410fb6ac281b4affff448bc96641c1f182c0ac140610ffff264032ebffc16633d081f1ba11190f5241f7d148895c541866c1faaa314c1418c164141312488b5c54184c894c54184863c94813f90b442c1841595a415a41590f834b822700

block IDs [duplicates]: [215]
['movzx ecx, word ptr [r8 + r10]', 'xor r9w, word ptr [rsp + r10 + 0x23]', 'call 0x7ffb72c1657e']

bytes: movzx ecx, word ptr [r8 + r10]: 430fb70c10
xor r9w, word ptr [rsp + r10 + 0x23]: 6646334c1423
call 0x7ffb72c1657e: e8404d3300

bytecode len: 32 -   430fb70c106646334c1423e8404d3300

block IDs [duplicates]: [216]
['sar word ptr [rsp + r10*8 + 0x21], 0xc8', 'sbb cx, 0x7810', 'xchg qword ptr [rsp + 0x20], r11', 'add r11, -0x40a67d', 'jmp r11']

bytes: sar word ptr [rsp + r10*8 + 0x21], 0xc8: 6642c17cd421c8
sbb cx, 0x7810: 6681d91078
xchg qword ptr [rsp + 0x20], r11: 4c875c2420
add r11, -0x40a67d: 4981c38359bfff
jmp r11: 41ffe3

bytecode len: 54 -   6642c17cd421c86681d910784c875c24204981c38359bfff41ffe3

block IDs [duplicates]: [217]
['or r10w, 0xb12b', 'xor bx, cx', 'call 0x7ffb728e0ee7']

bytes: or r10w, 0xb12b: 664181ca2bb1
xor bx, cx: 6633d9
call 0x7ffb728e0ee7: e8a7aee5ff

bytecode len: 28 -   664181ca2bb16633d9e8a7aee5ff

block IDs [duplicates]: [218]
['lea rcx, [rsp + rcx + 0x40]', 'mov r9, qword ptr [rcx + r10 - 0xb12b]', 'lea r11, [rbp + rbp*2 + 0x2ebe2cb1]', 'movzx ecx, r11b', 'inc r11', 'mov qword ptr [rsi + r10 - 0xb13b], r9', 'lea r9, [rbp + rbp*4 - 0x36f3c573]', 'mov r11d, dword ptr [r8 + r10*2 - 0x16252]', 'mov qword ptr [rsp + r10 - 0xb12b], -0x6d73ccc3', 'call 0x7ffb72c6119f']

bytes: lea rcx, [rsp + rcx + 0x40]: 488d4c0c40
mov r9, qword ptr [rcx + r10 - 0xb12b]: 4e8b8c11d54effff
lea r11, [rbp + rbp*2 + 0x2ebe2cb1]: 4c8d9c6db12cbe2e
movzx ecx, r11b: 410fb6cb
inc r11: 49ffc3
mov qword ptr [rsi + r10 - 0xb13b], r9: 4e898c16c54effff
lea r9, [rbp + rbp*4 - 0x36f3c573]: 4c8d8cad8d3a0cc9
mov r11d, dword ptr [r8 + r10*2 - 0x16252]: 478b9c50ae9dfeff
mov qword ptr [rsp + r10 - 0xb12b], -0x6d73ccc3: 4ac78414d54effff3d338c92
call 0x7ffb72c6119f: e873023800

bytecode len: 138 -   488d4c0c404e8b8c11d54effff4c8d9c6db12cbe2e410fb6cb49ffc34e898c16c54effff4c8d8cad8d3a0cc9478b9c50ae9dfeff4ac78414d54effff3d338c92e873023800

block IDs [duplicates]: [219]
['mov r10d, 0x5d360f9a', 'movzx ecx, r10w', 'movzx eax, word ptr [r8 + rcx - 0xf9a]', 'xor ax, bx', 'movzx r11d, r10w', 'rol cx, 6', 'not ax', 'movsx r9d, r10b', 'xor r10b, r9b', 'sbb ax, 0x573d', 'movzx edx, r11w', 'xadd r10d, r11d', 'rol ax, 1', 'add rcx, r11', 'adc cx, r11w', 'adc ax, 0x9c3f', 'xor bx, ax', 'not cx', 'add rax, rsp', 'adc ecx, r11d', 'mov rbp, qword ptr [rax + rbp*2 - 0x600d4da4]', 'mov qword ptr [rsi + rdx*2 - 0x3e70], rbp', 'movzx ebp, word ptr [r8 + rdx*8 - 0xf99e]', 'sub r11, 0x78ad0f16', 'xor bp, bx', 'mov eax, r10d', 'cdqe', 'sar r11b, cl', 'neg bp', 'xor bp, 0x8d90', 'and r11b, 0x98', 'cqo', 'rol bp, cl', 'sub bp, 0x57ad', 'not bp', 'neg bp', 'ror r9d, 0xb4', 'shl r9w, 0xc1', 'xor bx, bp', 'adc rbp, rsp', 'lea r10, [r9*2 - 0x37e74768]', 'mov rax, qword ptr [rbp + r11*2 + 0x36ee00e0]', 'sal r11w, 0xa3', 'mov qword ptr [rsi + r11 + 0x1b770370], rax', 'sar dl, cl', 'xchg r11w, dx', 'mov r9d, dword ptr [r8 + r11 + 0x1b780004]', 'movsx ebp, r11w', 'btc ebp, ecx', 'lea r8, [r8 + r11*2 + 0x36f00008]', 'xor r9d, ebx', 'shl r10, 0x66', 'neg r11d', 'sbb r9d, r10d', 'lea rax, [r11*8 - 0x136601eb]', 'dec r10', 'xor r9d, 0xf18cc296', 'cdq', 'xchg rax, r11', 'lea r9d, [r9 + rbp*2 - 0x73ade3d]', 'btr rbp, 0x30', 'rol r9d, 1', 'shr rdx, cl', 'push rcx', 'rol r10, 0x2b', 'inc r9d', 'call 0x7ffb72962875']

bytes: mov r10d, 0x5d360f9a: 41ba9a0f365d
movzx ecx, r10w: 410fb7ca
movzx eax, word ptr [r8 + rcx - 0xf9a]: 410fb7840866f0ffff
xor ax, bx: 6633c3
movzx r11d, r10w: 450fb7da
rol cx, 6: 66c1c106
not ax: 66f7d0
movsx r9d, r10b: 450fbeca
xor r10b, r9b: 4532d1
sbb ax, 0x573d: 661d3d57
movzx edx, r11w: 410fb7d3
xadd r10d, r11d: 450fc1da
rol ax, 1: 66d1c0
add rcx, r11: 4903cb
adc cx, r11w: 664113cb
adc ax, 0x9c3f: 66153f9c
xor bx, ax: 6633d8
not cx: 66f7d1
add rax, rsp: 4803c4
adc ecx, r11d: 4113cb
mov rbp, qword ptr [rax + rbp*2 - 0x600d4da4]: 488bac685cb2f29f
mov qword ptr [rsi + rdx*2 - 0x3e70], rbp: 4889ac5690c1ffff
movzx ebp, word ptr [r8 + rdx*8 - 0xf99e]: 410fb7acd06206ffff
sub r11, 0x78ad0f16: 4981eb160fad78
xor bp, bx: 6633eb
mov eax, r10d: 418bc2
cdqe: 4898
sar r11b, cl: 41d2fb
neg bp: 66f7dd
xor bp, 0x8d90: 6681f5908d
and r11b, 0x98: 4180e398
cqo: 4899
rol bp, cl: 66d3c5
sub bp, 0x57ad: 6681edad57
not bp: 66f7d5
neg bp: 66f7dd
ror r9d, 0xb4: 41c1c9b4
shl r9w, 0xc1: 6641c1e1c1
xor bx, bp: 6633dd
adc rbp, rsp: 4813ec
lea r10, [r9*2 - 0x37e74768]: 4e8d144d98b818c8
mov rax, qword ptr [rbp + r11*2 + 0x36ee00e0]: 4a8b845de000ee36
sal r11w, 0xa3: 6641c1f3a3
mov qword ptr [rsi + r11 + 0x1b770370], rax: 4a89841e7003771b
sar dl, cl: d2fa
xchg r11w, dx: 664187d3
mov r9d, dword ptr [r8 + r11 + 0x1b780004]: 478b8c180400781b
movsx ebp, r11w: 410fbfeb
btc ebp, ecx: 0fbbcd
lea r8, [r8 + r11*2 + 0x36f00008]: 4f8d84580800f036
xor r9d, ebx: 4433cb
shl r10, 0x66: 49c1e266
neg r11d: 41f7db
sbb r9d, r10d: 451bca
lea rax, [r11*8 - 0x136601eb]: 4a8d04dd15fe99ec
dec r10: 49ffca
xor r9d, 0xf18cc296: 4181f196c28cf1
cdq: 99
xchg rax, r11: 4993
lea r9d, [r9 + rbp*2 - 0x73ade3d]: 458d8c69c321c5f8
btr rbp, 0x30: 480fbaf530
rol r9d, 1: 41d1c1
shr rdx, cl: 48d3ea
push rcx: 51
rol r10, 0x2b: 49c1c22b
inc r9d: 41ffc1
call 0x7ffb72962875: e827a6fbff

bytecode len: 576 -   41ba9a0f365d410fb7ca410fb7840866f0ffff6633c3450fb7da66c1c10666f7d0450fbeca4532d1661d3d57410fb7d3450fc1da66d1c04903cb664113cb66153f9c6633d866f7d14803c44113cb488bac685cb2f29f4889ac5690c1ffff410fb7acd06206ffff4981eb160fad786633eb418bc2489841d2fb66f7dd6681f5908d4180e398489966d3c56681edad5766f7d566f7dd41c1c9b46641c1e1c16633dd4813ec4e8d144d98b818c84a8b845de000ee366641c1f3a34a89841e7003771bd2fa664187d3478b8c180400781b410fbfeb0fbbcd4f8d84580800f0364433cb49c1e26641f7db451bca4a8d04dd15fe99ec49ffca4181f196c28cf1994993458d8c69c321c5f8480fbaf53041d1c148d3ea5149c1c22b41ffc1e827a6fbff

block IDs [duplicates]: [220]
['neg word ptr [rsp + rbp*4 + 3]', 'sal dx, cl', 'mov qword ptr [rsp + rdx - 0x3ffffff4], rbx', 'xor dword ptr [rsp + rbp*4], r9d', 'mov qword ptr [rsp + rcx - 0x74d91e02], rbp', 'shr dx, cl', 'mov rbx, qword ptr [rsp + rbp*8 - 8]', 'adc ebp, r10d', 'not qword ptr [rsp + rax - 0x1b780000]', 'movsxd r9, r9d', 'call 0x7ffb72d6183f']

bytes: neg word ptr [rsp + rbp*4 + 3]: 66f75cac03
sal dx, cl: 66d3f2
mov qword ptr [rsp + rdx - 0x3ffffff4], rbx: 48899c140c0000c0
xor dword ptr [rsp + rbp*4], r9d: 44310cac
mov qword ptr [rsp + rcx - 0x74d91e02], rbp: 4889ac0cfee1268b
shr dx, cl: 66d3ea
mov rbx, qword ptr [rsp + rbp*8 - 8]: 488b5cecf8
adc ebp, r10d: 4113ea
not qword ptr [rsp + rax - 0x1b780000]: 48f79404000088e4
movsxd r9, r9d: 4d63c9
call 0x7ffb72d6183f: e88bef3f00

bytecode len: 110 -   66f75cac0366d3f248899c140c0000c044310cac4889ac0cfee1268b66d3ea488b5cecf84113ea48f79404000088e44d63c9e88bef3f00

block IDs [duplicates]: [221]
['mov qword ptr [rsp + r11 - 0xcd20], 0x7bc3390', 'mov ebp, dword ptr [r11 + r8 - 0xcd20]', 'call 0x7ffb72a428e1']

bytes: mov qword ptr [rsp + r11 - 0xcd20], 0x7bc3390: 4ac7841ce032ffff9033bc07
mov ebp, dword ptr [r11 + r8 - 0xcd20]: 438bac03e032ffff
call 0x7ffb72a428e1: e857eaf7ff

bytecode len: 50 -   4ac7841ce032ffff9033bc07438bac03e032ffffe857eaf7ff

block IDs [duplicates]: [222]
['mov qword ptr [rsp + r11 - 0xcd20], 0x210b8a0', 'dec r11b', 'cwde', 'lea rdx, [r9 + r11*4 + 0x58b333b8]', 'movsx ecx, dl', 'mov r10d, ecx', 'lea ebp, [r11 + rbp - 0x6608ce9f]', 'xadd byte ptr [rsp + r11*8 - 0x668f0], r11b', 'or r10w, r9w', 'not ebp', 'dec ebp', 'and r11, qword ptr [rsp + r11*8 - 0x66c7d]', 'xadd r9b, r10b', 'cdq', 'mov qword ptr [rsp + r11 + 0x10], rbx', 'movzx ebx, r10w', 'call 0x7ffb72dbb197']

bytes: mov qword ptr [rsp + r11 - 0xcd20], 0x210b8a0: 4ac7841ce032ffffa0b81002
dec r11b: 41fecb
cwde: 98
lea rdx, [r9 + r11*4 + 0x58b333b8]: 4b8d9499b833b358
movsx ecx, dl: 0fbeca
mov r10d, ecx: 448bd1
lea ebp, [r11 + rbp - 0x6608ce9f]: 418dac2b6131f799
xadd byte ptr [rsp + r11*8 - 0x668f0], r11b: 460fc09cdc1097f9ff
or r10w, r9w: 66450bd1
not ebp: f7d5
dec ebp: ffcd
and r11, qword ptr [rsp + r11*8 - 0x66c7d]: 4e239cdc8393f9ff
xadd r9b, r10b: 450fc0d1
cdq: 99
mov qword ptr [rsp + r11 + 0x10], rbx: 4a895c1c10
movzx ebx, r10w: 410fb7da
call 0x7ffb72dbb197: e860883700

bytecode len: 164 -   4ac7841ce032ffffa0b8100241fecb984b8d9499b833b3580fbeca448bd1418dac2b6131f799460fc09cdc1097f9ff66450bd1f7d5ffcd4e239cdc8393f9ff450fc0d1994a895c1c10410fb7dae860883700

block IDs [duplicates]: [223]
['xor r11b, byte ptr [r11 + r8 + 4]', 'not word ptr [rsp + rcx*8 - 0x7b]', 'sub r10, 0x3b30ac21', 'lea rbp, [rax*4 - 0x6e6937cf]', 'lea r8, [r8 + rcx*8 - 0x93]', 'xor rbp, rcx', 'btc rax, 3', 'xor r11b, bl', 'bts r10, 0xae', 'jae 0x7ffb72c1f4a6']

bytes: xor r11b, byte ptr [r11 + r8 + 4]: 47325c0304
not word ptr [rsp + rcx*8 - 0x7b]: 66f754cc85
sub r10, 0x3b30ac21: 4981ea21ac303b
lea rbp, [rax*4 - 0x6e6937cf]: 488d2c8531c89691
lea r8, [r8 + rcx*8 - 0x93]: 4d8d84c86dffffff
xor rbp, rcx: 4833e9
btc rax, 3: 480fbaf803
xor r11b, bl: 4432db
bts r10, 0xae: 490fbaeaae
jae 0x7ffb72c1f4a6: 0f83e2162800

bytecode len: 110 -   47325c030466f754cc854981ea21ac303b488d2c8531c896914d8d84c86dffffff4833e9480fbaf8034432db490fbaeaae0f83e2162800

block IDs [duplicates]: [224]
['sbb r11b, 0x7f', 'ror r11b, 1', 'sub al, bpl', 'cdqe', 'adc r11b, 0x8a', 'sal ebp, cl', 'rol r11b, 1', 'not byte ptr [rsp + rax*8 + 0x10580]', 'or word ptr [rsp + rcx*2 - 0x12], 0x1d27', 'xadd ax, r10w', 'xor bl, r11b', 'shl word ptr [rsp + rax + 0x99f3], 0xea', 'lea r11, [rsp + r11 + 0x20]', 'pop r10', 'or rbp, r10', 'ror byte ptr [rsp + rax*4 + 0x267da], 0x42', 'mov qword ptr [rax + r11 + 0x99f2], rdx', 'movsx r9d, word ptr [rsp + rax*2 + 0x133f8]', 'adc rbp, -0x66f6a1d3', 'mov qword ptr [rsp + rax + 0x99f2], rdi', 'ret 0x10']

bytes: sbb r11b, 0x7f: 4180db7f
ror r11b, 1: 41d0cb
sub al, bpl: 402ac5
cdqe: 4898
adc r11b, 0x8a: 4180d38a
sal ebp, cl: d3f5
rol r11b, 1: 41d0c3
not byte ptr [rsp + rax*8 + 0x10580]: f694c480050100
or word ptr [rsp + rcx*2 - 0x12], 0x1d27: 66814c4cee271d
xadd ax, r10w: 66440fc1d0
xor bl, r11b: 4132db
shl word ptr [rsp + rax + 0x99f3], 0xea: 66c1a404f3990000ea
lea r11, [rsp + r11 + 0x20]: 4e8d5c1c20
pop r10: 415a
or rbp, r10: 490bea
ror byte ptr [rsp + rax*4 + 0x267da], 0x42: c08c84da67020042
mov qword ptr [rax + r11 + 0x99f2], rdx: 4a899418f2990000
movsx r9d, word ptr [rsp + rax*2 + 0x133f8]: 440fbf8c44f8330100
adc rbp, -0x66f6a1d3: 4881d52d5e0999
mov qword ptr [rsp + rax + 0x99f2], rdi: 4889bc04f2990000
ret 0x10: c21000

bytecode len: 210 -   4180db7f41d0cb402ac548984180d38ad3f541d0c3f694c48005010066814c4cee271d66440fc1d04132db66c1a404f3990000ea4e8d5c1c20415a490beac08c84da670200424a899418f2990000440fbf8c44f83301004881d52d5e09994889bc04f2990000c21000

block IDs [duplicates]: [225]
['mov rbx, qword ptr [rsp + rdx + 0x10]', 'mov qword ptr [rsp + r9 - 0x46210599], r10', 'movsxd rax, eax', 'add rdi, rax', 'mov byte ptr [rsp + rdx + 0xc], 2', 'mov ecx, dword ptr [rdx + rsi + 4]', 'sub word ptr [rsp + r9 - 0x4621059a], 0xa887', 'sal r9d, 0x85', 'lea rsi, [rsi + rdx*2 + 8]', 'mov qword ptr [rsp + rdx*4], r11', 'movzx ebp, byte ptr [r8 + rdx*2 + 4]', 'and r11w, r9w', 'sal word ptr [rsp + rdx + 0xc], 0xaa', 'lea rdx, [r9*2 + 0xd3d3980]', 'lea r8, [r8 + r10 + 5]', 'movsx eax, word ptr [rsp + r10*4 + 0xe]', 'xor bpl, bl', 'xchg qword ptr [rsp + r11*2 + 0x1e010], rdx', 'cwd', 'xor bpl, al', 'sub bpl, 0x9a', 'neg bpl', 'shl r11w, 0xcd', 'btc eax, edx', 'call 0x7ffb729635a1']

bytes: mov rbx, qword ptr [rsp + rdx + 0x10]: 488b5c1410
mov qword ptr [rsp + r9 - 0x46210599], r10: 4e89940c67fadeb9
movsxd rax, eax: 4863c0
add rdi, rax: 4803f8
mov byte ptr [rsp + rdx + 0xc], 2: c644140c02
mov ecx, dword ptr [rdx + rsi + 4]: 8b4c3204
sub word ptr [rsp + r9 - 0x4621059a], 0xa887: 664281ac0c66fadeb987a8
sal r9d, 0x85: 41c1f185
lea rsi, [rsi + rdx*2 + 8]: 488d745608
mov qword ptr [rsp + rdx*4], r11: 4c891c94
movzx ebp, byte ptr [r8 + rdx*2 + 4]: 410fb66c5004
and r11w, r9w: 664523d9
sal word ptr [rsp + rdx + 0xc], 0xaa: 66c174140caa
lea rdx, [r9*2 + 0xd3d3980]: 4a8d144d80393d0d
lea r8, [r8 + r10 + 5]: 4f8d441005
movsx eax, word ptr [rsp + r10*4 + 0xe]: 420fbf44940e
xor bpl, bl: 4032eb
xchg qword ptr [rsp + r11*2 + 0x1e010], rdx: 4a87945c10e00100
cwd: 6699
xor bpl, al: 4032e8
sub bpl, 0x9a: 4080ed9a
neg bpl: 40f6dd
shl r11w, 0xcd: 6641c1e3cd
btc eax, edx: 0fbbd0
call 0x7ffb729635a1: e8cc3ff8ff

bytecode len: 246 -   488b5c14104e89940c67fadeb94863c04803f8c644140c028b4c3204664281ac0c66fadeb987a841c1f185488d7456084c891c94410fb66c5004664523d966c174140caa4a8d144d80393d0d4f8d441005420fbf44940e4032eb4a87945c10e0010066994032e84080ed9a40f6dd6641c1e3cd0fbbd0e8cc3ff8ff

block IDs [duplicates]: [226]
['not bpl', 'rol bpl, 1', 'dec r11b', 'cwd', 'shl rax, 0x4c', 'sbb bpl, 0xa', 'xchg word ptr [rsp + rdx + 0x16], dx', 'ror bpl, 1', 'btc eax, edx', 'not byte ptr [rsp + r10*4 + 0x19]', 'lea r9, [rax + rax*8 + 0x1f2fce8d]', 'xor bl, bpl', 'cwd', 'lea rbp, [rsp + rbp + 0x20]', 'mov dword ptr [rbp + rdx - 0xffff], ecx', 'mov qword ptr [rsp + rdx - 0xffff], rdi', 'ret 0x18']

bytes: not bpl: 40f6d5
rol bpl, 1: 40d0c5
dec r11b: 41fecb
cwd: 6699
shl rax, 0x4c: 48c1e04c
sbb bpl, 0xa: 4080dd0a
xchg word ptr [rsp + rdx + 0x16], dx: 6687541416
ror bpl, 1: 40d0cd
btc eax, edx: 0fbbd0
not byte ptr [rsp + r10*4 + 0x19]: 42f6549419
lea r9, [rax + rax*8 + 0x1f2fce8d]: 4c8d8cc08dce2f1f
xor bl, bpl: 4032dd
cwd: 6699
lea rbp, [rsp + rbp + 0x20]: 488d6c2c20
mov dword ptr [rbp + rdx - 0xffff], ecx: 898c150100ffff
mov qword ptr [rsp + rdx - 0xffff], rdi: 4889bc140100ffff
ret 0x18: c21800

bytecode len: 142 -   40f6d540d0c541fecb669948c1e04c4080dd0a668754141640d0cd0fbbd042f65494194c8d8cc08dce2f1f4032dd6699488d6c2c20898c150100ffff4889bc140100ffffc21800

block IDs [duplicates]: [228]
['lea rsi, [rsi + rcx*4 - 4]', 'dec r9', 'pop r10', 'pop r9', 'pop rbp', 'pop r11', 'jns 0x7ffb72be239f']

bytes: lea rsi, [rsi + rcx*4 - 4]: 488d748efc
dec r9: 49ffc9
pop r10: 415a
pop r9: 4159
pop rbp: 5d
pop r11: 415b
jns 0x7ffb72be239f: 0f894c3e2900

bytecode len: 42 -   488d748efc49ffc9415a41595d415b0f894c3e2900

block IDs [duplicates]: [230]
['bts r11d, 0xb8', 'adc dl, r10b', 'mov ebp, dword ptr [rsp + r11*8 - 0x8071e27]', 'ror dl, 1', 'call 0x7ffb72daf092']

bytes: bts r11d, 0xb8: 410fbaebb8
adc dl, r10b: 4112d2
mov ebp, dword ptr [rsp + r11*8 - 0x8071e27]: 428bacdcd9e1f8f7
ror dl, 1: d0ca
call 0x7ffb72daf092: e8f6c73600

bytecode len: 46 -   410fbaebb84112d2428bacdcd9e1f8f7d0cae8f6c73600

block IDs [duplicates]: [231]
['btc r10, 0x85', 'shl r10w, 0xa3', 'rol r11b, 1', 'push rdx', 'xor bl, r11b', 'lea r11, [rsp + r11 + 0x18]', 'pop rdx', 'rol r10d, 0xf6', 'sbb rax, 0x1691ddb2', 'add rdx, qword ptr [r11 + rbp*2]', 'ror al, 0x81', 'ror word ptr [rsp + rbp + 0xb], 0x8c', 'movsx r11d, cx', 'mov qword ptr [r10 + rsi - 0x6a0e09c1], rdx', 'lea rsi, [r9 + rsi - 0x7821cfd0]', 'push r11', 'add bp, 0x4384', 'pop rbp', 'pop r10', 'pop r9', 'jge 0x7ffb72be239f']

bytes: btc r10, 0x85: 490fbafa85
shl r10w, 0xa3: 6641c1e2a3
rol r11b, 1: 41d0c3
push rdx: 52
xor bl, r11b: 4132db
lea r11, [rsp + r11 + 0x18]: 4e8d5c1c18
pop rdx: 5a
rol r10d, 0xf6: 41c1c2f6
sbb rax, 0x1691ddb2: 4881d8b2dd9116
add rdx, qword ptr [r11 + rbp*2]: 4903146b
ror al, 0x81: c0c881
ror word ptr [rsp + rbp + 0xb], 0x8c: 66c14c2c0b8c
movsx r11d, cx: 440fbfd9
mov qword ptr [r10 + rsi - 0x6a0e09c1], rdx: 498994323ff6f195
lea rsi, [r9 + rsi - 0x7821cfd0]: 498db4313030de87
push r11: 4153
add bp, 0x4384: 6681c58443
pop rbp: 5d
pop r10: 415a
pop r9: 4159
jge 0x7ffb72be239f: 0f8d2e1e3200

bytecode len: 170 -   490fbafa856641c1e2a341d0c3524132db4e8d5c1c185a41c1c2f64881d8b2dd91164903146bc0c88166c14c2c0b8c440fbfd9498994323ff6f195498db4313030de8741536681c584435d415a41590f8d2e1e3200

block IDs [duplicates]: [233]
['lea r11, [rcx*2 - 0xf5430d3]', 'movzx ebp, word ptr [rsp + rax*4 + 2]', 'mov r10, qword ptr [r8 + rax*4 + 5]', 'mov qword ptr [rsp + rax*8 + 8], rbp', 'cdq', 'lea r8, [rax + r8 + 0xd]', 'rol ebp, 0xec', 'sbb dl, dl', 'cmovb r11d, ecx', 'xor r10, rbx', 'shl word ptr [rsp + rax + 0xa], 0x61', 'ror r10, 1', 'pop r9', 'pop rcx', 'lea r10, [r10 + rcx*2 - 0x4d6ca35c]', 'lea rcx, [rbp + r11*4 + 0x772280ab]', 'ror r10, 2', 'rol r11w, 0x27', 'add ecx, 0x73a713b5', 'dec r10', 'xor r9b, al', 'add bpl, al', 'xor r10, 0xffffffffa1941012', 'xor r9w, bp', 'call 0x7ffb72cf3096']

bytes: lea r11, [rcx*2 - 0xf5430d3]: 4c8d1c4d2dcfabf0
movzx ebp, word ptr [rsp + rax*4 + 2]: 0fb76c8402
mov r10, qword ptr [r8 + rax*4 + 5]: 4d8b548005
mov qword ptr [rsp + rax*8 + 8], rbp: 48896cc408
cdq: 99
lea r8, [rax + r8 + 0xd]: 4e8d44000d
rol ebp, 0xec: c1c5ec
sbb dl, dl: 1ad2
cmovb r11d, ecx: 440f42d9
xor r10, rbx: 4c33d3
shl word ptr [rsp + rax + 0xa], 0x61: 66c164040a61
ror r10, 1: 49d1ca
pop r9: 4159
pop rcx: 59
lea r10, [r10 + rcx*2 - 0x4d6ca35c]: 4d8d944aa45c93b2
lea rcx, [rbp + r11*4 + 0x772280ab]: 4a8d8c9dab802277
ror r10, 2: 49c1ca02
rol r11w, 0x27: 6641c1c327
add ecx, 0x73a713b5: 81c1b513a773
dec r10: 49ffca
xor r9b, al: 4432c8
add bpl, al: 4002e8
xor r10, 0xffffffffa1941012: 4981f2121094a1
xor r9w, bp: 664433cd
call 0x7ffb72cf3096: e8ce421500

bytecode len: 218 -   4c8d1c4d2dcfabf00fb76c84024d8b54800548896cc408994e8d44000dc1c5ec1ad2440f42d94c33d366c164040a6149d1ca4159594d8d944aa45c93b24a8d8c9dab80227749c1ca026641c1c32781c1b513a77349ffca4432c84002e84981f2121094a1664433cde8ce421500

block IDs [duplicates]: [234]
['mov qword ptr [r11 + rsi - 0x8b], rcx', 'and r11, rdx', 'mov r10d, dword ptr [r8 + r11*4 + 8]', 'cdq', 'push r9', 'xor r10d, ebx', 'add word ptr [rsp + rdx + 1], dx', 'btc bp, r9w', 'sbb r10d, edx', 'shr eax, 0x23', 'mov ecx, eax', 'shr byte ptr [rsp + rdx], 0x21', 'neg r10d', 'xadd ebp, edx', 'inc r10d', 'rol r10d, 1', 'mov qword ptr [rsp + r11*2], rbx', 'xor dword ptr [rsp + r9 - 0x5e29949b], r10d', 'lea rdx, [rdx*4 + 0x578b9f38]', 'inc r9w', 'pop rbx', 'movsxd r10, r10d', 'add rdi, r10', 'cmp rsi, r9', 'ja 0x7ffb72ac6561']

bytes: mov qword ptr [r11 + rsi - 0x8b], rcx: 49898c3375ffffff
and r11, rdx: 4c23da
mov r10d, dword ptr [r8 + r11*4 + 8]: 478b549808
cdq: 99
push r9: 4151
xor r10d, ebx: 4433d3
add word ptr [rsp + rdx + 1], dx: 6601541401
btc bp, r9w: 66440fbbcd
sbb r10d, edx: 441bd2
shr eax, 0x23: c1e823
mov ecx, eax: 8bc8
shr byte ptr [rsp + rdx], 0x21: c02c1421
neg r10d: 41f7da
xadd ebp, edx: 0fc1d5
inc r10d: 41ffc2
rol r10d, 1: 41d1c2
mov qword ptr [rsp + r11*2], rbx: 4a891c5c
xor dword ptr [rsp + r9 - 0x5e29949b], r10d: 4631940c656bd6a1
lea rdx, [rdx*4 + 0x578b9f38]: 488d1495389f8b57
inc r9w: 6641ffc1
pop rbx: 5b
movsxd r10, r10d: 4d63d2
add rdi, r10: 4903fa
cmp rsi, r9: 493bf1
ja 0x7ffb72ac6561: 0f87d7d0f7ff

bytecode len: 192 -   49898c3375ffffff4c23da478b5498089941514433d3660154140166440fbbcd441bd2c1e8238bc8c02c142141f7da0fc1d541ffc241d1c24a891c5c4631940c656bd6a1488d1495389f8b576641ffc15b4d63d24903fa493bf10f87d7d0f7ff

block IDs [duplicates]: [235]
['mov ecx, 0x269b8db6', 'movsx r9d, cx', 'mov eax, r9d', 'mov rcx, qword ptr [rsi + rcx - 0x269b8db6]', 'mov r9, qword ptr [rcx]', 'movsx ecx, al', 'movzx ebp, cl', 'mov qword ptr [rsi + rbp*2 - 0x16c], r9', 'movsx r9d, bpl', 'not r9', 'btr ecx, ecx', 'mov eax, dword ptr [rbp + r8 - 0xb6]', 'cmovb rbp, rcx', 'add cx, bp', 'sbb r8, -5', 'xor eax, ebx', 'movsx r10d, bpl', 'btr r10w, r9w', 'ror eax, 2', 'sal rcx, cl', 'seta r9b', 'adc eax, ecx', 'bswap eax', 'inc eax', 'ror r9, 0x18', 'not eax', 'push r9', 'shl word ptr [rsp + 3], 0x22', 'sbb eax, 0x391a119f', 'movsx edx, cl', 'xchg bp, r9w', 'sar r10w, 0x63', 'ror eax, 1', 'lea eax, [rax + rdx*4 - 0x3b0b64a3]', 'pop rdx', 'and r10, r9', 'call 0x7ffb728e2e70']

bytes: mov ecx, 0x269b8db6: b9b68d9b26
movsx r9d, cx: 440fbfc9
mov eax, r9d: 418bc1
mov rcx, qword ptr [rsi + rcx - 0x269b8db6]: 488b8c0e4a7264d9
mov r9, qword ptr [rcx]: 4c8b0c21
movsx ecx, al: 0fbec8
movzx ebp, cl: 0fb6e9
mov qword ptr [rsi + rbp*2 - 0x16c], r9: 4c898c6e94feffff
movsx r9d, bpl: 440fbecd
not r9: 49f7d1
btr ecx, ecx: 0fb3c9
mov eax, dword ptr [rbp + r8 - 0xb6]: 428b84054affffff
cmovb rbp, rcx: 480f42e9
add cx, bp: 6603cd
sbb r8, -5: 4983d8fb
xor eax, ebx: 33c3
movsx r10d, bpl: 440fbed5
btr r10w, r9w: 66450fb3ca
ror eax, 2: c1c802
sal rcx, cl: 48d3f1
seta r9b: 410f97c1
adc eax, ecx: 13c1
bswap eax: 0fc8
inc eax: ffc0
ror r9, 0x18: 49c1c918
not eax: f7d0
push r9: 4151
shl word ptr [rsp + 3], 0x22: 66c164240322
sbb eax, 0x391a119f: 1d9f111a39
movsx edx, cl: 0fbed1
xchg bp, r9w: 664487cd
sar r10w, 0x63: 6641c1fa63
ror eax, 1: d1c8
lea eax, [rax + rdx*4 - 0x3b0b64a3]: 8d84905d9bf4c4
pop rdx: 5a
and r10, r9: 4d23d1
call 0x7ffb728e2e70: e893e8f6ff

bytecode len: 286 -   b9b68d9b26440fbfc9418bc1488b8c0e4a7264d94c8b0c210fbec80fb6e94c898c6e94feffff440fbecd49f7d10fb3c9428b84054affffff480f42e96603cd4983d8fb33c3440fbed566450fb3cac1c80248d3f1410f97c113c10fc8ffc049c1c918f7d0415166c1642403221d9f111a390fbed1664487cd6641c1fa63d1c88d84905d9bf4c45a4d23d1e893e8f6ff

block IDs [duplicates]: [236]
['mov r10d, 0x8022e524', 'mov r11, qword ptr [rsi]', 'mov qword ptr [rsp + r10], rcx', 'cdqe', 'mov qword ptr [rsp + r10], rdi', 'ret']

bytes: mov r10d, 0x8022e524: 41ba24e52280
mov r11, qword ptr [rsi]: 4c8b1c26
mov qword ptr [rsp + r10], rcx: 4a890c14
cdqe: 4898
mov qword ptr [rsp + r10], rdi: 4a893c14
ret: c3

bytecode len: 42 -   41ba24e522804c8b1c264a890c1448984a893c14c3

block IDs [duplicates]: [237]
['dec ecx', 'or r10d, 0x73828e2b', 'not ecx', 'lea rbp, [rdx*4 - 0x14c92cc3]', 'inc ecx', 'cdqe', 'push rbx', 'inc bp', 'xor dword ptr [rsp + rax + 0x46f64048], ecx', 'movzx ebx, bpl', 'or r10b, bl', 'pop rbx', 'sar al, 0x27', 'lea r9, [rax*4 - 0x7cf14d58]', 'movsxd rcx, ecx', 'btr eax, edx', 'xchg rbp, rdx', 'btc eax, 0xbb', 'add rdi, rcx', 'btr eax, ebp', 'mov r11d, dword ptr [rsi + r11*2 - 0xf97300]', 'call 0x7ffb72cdfff4']

bytes: dec ecx: ffc9
or r10d, 0x73828e2b: 4181ca2b8e8273
not ecx: f7d1
lea rbp, [rdx*4 - 0x14c92cc3]: 488d2c953dd336eb
inc ecx: ffc1
cdqe: 4898
push rbx: 53
inc bp: 66ffc5
xor dword ptr [rsp + rax + 0x46f64048], ecx: 318c044840f646
movzx ebx, bpl: 400fb6dd
or r10b, bl: 440ad3
pop rbx: 5b
sar al, 0x27: c0f827
lea r9, [rax*4 - 0x7cf14d58]: 4c8d0c85a8b20e83
movsxd rcx, ecx: 4863c9
btr eax, edx: 0fb3d0
xchg rbp, rdx: 4887d5
btc eax, 0xbb: 0fbaf8bb
add rdi, rcx: 4803f9
btr eax, ebp: 0fb3e8
mov r11d, dword ptr [rsi + r11*2 - 0xf97300]: 468b9c5e008d06ff
call 0x7ffb72cdfff4: e80d7a3400

bytecode len: 170 -   ffc94181ca2b8e8273f7d1488d2c953dd336ebffc148985366ffc5318c044840f646400fb6dd440ad35bc0f8274c8d0c85a8b20e834863c90fb3d04887d50fbaf8bb4803f90fb3e8468b9c5e008d06ffe80d7a3400

block IDs [duplicates]: [238]
['mov qword ptr [rsp + rax - 0x7b], -0x3972fd6d', 'movsxd rdx, edx', 'neg r10d', 'sar byte ptr [rsp + rax*2 - 0xf6], cl', 'sal rcx, 0xf3', 'adc rdi, rdx', 'not eax', 'mov qword ptr [rsp + rax - 0x661], rdx', 'pop rdx', 'jp 0x7ffb72be239f']

bytes: mov qword ptr [rsp + rax - 0x7b], -0x3972fd6d: 48c744048593028dc6
movsxd rdx, edx: 4863d2
neg r10d: 41f7da
sar byte ptr [rsp + rax*2 - 0xf6], cl: d2bc440affffff
sal rcx, 0xf3: 48c1f1f3
adc rdi, rdx: 4813fa
not eax: f7d0
mov qword ptr [rsp + rax - 0x661], rdx: 488994049ff9ffff
pop rdx: 5a
jp 0x7ffb72be239f: 0f8add1c0400

bytecode len: 92 -   48c744048593028dc64863d241f7dad2bc440affffff48c1f1f34813faf7d0488994049ff9ffff5a0f8add1c0400

block IDs [duplicates]: [240]
['jne 0x7ffb72ce9340']

bytes: jne 0x7ffb72ce9340: 0f856a913c00

bytecode len: 12 -   0f856a913c00

block IDs [duplicates]: [241]
['mov edx, 0x3b054aaa', 'mov r11d, 0x5584dab6', 'mov r9, qword ptr [rdx + rsi - 0x3b054aaa]', 'movzx ecx, r11w', 'mov eax, 0x7e925694', 'ror cx, 0xc8', 'mov r10, qword ptr [r11 + rsi - 0x5584daae]', 'mov ebp, 0xce3c9eb8', 'btc ecx, 0xb3', 'and r9, r10', 'not r9', 'mov qword ptr [rdx + rsi - 0x3b054aa2], r9', 'lea r9, [rdx + rsi - 0x3b054aa2]', 'and edx, ecx', 'movsx r10d, cx', 'mov qword ptr [rsi + rdx - 0x28a], r9', 'sal al, 0x86', 'call 0x7ffb72c2176d']

bytes: mov edx, 0x3b054aaa: baaa4a053b
mov r11d, 0x5584dab6: 41bbb6da8455
mov r9, qword ptr [rdx + rsi - 0x3b054aaa]: 4c8b8c3256b5fac4
movzx ecx, r11w: 410fb7cb
mov eax, 0x7e925694: b89456927e
ror cx, 0xc8: 66c1c9c8
mov r10, qword ptr [r11 + rsi - 0x5584daae]: 4d8b943352257baa
mov ebp, 0xce3c9eb8: bdb89e3cce
btc ecx, 0xb3: 0fbaf9b3
and r9, r10: 4d23ca
not r9: 49f7d1
mov qword ptr [rdx + rsi - 0x3b054aa2], r9: 4c898c325eb5fac4
lea r9, [rdx + rsi - 0x3b054aa2]: 4c8d8c325eb5fac4
and edx, ecx: 23d1
movsx r10d, cx: 440fbfd1
mov qword ptr [rsi + rdx - 0x28a], r9: 4c898c1676fdffff
sal al, 0x86: c0f086
call 0x7ffb72c2176d: e8107b3100

bytecode len: 186 -   baaa4a053b41bbb6da84554c8b8c3256b5fac4410fb7cbb89456927e66c1c9c84d8b943352257baabdb89e3cce0fbaf9b34d23ca49f7d14c898c325eb5fac44c8d8c325eb5fac423d1440fbfd14c898c1676fdffffc0f086e8107b3100

block IDs [duplicates]: [242]
['mov eax, r11d', 'dec r11d', 'dec edx', 'bswap eax', 'dec bp', 'bswap edx', 'inc edx', 'not edx', 'xchg r10d, r9d', 'ror cx, 0xe1', 'push rbx', 'and r9d, r10d', 'cmovns r11, r9', 'xor dword ptr [rsp + r11 - 0x55852efc], edx', 'pop rbx', 'push r9', 'xchg byte ptr [rsp + r11 - 0x55852ef8], r10b', 'movsxd rdx, edx', 'bts rax, rbp', 'adc r9w, 0x2221', 'shr r9w, 0xe8', 'add rdi, rdx', 'sal rbp, 0xdf', 'or qword ptr [rsp + r11 - 0x55852efc], r9', 'bt r10d, ebp', 'mov qword ptr [rsp + r11 - 0x55852efc], rdi', 'ret']

bytes: mov eax, r11d: 418bc3
dec r11d: 41ffcb
dec edx: ffca
bswap eax: 0fc8
dec bp: 66ffcd
bswap edx: 0fca
inc edx: ffc2
not edx: f7d2
xchg r10d, r9d: 4587ca
ror cx, 0xe1: 66c1c9e1
push rbx: 53
and r9d, r10d: 4523ca
cmovns r11, r9: 4d0f49d9
xor dword ptr [rsp + r11 - 0x55852efc], edx: 4231941c04d17aaa
pop rbx: 5b
push r9: 4151
xchg byte ptr [rsp + r11 - 0x55852ef8], r10b: 4686941c08d17aaa
movsxd rdx, edx: 4863d2
bts rax, rbp: 480fabe8
adc r9w, 0x2221: 664181d12122
shr r9w, 0xe8: 6641c1e9e8
add rdi, rdx: 4803fa
sal rbp, 0xdf: 48c1f5df
or qword ptr [rsp + r11 - 0x55852efc], r9: 4e098c1c04d17aaa
bt r10d, ebp: 410fa3ea
mov qword ptr [rsp + r11 - 0x55852efc], rdi: 4a89bc1c04d17aaa
ret: c3

bytecode len: 198 -   418bc341ffcbffca0fc866ffcd0fcaffc2f7d24587ca66c1c9e1534523ca4d0f49d94231941c04d17aaa5b41514686941c08d17aaa4863d2480fabe8664181d121226641c1e9e84803fa48c1f5df4e098c1c04d17aaa410fa3ea4a89bc1c04d17aaac3

block IDs [duplicates]: [243]
['mov qword ptr [rsp + r9], 0x1fa61591', 'rol qword ptr [rsp + r9], 0x88', 'mov qword ptr [rsp + r9*4], rbx', 'jae 0x7ffb72cf2be2']

bytes: mov qword ptr [rsp + r9], 0x1fa61591: 4ac7040c9115a61f
rol qword ptr [rsp + r9], 0x88: 4ac1040c88
mov qword ptr [rsp + r9*4], rbx: 4a891c8c
jae 0x7ffb72cf2be2: 0f832c0b4000

bytecode len: 46 -   4ac7040c9115a61f4ac1040c884a891c8c0f832c0b4000

block IDs [duplicates]: [244]
['not dl', 'xor rax, r11', 'setp bpl', 'xor bl, dl', 'neg ax', 'add rdx, rsp', 'and eax, ecx', 'mov qword ptr [rcx + rdx - 0x20080800], r9', 'push rcx', 'mov qword ptr [rsp + rax*2], rdi', 'ret']

bytes: not dl: f6d2
xor rax, r11: 4933c3
setp bpl: 400f9ac5
xor bl, dl: 32da
neg ax: 66f7d8
add rdx, rsp: 4803d4
and eax, ecx: 23c1
mov qword ptr [rcx + rdx - 0x20080800], r9: 4c898c1100f8f7df
push rcx: 51
mov qword ptr [rsp + rax*2], rdi: 48893c44
ret: c3

bytecode len: 66 -   f6d24933c3400f9ac532da66f7d84803d423c14c898c1100f8f7df5148893c44c3

block IDs [duplicates]: [245]
['sub r9d, 0x63114488', 'sbb rcx, r10', 'sal al, 0x27', 'rol rcx, 6', 'dec r10b', 'lea rcx, [rcx + r10*8 - 0x7521fea3]', 'bswap rcx', 'cbw', 'xor rbx, rcx', 'sal r11, 0xf5', 'mov qword ptr [rdx + rsi - 0x3da4b10a], rcx', 'lea rsi, [rdx + rsi - 0x3da4b10a]', 'not r11', 'mov edx, dword ptr [r8 + r10*2 - 0x1f4]', 'bts rax, r10', 'lea r8, [r8 + r10 - 0xf1]', 'and al, r11b', 'xor edx, ebx', 'lea rbp, [r10*8 + 0x4ba28922]', 'btr bp, r10w', 'lea edx, [rdx + r9 - 0x14486bbc]', 'rol edx, 2', 'shl r11, 0xc4', 'jae 0x7ffb72c34f31']

bytes: sub r9d, 0x63114488: 4181e988441163
sbb rcx, r10: 491bca
sal al, 0x27: c0f027
rol rcx, 6: 48c1c106
dec r10b: 41feca
lea rcx, [rcx + r10*8 - 0x7521fea3]: 4a8d8cd15d01de8a
bswap rcx: 480fc9
cbw: 6698
xor rbx, rcx: 4833d9
sal r11, 0xf5: 49c1f3f5
mov qword ptr [rdx + rsi - 0x3da4b10a], rcx: 48898c32f64e5bc2
lea rsi, [rdx + rsi - 0x3da4b10a]: 488db432f64e5bc2
not r11: 49f7d3
mov edx, dword ptr [r8 + r10*2 - 0x1f4]: 438b94500cfeffff
bts rax, r10: 4c0fabd0
lea r8, [r8 + r10 - 0xf1]: 4f8d84100fffffff
and al, r11b: 4122c3
xor edx, ebx: 33d3
lea rbp, [r10*8 + 0x4ba28922]: 4a8d2cd52289a24b
btr bp, r10w: 66440fb3d5
lea edx, [rdx + r9 - 0x14486bbc]: 428d940a4494b7eb
rol edx, 2: c1c202
shl r11, 0xc4: 49c1e3c4
jae 0x7ffb72c34f31: 0f838d000a00

bytecode len: 236 -   4181e988441163491bcac0f02748c1c10641feca4a8d8cd15d01de8a480fc966984833d949c1f3f548898c32f64e5bc2488db432f64e5bc249f7d3438b94500cfeffff4c0fabd04f8d84100fffffff4122c333d34a8d2cd52289a24b66440fb3d5428d940a4494b7ebc1c20249c1e3c40f838d000a00

block IDs [duplicates]: [248]
['mov r9d, dword ptr [r8 + r10*4 - 0x38b080ce]', 'xor r9d, ebx', 'sar ax, cl', 'xchg dl, bpl', 'dec r9d', 'movzx r11d, al', 'neg r9d', 'mov qword ptr [rsp + r10 - 0xe2c2034], 0xe2d5326', 'lea r10, [r11 + rax*8 - 0x2af826f2]', 'sub r10b, byte ptr [rsp + rdx - 0x3628065c]', 'inc r9d', 'rol r9d, 1', 'mov qword ptr [rsp + rdx - 0x36280663], rbx', 'cwd', 'xor dword ptr [rsp + rdx*2 - 0x6c500000], r9d', 'pop rbx', 'sub r11d, ecx', 'movsxd r9, r9d', 'add rdi, r9', 'cbw', 'movzx edx, byte ptr [r8 + rdx - 0x3627fffa]', 'sub rbp, 0x290efb9a', 'lea r8, [r8 + r11 - 0x2c618b41]', 'sal al, cl', 'xor dl, bl', 'movsx r9d, bp', 'not dl', 'call 0x7ffb72e0260c']

bytes: mov r9d, dword ptr [r8 + r10*4 - 0x38b080ce]: 478b8c90327f4fc7
xor r9d, ebx: 4433cb
sar ax, cl: 66d3f8
xchg dl, bpl: 4086ea
dec r9d: 41ffc9
movzx r11d, al: 440fb6d8
neg r9d: 41f7d9
mov qword ptr [rsp + r10 - 0xe2c2034], 0xe2d5326: 4ac78414ccdfd3f126532d0e
lea r10, [r11 + rax*8 - 0x2af826f2]: 4d8d94c30ed907d5
sub r10b, byte ptr [rsp + rdx - 0x3628065c]: 442a9414a4f9d7c9
inc r9d: 41ffc1
rol r9d, 1: 41d1c1
mov qword ptr [rsp + rdx - 0x36280663], rbx: 48899c149df9d7c9
cwd: 6699
xor dword ptr [rsp + rdx*2 - 0x6c500000], r9d: 44318c540000b093
pop rbx: 5b
sub r11d, ecx: 442bd9
movsxd r9, r9d: 4d63c9
add rdi, r9: 4903f9
cbw: 6698
movzx edx, byte ptr [r8 + rdx - 0x3627fffa]: 410fb694100600d8c9
sub rbp, 0x290efb9a: 4881ed9afb0e29
lea r8, [r8 + r11 - 0x2c618b41]: 4f8d8418bf749ed3
sal al, cl: d2f0
xor dl, bl: 32d3
movsx r9d, bp: 440fbfcd
not dl: f6d2
call 0x7ffb72e0260c: e8bfea4b00

bytecode len: 260 -   478b8c90327f4fc74433cb66d3f84086ea41ffc9440fb6d841f7d94ac78414ccdfd3f126532d0e4d8d94c30ed907d5442a9414a4f9d7c941ffc141d1c148899c149df9d7c9669944318c540000b0935b442bd94d63c94903f96698410fb694100600d8c94881ed9afb0e294f8d8418bf749ed3d2f032d3440fbfcdf6d2e8bfea4b00

block IDs [duplicates]: [249]
['lea rdx, [rsp + rdx + 8]', 'bts ebp, 0xa3', 'mov qword ptr [rsp + rbp*2 - 0x10], r9', 'mov rcx, qword ptr [rdx + rbp*2 - 0x10]', 'setae r11b', 'adc byte ptr [rsp + rbp - 3], bpl', 'mov qword ptr [rsi + rbp*2 - 0x20], rcx', 'lea rsi, [rsi + rbp*4 - 0x30]', 'ror r11d, 0x89', 'pop rdx', 'jbe 0x7ffb72be239f']

bytes: lea rdx, [rsp + rdx + 8]: 488d541408
bts ebp, 0xa3: 0fbaeda3
mov qword ptr [rsp + rbp*2 - 0x10], r9: 4c894c6cf0
mov rcx, qword ptr [rdx + rbp*2 - 0x10]: 488b4c6af0
setae r11b: 410f93c3
adc byte ptr [rsp + rbp - 3], bpl: 40106c2cfd
mov qword ptr [rsi + rbp*2 - 0x20], rcx: 48894c6ee0
lea rsi, [rsi + rbp*4 - 0x30]: 488d74aed0
ror r11d, 0x89: 41c1cb89
pop rdx: 5a
jbe 0x7ffb72be239f: 0f86d8c31d00

bytecode len: 98 -   488d5414080fbaeda34c894c6cf0488b4c6af0410f93c340106c2cfd48894c6ee0488d74aed041c1cb895a0f86d8c31d00

block IDs [duplicates]: [251]
['mov ebp, 0xe30440b9', 'mov edx, dword ptr [r8]', 'movzx r11d, bp', 'lea r9, [r11 + rbp*8 - 0x40f3f7e8]', 'not r11w', 'lea r8, [r8 + r11 - 0xbf42]', 'btr bp, r9w', 'xor edx, ebx', 'sar rbp, 0x24', 'push r9', 'not edx', 'rol dword ptr [rsp + rbp*8 + 3], 0xbb', 'inc r11d', 'or dword ptr [rsp + rbp + 2], 0x7983da3', 'bswap edx', 'xor edx, 0x631288ab', 'lea rcx, [r11 + rbp*4 - 0x186aaf70]', 'not dword ptr [rsp + rbp*4 + 3]', 'push rbp', 'ror edx, 1', 'inc dword ptr [rsp + rbp + 8]', 'dec edx', 'movzx r10d, bpl', 'shr r11d, cl', 'neg r11w', 'xor edx, 0x76206f3a', 'neg r9b', 'btr r9, r11', 'mov qword ptr [rsp + rbp + 8], rbx', 'xor dword ptr [rsp + rbp + 8], edx', 'mov rbx, qword ptr [rsp + rbp + 8]', 'shl r9w, 0xad', 'movsxd rdx, edx', 'shl byte ptr [rsp + rbp], 0x62', 'adc rdi, rdx', 'xor qword ptr [rsp + rcx + 0x1869f029], 0xffffffff841f989a', 'shr rcx, 0xe7', 'mov rax, qword ptr [rsi + rbp*8]', 'neg r11', 'rol r9d, cl', 'shr bp, 0x6a', 'add rbp, qword ptr ss:[rax + rbp*4]', 'rol dword ptr [rsp + r11 + 2], cl', 'mov rdx, rbp', 'mov rbp, qword ptr [r11 + rsi + 8]', 'and rdx, rbp', 'mov qword ptr [rsp + r11*4 + 8], r10', 'shl r10, cl', 'not rdx', 'je 0x7ffb72d35ddb']

bytes: mov ebp, 0xe30440b9: bdb94004e3
mov edx, dword ptr [r8]: 418b1420
movzx r11d, bp: 440fb7dd
lea r9, [r11 + rbp*8 - 0x40f3f7e8]: 4d8d8ceb18080cbf
not r11w: 6641f7d3
lea r8, [r8 + r11 - 0xbf42]: 4f8d8418be40ffff
btr bp, r9w: 66440fb3cd
xor edx, ebx: 33d3
sar rbp, 0x24: 48c1fd24
push r9: 4151
not edx: f7d2
rol dword ptr [rsp + rbp*8 + 3], 0xbb: c144ec03bb
inc r11d: 41ffc3
or dword ptr [rsp + rbp + 2], 0x7983da3: 814c2c02a33d9807
bswap edx: 0fca
xor edx, 0x631288ab: 81f2ab881263
lea rcx, [r11 + rbp*4 - 0x186aaf70]: 498d8cab905095e7
not dword ptr [rsp + rbp*4 + 3]: f754ac03
push rbp: 55
ror edx, 1: d1ca
inc dword ptr [rsp + rbp + 8]: ff442c08
dec edx: ffca
movzx r10d, bpl: 440fb6d5
shr r11d, cl: 41d3eb
neg r11w: 6641f7db
xor edx, 0x76206f3a: 81f23a6f2076
neg r9b: 41f6d9
btr r9, r11: 4d0fb3d9
mov qword ptr [rsp + rbp + 8], rbx: 48895c2c08
xor dword ptr [rsp + rbp + 8], edx: 31542c08
mov rbx, qword ptr [rsp + rbp + 8]: 488b5c2c08
shl r9w, 0xad: 6641c1e1ad
movsxd rdx, edx: 4863d2
shl byte ptr [rsp + rbp], 0x62: c0242c62
adc rdi, rdx: 4813fa
xor qword ptr [rsp + rcx + 0x1869f029], 0xffffffff841f989a: 4881b40c29f069189a981f84
shr rcx, 0xe7: 48c1e9e7
mov rax, qword ptr [rsi + rbp*8]: 488b04ee
neg r11: 49f7db
rol r9d, cl: 41d3c1
shr bp, 0x6a: 66c1ed6a
add rbp, qword ptr ss:[rax + rbp*4]: 3648032ca8
rol dword ptr [rsp + r11 + 2], cl: 42d3441c02
mov rdx, rbp: 488bd5
mov rbp, qword ptr [r11 + rsi + 8]: 498b6c3308
and rdx, rbp: 4823d5
mov qword ptr [rsp + r11*4 + 8], r10: 4e89549c08
shl r10, cl: 49d3e2
not rdx: 48f7d2
je 0x7ffb72d35ddb: 0f8411ce3600

bytecode len: 428 -   bdb94004e3418b1420440fb7dd4d8d8ceb18080cbf6641f7d34f8d8418be40ffff66440fb3cd33d348c1fd244151f7d2c144ec03bb41ffc3814c2c02a33d98070fca81f2ab881263498d8cab905095e7f754ac0355d1caff442c08ffca440fb6d541d3eb6641f7db81f23a6f207641f6d94d0fb3d948895c2c0831542c08488b5c2c086641c1e1ad4863d2c0242c624813fa4881b40c29f069189a981f8448c1e9e7488b04ee49f7db41d3c166c1ed6a3648032ca842d3441c02488bd5498b6c33084823d54e89549c0849d3e248f7d20f8411ce3600

block IDs [duplicates]: [252]
['mov ecx, 0x41aed209', 'mov ebp, dword ptr [r8 + rcx - 0x41aed209]', 'movzx eax, cx', 'rol ebp, 1', 'push rbx', 'cbw', 'not r9', 'dec rax', 'xor dword ptr [rsp + r11 - 0xffb6], ebp', 'pop rbx', 'movsxd rbp, ebp', 'add rdi, rbp', 'bswap edx', 'cdqe', 'movzx ebp, byte ptr [rax + r8 + 0xf]', 'shl r9w, 0x6a', 'ror rax, cl', 'setnp dl', 'xor bpl, bl', 'dec dx', 'sub bpl, 0x17', 'xor bpl, al', 'inc eax', 'sub r9d, r11d', 'rol bpl, 1', 'movzx r10d, dl', 'bswap r11', 'xor bpl, dl', 'sal edx, 0x3e', 'sbb bpl, 0x89', 'call 0x7ffb72d17c3f']

bytes: mov ecx, 0x41aed209: b909d2ae41
mov ebp, dword ptr [r8 + rcx - 0x41aed209]: 418bac08f72d51be
movzx eax, cx: 0fb7c1
rol ebp, 1: d1c5
push rbx: 53
cbw: 6698
not r9: 49f7d1
dec rax: 48ffc8
xor dword ptr [rsp + r11 - 0xffb6], ebp: 4231ac1c4a00ffff
pop rbx: 5b
movsxd rbp, ebp: 4863ed
add rdi, rbp: 4803fd
bswap edx: 0fca
cdqe: 4898
movzx ebp, byte ptr [rax + r8 + 0xf]: 420fb66c000f
shl r9w, 0x6a: 6641c1e16a
ror rax, cl: 48d3c8
setnp dl: 0f9bc2
xor bpl, bl: 4032eb
dec dx: 66ffca
sub bpl, 0x17: 4080ed17
xor bpl, al: 4032e8
inc eax: ffc0
sub r9d, r11d: 452bcb
rol bpl, 1: 40d0c5
movzx r10d, dl: 440fb6d2
bswap r11: 490fcb
xor bpl, dl: 4032ea
sal edx, 0x3e: c1f23e
sbb bpl, 0x89: 4080dd89
call 0x7ffb72d17c3f: e832702600

bytecode len: 212 -   b909d2ae41418bac08f72d51be0fb7c1d1c553669849f7d148ffc84231ac1c4a00ffff5b4863ed4803fd0fca4898420fb66c000f6641c1e16a48d3c80f9bc24032eb66ffca4080ed174032e8ffc0452bcb40d0c5440fb6d2490fcb4032eac1f23e4080dd89e832702600

block IDs [duplicates]: [253]
['push -0x2a6d0dce', 'mov eax, 0xea0a2f99', 'btc rax, 0x32', 'mov rdx, qword ptr [rsi]', 'neg word ptr [rsp + 2]', 'call 0x7ffb72d23f22']

bytes: push -0x2a6d0dce: 6832f292d5
mov eax, 0xea0a2f99: b8992f0aea
btc rax, 0x32: 480fbaf832
mov rdx, qword ptr [rsi]: 488b1426
neg word ptr [rsp + 2]: 66f75c2402
call 0x7ffb72d23f22: e8953a4300

bytecode len: 58 -   6832f292d5b8992f0aea480fbaf832488b142666f75c2402e8953a4300

block IDs [duplicates]: [254]
['adc rdi, rcx', 'mov qword ptr [rsp + rax - 0x5ff31fe8], -0x34ce65d5', 'mov rax, qword ptr [rsi + rax - 0x5ff31ffe]', 'ror word ptr [rsp + rbp + 0x646d8c32], 0x27', 'mov rcx, qword ptr [rsi + rbp + 0x646d8c29]', 'and qword ptr [rsp + r9*2 - 0xe91a], r11', 'jle 0x7ffb72ec8c9c']

bytes: adc rdi, rcx: 4813f9
mov qword ptr [rsp + rax - 0x5ff31fe8], -0x34ce65d5: 48c7840418e00ca02b9a31cb
mov rax, qword ptr [rsi + rax - 0x5ff31ffe]: 488b840602e00ca0
ror word ptr [rsp + rbp + 0x646d8c32], 0x27: 66c18c2c328c6d6427
mov rcx, qword ptr [rsi + rbp + 0x646d8c29]: 488b8c2e298c6d64
and qword ptr [rsp + r9*2 - 0xe91a], r11: 4e219c4ce616ffff
jle 0x7ffb72ec8c9c: 0f8ef9784700

bytecode len: 108 -   4813f948c7840418e00ca02b9a31cb488b840602e00ca066c18c2c328c6d6427488b8c2e298c6d644e219c4ce616ffff0f8ef9784700

block IDs [duplicates]: [255]
['bts edx, ebp', 'adc rax, rcx', 'inc r11', 'mov qword ptr [rbp + rsi + 0x646d8c29], rax', 'btr r11w, dx', 'lea rsi, [rsi + r9 - 0x748f]', 'movzx eax, r11b', 'adc eax, ebp', 'dec al', 'mov qword ptr [rsp + rbp + 0x646d8c1f], rdi', 'ret 0x18']

bytes: bts edx, ebp: 0fabea
adc rax, rcx: 4813c1
inc r11: 49ffc3
mov qword ptr [rbp + rsi + 0x646d8c29], rax: 48898435298c6d64
btr r11w, dx: 66410fb3d3
lea rsi, [rsi + r9 - 0x748f]: 4a8db40e718bffff
movzx eax, r11b: 410fb6c3
adc eax, ebp: 13c5
dec al: fec8
mov qword ptr [rsp + rbp + 0x646d8c1f], rdi: 4889bc2c1f8c6d64
ret 0x18: c21800

bytecode len: 98 -   0fabea4813c149ffc348898435298c6d6466410fb3d34a8db40e718bffff410fb6c313c5fec84889bc2c1f8c6d64c21800

block IDs [duplicates]: [256]
['or r11b, cl', 'not bpl', 'bts rcx, r10', 'xor r9b, r11b', 'rol bpl, 1', 'call 0x7ffb72dc1c24']

bytes: or r11b, cl: 440ad9
not bpl: 40f6d5
bts rcx, r10: 4c0fabd1
xor r9b, r11b: 4532cb
rol bpl, 1: 40d0c5
call 0x7ffb72dc1c24: e840854700

bytecode len: 42 -   440ad940f6d54c0fabd14532cb40d0c5e840854700

block IDs [duplicates]: [257]
['sbb bpl, 0x8a', 'not bpl', 'sub bpl, 0x94', 'rol bpl, 1', 'ror r10, cl', 'not r10b', 'xor bl, bpl', 'mov byte ptr [rsp + r11 - 0x68a991f0], r10b', 'sar rdx, cl', 'lea rbp, [rsp + rbp + 0x10]', 'cdq', 'jns 0x7ffb72c3c452']

bytes: sbb bpl, 0x8a: 4080dd8a
not bpl: 40f6d5
sub bpl, 0x94: 4080ed94
rol bpl, 1: 40d0c5
ror r10, cl: 49d3ca
not r10b: 41f6d2
xor bl, bpl: 4032dd
mov byte ptr [rsp + r11 - 0x68a991f0], r10b: 4688941c106e5697
sar rdx, cl: 48d3fa
lea rbp, [rsp + rbp + 0x10]: 488d6c2c10
cdq: 99
jns 0x7ffb72c3c452: 0f89cd9c2500

bytecode len: 92 -   4080dd8a40f6d54080ed9440d0c549d3ca41f6d24032dd4688941c106e569748d3fa488d6c2c10990f89cd9c2500

block IDs [duplicates]: [258]
['btr r11d, 0xb9', 'sbb r10w, 0x1933', 'ror r10w, 1', 'call 0x7ffb72e2aa44']

bytes: btr r11d, 0xb9: 410fbaf3b9
sbb r10w, 0x1933: 664181da3319
ror r10w, 1: 6641d1ca
call 0x7ffb72e2aa44: e86ea32800

bytecode len: 40 -   410fbaf3b9664181da33196641d1cae86ea32800

block IDs [duplicates]: [259]
['jb 0x7ffb72e6d2f9']

bytes: jb 0x7ffb72e6d2f9: 0f828d594300

bytecode len: 12 -   0f828d594300

block IDs [duplicates]: [260]
['not byte ptr [rsp + rax + 0x6e]', 'pop r11', 'pop r11', 'pop r11', 'js 0x7ffb72be239f']

bytes: not byte ptr [rsp + rax + 0x6e]: f654046e
pop r11: 415b
pop r11: 415b
pop r11: 415b
js 0x7ffb72be239f: 0f885a851400

bytecode len: 32 -   f654046e415b415b415b0f885a851400

block IDs [duplicates]: [262]
['shl eax, 0x66', 'xor r11d, ebx', 'not cl', 'cqo', 'lea r11d, [r11 + r10*2 - 0x4359b042]', 'push r10', 'rol r11d, 2', 'neg r11d', 'inc r11d', 'mov qword ptr [rsp + rcx*2 - 0x7ff2], rbx', 'lea rbp, [rax + rdx*8 + 0x4841314]', 'lea r9, [rdx + rax + 0x3b261aa9]', 'rol cx, 0x2f', 'xor dword ptr [rsp + rcx*8 - 0x4fff0], r11d', 'lea rdx, [r10 + r9*8 - 0x73ed8cc8]', 'sal r9w, 0xe4', 'mov rbx, qword ptr [rsp + rcx*2 - 0x13ff0]', 'movsxd r11, r11d', 'jp 0x7ffb72cb503a']

bytes: shl eax, 0x66: c1e066
xor r11d, ebx: 4433db
not cl: f6d1
cqo: 4899
lea r11d, [r11 + r10*2 - 0x4359b042]: 478d9c53be4fa6bc
push r10: 4152
rol r11d, 2: 41c1c302
neg r11d: 41f7db
inc r11d: 41ffc3
mov qword ptr [rsp + rcx*2 - 0x7ff2], rbx: 48899c4c0e80ffff
lea rbp, [rax + rdx*8 + 0x4841314]: 488dacd014138404
lea r9, [rdx + rax + 0x3b261aa9]: 4c8d8c02a91a263b
rol cx, 0x2f: 66c1c12f
xor dword ptr [rsp + rcx*8 - 0x4fff0], r11d: 44319ccc1000fbff
lea rdx, [r10 + r9*8 - 0x73ed8cc8]: 4b8d94ca3873128c
sal r9w, 0xe4: 6641c1f1e4
mov rbx, qword ptr [rsp + rcx*2 - 0x13ff0]: 488b9c4c10c0feff
movsxd r11, r11d: 4d63db
jp 0x7ffb72cb503a: 0f8ab1ad1100

bytecode len: 192 -   c1e0664433dbf6d14899478d9c53be4fa6bc415241c1c30241f7db41ffc348899c4c0e80ffff488dacd0141384044c8d8c02a91a263b66c1c12f44319ccc1000fbff4b8d94ca3873128c6641c1f1e4488b9c4c10c0feff4d63db0f8ab1ad1100

block IDs [duplicates]: [264]
['call 0x7ffb72ec07c8']

bytes: call 0x7ffb72ec07c8: e8e21c3b00

bytecode len: 10 -   e8e21c3b00

block IDs [duplicates]: [265]
['mov r9, r11', 'mov r8d, 0x6205a28', 'rol r8, 0x94', 'movabs rbx, 0x7ff9e7130000', 'sbb r9, rbx', 'lea rdi, [rip - 7]', 'mov ebx, 0xfa1b7d12', 'bswap ebx', 'lea r11, [r11 + rbx*2 - 0x24fa37f8]', 'and bx, 0xa629', 'mov r8d, dword ptr [r11 + rbx - 0x127d0228]', 'xchg rbp, rbx', 'shl ebp, 0x10', 'xor r8d, r9d', 'lea r10, [rbx*2 + 0x670db818]', 'lea r8d, [r8 + rbx*2 - 0x4f884355]', 'mov eax, ebx', 'sub ebx, ebp', 'neg r8d', 'add al, 0x1a', 'sub rbx, -0x227052cb', 'movsx ecx, ax', 'xor r8d, 0xc80e8daa', 'btr ax, 0x22', 'sal r10d, 0x5c', 'inc r8d', 'movzx edx, bpl', 'shr al, 0x83', 'ror dx, 0x49', 'not r8d', 'push r9', 'shr bl, 0xc1', 'inc dx', 'xor dword ptr [rsp + rbx*2 - 0x658aa8f2], r8d', 'rol al, 0x81', 'jno 0x7ffb72ad8509']

bytes: mov r9, r11: 4d8bcb
mov r8d, 0x6205a28: 41b8285a2006
rol r8, 0x94: 49c1c094
movabs rbx, 0x7ff9e7130000: 48bb000013e7f97f0000
sbb r9, rbx: 4c1bcb
lea rdi, [rip - 7]: 488d3df9ffffff
mov ebx, 0xfa1b7d12: bb127d1bfa
bswap ebx: 0fcb
lea r11, [r11 + rbx*2 - 0x24fa37f8]: 4d8d9c5b08c805db
and bx, 0xa629: 6681e329a6
mov r8d, dword ptr [r11 + rbx - 0x127d0228]: 458b841bd8fd82ed
xchg rbp, rbx: 4887dd
shl ebp, 0x10: c1e510
xor r8d, r9d: 4533c1
lea r10, [rbx*2 + 0x670db818]: 4c8d145d18b80d67
lea r8d, [r8 + rbx*2 - 0x4f884355]: 458d8458abbc77b0
mov eax, ebx: 8bc3
sub ebx, ebp: 2bdd
neg r8d: 41f7d8
add al, 0x1a: 041a
sub rbx, -0x227052cb: 4881eb35ad8fdd
movsx ecx, ax: 0fbfc8
xor r8d, 0xc80e8daa: 4181f0aa8d0ec8
btr ax, 0x22: 660fbaf022
sal r10d, 0x5c: 41c1f25c
inc r8d: 41ffc0
movzx edx, bpl: 400fb6d5
shr al, 0x83: c0e883
ror dx, 0x49: 66c1ca49
not r8d: 41f7d0
push r9: 4151
shr bl, 0xc1: c0ebc1
inc dx: 66ffc2
xor dword ptr [rsp + rbx*2 - 0x658aa8f2], r8d: 4431845c0e57759a
rol al, 0x81: c0c081
jno 0x7ffb72ad8509: 0f818b080000

bytecode len: 326 -   4d8bcb41b8285a200649c1c09448bb000013e7f97f00004c1bcb488d3df9ffffffbb127d1bfa0fcb4d8d9c5b08c805db6681e329a6458b841bd8fd82ed4887ddc1e5104533c14c8d145d18b80d67458d8458abbc77b08bc32bdd41f7d8041a4881eb35ad8fdd0fbfc84181f0aa8d0ec8660fbaf02241c1f25c41ffc0400fb6d5c0e88366c1ca4941f7d04151c0ebc166ffc24431845c0e57759ac0c0810f818b080000

block IDs [duplicates]: [266]
['sbb al, bh', 'pop r9', 'xchg rax, rcx', 'movsxd r8, r8d', 'call 0x7ffb72922c46']

bytes: sbb al, bh: 1ac7
pop r9: 4159
xchg rax, rcx: 4891
movsxd r8, r8d: 4d63c0
call 0x7ffb72922c46: e82fa7e4ff

bytecode len: 28 -   1ac7415948914d63c0e82fa7e4ff

block IDs [duplicates]: [267]
['add rdi, r8', 'mov qword ptr [rsp + rbx - 0x32c55479], r10', 'mov qword ptr [rsp + rbx - 0x32c55479], rdi', 'ret']

bytes: add rdi, r8: 4903f8
mov qword ptr [rsp + rbx - 0x32c55479], r10: 4c89941c87ab3acd
mov qword ptr [rsp + rbx - 0x32c55479], rdi: 4889bc1c87ab3acd
ret: c3

bytecode len: 40 -   4903f84c89941c87ab3acd4889bc1c87ab3acdc3

block IDs [duplicates]: [268]
['rol ebp, 3', 'sub r10d, edx', 'call 0x7ffb728f626d']

bytes: rol ebp, 3: c1c503
sub r10d, edx: 442bd2
call 0x7ffb728f626d: e80b59f2ff

bytecode len: 22 -   c1c503442bd2e80b59f2ff

block IDs [duplicates]: [269]
['neg ebp', 'mov qword ptr [rsp + rbx - 0x4ba31c8], 0x1b0d303', 'mov qword ptr [rsp + rbx*2 - 0x9746390], r9', 'bts r10d, edx', 'setae r10b', 'xor cx, r10w', 'xor dword ptr [rsp + rbx*2 - 0x9746390], ebp', 'ror rbx, cl', 'pop r9', 'call 0x7ffb72cb6307']

bytes: neg ebp: f7dd
mov qword ptr [rsp + rbx - 0x4ba31c8], 0x1b0d303: 48c7841c38ce45fb03d3b001
mov qword ptr [rsp + rbx*2 - 0x9746390], r9: 4c898c5c709c8bf6
bts r10d, edx: 410fabd2
setae r10b: 410f93c2
xor cx, r10w: 664133ca
xor dword ptr [rsp + rbx*2 - 0x9746390], ebp: 31ac5c709c8bf6
ror rbx, cl: 48d3cb
pop r9: 4159
call 0x7ffb72cb6307: e867003c00

bytecode len: 102 -   f7dd48c7841c38ce45fb03d3b0014c898c5c709c8bf6410fabd2410f93c2664133ca31ac5c709c8bf648d3cb4159e867003c00

block IDs [duplicates]: [270]
['ror bl, 1', 'dec bl', 'or rax, 0x2e1eb223', 'pop rcx', 'adc rcx, -0xc84a8', 'jmp rcx']

bytes: ror bl, 1: d0cb
dec bl: fecb
or rax, 0x2e1eb223: 4881c823b21e2e
pop rcx: 59
adc rcx, -0xc84a8: 4881d1587bf3ff
jmp rcx: ffe1

bytecode len: 42 -   d0cbfecb4881c823b21e2e594881d1587bf3ffffe1

block IDs [duplicates]: [271]
['rol bl, 1', 'neg bl', 'push rax', 'not dl', 'xor r9b, bl', 'lea rbx, [rsp + rbx + 0x18]', 'pop rax', 'sub qword ptr [rsp + rdx*2 - 0x1fa], rax', 'mov qword ptr [rbx + rdx - 0xff], r10', 'cwde', 'movsx ecx, dl', 'mov qword ptr [rsp + rbp*2 - 0xd392], rdi', 'ret 8']

bytes: rol bl, 1: d0c3
neg bl: f6db
push rax: 50
not dl: f6d2
xor r9b, bl: 4432cb
lea rbx, [rsp + rbx + 0x18]: 488d5c1c18
pop rax: 58
sub qword ptr [rsp + rdx*2 - 0x1fa], rax: 4829845406feffff
mov qword ptr [rbx + rdx - 0xff], r10: 4c89941301ffffff
cwde: 98
movsx ecx, dl: 0fbeca
mov qword ptr [rsp + rbp*2 - 0xd392], rdi: 4889bc6c6e2cffff
ret 8: c20800

bytecode len: 94 -   d0c3f6db50f6d24432cb488d5c1c18584829845406feffff4c89941301ffffff980fbeca4889bc6c6e2cffffc20800

block IDs [duplicates]: [272]
['mov eax, dword ptr [r10 + r11 - 8]', 'xor eax, r9d', 'lea eax, [rax + r8 + 0x163c649f]', 'lea rdx, [r10 + rbx*4 + 0x7f1fac84]', 'mov qword ptr [rsp + rcx - 0x43881e58], rcx', 'bswap eax', 'lea rbp, [r10*2 + 0x1d096c3e]', 'xadd dx, bp', 'sbb eax, r10d', 'neg eax', 'rol eax, 3', 'add eax, r10d', 'ror ebp, cl', 'mov qword ptr [rsp + rcx - 0x43881e40], r9', 'ror r8b, 0x63', 'call 0x7ffb72c83b03']

bytes: mov eax, dword ptr [r10 + r11 - 8]: 438b441af8
xor eax, r9d: 4133c1
lea eax, [rax + r8 + 0x163c649f]: 428d84009f643c16
lea rdx, [r10 + rbx*4 + 0x7f1fac84]: 498d949a84ac1f7f
mov qword ptr [rsp + rcx - 0x43881e58], rcx: 48898c0ca8e177bc
bswap eax: 0fc8
lea rbp, [r10*2 + 0x1d096c3e]: 4a8d2c553e6c091d
xadd dx, bp: 660fc1ea
sbb eax, r10d: 411bc2
neg eax: f7d8
rol eax, 3: c1c003
add eax, r10d: 4103c2
ror ebp, cl: d3cd
mov qword ptr [rsp + rcx - 0x43881e40], r9: 4c898c0cc0e177bc
ror r8b, 0x63: 41c0c863
call 0x7ffb72c83b03: e8aff72e00

bytecode len: 152 -   438b441af84133c1428d84009f643c16498d949a84ac1f7f48898c0ca8e177bc0fc84a8d2c553e6c091d660fc1ea411bc2f7d8c1c0034103c2d3cd4c898c0cc0e177bc41c0c863e8aff72e00

block IDs [duplicates]: [273]
['movsxd rax, eax', 'not r10', 'dec r10', 'lea rdx, [r8 + rbx*4 - 0x50c28459]', 'add rdi, rax', 'add cx, r8w', 'adc bl, r10b', 'mov rax, qword ptr [rcx + rsi - 0x4388bc18]', 'mov qword ptr [rsp + rcx - 0x4388bc28], 0x50a0b70e', 'sub byte ptr [rsp + r10 + 3], cl', 'xchg qword ptr [rsp + 8], r10', 'add r10, 0x2210e7', 'jmp r10']

bytes: movsxd rax, eax: 4863c0
not r10: 49f7d2
dec r10: 49ffca
lea rdx, [r8 + rbx*4 - 0x50c28459]: 498d9498a77b3daf
add rdi, rax: 4803f8
add cx, r8w: 664103c8
adc bl, r10b: 4112da
mov rax, qword ptr [rcx + rsi - 0x4388bc18]: 488b8431e84377bc
mov qword ptr [rsp + rcx - 0x4388bc28], 0x50a0b70e: 48c7840cd84377bc0eb7a050
sub byte ptr [rsp + r10 + 3], cl: 42284c1403
xchg qword ptr [rsp + 8], r10: 4c87542408
add r10, 0x2210e7: 4981c2e7102200
jmp r10: 41ffe2

bytecode len: 134 -   4863c049f7d249ffca498d9498a77b3daf4803f8664103c84112da488b8431e84377bc48c7840cd84377bc0eb7a05042284c14034c875424084981c2e710220041ffe2

block IDs [duplicates]: [274]
['not rdx', 'ror r10b, 1', 'inc r8b', 'xor r9b, r10b', 'sub qword ptr [rsp + rbx*2 - 0x12453ae6], rdx', 'lea r10, [rsp + r10 + 0x28]', 'call 0x7ffb72bd3fa7']

bytes: not rdx: 48f7d2
ror r10b, 1: 41d0ca
inc r8b: 41fec0
xor r9b, r10b: 4532ca
sub qword ptr [rsp + rbx*2 - 0x12453ae6], rdx: 4829945c1ac5baed
lea r10, [rsp + r10 + 0x28]: 4e8d541428
call 0x7ffb72bd3fa7: e828ab2b00

bytecode len: 60 -   48f7d241d0ca41fec04532ca4829945c1ac5baed4e8d541428e828ab2b00

block IDs [duplicates]: [275]
['bts r10, 1', 'add r10w, dx', 'xor r8w, 0x3c05', 'xor r9w, r8w', 'lea rcx, [rdx*4 - 0x5e52b7d5]', 'not cl', 'add ebp, edx', 'lea r8, [rsp + r8 + 8]', 'bts bp, 0x38', 'movzx ebx, dl', 'mov qword ptr [r8 + rbx*8 - 0x370], rax', 'mov qword ptr [rsp + rbp - 0x723adb5], rdx', 'mov edx, dword ptr [r11 + rbp*4 - 0x1c8eb6da]', 'cmovae rcx, qword ptr [rsp + rbp*4 - 0x1c8eb6d4]', 'xor edx, r9d', 'mov qword ptr [rsp + rbp*4 - 0x1c0eb6d4], 0x5000e68a', 'lea edx, [rdx + r10*2 - 0x6b62e4bb]', 'bswap edx', 'dec edx', 'inc byte ptr [rsp + rbx - 0x67]', 'jnp 0x7ffb72d24068']

bytes: bts r10, 1: 490fbaea01
add r10w, dx: 664403d2
xor r8w, 0x3c05: 664181f0053c
xor r9w, r8w: 664533c8
lea rcx, [rdx*4 - 0x5e52b7d5]: 488d0c952b48ada1
not cl: f6d1
add ebp, edx: 03ea
lea r8, [rsp + r8 + 8]: 4e8d440408
bts bp, 0x38: 660fbaed38
movzx ebx, dl: 0fb6da
mov qword ptr [r8 + rbx*8 - 0x370], rax: 498984d890fcffff
mov qword ptr [rsp + rbp - 0x723adb5], rdx: 4889942c4b52dcf8
mov edx, dword ptr [r11 + rbp*4 - 0x1c8eb6da]: 418b94ab264971e3
cmovae rcx, qword ptr [rsp + rbp*4 - 0x1c8eb6d4]: 480f438cac2c4971e3
xor edx, r9d: 4133d1
mov qword ptr [rsp + rbp*4 - 0x1c0eb6d4], 0x5000e68a: 48c784ac2c49f1e38ae60050
lea edx, [rdx + r10*2 - 0x6b62e4bb]: 428d9452451b9d94
bswap edx: 0fca
dec edx: ffca
inc byte ptr [rsp + rbx - 0x67]: fe441c99
jnp 0x7ffb72d24068: 0f8be2143500

bytecode len: 228 -   490fbaea01664403d2664181f0053c664533c8488d0c952b48ada1f6d103ea4e8d440408660fbaed380fb6da498984d890fcffff4889942c4b52dcf8418b94ab264971e3480f438cac2c4971e34133d148c784ac2c49f1e38ae60050428d9452451b9d940fcaffcafe441c990f8be2143500

block IDs [duplicates]: [276]
['mov edx, 0x200f6b0d', 'lea r8, [rdx + rdx*8 + 0x77257aa0]', 'movzx ecx, dx', 'lea rax, [rcx + rcx*2 - 0x25c4edc]', 'and cx, 0x1730', 'lea r10, [rdx + r10 + 0x353d58b6]', 'sal r8d, 0x6a', 'xor r9, r10', 'sar dl, 4', 'lea rbp, [r8 + rax*4 + 0x5a92ba5]', 'mov qword ptr [rsi + rdx*2 - 0x401ed608], r10', 'mov r10d, dword ptr [r11 + rdx*2 - 0x401ed60c]', 'xor eax, eax', 'shr bp, 0x43', 'dec rdx', 'xor r10d, r9d', 'ror r10d, 3', 'xadd al, dl', 'sal rax, 0xa1', 'bswap r10d', 'movzx ebx, ax', 'sal rbp, 0x28', 'jb 0x7ffb72ce03ed']

bytes: mov edx, 0x200f6b0d: ba0d6b0f20
lea r8, [rdx + rdx*8 + 0x77257aa0]: 4c8d84d2a07a2577
movzx ecx, dx: 0fb7ca
lea rax, [rcx + rcx*2 - 0x25c4edc]: 488d844924b1a3fd
and cx, 0x1730: 6681e13017
lea r10, [rdx + r10 + 0x353d58b6]: 4e8d9412b6583d35
sal r8d, 0x6a: 41c1f06a
xor r9, r10: 4d33ca
sar dl, 4: c0fa04
lea rbp, [r8 + rax*4 + 0x5a92ba5]: 498dac80a52ba905
mov qword ptr [rsi + rdx*2 - 0x401ed608], r10: 4c899456f829e1bf
mov r10d, dword ptr [r11 + rdx*2 - 0x401ed60c]: 458b9453f429e1bf
xor eax, eax: 33c0
shr bp, 0x43: 66c1ed43
dec rdx: 48ffca
xor r10d, r9d: 4533d1
ror r10d, 3: 41c1ca03
xadd al, dl: 0fc0d0
sal rax, 0xa1: 48c1f0a1
bswap r10d: 410fca
movzx ebx, ax: 0fb7d8
sal rbp, 0x28: 48c1f528
jb 0x7ffb72ce03ed: 0f8296282300

bytecode len: 220 -   ba0d6b0f204c8d84d2a07a25770fb7ca488d844924b1a3fd6681e130174e8d9412b6583d3541c1f06a4d33cac0fa04498dac80a52ba9054c899456f829e1bf458b9453f429e1bf33c066c1ed4348ffca4533d141c1ca030fc0d048c1f0a1410fca0fb7d848c1f5280f8296282300

block IDs [duplicates]: [277]
['rol rbx, 0x34', 'add rdi, r10', 'mov qword ptr [rsp + rdx], rdx', 'inc bl', 'je 0x7ffb72b801d7']

bytes: rol rbx, 0x34: 48c1c334
add rdi, r10: 4903fa
mov qword ptr [rsp + rdx], rdx: 48891414
inc bl: fec3
je 0x7ffb72b801d7: 0f8484b2fdff

bytecode len: 38 -   48c1c3344903fa48891414fec30f8484b2fdff

block IDs [duplicates]: [278]
['mov rax, qword ptr [r11 + rdx - 0x14]', 'lea r11, [r11 + rdx*2 - 0x14]', 'dec cl', 'or word ptr [rsp + rdx + 2], bx', 'xor rax, r9', 'inc rax', 'and ecx, 0x3a926d18', 'pop rdx', 'movsx r10d, dx', 'not rax', 'not r10', 'rol rax, 1', 'xchg r8d, r10d', 'lea rax, [rax + rcx*2 - 0x73a60719]', 'rol r8w, 0xee', 'xor r9, rax', 'lea r10, [rdx + 0x51a68029]', 'lea rbx, [rbp + r10 - 0x3c4779ea]', 'mov qword ptr [rcx + rsi - 0x4010], rax', 'call 0x7ffb72e14c8d']

bytes: mov rax, qword ptr [r11 + rdx - 0x14]: 498b4413ec
lea r11, [r11 + rdx*2 - 0x14]: 4d8d5c53ec
dec cl: fec9
or word ptr [rsp + rdx + 2], bx: 66095c1402
xor rax, r9: 4933c1
inc rax: 48ffc0
and ecx, 0x3a926d18: 81e1186d923a
pop rdx: 5a
movsx r10d, dx: 440fbfd2
not rax: 48f7d0
not r10: 49f7d2
rol rax, 1: 48d1c0
xchg r8d, r10d: 4587d0
lea rax, [rax + rcx*2 - 0x73a60719]: 488d8448e7f8598c
rol r8w, 0xee: 6641c1c0ee
xor r9, rax: 4c33c8
lea r10, [rdx + 0x51a68029]: 4c8d922980a651
lea rbx, [rbp + r10 - 0x3c4779ea]: 4a8d9c151686b8c3
mov qword ptr [rcx + rsi - 0x4010], rax: 48898431f0bfffff
call 0x7ffb72e14c8d: e8d4fc2600

bytecode len: 180 -   498b4413ec4d8d5c53ecfec966095c14024933c148ffc081e1186d923a5a440fbfd248f7d049f7d248d1c04587d0488d8448e7f8598c6641c1c0ee4c33c84c8d922980a6514a8d9c151686b8c348898431f0bfffffe8d4fc2600

block IDs [duplicates]: [279]
['lea rax, [rsp + 0x1f8]', 'call 0x7ffb72cf3ab7']

bytes: lea rax, [rsp + 0x1f8]: 488d8424f8010000
call 0x7ffb72cf3ab7: e8e0881800

bytecode len: 26 -   488d8424f8010000e8e0881800

block IDs [duplicates]: [280]
['call 0x7ffb72cf7430']

bytes: call 0x7ffb72cf7430: e8948a1d00

bytecode len: 10 -   e8948a1d00

block IDs [duplicates]: [281]
['mov edx, dword ptr [r11 - 4]', 'mov r8d, 0x1602999f', 'xor edx, r9d', 'lea rbx, [r8*2 - 0x7cd41e6e]', 'movzx eax, bl', 'rol edx, 1', 'inc bx', 'xor eax, 0x4c1a5a8b', 'sub al, 0xb', 'inc edx', 'mov r10d, 0x9c2fcb86', 'bts r10d, eax', 'ror edx, 1', 'sal r10w, 9', 'or r8w, bx', 'xchg rbp, rbx', 'dec edx', 'shl r8, 0x76', 'sal eax, 0xec', 'neg edx', 'cwde', 'lea rbx, [r10 + rbx - 0xdef94d3]', 'push r9', 'movsx ecx, dx', 'mov r10, r8', 'sub ebx, 0x8182d5bf', 'bts eax, 0xa9', 'mov rdx, qword ptr [rsi + rcx*2]', 'ror cx, 0xc2', 'push rax', 'adc r10, rdx', 'mov qword ptr [rsp + rcx + 8], 0x6fa95096', 'mov qword ptr [rsi + rcx], r10', 'mov qword ptr [rsp + rcx*2], rdi', 'ret 8']

bytes: mov edx, dword ptr [r11 - 4]: 418b53fc
mov r8d, 0x1602999f: 41b89f990216
xor edx, r9d: 4133d1
lea rbx, [r8*2 - 0x7cd41e6e]: 4a8d1c4592e12b83
movzx eax, bl: 0fb6c3
rol edx, 1: d1c2
inc bx: 66ffc3
xor eax, 0x4c1a5a8b: 358b5a1a4c
sub al, 0xb: 2c0b
inc edx: ffc2
mov r10d, 0x9c2fcb86: 41ba86cb2f9c
bts r10d, eax: 410fabc2
ror edx, 1: d1ca
sal r10w, 9: 6641c1f209
or r8w, bx: 66440bc3
xchg rbp, rbx: 4887dd
dec edx: ffca
shl r8, 0x76: 49c1e076
sal eax, 0xec: c1f0ec
neg edx: f7da
cwde: 98
lea rbx, [r10 + rbx - 0xdef94d3]: 498d9c1a2d6b10f2
push r9: 4151
movsx ecx, dx: 0fbfca
mov r10, r8: 4d8bd0
sub ebx, 0x8182d5bf: 81ebbfd58281
bts eax, 0xa9: 0fbae8a9
mov rdx, qword ptr [rsi + rcx*2]: 488b144e
ror cx, 0xc2: 66c1c9c2
push rax: 50
adc r10, rdx: 4c13d2
mov qword ptr [rsp + rcx + 8], 0x6fa95096: 48c7440c089650a96f
mov qword ptr [rsi + rcx], r10: 4c89140e
mov qword ptr [rsp + rcx*2], rdi: 48893c4c
ret 8: c20800

bytecode len: 264 -   418b53fc41b89f9902164133d14a8d1c4592e12b830fb6c3d1c266ffc3358b5a1a4c2c0bffc241ba86cb2f9c410fabc2d1ca6641c1f20966440bc34887ddffca49c1e076c1f0ecf7da98498d9c1a2d6b10f241510fbfca4d8bd081ebbfd582810fbae8a9488b144e66c1c9c2504c13d248c7440c089650a96f4c89140e48893c4cc20800

block IDs [duplicates]: [282]
['mov ebp, 0x638b56ae', 'lea rdx, [rbp + rbp*4 + 0x24035c1a]', 'lea r8, [rdx*4 - 0x4fde93f1]', 'mov rcx, qword ptr [rsi + rbp - 0x638b56ae]', 'shr dl, 0xa6', 'lea rbx, [r8*8 - 0x6dc37fea]', 'jnp 0x7ffb72c85968']

bytes: mov ebp, 0x638b56ae: bdae568b63
lea rdx, [rbp + rbp*4 + 0x24035c1a]: 488d94ad1a5c0324
lea r8, [rdx*4 - 0x4fde93f1]: 4c8d04950f6c21b0
mov rcx, qword ptr [rsi + rbp - 0x638b56ae]: 488b8c2e52a9749c
shr dl, 0xa6: c0eaa6
lea rbx, [r8*8 - 0x6dc37fea]: 4a8d1cc516803c92
jnp 0x7ffb72c85968: 0f8bb96d0f00

bytecode len: 92 -   bdae568b63488d94ad1a5c03244c8d04950f6c21b0488b8c2e52a9749cc0eaa64a8d1cc516803c920f8bb96d0f00

block IDs [duplicates]: [283]
['neg edx', 'lea edx, [rdx + rbp*2 + 0x4be269c6]', 'bswap edx', 'pop rcx', 'inc r8w', 'push r9', 'xor dword ptr [rsp + rbp + 0x638b56ae], edx', 'pop r9', 'xor rcx, 0x4a8ee4af', 'lea r10, [rbp + r8*8 - 0x7fcb6f73]', 'movsxd rdx, edx', 'xchg rbx, r10', 'adc rdi, rdx', 'sub ebp, 0xc09ee0a3', 'mov rax, qword ptr [rsi + rax - 0x42357f8e]', 'inc ebp', 'mov rdx, qword ptr [rsi + rdx - 0x1ca939df]', 'sal cx, 0x4d', 'js 0x7ffb72b9c70a']

bytes: neg edx: f7da
lea edx, [rdx + rbp*2 + 0x4be269c6]: 8d946ac669e24b
bswap edx: 0fca
pop rcx: 59
inc r8w: 6641ffc0
push r9: 4151
xor dword ptr [rsp + rbp + 0x638b56ae], edx: 31942cae568b63
pop r9: 4159
xor rcx, 0x4a8ee4af: 4881f1afe48e4a
lea r10, [rbp + r8*8 - 0x7fcb6f73]: 4e8d94c58d903480
movsxd rdx, edx: 4863d2
xchg rbx, r10: 4c87d3
adc rdi, rdx: 4813fa
sub ebp, 0xc09ee0a3: 81eda3e09ec0
mov rax, qword ptr [rsi + rax - 0x42357f8e]: 488b84067280cabd
inc ebp: ffc5
mov rdx, qword ptr [rsi + rdx - 0x1ca939df]: 488b941621c656e3
sal cx, 0x4d: 66c1f14d
js 0x7ffb72b9c70a: 0f88e7021600

bytecode len: 170 -   f7da8d946ac669e24b0fca596641ffc0415131942cae568b6341594881f1afe48e4a4e8d94c58d9034804863d24c87d34813fa81eda3e09ec0488b84067280cabdffc5488b941621c656e366c1f14d0f88e7021600

block IDs [duplicates]: [284]
['add rax, rdx', 'neg r8', 'sar r10b, 0x47', 'mov qword ptr [rsi + 8], rax', 'adc rsi, 8', 'call 0x7ffb72c0f627']

bytes: add rax, rdx: 4803c2
neg r8: 49f7d8
sar r10b, 0x47: 41c0fa47
mov qword ptr [rsi + 8], rax: 4889442608
adc rsi, 8: 4883d608
call 0x7ffb72c0f627: e8052f0700

bytecode len: 48 -   4803c249f7d841c0fa4748894426084883d608e8052f0700

block IDs [duplicates]: [285]
['not eax', 'shr bpl, 0xe4', 'movsx ebx, r10w', 'push rcx', 'bswap eax', 'mov qword ptr [rsp + rdx + 8], r10', 'dec eax', 'add cx, 0x220f', 'call 0x7ffb72f0a2a3']

bytes: not eax: f7d0
shr bpl, 0xe4: 40c0ede4
movsx ebx, r10w: 410fbfda
push rcx: 51
bswap eax: 0fc8
mov qword ptr [rsp + rdx + 8], r10: 4c89541408
dec eax: ffc8
add cx, 0x220f: 6681c10f22
call 0x7ffb72f0a2a3: e8bf6c5600

bytecode len: 60 -   f7d040c0ede4410fbfda510fc84c89541408ffc86681c10f22e8bf6c5600

block IDs [duplicates]: [286]
['add qword ptr [rsp + rdx + 0x18], r9', 'add bx, cx', 'xor dword ptr [rsp + rdx + 0x18], eax', 'xchg r10w, r8w', 'mov qword ptr [rsp + rdx], r10', 'mov r9, qword ptr [rsp + rdx*4 + 0x18]', 'and r8w, r10w', 'mov dword ptr [rsp + rdx*8 + 0x11], r10d', 'or cx, word ptr [rsp + rdx*8 + 3]', 'movsxd rax, eax', 'rol r8d, 0xea', 'btc r10, 0xa7', 'btr r8, r10', 'adc rdi, rax', 'xadd bpl, dl', 'mov qword ptr [rsp + rdx + 8], rcx', 'push rcx', 'add rdx, qword ptr [r11 + rdx*2 - 0xc]', 'bts ecx, 6', 'mov qword ptr [rsp + rcx - 0xffdf], rcx', 'lea r11, [r11 + rcx - 0x1000b]', 'xor rdx, r9', 'not rdx', 'sal byte ptr [rsp + rcx*2 - 0x1fff2], 0xe3', 'bswap rdx', 'not rdx', 'call 0x7ffb72c5f999']

bytes: add qword ptr [rsp + rdx + 0x18], r9: 4c014c1418
add bx, cx: 6603d9
xor dword ptr [rsp + rdx + 0x18], eax: 31441418
xchg r10w, r8w: 664587c2
mov qword ptr [rsp + rdx], r10: 4c891414
mov r9, qword ptr [rsp + rdx*4 + 0x18]: 4c8b4c9418
and r8w, r10w: 664523c2
mov dword ptr [rsp + rdx*8 + 0x11], r10d: 448954d411
or cx, word ptr [rsp + rdx*8 + 3]: 660b4cd403
movsxd rax, eax: 4863c0
rol r8d, 0xea: 41c1c0ea
btc r10, 0xa7: 490fbafaa7
btr r8, r10: 4d0fb3d0
adc rdi, rax: 4813f8
xadd bpl, dl: 400fc0d5
mov qword ptr [rsp + rdx + 8], rcx: 48894c1408
push rcx: 51
add rdx, qword ptr [r11 + rdx*2 - 0xc]: 49035453f4
bts ecx, 6: 0fbae906
mov qword ptr [rsp + rcx - 0xffdf], rcx: 48898c0c2100ffff
lea r11, [r11 + rcx - 0x1000b]: 4d8d9c0bf5fffeff
xor rdx, r9: 4933d1
not rdx: 48f7d2
sal byte ptr [rsp + rcx*2 - 0x1fff2], 0xe3: c0b44c0e00feffe3
bswap rdx: 480fca
not rdx: 48f7d2
call 0x7ffb72c5f999: e8f3d50e00

bytecode len: 236 -   4c014c14186603d931441418664587c24c8914144c8b4c9418664523c2448954d411660b4cd4034863c041c1c0ea490fbafaa74d0fb3d04813f8400fc0d548894c14085149035453f40fbae90648898c0c2100ffff4d8d9c0bf5fffeff4933d148f7d2c0b44c0e00feffe3480fca48f7d2e8f3d50e00

block IDs [duplicates]: [287]
['mov qword ptr [rsp + rax*2 - 0xe9f0], rbp', 'mov qword ptr [rsi + rax*4 - 0x1d3e8], rbx', 'shl dl, 0x25', 'pop rbx', 'movzx r10d, byte ptr [rax + r11 - 0x7505]', 'lea r11, [rax + r11 - 0x7505]', 'xor r10b, r9b', 'call 0x7ffb72bf7fe6']

bytes: mov qword ptr [rsp + rax*2 - 0xe9f0], rbp: 4889ac441016ffff
mov qword ptr [rsi + rax*4 - 0x1d3e8], rbx: 48899c86182cfeff
shl dl, 0x25: c0e225
pop rbx: 5b
movzx r10d, byte ptr [rax + r11 - 0x7505]: 460fb69418fb8affff
lea r11, [rax + r11 - 0x7505]: 4e8d9c18fb8affff
xor r10b, r9b: 4532d1
call 0x7ffb72bf7fe6: e8c3f02600

bytecode len: 90 -   4889ac441016ffff48899c86182cfeffc0e2255b460fb69418fb8affff4e8d9c18fb8affff4532d1e8c3f02600

block IDs [duplicates]: [288]
['lea r10, [rsp + r10 + 0x28]', 'cwde', 'rol r8b, 0x86', 'mov qword ptr [rsp + rax - 0x74f8], rax', 'add r8, qword ptr [r10 + rax*2 - 0xe9f0]', 'mov qword ptr [rax + rsi - 0x7508], r8', 'cqo', 'neg byte ptr [rsp + rax - 0x74ea]', 'sar qword ptr [rsp + rax - 0x74ee], cl', 'lea rsi, [rsi + rax - 0x7508]', 'push rax', 'pop rax', 'pop rcx', 'pop rbp', 'pop r10', 'pop r8', 'pop r8', 'jae 0x7ffb72a83ef6']

bytes: lea r10, [rsp + r10 + 0x28]: 4e8d541428
cwde: 98
rol r8b, 0x86: 41c0c086
mov qword ptr [rsp + rax - 0x74f8], rax: 48898404088bffff
add r8, qword ptr [r10 + rax*2 - 0xe9f0]: 4d0384421016ffff
mov qword ptr [rax + rsi - 0x7508], r8: 4c898430f88affff
cqo: 4899
neg byte ptr [rsp + rax - 0x74ea]: f69c04168bffff
sar qword ptr [rsp + rax - 0x74ee], cl: 48d3bc04128bffff
lea rsi, [rsi + rax - 0x7508]: 488db406f88affff
push rax: 50
pop rax: 58
pop rcx: 59
pop rbp: 5d
pop r10: 415a
pop r8: 4158
pop r8: 4158
jae 0x7ffb72a83ef6: 0f8304aaefff

bytecode len: 150 -   4e8d5414289841c0c08648898404088bffff4d0384421016ffff4c898430f88affff4899f69c04168bffff48d3bc04128bffff488db406f88affff5058595d415a415841580f8304aaefff

block IDs [duplicates]: [289]
['and cx, 0x6eae', 'sets bpl', 'movsxd rdx, edx', 'adc rdi, rdx', 'xchg eax, ecx', 'mov ebx, dword ptr [r11 - 4]', 'mov r8d, 0x593a3e09', 'movzx r10d, r8w', 'xor ebx, r9d', 'push r8', 'rol word ptr [rsp + r10*2 - 0x7c0d], 0x29', 'xor ebx, 0xe510688e', 'inc ebx', 'lea rdx, [r8 + r8*8 - 0x124729db]', 'call 0x7ffb72c12ee4']

bytes: and cx, 0x6eae: 6681e1ae6e
sets bpl: 400f98c5
movsxd rdx, edx: 4863d2
adc rdi, rdx: 4813fa
xchg eax, ecx: 91
mov ebx, dword ptr [r11 - 4]: 418b5bfc
mov r8d, 0x593a3e09: 41b8093e3a59
movzx r10d, r8w: 450fb7d0
xor ebx, r9d: 4133d9
push r8: 4150
rol word ptr [rsp + r10*2 - 0x7c0d], 0x29: 6642c18454f383ffff29
xor ebx, 0xe510688e: 81f38e6810e5
inc ebx: ffc3
lea rdx, [r8 + r8*8 - 0x124729db]: 4b8d94c025d6b8ed
call 0x7ffb72c12ee4: e8c2091c00

bytecode len: 132 -   6681e1ae6e400f98c54863d24813fa91418b5bfc41b8093e3a59450fb7d04133d941506642c18454f383ffff2981f38e6810e5ffc34b8d94c025d6b8ede8c2091c00

block IDs [duplicates]: [290]
['ror eax, 1', 'shl ebp, 0x1a', 'dec eax', 'pop r8', 'add r8, 0x43503', 'jmp r8']

bytes: ror eax, 1: d1c8
shl ebp, 0x1a: c1e51a
dec eax: ffc8
pop r8: 4158
add r8, 0x43503: 4981c003350400
jmp r8: 41ffe0

bytecode len: 38 -   d1c8c1e51affc841584981c00335040041ffe0

block IDs [duplicates]: [291]
['xadd ax, bx', 'xor bpl, r9b', 'rol bpl, 1', 'lea r10, [r8 + r8 - 0x7a65ac77]', 'shr ebx, 0xab', 'xor r10, rax', 'neg bpl', 'movsx edx, r8w', 'xadd dl, r8b', 'xor bpl, 0x28', 'add bpl, 0x2a', 'shr bx, 0x2e', 'lea rcx, [rdx + r10*2 + 0x98c26ab]', 'xor r9b, bpl', 'lea rax, [rcx + rdx*8 - 0x19c5e8cc]', 'add rbp, rsp', 'cqo', 'sub edx, 0x8825fa2f', 'sub r10, r10', 'adc rbx, qword ptr [rbp + rbx]', 'sub r10b, 2', 'mov qword ptr [rsi + r8*2 - 0x513e2ec4], rbx', 'add eax, 0x8493bf92', 'bswap r8', 'movzx ebx, dl', 'lea rsi, [rsi + r10 - 0x10e]', 'dec dl', 'bts r10w, r10w', 'jae 0x7ffb72a83ef6']

bytes: xadd ax, bx: 660fc1d8
xor bpl, r9b: 4132e9
rol bpl, 1: 40d0c5
lea r10, [r8 + r8 - 0x7a65ac77]: 4f8d940089539a85
shr ebx, 0xab: c1ebab
xor r10, rax: 4c33d0
neg bpl: 40f6dd
movsx edx, r8w: 410fbfd0
xadd dl, r8b: 440fc0c2
xor bpl, 0x28: 4080f528
add bpl, 0x2a: 4080c52a
shr bx, 0x2e: 66c1eb2e
lea rcx, [rdx + r10*2 + 0x98c26ab]: 4a8d8c52ab268c09
xor r9b, bpl: 4432cd
lea rax, [rcx + rdx*8 - 0x19c5e8cc]: 488d84d134173ae6
add rbp, rsp: 4803ec
cqo: 4899
sub edx, 0x8825fa2f: 81ea2ffa2588
sub r10, r10: 4d2bd2
adc rbx, qword ptr [rbp + rbx]: 48135c1d00
sub r10b, 2: 4180ea02
mov qword ptr [rsi + r8*2 - 0x513e2ec4], rbx: 4a899c463cd1c1ae
add eax, 0x8493bf92: 0592bf9384
bswap r8: 490fc8
movzx ebx, dl: 0fb6da
lea rsi, [rsi + r10 - 0x10e]: 4a8db416f2feffff
dec dl: feca
bts r10w, r10w: 66450fabd2
jae 0x7ffb72a83ef6: 0f8304aaefff

bytecode len: 258 -   660fc1d84132e940d0c54f8d940089539a85c1ebab4c33d040f6dd410fbfd0440fc0c24080f5284080c52a66c1eb2e4a8d8c52ab268c094432cd488d84d134173ae64803ec489981ea2ffa25884d2bd248135c1d004180ea024a899c463cd1c1ae0592bf9384490fc80fb6da4a8db416f2fefffffeca66450fabd20f8304aaefff

block IDs [duplicates]: [292]
['mov ecx, 0xe10e46ac', 'movzx r8d, cl', 'movzx ebp, word ptr [r8 + r11 - 0xae]', 'call 0x7ffb72d0f014']

bytes: mov ecx, 0xe10e46ac: b9ac460ee1
movzx r8d, cl: 440fb6c1
movzx ebp, word ptr [r8 + r11 - 0xae]: 430fb7ac1852ffffff
call 0x7ffb72d0f014: e8fdf41700

bytecode len: 46 -   b9ac460ee1440fb6c1430fb7ac1852ffffffe8fdf41700

block IDs [duplicates]: [293]
['mov qword ptr [rsp + rbx - 0x1d4ded], r8', 'add bpl, 0x31', 'sal ax, 8', 'xadd dword ptr [rsp + rbx*4 - 0x7537b4], eax', 'call 0x7ffb72bf3ace']

bytes: mov qword ptr [rsp + rbx - 0x1d4ded], r8: 4c89841c13b2e2ff
add bpl, 0x31: 4080c531
sal ax, 8: 66c1f008
xadd dword ptr [rsp + rbx*4 - 0x7537b4], eax: 0fc1849c4cc88aff
call 0x7ffb72bf3ace: e806842400

bytecode len: 58 -   4c89841c13b2e2ff4080c53166c1f0080fc1849c4cc88affe806842400

block IDs [duplicates]: [294]
['bswap ebp', 'mov qword ptr [rsp + rdx*2 - 0x1ff06], r10', 'ror bl, 1', 'xchg dword ptr [rsp + rbp*2 - 0x59030688], ebp', 'dec bl', 'inc ecx', 'shr dword ptr [rsp + rdx - 0xff82], cl', 'not bl', 'xor bl, 0xaa', 'ror qword ptr [rsp + rdx - 0xff83], cl', 'adc qword ptr [rsp + rdx*2 - 0x1ff06], -0x21faa27b', 'pop rax', 'not bl', 'xor r9b, bl', 'add rbx, rsp', 'not bpl', 'btr rdx, rbp', 'mov r10, qword ptr [rbx + rdx*4 - 0x3fe0c]', 'mov qword ptr [rsi + rdx*4 - 0x3fe14], r10', 'xadd r8b, bpl', 'movzx r10d, byte ptr [rdx + r11 - 0xff85]', 'lea rax, [rbp + r8 + 0x2aa4f31]', 'xor r10b, r9b', 'neg r10b', 'neg r8w', 'cwde', 'xor r10b, 0xa2', 'xor ax, 0x73a0', 'inc r10b', 'ror cl, 0x27', 'rol r10b, 1', 'not r10b', 'shl al, 0x85', 'or rcx, rax', 'cmovbe rbp, rdx', 'xor r9b, r10b', 'shl eax, cl', 'add r8b, bpl', 'adc r10, rsp', 'sub r8d, 0x3fb4e99e', 'jl 0x7ffb72e555da']

bytes: bswap ebp: 0fcd
mov qword ptr [rsp + rdx*2 - 0x1ff06], r10: 4c899454fa00feff
ror bl, 1: d0cb
xchg dword ptr [rsp + rbp*2 - 0x59030688], ebp: 87ac6c78f9fca6
dec bl: fecb
inc ecx: ffc1
shr dword ptr [rsp + rdx - 0xff82], cl: d3ac147e00ffff
not bl: f6d3
xor bl, 0xaa: 80f3aa
ror qword ptr [rsp + rdx - 0xff83], cl: 48d38c147d00ffff
adc qword ptr [rsp + rdx*2 - 0x1ff06], -0x21faa27b: 48819454fa00feff855d05de
pop rax: 58
not bl: f6d3
xor r9b, bl: 4432cb
add rbx, rsp: 4803dc
not bpl: 40f6d5
btr rdx, rbp: 480fb3ea
mov r10, qword ptr [rbx + rdx*4 - 0x3fe0c]: 4c8b9493f401fcff
mov qword ptr [rsi + rdx*4 - 0x3fe14], r10: 4c899496ec01fcff
xadd r8b, bpl: 410fc0e8
movzx r10d, byte ptr [rdx + r11 - 0xff85]: 460fb6941a7b00ffff
lea rax, [rbp + r8 + 0x2aa4f31]: 4a8d8405314faa02
xor r10b, r9b: 4532d1
neg r10b: 41f6da
neg r8w: 6641f7d8
cwde: 98
xor r10b, 0xa2: 4180f2a2
xor ax, 0x73a0: 6635a073
inc r10b: 41fec2
ror cl, 0x27: c0c927
rol r10b, 1: 41d0c2
not r10b: 41f6d2
shl al, 0x85: c0e085
or rcx, rax: 480bc8
cmovbe rbp, rdx: 480f46ea
xor r9b, r10b: 4532ca
shl eax, cl: d3e0
add r8b, bpl: 4402c5
adc r10, rsp: 4c13d4
sub r8d, 0x3fb4e99e: 4181e89ee9b43f
jl 0x7ffb72e555da: 0f8c445e5200

bytecode len: 346 -   0fcd4c899454fa00feffd0cb87ac6c78f9fca6fecbffc1d3ac147e00fffff6d380f3aa48d38c147d00ffff48819454fa00feff855d05de58f6d34432cb4803dc40f6d5480fb3ea4c8b9493f401fcff4c899496ec01fcff410fc0e8460fb6941a7b00ffff4a8d8405314faa024532d141f6da6641f7d8984180f2a26635a07341fec2c0c92741d0c241f6d2c0e085480bc8480f46ea4532cad3e04402c54c13d44181e89ee9b43f0f8c445e5200

block IDs [duplicates]: [295]
['mov qword ptr [rsp + rdx*2 - 0x1fe00], 0x611cbc8a', 'inc r8d', 'xadd rax, rbp', 'ror r8d, 1', 'dec ebp', 'ror dword ptr [rsp + rdx*2 - 0x3fbff], 0x65', 'dec r8d', 'neg r8d', 'push rdx', 'lea rbx, [rax - 0x62d921d8]', 'mov qword ptr [rsp + rdx - 0x1fdf8], r9', 'dec qword ptr [rsp + rdx - 0x1fe00]', 'and rbx, qword ptr [rsp + rdx - 0x1fe00]', 'xor dword ptr [rsp + rdx - 0x1fdf8], r8d', 'bswap r10', 'rol ax, 0xae', 'mov r9, qword ptr [rsp + rdx*4 - 0x7f7f8]', 'setae byte ptr [rsp + rdx - 0x1fdfb]', 'jb 0x7ffb72ea2b64']

bytes: mov qword ptr [rsp + rdx*2 - 0x1fe00], 0x611cbc8a: 48c784540002feff8abc1c61
inc r8d: 41ffc0
xadd rax, rbp: 480fc1e8
ror r8d, 1: 41d1c8
dec ebp: ffcd
ror dword ptr [rsp + rdx*2 - 0x3fbff], 0x65: c18c540104fcff65
dec r8d: 41ffc8
neg r8d: 41f7d8
push rdx: 52
lea rbx, [rax - 0x62d921d8]: 488d9828de269d
mov qword ptr [rsp + rdx - 0x1fdf8], r9: 4c898c140802feff
dec qword ptr [rsp + rdx - 0x1fe00]: 48ff8c140002feff
and rbx, qword ptr [rsp + rdx - 0x1fe00]: 48239c140002feff
xor dword ptr [rsp + rdx - 0x1fdf8], r8d: 443184140802feff
bswap r10: 490fca
rol ax, 0xae: 66c1c0ae
mov r9, qword ptr [rsp + rdx*4 - 0x7f7f8]: 4c8b8c940808f8ff
setae byte ptr [rsp + rdx - 0x1fdfb]: 0f9384140502feff
jb 0x7ffb72ea2b64: 0f8256bf4800

bytecode len: 214 -   48c784540002feff8abc1c6141ffc0480fc1e841d1c8ffcdc18c540104fcff6541ffc841f7d852488d9828de269d4c898c140802feff48ff8c140002feff48239c140002feff443184140802feff490fca66c1c0ae4c8b8c940808f8ff0f9384140502feff0f8256bf4800

block IDs [duplicates]: [296]
['lea rdi, [rip - 7]', 'mov ebx, 0xfa1b7d12', 'bswap ebx', 'lea r11, [r11 + rbx*2 - 0x24fa37f8]', 'and bx, 0xa629', 'mov r8d, dword ptr [r11 + rbx - 0x127d0228]', 'xchg rbp, rbx', 'shl ebp, 0x10', 'xor r8d, r9d', 'lea r10, [rbx*2 + 0x670db818]', 'lea r8d, [r8 + rbx*2 - 0x4f884355]', 'mov eax, ebx', 'sub ebx, ebp', 'neg r8d', 'add al, 0x1a', 'sub rbx, -0x227052cb', 'movsx ecx, ax', 'xor r8d, 0xc80e8daa', 'btr ax, 0x22', 'sal r10d, 0x5c', 'inc r8d', 'movzx edx, bpl', 'shr al, 0x83', 'ror dx, 0x49', 'not r8d', 'push r9', 'shr bl, 0xc1', 'inc dx', 'xor dword ptr [rsp + rbx*2 - 0x658aa8f2], r8d', 'rol al, 0x81', 'jno 0x7ffb72ad8509']

bytes: lea rdi, [rip - 7]: 488d3df9ffffff
mov ebx, 0xfa1b7d12: bb127d1bfa
bswap ebx: 0fcb
lea r11, [r11 + rbx*2 - 0x24fa37f8]: 4d8d9c5b08c805db
and bx, 0xa629: 6681e329a6
mov r8d, dword ptr [r11 + rbx - 0x127d0228]: 458b841bd8fd82ed
xchg rbp, rbx: 4887dd
shl ebp, 0x10: c1e510
xor r8d, r9d: 4533c1
lea r10, [rbx*2 + 0x670db818]: 4c8d145d18b80d67
lea r8d, [r8 + rbx*2 - 0x4f884355]: 458d8458abbc77b0
mov eax, ebx: 8bc3
sub ebx, ebp: 2bdd
neg r8d: 41f7d8
add al, 0x1a: 041a
sub rbx, -0x227052cb: 4881eb35ad8fdd
movsx ecx, ax: 0fbfc8
xor r8d, 0xc80e8daa: 4181f0aa8d0ec8
btr ax, 0x22: 660fbaf022
sal r10d, 0x5c: 41c1f25c
inc r8d: 41ffc0
movzx edx, bpl: 400fb6d5
shr al, 0x83: c0e883
ror dx, 0x49: 66c1ca49
not r8d: 41f7d0
push r9: 4151
shr bl, 0xc1: c0ebc1
inc dx: 66ffc2
xor dword ptr [rsp + rbx*2 - 0x658aa8f2], r8d: 4431845c0e57759a
rol al, 0x81: c0c081
jno 0x7ffb72ad8509: 0f818b080000

bytecode len: 274 -   488d3df9ffffffbb127d1bfa0fcb4d8d9c5b08c805db6681e329a6458b841bd8fd82ed4887ddc1e5104533c14c8d145d18b80d67458d8458abbc77b08bc32bdd41f7d8041a4881eb35ad8fdd0fbfc84181f0aa8d0ec8660fbaf02241c1f25c41ffc0400fb6d5c0e88366c1ca4941f7d04151c0ebc166ffc24431845c0e57759ac0c0810f818b080000

block IDs [duplicates]: [297]
['jnp 0x7ffb72c80403']

bytes: jnp 0x7ffb72c80403: 0f8b63452200

bytecode len: 12 -   0f8b63452200

block IDs [duplicates]: [298]
['rol r8d, 0xb3', 'lea r11, [r11 + rdx*8 - 6]', 'sal r8b, 0x41', 'call 0x7ffb728fa81a']

bytes: rol r8d, 0xb3: 41c1c0b3
lea r11, [r11 + rdx*8 - 6]: 4d8d5cd3fa
sal r8b, 0x41: 41c0f041
call 0x7ffb728fa81a: e8b9eaefff

bytecode len: 36 -   41c1c0b34d8d5cd3fa41c0f041e8b9eaefff

block IDs [duplicates]: [299]
['cdq', 'lea r10d, [rdx + r10 - 0x175dfdda]', 'bswap r10d', 'movzx ecx, word ptr [rsp + 0x12]', 'add r10d, edx', 'rol ebx, cl', 'mov qword ptr [rsp + rcx*4 - 0x3bef0], rcx', 'neg r10d', 'rol r10d, 3', 'sar ax, 0x47', 'sub r10d, edx', 'mov qword ptr [rsp + rcx*4 - 0x3bee8], r9', 'sal al, 0x66', 'shr word ptr [rsp + rcx*8 - 0x77de8], 0xc9', 'xor dword ptr [rsp + rcx*2 - 0x1df6c], r10d', 'movzx ebp, r8b', 'dec ecx', 'mov r9, qword ptr [rsp + rcx*4 - 0x3bee4]', 'pop r8', 'movsxd r10, r10d', 'movsx r8d, bl', 'rol bx, 0x24', 'add rdi, r10', 'and eax, 0x2584b827', 'mov qword ptr [rsp + rax - 0x25840000], rdi', 'ret 8']

bytes: cdq: 99
lea r10d, [rdx + r10 - 0x175dfdda]: 468d94122602a2e8
bswap r10d: 410fca
movzx ecx, word ptr [rsp + 0x12]: 0fb74c2412
add r10d, edx: 4403d2
rol ebx, cl: d3c3
mov qword ptr [rsp + rcx*4 - 0x3bef0], rcx: 48898c8c1041fcff
neg r10d: 41f7da
rol r10d, 3: 41c1c203
sar ax, 0x47: 66c1f847
sub r10d, edx: 442bd2
mov qword ptr [rsp + rcx*4 - 0x3bee8], r9: 4c898c8c1841fcff
sal al, 0x66: c0f066
shr word ptr [rsp + rcx*8 - 0x77de8], 0xc9: 66c1accc1882f8ffc9
xor dword ptr [rsp + rcx*2 - 0x1df6c], r10d: 4431944c9420feff
movzx ebp, r8b: 410fb6e8
dec ecx: ffc9
mov r9, qword ptr [rsp + rcx*4 - 0x3bee4]: 4c8b8c8c1c41fcff
pop r8: 4158
movsxd r10, r10d: 4d63d2
movsx r8d, bl: 440fbec3
rol bx, 0x24: 66c1c324
add rdi, r10: 4903fa
and eax, 0x2584b827: 2527b88425
mov qword ptr [rsp + rax - 0x25840000], rdi: 4889bc0400007cda
ret 8: c20800

bytecode len: 236 -   99468d94122602a2e8410fca0fb74c24124403d2d3c348898c8c1041fcff41f7da41c1c20366c1f847442bd24c898c8c1841fcffc0f06666c1accc1882f8ffc94431944c9420feff410fb6e8ffc94c8b8c8c1c41fcff41584d63d2440fbec366c1c3244903fa2527b884254889bc0400007cdac20800

block IDs [duplicates]: [300]
['mov r8, qword ptr [rbp]', 'dec rcx', 'xadd dword ptr [rsp + 0x25], r10d', 'mov qword ptr [rsi], r8', 'add r10, rdx', 'pop rdx', 'pop rbp', 'pop r10', 'pop rax', 'pop r10', 'pop rbx', 'jmp rdi']

bytes: mov r8, qword ptr [rbp]: 4c8b442500
dec rcx: 48ffc9
xadd dword ptr [rsp + 0x25], r10d: 440fc1542425
mov qword ptr [rsi], r8: 4c890426
add r10, rdx: 4c03d2
pop rdx: 5a
pop rbp: 5d
pop r10: 415a
pop rax: 58
pop r10: 415a
pop rbx: 5b
jmp rdi: ffe7

bytecode len: 62 -   4c8b44250048ffc9440fc15424254c8904264c03d25a5d415a58415a5bffe7

block IDs [duplicates]: [301]
['sub qword ptr [rsp + rbx*2 - 0x6415796a], rbx', 'movzx r10d, byte ptr [rbx + r11 - 0x320abcba]', 'not word ptr [rsp + rbx - 0x320abcb3]', 'call 0x7ffb72ceb5c9']

bytes: sub qword ptr [rsp + rbx*2 - 0x6415796a], rbx: 48299c5c9686ea9b
movzx r10d, byte ptr [rbx + r11 - 0x320abcba]: 460fb6941b4643f5cd
not word ptr [rsp + rbx - 0x320abcb3]: 66f7941c4d43f5cd
call 0x7ffb72ceb5c9: e88a453a00

bytecode len: 60 -   48299c5c9686ea9b460fb6941b4643f5cd66f7941c4d43f5cde88a453a00

block IDs [duplicates]: [302]
['lea r10, [rsp + r10 + 0x18]', 'rol rbp, cl', 'mov dword ptr [r10 + rbx*2 - 0x641596b6], eax', 'movzx eax, cl', 'xchg qword ptr [rsp + 8], rax', 'add rax, 0x2ad44', 'jmp rax']

bytes: lea r10, [rsp + r10 + 0x18]: 4e8d541418
rol rbp, cl: 48d3c5
mov dword ptr [r10 + rbx*2 - 0x641596b6], eax: 4189845a4a69ea9b
movzx eax, cl: 0fb6c1
xchg qword ptr [rsp + 8], rax: 4887442408
add rax, 0x2ad44: 480544ad0200
jmp rax: ffe0

bytecode len: 64 -   4e8d54141848d3c54189845a4a69ea9b0fb6c14887442408480544ad0200ffe0

block IDs [duplicates]: [303]
['mov qword ptr [rsp + rbx*2 - 0x641596b6], rdi', 'ret 0x10']

bytes: mov qword ptr [rsp + rbx*2 - 0x641596b6], rdi: 4889bc5c4a69ea9b
ret 0x10: c21000

bytecode len: 22 -   4889bc5c4a69ea9bc21000

block IDs [duplicates]: [304]
['mov ebp, 0x7fa16588', 'mov ecx, ebp', 'movzx r10d, byte ptr [r11 + rbp - 0x7fa16589]', 'xor rcx, 0xffffffffcda1c336', 'xor r10b, r9b', 'neg r10b', 'mov edx, 0x793ab593', 'sub r10b, 0xb9', 'lea rax, [rcx + rdx*4 - 0x12c25963]', 'neg ax', 'rol r10b, 1', 'cdqe', 'pop rbx', 'add rbx, -0x4b79ec', 'jmp rbx']

bytes: mov ebp, 0x7fa16588: bd8865a17f
mov ecx, ebp: 8bcd
movzx r10d, byte ptr [r11 + rbp - 0x7fa16589]: 450fb6942b779a5e80
xor rcx, 0xffffffffcda1c336: 4881f136c3a1cd
xor r10b, r9b: 4532d1
neg r10b: 41f6da
mov edx, 0x793ab593: ba93b53a79
sub r10b, 0xb9: 4180eab9
lea rax, [rcx + rdx*4 - 0x12c25963]: 488d84919da63ded
neg ax: 66f7d8
rol r10b, 1: 41d0c2
cdqe: 4898
pop rbx: 5b
add rbx, -0x4b79ec: 4881c31486b4ff
jmp rbx: ffe3

bytecode len: 128 -   bd8865a17f8bcd450fb6942b779a5e804881f136c3a1cd4532d141f6daba93b53a794180eab9488d84919da63ded66f7d841d0c248985b4881c31486b4ffffe3

block IDs [duplicates]: [305]
['movzx r8d, dl', 'inc ebp', 'call 0x7ffb72e10cdf']

bytes: movzx r8d, dl: 440fb6c2
inc ebp: ffc5
call 0x7ffb72e10cdf: e875774700

bytecode len: 22 -   440fb6c2ffc5e875774700

block IDs [duplicates]: [306]
['not dx', 'add rdi, rbp', 'movzx eax, byte ptr [r11 + r8 - 0xc3]', 'movzx ebp, r10w', 'sar r8b, 0x26', 'lea r11, [rdx + r11 + 0x7bd43eb8]', 'dec r10b', 'adc r10, -0xa5d8c5c', 'dec r10', 'xor al, r9b', 'xadd rbx, r8', 'xor dx, 0xb0bd', 'ror al, 1', 'add bp, bx', 'xadd r10d, ebx', 'sbb al, 0xaf', 'rol al, 1', 'sbb al, 0xff', 'lea rcx, [r8*2 + 0x98a7f82]', 'dec ecx', 'btr r10, rcx', 'xor r9b, al', 'bts bx, r10w', 'setae cl', 'push r10', 'mov word ptr [rsi + r8 - 0xc7], ax', 'call 0x7ffb72ac3eb4']

bytes: not dx: 66f7d2
add rdi, rbp: 4803fd
movzx eax, byte ptr [r11 + r8 - 0xc3]: 430fb684033dffffff
movzx ebp, r10w: 410fb7ea
sar r8b, 0x26: 41c0f826
lea r11, [rdx + r11 + 0x7bd43eb8]: 4e8d9c1ab83ed47b
dec r10b: 41feca
adc r10, -0xa5d8c5c: 4981d2a473a2f5
dec r10: 49ffca
xor al, r9b: 4132c1
xadd rbx, r8: 4c0fc1c3
xor dx, 0xb0bd: 6681f2bdb0
ror al, 1: d0c8
add bp, bx: 6603eb
xadd r10d, ebx: 410fc1da
sbb al, 0xaf: 1caf
rol al, 1: d0c0
sbb al, 0xff: 1cff
lea rcx, [r8*2 + 0x98a7f82]: 4a8d0c45827f8a09
dec ecx: ffc9
btr r10, rcx: 490fb3ca
xor r9b, al: 4432c8
bts bx, r10w: 66440fabd3
setae cl: 0f93c1
push r10: 4152
mov word ptr [rsi + r8 - 0xc7], ax: 664289840639ffffff
call 0x7ffb72ac3eb4: e8ee271400

bytecode len: 224 -   66f7d24803fd430fb684033dffffff410fb7ea41c0f8264e8d9c1ab83ed47b41feca4981d2a473a2f549ffca4132c14c0fc1c36681f2bdb0d0c86603eb410fc1da1cafd0c01cff4a8d0c45827f8a09ffc9490fb3ca4432c866440fabd30f93c14152664289840639ffffffe8ee271400

block IDs [duplicates]: [307]
['mov qword ptr [rsp + r8 - 0xbd], rbx', 'lea rsi, [rsi + rdx + 0x7bd48df7]', 'pop r8', 'pop r8', 'jb 0x7ffb72a83ef6']

bytes: mov qword ptr [rsp + r8 - 0xbd], rbx: 4a899c0443ffffff
lea rsi, [rsi + rdx + 0x7bd48df7]: 488db416f78dd47b
pop r8: 4158
pop r8: 4158
jb 0x7ffb72a83ef6: 0f822800fcff

bytecode len: 52 -   4a899c0443ffffff488db416f78dd47b415841580f822800fcff

block IDs [duplicates]: [308]
['xchg dword ptr [rsp + rax - 0x40b31500], eax', 'inc ax', 'neg bpl', 'sub rdx, -0x4914f3', 'xor r9b, bpl', 'pop r8', 'add rbp, rsp', 'sal r10b, 0xe4', 'je 0x7ffb72a5292e']

bytes: xchg dword ptr [rsp + rax - 0x40b31500], eax: 87840400eb4cbf
inc ax: 66ffc0
neg bpl: 40f6dd
sub rdx, -0x4914f3: 4881ea0debb6ff
xor r9b, bpl: 4432cd
pop r8: 4158
add rbp, rsp: 4803ec
sal r10b, 0xe4: 41c0f2e4
je 0x7ffb72a5292e: 0f841e150100

bytecode len: 76 -   87840400eb4cbf66ffc040f6dd4881ea0debb6ff4432cd41584803ec41c0f2e40f841e150100

block IDs [duplicates]: [309]
['mov rdx, qword ptr [rbp + r10]', 'inc ebx', 'mov qword ptr [rsi + r10 - 6], rdx', 'call 0x7ffb72e9ab9b']

bytes: mov rdx, qword ptr [rbp + r10]: 4a8b541500
inc ebx: ffc3
mov qword ptr [rsi + r10 - 6], rdx: 4a895416fa
call 0x7ffb72e9ab9b: e857824400

bytecode len: 34 -   4a8b541500ffc34a895416fae857824400

block IDs [duplicates]: [310]
['mov ebx, dword ptr [r11 - 4]', 'mov r8d, 0x593a3e09', 'movzx r10d, r8w', 'xor ebx, r9d', 'push r8', 'rol word ptr [rsp + r10*2 - 0x7c0d], 0x29', 'xor ebx, 0xe510688e', 'inc ebx', 'lea rdx, [r8 + r8*8 - 0x124729db]', 'call 0x7ffb72c12ee4']

bytes: mov ebx, dword ptr [r11 - 4]: 418b5bfc
mov r8d, 0x593a3e09: 41b8093e3a59
movzx r10d, r8w: 450fb7d0
xor ebx, r9d: 4133d9
push r8: 4150
rol word ptr [rsp + r10*2 - 0x7c0d], 0x29: 6642c18454f383ffff29
xor ebx, 0xe510688e: 81f38e6810e5
inc ebx: ffc3
lea rdx, [r8 + r8*8 - 0x124729db]: 4b8d94c025d6b8ed
call 0x7ffb72c12ee4: e8c2091c00

bytecode len: 100 -   418b5bfc41b8093e3a59450fb7d04133d941506642c18454f383ffff2981f38e6810e5ffc34b8d94c025d6b8ede8c2091c00

block IDs [duplicates]: [311]
['mov edx, dword ptr [r11 - 4]', 'mov ebp, 0x34997e3b', 'mov ecx, 0x160090a2', 'movsx r10d, bp', 'xor edx, r9d', 'rol edx, 1', 'add rbp, -0x615681cb', 'jb 0x7ffb72c1302b']

bytes: mov edx, dword ptr [r11 - 4]: 418b53fc
mov ebp, 0x34997e3b: bd3b7e9934
mov ecx, 0x160090a2: b9a2900016
movsx r10d, bp: 440fbfd5
xor edx, r9d: 4133d1
rol edx, 1: d1c2
add rbp, -0x615681cb: 4881c5357ea99e
jb 0x7ffb72c1302b: 0f8226672700

bytecode len: 72 -   418b53fcbd3b7e9934b9a2900016440fbfd54133d1d1c24881c5357ea99e0f8226672700

block IDs [duplicates]: [312]
['movzx eax, bp', 'inc edx', 'ror edx, 1', 'add bp, 0x4821', 'sete al', 'dec edx', 'neg r10w', 'not ebp', 'neg edx', 'push r9', 'xor dword ptr [rsp + rbp - 0x2cbdbb6e], edx', 'movzx ebx, bpl', 'sal ebx, 0x12', 'pop r9', 'movsxd rdx, edx', 'sar bp, cl', 'adc rdi, rdx', 'btr ax, cx', 'btc ecx, eax', 'cmovae bp, bx', 'movzx ecx, byte ptr [r11 + rbp*2 - 0x597a0005]', 'jae 0x7ffb72cedc30']

bytes: movzx eax, bp: 0fb7c5
inc edx: ffc2
ror edx, 1: d1ca
add bp, 0x4821: 6681c52148
sete al: 0f94c0
dec edx: ffca
neg r10w: 6641f7da
not ebp: f7d5
neg edx: f7da
push r9: 4151
xor dword ptr [rsp + rbp - 0x2cbdbb6e], edx: 31942c924442d3
movzx ebx, bpl: 400fb6dd
sal ebx, 0x12: c1f312
pop r9: 4159
movsxd rdx, edx: 4863d2
sar bp, cl: 66d3fd
adc rdi, rdx: 4813fa
btr ax, cx: 660fb3c8
btc ecx, eax: 0fbbc1
cmovae bp, bx: 660f43eb
movzx ecx, byte ptr [r11 + rbp*2 - 0x597a0005]: 410fb68c6bfbff85a6
jae 0x7ffb72cedc30: 0f83dd123500

bytecode len: 156 -   0fb7c5ffc2d1ca6681c521480f94c0ffca6641f7daf7d5f7da415131942c924442d3400fb6ddc1f31241594863d266d3fd4813fa660fb3c80fbbc1660f43eb410fb68c6bfbff85a60f83dd123500

block IDs [duplicates]: [313]
['rol cl, 1', 'xor cl, bl', 'xor r9b, cl', 'add rcx, rsp', 'cwde', 'mov r8, qword ptr [rcx + rbp*2 - 0x597a018a]', 'mov rbx, r8', 'dec eax', 'movzx r10d, byte ptr [r11 + rbp - 0x2cbd00cb]', 'cqo', 'rol dx, 0xce', 'movzx r8d, dl', 'lea r11, [r11 + rbp*2 - 0x597a0190]', 'xor r10b, r9b', 'sub r10b, 0x90', 'sar eax, 7', 'add rdx, -0x1cc6b3f5', 'rol r10b, 1', 'lea rcx, [r8*4 - 0x28661b77]', 'call 0x7ffb72b99623']

bytes: rol cl, 1: d0c1
xor cl, bl: 32cb
xor r9b, cl: 4432c9
add rcx, rsp: 4803cc
cwde: 98
mov r8, qword ptr [rcx + rbp*2 - 0x597a018a]: 4c8b846976fe85a6
mov rbx, r8: 498bd8
dec eax: ffc8
movzx r10d, byte ptr [r11 + rbp - 0x2cbd00cb]: 450fb6942b35ff42d3
cqo: 4899
rol dx, 0xce: 66c1c2ce
movzx r8d, dl: 440fb6c2
lea r11, [r11 + rbp*2 - 0x597a0190]: 4d8d9c6b70fe85a6
xor r10b, r9b: 4532d1
sub r10b, 0x90: 4180ea90
sar eax, 7: c1f807
add rdx, -0x1cc6b3f5: 4881c20b4c39e3
rol r10b, 1: 41d0c2
lea rcx, [r8*4 - 0x28661b77]: 4a8d0c8589e499d7
call 0x7ffb72b99623: e860461900

bytecode len: 168 -   d0c132cb4432c94803cc984c8b846976fe85a6498bd8ffc8450fb6942b35ff42d3489966c1c2ce440fb6c24d8d9c6b70fe85a64532d14180ea90c1f8074881c20b4c39e341d0c24a8d0c8589e499d7e860461900

block IDs [duplicates]: [314]
['xor r10b, 0xa4', 'mov qword ptr [rsp + rbp - 0x2cbd00c5], rcx', 'or qword ptr [rsp + rbp*2 - 0x597a018a], rcx', 'sal r8, 0xc7', 'ror r10b, 1', 'xor r9b, r10b', 'call 0x7ffb72bec884']

bytes: xor r10b, 0xa4: 4180f2a4
mov qword ptr [rsp + rbp - 0x2cbd00c5], rcx: 48898c2c3bff42d3
or qword ptr [rsp + rbp*2 - 0x597a018a], rcx: 48098c6c76fe85a6
sal r8, 0xc7: 49c1f0c7
ror r10b, 1: 41d0ca
xor r9b, r10b: 4532ca
call 0x7ffb72bec884: e83e320500

bytecode len: 70 -   4180f2a448898c2c3bff42d348098c6c76fe85a649c1f0c741d0ca4532cae83e320500

block IDs [duplicates]: [315]
['cqo', 'mov rbx, rsi', 'mov qword ptr [rsp + rdx*8], rdx', 'mov r10d, 0xf9b3ba4', 'mov qword ptr [rsi + rdx*2 - 8], rbx', 'mov eax, dword ptr [r11 + rdx*4 - 4]', 'lea r8, [rdx + rdx - 0x475f36b]', 'xor eax, r9d', 'dec eax', 'xadd byte ptr [rsp + rdx + 2], dh', 'jp 0x7ffb72ea68b7']

bytes: cqo: 4899
mov rbx, rsi: 488bde
mov qword ptr [rsp + rdx*8], rdx: 488914d4
mov r10d, 0xf9b3ba4: 41baa43b9b0f
mov qword ptr [rsi + rdx*2 - 8], rbx: 48895c56f8
mov eax, dword ptr [r11 + rdx*4 - 4]: 418b4493fc
lea r8, [rdx + rdx - 0x475f36b]: 4c8d8412950c8afb
xor eax, r9d: 4133c1
dec eax: ffc8
xadd byte ptr [rsp + rdx + 2], dh: 0fc0741402
jp 0x7ffb72ea68b7: 0f8a25f44900

bytecode len: 98 -   4899488bde488914d441baa43b9b0f48895c56f8418b4493fc4c8d8412950c8afb4133c1ffc80fc07414020f8a25f44900

block IDs [duplicates]: [316]
['call 0x7ffb72d55a5d']

bytes: call 0x7ffb72d55a5d: e83b9a2e00

bytecode len: 10 -   e83b9a2e00

block IDs [duplicates]: [317]
['xor rbp, rbx', 'mov eax, edx', 'sub rax, -0x6bd150', 'mov qword ptr [rsp + rbx - 0x56168001], rbp', 'lea rcx, [rsp + rcx + 0x10]', 'add rax, qword ptr [rsp + rbp - 0x1a]', 'add byte ptr [rsp + rbx - 0x56167ffa], ah', 'or eax, dword ptr [rsp + rbp*4 - 0x67]', 'mov rbx, qword ptr [rbx + rcx - 0x56168001]', 'mov qword ptr [rsp + rbp - 0x12], rax', 'mov r11, rbx', 'sal word ptr [rsp + rbp - 0x18], 0xe1', 'xadd r9d, ebp', 'mov r9, rsi', 'setnp al', 'pop rcx', 'pop rdi', 'jle 0x7ffb72ad1e3f']

bytes: xor rbp, rbx: 4833eb
mov eax, edx: 8bc2
sub rax, -0x6bd150: 4881e8b02e94ff
mov qword ptr [rsp + rbx - 0x56168001], rbp: 4889ac1cff7fe9a9
lea rcx, [rsp + rcx + 0x10]: 488d4c0c10
add rax, qword ptr [rsp + rbp - 0x1a]: 4803442ce6
add byte ptr [rsp + rbx - 0x56167ffa], ah: 00a41c0680e9a9
or eax, dword ptr [rsp + rbp*4 - 0x67]: 0b44ac99
mov rbx, qword ptr [rbx + rcx - 0x56168001]: 488b9c0bff7fe9a9
mov qword ptr [rsp + rbp - 0x12], rax: 4889442cee
mov r11, rbx: 4c8bdb
sal word ptr [rsp + rbp - 0x18], 0xe1: 66c1742ce8e1
xadd r9d, ebp: 410fc1e9
mov r9, rsi: 4c8bce
setnp al: 0f9bc0
pop rcx: 59
pop rdi: 5f
jle 0x7ffb72ad1e3f: 0f8eb7970d00

bytecode len: 162 -   4833eb8bc24881e8b02e94ff4889ac1cff7fe9a9488d4c0c104803442ce600a41c0680e9a90b44ac99488b9c0bff7fe9a94889442cee4c8bdb66c1742ce8e1410fc1e94c8bce0f9bc0595f0f8eb7970d00

block IDs [duplicates]: [318]
['push -0x6b5645d1', 'mov ebp, dword ptr [rsp + 2]', 'mov edi, 0x37064a29', 'mov r10, r11', 'inc byte ptr [rsp + rdi*2 - 0x6e0c9452]', 'push rdi', 'mov ecx, 0x7da1230d', 'movabs rdi, 0x7ff9e7130000', 'shl dword ptr [rsp + rcx - 0x7da1230d], 0xb8', 'call 0x7ffb72bc5400']

bytes: push -0x6b5645d1: 682fbaa994
mov ebp, dword ptr [rsp + 2]: 8b6c2402
mov edi, 0x37064a29: bf294a0637
mov r10, r11: 4d8bd3
inc byte ptr [rsp + rdi*2 - 0x6e0c9452]: fe847cae6bf391
push rdi: 57
mov ecx, 0x7da1230d: b90d23a17d
movabs rdi, 0x7ff9e7130000: 48bf000013e7f97f0000
shl dword ptr [rsp + rcx - 0x7da1230d], 0xb8: c1a40cf3dc5e82b8
call 0x7ffb72bc5400: e88c350f00

bytecode len: 106 -   682fbaa9948b6c2402bf294a06374d8bd3fe847cae6bf39157b90d23a17d48bf000013e7f97f0000c1a40cf3dc5e82b8e88c350f00

block IDs [duplicates]: [319]
['mov r8d, 0xa005a437', 'mov rcx, qword ptr [r9]', 'lea rsi, [r8*4 + 0x618344a4]', 'movsx edi, r8w', 'movzx edx, byte ptr [r11]', 'neg rdi', 'xor dl, r10b', 'movsx eax, sil', 'sub eax, 0x433a0c1f', 'rol dl, 1', 'dec esi', 'movzx ebp, di', 'inc dl', 'xor dl, 0x1a', 'sub r8w, di', 'sbb dl, 0x91', 'call 0x7ffb72c2c311']

bytes: mov r8d, 0xa005a437: 41b837a405a0
mov rcx, qword ptr [r9]: 498b0c21
lea rsi, [r8*4 + 0x618344a4]: 4a8d3485a4448361
movsx edi, r8w: 410fbff8
movzx edx, byte ptr [r11]: 410fb61423
neg rdi: 48f7df
xor dl, r10b: 4132d2
movsx eax, sil: 400fbec6
sub eax, 0x433a0c1f: 2d1f0c3a43
rol dl, 1: d0c2
dec esi: ffce
movzx ebp, di: 0fb7ef
inc dl: fec2
xor dl, 0x1a: 80f21a
sub r8w, di: 66442bc7
sbb dl, 0x91: 80da91
call 0x7ffb72c2c311: e8564a3500

bytecode len: 132 -   41b837a405a0498b0c214a8d3485a4448361410fbff8410fb6142348f7df4132d2400fbec62d1f0c3a43d0c2ffce0fb7effec280f21a66442bc780da91e8564a3500

block IDs [duplicates]: [320]
['rol dword ptr [rsp + rbp - 0x5bc0], 0x85', 'cdqe', 'mov qword ptr [rdx + rax + 0x433a0c9f], rcx', 'mov qword ptr [rsp + rax + 0x433a0c9f], rax', 'bts eax, ebp', 'mov rdx, qword ptr [rbp + r9 - 0x5bc1]', 'xor byte ptr [rsp + rbp - 0x5bbd], al', 'bts esi, 1', 'push rdi', 'movzx r8d, byte ptr [r11 + rbp - 0x5bc8]', 'sub rax, rax', 'xor r8b, r10b', 'dec eax', 'sbb r8b, al', 'rol r8b, 1', 'xor r8b, al', 'neg r8b', 'add bp, 0x8a2', 'xor r10b, r8b', 'lea r8, [rsp + r8 + 0x18]', 'dec esi', 'dec dword ptr [rsp + rbp - 0x645e]', 'mov qword ptr [r8 + rbp - 0x646b], rdx', 'sal rax, 0xd2', 'lea r8, [rdi + rsi*8 + 0x1f94548b]', 'sar r8b, 0xe4', 'mov rsi, qword ptr [r9 + rbp*2 - 0xc8c6]', 'movsx edx, word ptr [rsp + rbp*2 - 0xc8d0]', 'lea r9, [rbp + r9 - 0x6453]', 'xchg ecx, edi', 'call 0x7ffb72bda643']

bytes: rol dword ptr [rsp + rbp - 0x5bc0], 0x85: c1842c40a4ffff85
cdqe: 4898
mov qword ptr [rdx + rax + 0x433a0c9f], rcx: 48898c029f0c3a43
mov qword ptr [rsp + rax + 0x433a0c9f], rax: 488984049f0c3a43
bts eax, ebp: 0fabe8
mov rdx, qword ptr [rbp + r9 - 0x5bc1]: 4a8b940d3fa4ffff
xor byte ptr [rsp + rbp - 0x5bbd], al: 30842c43a4ffff
bts esi, 1: 0fbaee01
push rdi: 57
movzx r8d, byte ptr [r11 + rbp - 0x5bc8]: 450fb6842b38a4ffff
sub rax, rax: 482bc0
xor r8b, r10b: 4532c2
dec eax: ffc8
sbb r8b, al: 441ac0
rol r8b, 1: 41d0c0
xor r8b, al: 4432c0
neg r8b: 41f6d8
add bp, 0x8a2: 6681c5a208
xor r10b, r8b: 4532d0
lea r8, [rsp + r8 + 0x18]: 4e8d440418
dec esi: ffce
dec dword ptr [rsp + rbp - 0x645e]: ff8c2ca29bffff
mov qword ptr [r8 + rbp - 0x646b], rdx: 49899428959bffff
sal rax, 0xd2: 48c1f0d2
lea r8, [rdi + rsi*8 + 0x1f94548b]: 4c8d84f78b54941f
sar r8b, 0xe4: 41c0f8e4
mov rsi, qword ptr [r9 + rbp*2 - 0xc8c6]: 498bb4693a37ffff
movsx edx, word ptr [rsp + rbp*2 - 0xc8d0]: 0fbf946c3037ffff
lea r9, [rbp + r9 - 0x6453]: 4e8d8c0dad9bffff
xchg ecx, edi: 87f9
call 0x7ffb72bda643: e8961b1b00

bytecode len: 310 -   c1842c40a4ffff85489848898c029f0c3a43488984049f0c3a430fabe84a8b940d3fa4ffff30842c43a4ffff0fbaee0157450fb6842b38a4ffff482bc04532c2ffc8441ac041d0c04432c041f6d86681c5a2084532d04e8d440418ffceff8c2ca29bffff49899428959bffff48c1f0d24c8d84f78b54941f41c0f8e4498bb4693a37ffff0fbf946c3037ffff4e8d8c0dad9bffff87f9e8961b1b00

block IDs [duplicates]: [321]
['xor dword ptr [rsp + rdx*2 + 0x10], r8d', 'mov r10, qword ptr [rsp + rdx*2 + 0x10]', 'call 0x7ffb72d48e47']

bytes: xor dword ptr [rsp + rdx*2 + 0x10], r8d: 4431445410
mov r10, qword ptr [rsp + rdx*2 + 0x10]: 4c8b545410
call 0x7ffb72d48e47: e8f6af4300

bytecode len: 30 -   44314454104c8b545410e8f6af4300

block IDs [duplicates]: [322]
['sbb cx, dx', 'call 0x7ffb72ecd8d1']

bytes: sbb cx, dx: 661bca
call 0x7ffb72ecd8d1: e81eb24900

bytecode len: 16 -   661bcae81eb24900

block IDs [duplicates]: [323]
['sal r8b, 0x87', 'xor r10, rbp', 'mov qword ptr [rsp + r8*2 - 0x1a400], 0x2396a3b1', 'mov qword ptr [r9 + rdi*2 + 0x4f5d8062], rbp', 'xchg esi, edi', 'shl byte ptr [rsp + r8*2 - 0x1a400], 2', 'not di', 'lea r9, [r9 + r8 - 0xd1f8]', 'adc word ptr [rsp + r8*2 - 0x1a3fb], 0xb69b', 'mov ebp, r8d', 'mov ecx, dword ptr [r8 + r11 - 0xd1f6]', 'pop rax', 'lea r11, [r11 + r8*2 - 0x1a3f2]', 'xor di, 0x4803', 'xor ecx, r10d', 'neg ecx', 'ror si, 0xc1', 'adc edx, 0xe528b814', 'xchg eax, ebp', 'dec ecx', 'bswap ecx', 'xchg bpl, al', 'xor di, 0x1b28', 'btc dx, bp', 'ror ecx, 1', 'push rdi', 'push r8', 'inc ecx', 'add word ptr [rsp + rax*2 - 0x1a445], si', 'btc r8w, 0x1e', 'mov qword ptr [rsp + r8*2 - 0x123f8], r10', 'sbb dword ptr [rsp + r8*2 - 0x123ff], eax', 'xor dword ptr [rsp + r8 - 0x91f8], ecx', 'cdqe', 'mov r10, qword ptr [rsp + r8*2 - 0x123f8]', 'mov qword ptr [rsp + r8 - 0x91f8], rsi', 'or r8w, dx', 'movsxd rcx, ecx', 'adc rbx, rcx', 'mov qword ptr [rsp + rax - 0xd223], rbx', 'ret 8']

bytes: sal r8b, 0x87: 41c0f087
xor r10, rbp: 4c33d5
mov qword ptr [rsp + r8*2 - 0x1a400], 0x2396a3b1: 4ac78444005cfeffb1a39623
mov qword ptr [r9 + rdi*2 + 0x4f5d8062], rbp: 4989ac7962805d4f
xchg esi, edi: 87fe
shl byte ptr [rsp + r8*2 - 0x1a400], 2: 42c0a444005cfeff02
not di: 66f7d7
lea r9, [r9 + r8 - 0xd1f8]: 4f8d8c01082effff
adc word ptr [rsp + r8*2 - 0x1a3fb], 0xb69b: 6642819444055cfeff9bb6
mov ebp, r8d: 418be8
mov ecx, dword ptr [r8 + r11 - 0xd1f6]: 438b8c180a2effff
pop rax: 58
lea r11, [r11 + r8*2 - 0x1a3f2]: 4f8d9c430e5cfeff
xor di, 0x4803: 6681f70348
xor ecx, r10d: 4133ca
neg ecx: f7d9
ror si, 0xc1: 66c1cec1
adc edx, 0xe528b814: 81d214b828e5
xchg eax, ebp: 95
dec ecx: ffc9
bswap ecx: 0fc9
xchg bpl, al: 4086c5
xor di, 0x1b28: 6681f7281b
btc dx, bp: 660fbbea
ror ecx, 1: d1c9
push rdi: 57
push r8: 4150
inc ecx: ffc1
add word ptr [rsp + rax*2 - 0x1a445], si: 6601b444bb5bfeff
btc r8w, 0x1e: 66410fbaf81e
mov qword ptr [rsp + r8*2 - 0x123f8], r10: 4e89944408dcfeff
sbb dword ptr [rsp + r8*2 - 0x123ff], eax: 4219844401dcfeff
xor dword ptr [rsp + r8 - 0x91f8], ecx: 42318c04086effff
cdqe: 4898
mov r10, qword ptr [rsp + r8*2 - 0x123f8]: 4e8b944408dcfeff
mov qword ptr [rsp + r8 - 0x91f8], rsi: 4a89b404086effff
or r8w, dx: 66440bc2
movsxd rcx, ecx: 4863c9
adc rbx, rcx: 4813d9
mov qword ptr [rsp + rax - 0xd223], rbx: 48899c04dd2dffff
ret 8: c20800

bytecode len: 402 -   41c0f0874c33d54ac78444005cfeffb1a396234989ac7962805d4f87fe42c0a444005cfeff0266f7d74f8d8c01082effff6642819444055cfeff9bb6418be8438b8c180a2effff584f8d9c430e5cfeff6681f703484133caf7d966c1cec181d214b828e595ffc90fc94086c56681f7281b660fbbead1c9574150ffc16601b444bb5bfeff66410fbaf81e4e89944408dcfeff4219844401dcfeff42318c04086effff48984e8b944408dcfeff4a89b404086effff66440bc24863c94813d948899c04dd2dffffc20800

block IDs [duplicates]: [324]
['lea rdi, [rsi + rsi - 0x267283c4]', 'rol rdx, 3', 'ror sil, 1', 'inc byte ptr [rsp + rsi - 0x3f87610e]', 'jno 0x7ffb72c71a8b']

bytes: lea rdi, [rsi + rsi - 0x267283c4]: 488dbc363c7c8dd9
rol rdx, 3: 48c1c203
ror sil, 1: 40d0ce
inc byte ptr [rsp + rsi - 0x3f87610e]: fe8434f29e78c0
jno 0x7ffb72c71a8b: 0f81e3492a00

bytecode len: 56 -   488dbc363c7c8dd948c1c20340d0cefe8434f29e78c00f81e3492a00

block IDs [duplicates]: [325]
['movsxd rdi, edi', 'add rbx, rdi', 'mov qword ptr [rsp + rax + 0x4c69], rbp', 'movzx esi, byte ptr [r11 + rdx*2 - 0x1fff2]', 'inc al', 'lea r11, [rbp + r11 - 0x589c1ff3]', 'xor sil, r10b', 'add sil, dl', 'dec byte ptr [rsp + rax*2 + 0x98cf]', 'rol sil, 1', 'and dl, 5', 'cdqe', 'mov edi, dword ptr [rsp + rbp - 0x589c1ffb]', 'inc sil', 'lea r8, [rbp*2 - 0x3bc483fa]', 'and dword ptr [rsp + rax + 0x4c6a], r8d', 'not sil', 'push r8', 'dec word ptr [rsp + rax*2 + 0x98c0]', 'shr qword ptr [rsp + rax + 0x4c65], cl', 'ror sil, 1', 'ror byte ptr [rsp + rax*2 + 0x98d4], 4', 'ror r8, cl', 'xor sil, 0x94', 'xadd r8d, eax', 'inc rbp', 'rol bp, 0x62', 'xor r10b, sil', 'lea rsi, [rsp + rsi + 0x18]', 'shl bpl, 0xc3', 'xadd dword ptr [rsp + rax*4 - 0x756e], edx', 'mov rax, qword ptr [rbp + rsi - 0x589c8020]', 'dec rcx', 'mov qword ptr [r9 + rcx - 0x6121], rax', 'sal edx, cl', 'lea r9, [rcx + r9 - 0x6121]', 'jp 0x7ffb72ac5884']

bytes: movsxd rdi, edi: 4863ff
add rbx, rdi: 4803df
mov qword ptr [rsp + rax + 0x4c69], rbp: 4889ac04694c0000
movzx esi, byte ptr [r11 + rdx*2 - 0x1fff2]: 410fb6b4530e00feff
inc al: fec0
lea r11, [rbp + r11 - 0x589c1ff3]: 4e8d9c1d0de063a7
xor sil, r10b: 4132f2
add sil, dl: 4002f2
dec byte ptr [rsp + rax*2 + 0x98cf]: fe8c44cf980000
rol sil, 1: 40d0c6
and dl, 5: 80e205
cdqe: 4898
mov edi, dword ptr [rsp + rbp - 0x589c1ffb]: 8bbc2c05e063a7
inc sil: 40fec6
lea r8, [rbp*2 - 0x3bc483fa]: 4c8d046d067c3bc4
and dword ptr [rsp + rax + 0x4c6a], r8d: 442184046a4c0000
not sil: 40f6d6
push r8: 4150
dec word ptr [rsp + rax*2 + 0x98c0]: 66ff8c44c0980000
shr qword ptr [rsp + rax + 0x4c65], cl: 48d3ac04654c0000
ror sil, 1: 40d0ce
ror byte ptr [rsp + rax*2 + 0x98d4], 4: c08c44d498000004
ror r8, cl: 49d3c8
xor sil, 0x94: 4080f694
xadd r8d, eax: 410fc1c0
inc rbp: 48ffc5
rol bp, 0x62: 66c1c562
xor r10b, sil: 4432d6
lea rsi, [rsp + rsi + 0x18]: 488d743418
shl bpl, 0xc3: 40c0e5c3
xadd dword ptr [rsp + rax*4 - 0x756e], edx: 0fc19484928affff
mov rax, qword ptr [rbp + rsi - 0x589c8020]: 488b8435e07f63a7
dec rcx: 48ffc9
mov qword ptr [r9 + rcx - 0x6121], rax: 49898409df9effff
sal edx, cl: d3f2
lea r9, [rcx + r9 - 0x6121]: 4e8d8c09df9effff
jp 0x7ffb72ac5884: 0f8a68df0000

bytecode len: 370 -   4863ff4803df4889ac04694c0000410fb6b4530e00fefffec04e8d9c1d0de063a74132f24002f2fe8c44cf98000040d0c680e20548988bbc2c05e063a740fec64c8d046d067c3bc4442184046a4c000040f6d6415066ff8c44c098000048d3ac04654c000040d0cec08c44d49800000449d3c84080f694410fc1c048ffc566c1c5624432d6488d74341840c0e5c30fc19484928affff488b8435e07f63a748ffc949898409df9effffd3f24e8d8c09df9effff0f8a68df0000

block IDs [duplicates]: [326]
['adc ebp, ecx', 'pop rax', 'pop rax', 'pop rsi', 'jns 0x7ffb72acc73a']

bytes: adc ebp, ecx: 13e9
pop rax: 58
pop rax: 58
pop rsi: 5e
jns 0x7ffb72acc73a: 0f89a36e0000

bytecode len: 22 -   13e958585e0f89a36e0000

block IDs [duplicates]: [327]
['dec rdx', 'lea rdx, [rsp + rdx - 0x2021fab8]', 'call 0x7ffb72bb57d1']

bytes: dec rdx: 48ffca
lea rdx, [rsp + rdx - 0x2021fab8]: 488d94144805dedf
call 0x7ffb72bb57d1: e87e900e00

bytecode len: 32 -   48ffca488d94144805dedfe87e900e00

block IDs [duplicates]: [328]
['lea rsp, [rsp + 0x10]', 'ja 0x7ffb728bcf88']

bytes: lea rsp, [rsp + 0x10]: 488d642410
ja 0x7ffb728bcf88: 0f87efffdaff

bytecode len: 22 -   488d6424100f87efffdaff

block IDs [duplicates]: [329]
['jmp rbx']

bytes: jmp rbx: ffe3

bytecode len: 4 -   ffe3

block IDs [duplicates]: [330]
['mov r8, qword ptr [r9]', 'mov edi, 0x5a36a639', 'mov rax, qword ptr [rdi + r9 - 0x5a36a631]', 'add r8, rax', 'mov qword ptr [r9 + rdi - 0x5a36a631], r8', 'mov r8d, dword ptr [rdi + r11 - 0x5a36a639]', 'lea r11, [rdi + r11 - 0x5a36a635]', 'push rdi', 'lea rax, [rdi + rdi + 0x5313b7a5]', 'xor r8d, r10d', 'dec word ptr [rsp + rdi - 0x5a36a638]', 'jle 0x7ffb72955210']

bytes: mov r8, qword ptr [r9]: 4d8b01
mov edi, 0x5a36a639: bf39a6365a
mov rax, qword ptr [rdi + r9 - 0x5a36a631]: 4a8b840fcf59c9a5
add r8, rax: 4c03c0
mov qword ptr [r9 + rdi - 0x5a36a631], r8: 4d898439cf59c9a5
mov r8d, dword ptr [rdi + r11 - 0x5a36a639]: 468b841fc759c9a5
lea r11, [rdi + r11 - 0x5a36a635]: 4e8d9c1fcb59c9a5
push rdi: 57
lea rax, [rdi + rdi + 0x5313b7a5]: 488d843fa5b71353
xor r8d, r10d: 4533c2
dec word ptr [rsp + rdi - 0x5a36a638]: 66ff8c3cc859c9a5
jle 0x7ffb72955210: 0f8ed73ef1ff

bytecode len: 138 -   4d8b01bf39a6365a4a8b840fcf59c9a54c03c04d898439cf59c9a5468b841fc759c9a54e8d9c1fcb59c9a557488d843fa5b713534533c266ff8c3cc859c9a50f8ed73ef1ff

block IDs [duplicates]: [401]
['lea r8d, [r8 + rdi - 0x62f26b46]', 'rol r8d, 3', 'cdqe', 'neg dil', 'neg r8d', 'sar word ptr [rsp + rdi - 0x5a36a6c6], 0xc', 'not r8d', 'mov qword ptr [rsp + rax - 0x7810417], r10', 'xor dword ptr [rsp + rdi - 0x5a36a6c7], r8d', 'pop r10', 'movsxd r8, r8d', 'add rbx, r8', 'mov eax, 0x529dcf2f', 'mov rax, qword ptr [rax + r9 - 0x529dcf2f]', 'mov rdx, qword ptr [r9 + 8]', 'mov r8d, 0x7927a78a', 'add rax, rdx', 'mov qword ptr [r9 + r8 - 0x7927a782], rax', 'movsx esi, r8b', 'lea rcx, [rsi*4 + 0x6a3dcfab]', 'mov esi, dword ptr [r8 + r11 - 0x7927a78a]', 'ror r8b, 0x65', 'lea rbp, [rcx - 0x40cd14ff]', 'not r8w', 'lea r11, [r11 + r8 - 0x792758a7]', 'xor esi, r10d', 'sub esi, 0x8bbc50d', 'sal ebp, cl', 'sal cl, 0x61', 'rol esi, 3', 'btr ebp, r8d', 'movzx edx, cl', 'mov eax, 0xd1bb53b3', 'neg esi', 'bts eax, r8d', 'ror eax, 0xab', 'push rax', 'not esi', 'movsx edi, cl', 'and qword ptr [rsp + rdx - 0xa6], rcx', 'mov qword ptr [rsp + r8 - 0x792758ab], r10', 'xor dword ptr [rsp + r8 - 0x792758ab], esi', 'pop r10', 'movsxd rsi, esi', 'lea rcx, [rsi + rsi*8 + 0x509170b5]', 'xor ebp, r10d', 'pop rsi', 'add rsi, -0x124b87', 'jmp rsi']

bytes: lea r8d, [r8 + rdi - 0x62f26b46]: 458d8438ba940d9d
rol r8d, 3: 41c1c003
cdqe: 4898
neg dil: 40f6df
neg r8d: 41f7d8
sar word ptr [rsp + rdi - 0x5a36a6c6], 0xc: 66c1bc3c3a59c9a50c
not r8d: 41f7d0
mov qword ptr [rsp + rax - 0x7810417], r10: 4c899404e9fb7ef8
xor dword ptr [rsp + rdi - 0x5a36a6c7], r8d: 4431843c3959c9a5
pop r10: 415a
movsxd r8, r8d: 4d63c0
add rbx, r8: 4903d8
mov eax, 0x529dcf2f: b82fcf9d52
mov rax, qword ptr [rax + r9 - 0x529dcf2f]: 4a8b8408d13062ad
mov rdx, qword ptr [r9 + 8]: 498b542108
mov r8d, 0x7927a78a: 41b88aa72779
add rax, rdx: 4803c2
mov qword ptr [r9 + r8 - 0x7927a782], rax: 4b8984017e58d886
movsx esi, r8b: 410fbef0
lea rcx, [rsi*4 + 0x6a3dcfab]: 488d0cb5abcf3d6a
mov esi, dword ptr [r8 + r11 - 0x7927a78a]: 438bb4187658d886
ror r8b, 0x65: 41c0c865
lea rbp, [rcx - 0x40cd14ff]: 488da901eb32bf
not r8w: 6641f7d0
lea r11, [r11 + r8 - 0x792758a7]: 4f8d9c0359a7d886
xor esi, r10d: 4133f2
sub esi, 0x8bbc50d: 81ee0dc5bb08
sal ebp, cl: d3f5
sal cl, 0x61: c0f161
rol esi, 3: c1c603
btr ebp, r8d: 440fb3c5
movzx edx, cl: 0fb6d1
mov eax, 0xd1bb53b3: b8b353bbd1
neg esi: f7de
bts eax, r8d: 440fabc0
ror eax, 0xab: c1c8ab
push rax: 50
not esi: f7d6
movsx edi, cl: 0fbef9
and qword ptr [rsp + rdx - 0xa6], rcx: 48218c145affffff
mov qword ptr [rsp + r8 - 0x792758ab], r10: 4e89940455a7d886
xor dword ptr [rsp + r8 - 0x792758ab], esi: 4231b40455a7d886
pop r10: 415a
movsxd rsi, esi: 4863f6
lea rcx, [rsi + rsi*8 + 0x509170b5]: 488d8cf6b5709150
xor ebp, r10d: 4133ea
pop rsi: 5e
add rsi, -0x124b87: 4881c679b4edff
jmp rsi: ffe6

bytecode len: 456 -   458d8438ba940d9d41c1c003489840f6df41f7d866c1bc3c3a59c9a50c41f7d04c899404e9fb7ef84431843c3959c9a5415a4d63c04903d8b82fcf9d524a8b8408d13062ad498b54210841b88aa727794803c24b8984017e58d886410fbef0488d0cb5abcf3d6a438bb4187658d88641c0c865488da901eb32bf6641f7d04f8d9c0359a7d8864133f281ee0dc5bb08d3f5c0f161c1c603440fb3c50fb6d1b8b353bbd1f7de440fabc0c1c8ab50f7d60fbef948218c145affffff4e89940455a7d8864231b40455a7d886415a4863f6488d8cf6b57091504133ea5e4881c679b4edffffe6

block IDs [duplicates]: [332]
['and ecx, 0x7830933', 'sbb r8b, 0x8f', 'and bp, 0x7b5', 'cmovo edi, esi', 'neg r8b', 'adc r8b, 0x2d', 'sar si, 2', 'shr rdi, 0x8f', 'sbb si, 0xe938', 'ror r8b, 1', 'shr rsi, cl', 'xor r10b, r8b', 'sub di, 0x38a6', 'add r8, rsp', 'mov rbp, qword ptr [r8 + rdi - 0xc75a]', 'btr edi, 0x94', 'xchg ax, si', 'mov qword ptr [r9 + rdi*2 - 0x18eb4], rbp', 'xchg di, cx', 'xor rsi, rdi', 'shl ecx, 0xba', 'xor rdi, rbx', 'jmp rdi']

bytes: and ecx, 0x7830933: 81e133098307
sbb r8b, 0x8f: 4180d88f
and bp, 0x7b5: 6681e5b507
cmovo edi, esi: 0f40fe
neg r8b: 41f6d8
adc r8b, 0x2d: 4180d02d
sar si, 2: 66c1fe02
shr rdi, 0x8f: 48c1ef8f
sbb si, 0xe938: 6681de38e9
ror r8b, 1: 41d0c8
shr rsi, cl: 48d3ee
xor r10b, r8b: 4532d0
sub di, 0x38a6: 6681efa638
add r8, rsp: 4c03c4
mov rbp, qword ptr [r8 + rdi - 0xc75a]: 498bac38a638ffff
btr edi, 0x94: 0fbaf794
xchg ax, si: 6696
mov qword ptr [r9 + rdi*2 - 0x18eb4], rbp: 4989ac794c71feff
xchg di, cx: 6687cf
xor rsi, rdi: 4833f7
shl ecx, 0xba: c1e1ba
xor rdi, rbx: 4833fb
jmp rdi: ffe7

bytecode len: 182 -   81e1330983074180d88f6681e5b5070f40fe41f6d84180d02d66c1fe0248c1ef8f6681de38e941d0c848d3ee4532d06681efa6384c03c4498bac38a638ffff0fbaf79466964989ac794c71feff6687cf4833f7c1e1ba4833fbffe7

block IDs [duplicates]: [333]
['xor r10w, si', 'xor rdx, rdi', 'lea rsi, [rsp + rsi + 8]', 'mov qword ptr [rsi + rdi*2 - 0x298ca0d8], rax', 'call 0x7ffb729840d1']

bytes: xor r10w, si: 664433d6
xor rdx, rdi: 4833d7
lea rsi, [rsp + rsi + 8]: 488d743408
mov qword ptr [rsi + rdi*2 - 0x298ca0d8], rax: 4889847e285f73d6
call 0x7ffb729840d1: e86e68deff

bytecode len: 50 -   664433d64833d7488d7434084889847e285f73d6e86e68deff

block IDs [duplicates]: [334]
['sbb byte ptr [rsp + rdi - 0x14c65064], r8b', 'mov ebp, dword ptr [r11 + rdi - 0x14c6506a]', 'sub word ptr [rsp + rdi - 0x14c6505f], 0xfb6', 'movsx eax, cx', 'lea r11, [r11 + rdi*2 - 0x298ca0d2]', 'inc al', 'ror r8d, cl', 'mov qword ptr [rsp + rdi*4 - 0x531941b0], r8', 'xor ebp, r10d', 'not ebp', 'shr r8b, 0x47', 'lea ebp, [rbp + rdi + 0x5150c997]', 'ror cl, 0xc7', 'or byte ptr [rsp + rdi*2 - 0x298ca0c9], dh', 'bswap ebp', 'xor dl, r8b', 'not ebp', 'sbb r8d, ecx', 'shl dil, 0x65', 'adc ecx, 0x1da6610b', 'bswap ebp', 'xor ebp, 0x95b4bb9e', 'push r8', 'or rdi, rax', 'push r8', 'rol ebp, 1', 'movzx esi, cl', 'not ebp', 'mov qword ptr [rsp + rdi - 0x14c67f92], r10', 'xor dword ptr [rsp + rdi*2 - 0x298cff3c], ebp', 'mov r10, qword ptr [rsp + rdi*2 - 0x298cff3c]', 'mov qword ptr [rsp + rdi - 0x14c67f92], rdx', 'xor rcx, 0x7f386c81', 'movsxd rbp, ebp', 'rol sil, 0x46', 'sub byte ptr [rsp + rdi*4 - 0x5319fe99], 0x99', 'add rbx, rbp', 'mov qword ptr [rsp + rdi*2 - 0x298cff54], rbx', 'ret 0x18']

bytes: sbb byte ptr [rsp + rdi - 0x14c65064], r8b: 4418843c9caf39eb
mov ebp, dword ptr [r11 + rdi - 0x14c6506a]: 418bac3b96af39eb
sub word ptr [rsp + rdi - 0x14c6505f], 0xfb6: 6681ac3ca1af39ebb60f
movsx eax, cx: 0fbfc1
lea r11, [r11 + rdi*2 - 0x298ca0d2]: 4d8d9c7b2e5f73d6
inc al: fec0
ror r8d, cl: 41d3c8
mov qword ptr [rsp + rdi*4 - 0x531941b0], r8: 4c8984bc50bee6ac
xor ebp, r10d: 4133ea
not ebp: f7d5
shr r8b, 0x47: 41c0e847
lea ebp, [rbp + rdi + 0x5150c997]: 8dac3d97c95051
ror cl, 0xc7: c0c9c7
or byte ptr [rsp + rdi*2 - 0x298ca0c9], dh: 08b47c375f73d6
bswap ebp: 0fcd
xor dl, r8b: 4132d0
not ebp: f7d5
sbb r8d, ecx: 441bc1
shl dil, 0x65: 40c0e765
adc ecx, 0x1da6610b: 81d10b61a61d
bswap ebp: 0fcd
xor ebp, 0x95b4bb9e: 81f59ebbb495
push r8: 4150
or rdi, rax: 480bf8
push r8: 4150
rol ebp, 1: d1c5
movzx esi, cl: 0fb6f1
not ebp: f7d5
mov qword ptr [rsp + rdi - 0x14c67f92], r10: 4c89943c6e8039eb
xor dword ptr [rsp + rdi*2 - 0x298cff3c], ebp: 31ac7cc40073d6
mov r10, qword ptr [rsp + rdi*2 - 0x298cff3c]: 4c8b947cc40073d6
mov qword ptr [rsp + rdi - 0x14c67f92], rdx: 4889943c6e8039eb
xor rcx, 0x7f386c81: 4881f1816c387f
movsxd rbp, ebp: 4863ed
rol sil, 0x46: 40c0c646
sub byte ptr [rsp + rdi*4 - 0x5319fe99], 0x99: 80acbc6701e6ac99
add rbx, rbp: 4803dd
mov qword ptr [rsp + rdi*2 - 0x298cff54], rbx: 48899c7cac0073d6
ret 0x18: c21800

bytecode len: 370 -   4418843c9caf39eb418bac3b96af39eb6681ac3ca1af39ebb60f0fbfc14d8d9c7b2e5f73d6fec041d3c84c8984bc50bee6ac4133eaf7d541c0e8478dac3d97c95051c0c9c708b47c375f73d60fcd4132d0f7d5441bc140c0e76581d10b61a61d0fcd81f59ebbb4954150480bf84150d1c50fb6f1f7d54c89943c6e8039eb31ac7cc40073d64c8b947cc40073d64889943c6e8039eb4881f1816c387f4863ed40c0c64680acbc6701e6ac994803dd48899c7cac0073d6c21800

block IDs [duplicates]: [335]
['lea r9, [rsi + r9 - 0x80449b]', 'sar si, 0xa6', 'mov qword ptr [r9 + rsi*2 - 0x1000224], rbp', 'mov qword ptr [rsp + rcx - 0x2597e9ef], rsi', 'jns 0x7ffb72c08dff']

bytes: lea r9, [rsi + r9 - 0x80449b]: 4e8d8c0e65bb7fff
sar si, 0xa6: 66c1fea6
mov qword ptr [r9 + rsi*2 - 0x1000224], rbp: 4989ac71dcfdfffe
mov qword ptr [rsp + rcx - 0x2597e9ef], rsi: 4889b40c111668da
jns 0x7ffb72c08dff: 0f8968971000

bytecode len: 68 -   4e8d8c0e65bb7fff66c1fea64989ac71dcfdfffe4889b40c111668da0f8968971000

block IDs [duplicates]: [336]
['inc sil', 'lea rdi, [rbp + r8*2 - 0x5f63b048]', 'shr rbp, 0xb1', 'xor sil, 0x1a', 'xor bpl, r8b', 'sal rbp, 0x22', 'sbb sil, 0x91', 'push rbp', 'xor r10b, sil', 'and edi, dword ptr [rsp + 1]', 'inc di', 'add r8, -0x4566276a', 'lea rsi, [rsp + rsi + 8]', 'lea rdx, [r8*8 - 0x63c6a27b]', 'mov qword ptr [rsi], rax', 'mov eax, dword ptr [r11 + 1]', 'xor eax, r10d', 'neg eax', 'or dl, 0xac', 'dec eax', 'bswap eax', 'ror eax, 1', 'bts dx, di', 'xadd dword ptr [rsp + 3], r8d', 'inc eax', 'mov qword ptr [rsp + r8*2 - 0x30800], r10', 'inc rbp', 'push r8', 'sub bp, 0xca7', 'xor dword ptr [rsp + r8 - 0x183f8], eax', 'mov r10, qword ptr [rsp + r8 - 0x183f8]', 'movsxd rax, eax', 'push rdx', 'add rbx, rax', 'pop rcx', 'mov qword ptr [rsp + r8*4 - 0x60ff8], r8', 'mov rdi, qword ptr [r11 + r8*2 - 0x307fb]', 'lea r11, [r11 + r8*2 - 0x307f3]', 'movzx esi, word ptr [rsp + r8 - 0x183f8]', 'xor rdi, r10', 'btc rcx, rsi', 'lea rdi, [rdi + r8*4 - 0x5a934783]', 'setb dl', 'btr ecx, r8d', 'not rdi', 'push rdx', 'shr dword ptr [rsp + r8 - 0x183fe], 0xd8', 'xor rdi, 0xffffffffb52dfabc', 'neg rdi', 'sal dx, 0x6c', 'and rcx, 0xffffffffef21d6a6', 'pop r8', 'xor rdi, 0x594c00b', 'neg byte ptr [rsp + r8 - 0x6cff]', 'lea rdi, [rdi + r8*8 - 0x63d122f8]', 'setl byte ptr [rsp + r8 - 0x6cf3]', 'rol bp, cl', 'btr rbp, rcx', 'xor r10, rdi', 'mov qword ptr [r9 + r8*2 - 0xda02], rdi', 'not qword ptr [rsp + r8 - 0x6cfe]', 'mov qword ptr [rsp + r8 - 0x6d01], rbx', 'ret 8']

bytes: inc sil: 40fec6
lea rdi, [rbp + r8*2 - 0x5f63b048]: 4a8dbc45b84f9ca0
shr rbp, 0xb1: 48c1edb1
xor sil, 0x1a: 4080f61a
xor bpl, r8b: 4132e8
sal rbp, 0x22: 48c1f522
sbb sil, 0x91: 4080de91
push rbp: 55
xor r10b, sil: 4432d6
and edi, dword ptr [rsp + 1]: 237c2401
inc di: 66ffc7
add r8, -0x4566276a: 4981c096d899ba
lea rsi, [rsp + rsi + 8]: 488d743408
lea rdx, [r8*8 - 0x63c6a27b]: 4a8d14c5855d399c
mov qword ptr [rsi], rax: 48890426
mov eax, dword ptr [r11 + 1]: 418b442301
xor eax, r10d: 4133c2
neg eax: f7d8
or dl, 0xac: 80caac
dec eax: ffc8
bswap eax: 0fc8
ror eax, 1: d1c8
bts dx, di: 660fabfa
xadd dword ptr [rsp + 3], r8d: 440fc1442403
inc eax: ffc0
mov qword ptr [rsp + r8*2 - 0x30800], r10: 4e89944400f8fcff
inc rbp: 48ffc5
push r8: 4150
sub bp, 0xca7: 6681eda70c
xor dword ptr [rsp + r8 - 0x183f8], eax: 42318404087cfeff
mov r10, qword ptr [rsp + r8 - 0x183f8]: 4e8b9404087cfeff
movsxd rax, eax: 4863c0
push rdx: 52
add rbx, rax: 4803d8
pop rcx: 59
mov qword ptr [rsp + r8*4 - 0x60ff8], r8: 4e89848408f0f9ff
mov rdi, qword ptr [r11 + r8*2 - 0x307fb]: 4b8bbc4305f8fcff
lea r11, [r11 + r8*2 - 0x307f3]: 4f8d9c430df8fcff
movzx esi, word ptr [rsp + r8 - 0x183f8]: 420fb7b404087cfeff
xor rdi, r10: 4933fa
btc rcx, rsi: 480fbbf1
lea rdi, [rdi + r8*4 - 0x5a934783]: 4a8dbc877db86ca5
setb dl: 0f92c2
btr ecx, r8d: 440fb3c1
not rdi: 48f7d7
push rdx: 52
shr dword ptr [rsp + r8 - 0x183fe], 0xd8: 42c1ac04027cfeffd8
xor rdi, 0xffffffffb52dfabc: 4881f7bcfa2db5
neg rdi: 48f7df
sal dx, 0x6c: 66c1f26c
and rcx, 0xffffffffef21d6a6: 4881e1a6d621ef
pop r8: 4158
xor rdi, 0x594c00b: 4881f70bc09405
neg byte ptr [rsp + r8 - 0x6cff]: 42f69c040193ffff
lea rdi, [rdi + r8*8 - 0x63d122f8]: 4a8dbcc708dd2e9c
setl byte ptr [rsp + r8 - 0x6cf3]: 420f9c84040d93ffff
rol bp, cl: 66d3c5
btr rbp, rcx: 480fb3cd
xor r10, rdi: 4c33d7
mov qword ptr [r9 + r8*2 - 0xda02], rdi: 4b89bc41fe25ffff
not qword ptr [rsp + r8 - 0x6cfe]: 4af794040293ffff
mov qword ptr [rsp + r8 - 0x6d01], rbx: 4a899c04ff92ffff
ret 8: c20800

bytecode len: 596 -   40fec64a8dbc45b84f9ca048c1edb14080f61a4132e848c1f5224080de91554432d6237c240166ffc74981c096d899ba488d7434084a8d14c5855d399c48890426418b4423014133c2f7d880caacffc80fc8d1c8660fabfa440fc1442403ffc04e89944400f8fcff48ffc541506681eda70c42318404087cfeff4e8b9404087cfeff4863c0524803d8594e89848408f0f9ff4b8bbc4305f8fcff4f8d9c430df8fcff420fb7b404087cfeff4933fa480fbbf14a8dbc877db86ca50f92c2440fb3c148f7d75242c1ac04027cfeffd84881f7bcfa2db548f7df66c1f26c4881e1a6d621ef41584881f70bc0940542f69c040193ffff4a8dbcc708dd2e9c420f9c84040d93ffff66d3c5480fb3cd4c33d74b89bc41fe25ffff4af794040293ffff4a899c04ff92ffffc20800

block IDs [duplicates]: [337]
['mov esi, 0xe23a8007', 'mov ecx, esi', 'mov edi, ecx', 'mov ebp, dword ptr [r11]', 'lea rdx, [rcx - 0x276cba61]', 'xor ebp, r10d', 'mov eax, 0x42891739', 'call 0x7ffb72b980c4']

bytes: mov esi, 0xe23a8007: be07803ae2
mov ecx, esi: 8bce
mov edi, ecx: 8bf9
mov ebp, dword ptr [r11]: 418b2c23
lea rdx, [rcx - 0x276cba61]: 488d919f4593d8
xor ebp, r10d: 4133ea
mov eax, 0x42891739: b839178942
call 0x7ffb72b980c4: e8c6d42100

bytecode len: 66 -   be07803ae28bce8bf9418b2c23488d919f4593d84133eab839178942e8c6d42100

block IDs [duplicates]: [338]
['sub ebp, 0xa388371a', 'ror ebp, 1', 'btr rax, rdi', 'neg ebp', 'sub ebp, 0x4aa05d04', 'mov qword ptr [rsp + rax - 0x42891739], -0x71580247', 'dec word ptr [rsp + rax - 0x42891734]', 'bswap ebp', 'sal word ptr [rsp + rax - 0x42891735], 0x68', 'and dword ptr [rsp + rax - 0x42891736], ecx', 'mov qword ptr [rsp + rax - 0x42891739], r10', 'sal al, cl', 'not rax', 'adc ecx, edi', 'xor dword ptr [rsp + rax + 0x42891781], ebp', 'pop r10', 'cdq', 'add cx, 0x5925', 'movsxd rbp, ebp', 'add rbx, rbp', 'neg eax', 'inc ecx', 'movzx r8d, byte ptr [rax + r11 - 0x4289177d]', 'xor r8b, r10b', 'sbb r8b, 0xb4', 'sal ax, 0x8a', 'xor r8b, dl', 'sub r8b, 0x97', 'xor r8b, dl', 'movzx ebp, cl', 'neg r8b', 'inc rdx', 'add r8b, 0x94', 'xor r10b, r8b', 'add r8, rsp', 'mov rdi, qword ptr [rbp + r8 - 0x34]', 'mov qword ptr [r9 + rbp*4 - 0xd8], rdi', 'lea rbp, [rcx*4 - 0xeccd278]', 'movzx esi, byte ptr [rax + r11 - 0x428903fb]', 'call 0x7ffb72bf98c9']

bytes: sub ebp, 0xa388371a: 81ed1a3788a3
ror ebp, 1: d1cd
btr rax, rdi: 480fb3f8
neg ebp: f7dd
sub ebp, 0x4aa05d04: 81ed045da04a
mov qword ptr [rsp + rax - 0x42891739], -0x71580247: 48c78404c7e876bdb9fda78e
dec word ptr [rsp + rax - 0x42891734]: 66ff8c04cce876bd
bswap ebp: 0fcd
sal word ptr [rsp + rax - 0x42891735], 0x68: 66c1b404cbe876bd68
and dword ptr [rsp + rax - 0x42891736], ecx: 218c04cae876bd
mov qword ptr [rsp + rax - 0x42891739], r10: 4c899404c7e876bd
sal al, cl: d2f0
not rax: 48f7d0
adc ecx, edi: 13cf
xor dword ptr [rsp + rax + 0x42891781], ebp: 31ac0481178942
pop r10: 415a
cdq: 99
add cx, 0x5925: 6681c12559
movsxd rbp, ebp: 4863ed
add rbx, rbp: 4803dd
neg eax: f7d8
inc ecx: ffc1
movzx r8d, byte ptr [rax + r11 - 0x4289177d]: 460fb6841883e876bd
xor r8b, r10b: 4532c2
sbb r8b, 0xb4: 4180d8b4
sal ax, 0x8a: 66c1f08a
xor r8b, dl: 4432c2
sub r8b, 0x97: 4180e897
xor r8b, dl: 4432c2
movzx ebp, cl: 0fb6e9
neg r8b: 41f6d8
inc rdx: 48ffc2
add r8b, 0x94: 4180c094
xor r10b, r8b: 4532d0
add r8, rsp: 4c03c4
mov rdi, qword ptr [rbp + r8 - 0x34]: 4a8b7c05cc
mov qword ptr [r9 + rbp*4 - 0xd8], rdi: 4989bca928ffffff
lea rbp, [rcx*4 - 0xeccd278]: 488d2c8d882d33f1
movzx esi, byte ptr [rax + r11 - 0x428903fb]: 420fb6b41805fc76bd
call 0x7ffb72bf98c9: e839170600

bytecode len: 364 -   81ed1a3788a3d1cd480fb3f8f7dd81ed045da04a48c78404c7e876bdb9fda78e66ff8c04cce876bd0fcd66c1b404cbe876bd68218c04cae876bd4c899404c7e876bdd2f048f7d013cf31ac0481178942415a996681c125594863ed4803ddf7d8ffc1460fb6841883e876bd4532c24180d8b466c1f08a4432c24180e8974432c20fb6e941f6d848ffc24180c0944532d04c03c44a8b7c05cc4989bca928ffffff488d2c8d882d33f1420fb6b41805fc76bde839170600

block IDs [duplicates]: [339]
['xor sil, r10b', 'inc dil', 'setl dl', 'sal rdi, cl', 'sbb sil, 2', 'sar ax, 0x61', 'mov qword ptr [rsp + r8 - 0x1d], rcx', 'not sil', 'xor dl, 0xb5', 'inc qword ptr [rsp + rax - 0x4289007d]', 'setno byte ptr [rsp + r8 - 0x11]', 'neg sil', 'btr edi, eax', 'lea rcx, [rax*4 - 0x174ebb43]', 'dec sil', 'or qword ptr [rsp + rax - 0x4289007d], rdx', 'shl word ptr [rsp + r8*2 - 0x30], 0x25', 'xor r10b, sil', 'lea rsi, [rsp + rsi + 0x10]', 'mov rdx, qword ptr [rax + rsi - 0x42890080]', 'inc dword ptr [rsp + r8 - 0x13]', 'xadd r8, rbp', 'mov qword ptr [rax + r9 - 0x42890090], rdx', 'lea rsi, [rdi*2 - 0x1dfee179]', 'lea r9, [rbp + r9 - 0x2d]', 'pop rax', 'pop r8', 'jne 0x7ffb72acc73a']

bytes: xor sil, r10b: 4132f2
inc dil: 40fec7
setl dl: 0f9cc2
sal rdi, cl: 48d3f7
sbb sil, 2: 4080de02
sar ax, 0x61: 66c1f861
mov qword ptr [rsp + r8 - 0x1d], rcx: 4a894c04e3
not sil: 40f6d6
xor dl, 0xb5: 80f2b5
inc qword ptr [rsp + rax - 0x4289007d]: 48ff840483ff76bd
setno byte ptr [rsp + r8 - 0x11]: 420f914404ef
neg sil: 40f6de
btr edi, eax: 0fb3c7
lea rcx, [rax*4 - 0x174ebb43]: 488d0c85bd44b1e8
dec sil: 40fece
or qword ptr [rsp + rax - 0x4289007d], rdx: 4809940483ff76bd
shl word ptr [rsp + r8*2 - 0x30], 0x25: 6642c16444d025
xor r10b, sil: 4432d6
lea rsi, [rsp + rsi + 0x10]: 488d743410
mov rdx, qword ptr [rax + rsi - 0x42890080]: 488b943080ff76bd
inc dword ptr [rsp + r8 - 0x13]: 42ff4404ed
xadd r8, rbp: 490fc1e8
mov qword ptr [rax + r9 - 0x42890090], rdx: 4a89940870ff76bd
lea rsi, [rdi*2 - 0x1dfee179]: 488d347d871e01e2
lea r9, [rbp + r9 - 0x2d]: 4e8d4c0dd3
pop rax: 58
pop r8: 4158
jne 0x7ffb72acc73a: 0f854ffa0200

bytecode len: 264 -   4132f240fec70f9cc248d3f74080de0266c1f8614a894c04e340f6d680f2b548ff840483ff76bd420f914404ef40f6de0fb3c7488d0c85bd44b1e840fece4809940483ff76bd6642c16444d0254432d6488d743410488b943080ff76bd42ff4404ed490fc1e84a89940870ff76bd488d347d871e01e24e8d4c0dd35841580f854ffa0200

block IDs [duplicates]: [340]
['movzx edi, byte ptr [r11]', 'xor dil, r10b', 'mov edx, 0xa990bf83', 'call 0x7ffb72e642b5']

bytes: movzx edi, byte ptr [r11]: 410fb63b
xor dil, r10b: 4132fa
mov edx, 0xa990bf83: ba83bf90a9
call 0x7ffb72e642b5: e8dd773f00

bytecode len: 34 -   410fb63b4132faba83bf90a9e8dd773f00

block IDs [duplicates]: [341]
['mov r8, qword ptr [r9 + 0x10]', 'lea rdi, [rbp + 0x33a7b522]', 'sbb rcx, rbp', 'jne 0x7ffb72e452b1']

bytes: mov r8, qword ptr [r9 + 0x10]: 4d8b442110
lea rdi, [rbp + 0x33a7b522]: 488dbd22b5a733
sbb rcx, rbp: 481bcd
jne 0x7ffb72e452b1: 0f85c3cd2c00

bytecode len: 42 -   4d8b442110488dbd22b5a733481bcd0f85c3cd2c00

block IDs [duplicates]: [342]
['mov edx, 0xeb278a02', 'movsx ebp, dl', 'sal bp, 0xc', 'mov ebp, dword ptr [rbp + r11 - 0x2000]', 'mov esi, edx', 'xor ebp, r10d', 'mov eax, esi', 'neg sil', 'mov ecx, 0xa3bc680b', 'xor ebp, 0x42131d35', 'movzx r8d, dx', 'btr dx, r8w', 'neg ebp', 'or dl, sil', 'seta r8b', 'bswap eax', 'ror ebp, 1', 'call 0x7ffb72975471']

bytes: mov edx, 0xeb278a02: ba028a27eb
movsx ebp, dl: 0fbeea
sal bp, 0xc: 66c1f50c
mov ebp, dword ptr [rbp + r11 - 0x2000]: 428bac1d00e0ffff
mov esi, edx: 8bf2
xor ebp, r10d: 4133ea
mov eax, esi: 8bc6
neg sil: 40f6de
mov ecx, 0xa3bc680b: b90b68bca3
xor ebp, 0x42131d35: 81f5351d1342
movzx r8d, dx: 440fb7c2
btr dx, r8w: 66440fb3c2
neg ebp: f7dd
or dl, sil: 400ad6
seta r8b: 410f97c0
bswap eax: 0fc8
ror ebp, 1: d1cd
call 0x7ffb72975471: e8e24ef7ff

bytecode len: 136 -   ba028a27eb0fbeea66c1f50c428bac1d00e0ffff8bf24133ea8bc640f6deb90b68bca381f5351d1342440fb7c266440fb3c2f7dd400ad6410f97c00fc8d1cde8e24ef7ff

block IDs [duplicates]: [343]
['inc ebp', 'mov qword ptr [rsp + rax*8 - 0x14513f58], r10', 'xor dword ptr [rsp + r8 - 0x8a01], ebp', 'cwde', 'pop r10', 'ror rsi, cl', 'inc rsi', 'movsxd rbp, ebp', 'sar rax, cl', 'cqo', 'add rbx, rbp', 'mov rbp, qword ptr [rdx + r9]', 'lea rdi, [rsi + rsi - 0x267283c4]', 'rol rdx, 3', 'ror sil, 1', 'inc byte ptr [rsp + rsi - 0x3f87610e]', 'jno 0x7ffb72c71a8b']

bytes: inc ebp: ffc5
mov qword ptr [rsp + rax*8 - 0x14513f58], r10: 4c8994c4a8c0aeeb
xor dword ptr [rsp + r8 - 0x8a01], ebp: 4231ac04ff75ffff
cwde: 98
pop r10: 415a
ror rsi, cl: 48d3ce
inc rsi: 48ffc6
movsxd rbp, ebp: 4863ed
sar rax, cl: 48d3f8
cqo: 4899
add rbx, rbp: 4803dd
mov rbp, qword ptr [rdx + r9]: 4a8b2c0a
lea rdi, [rsi + rsi - 0x267283c4]: 488dbc363c7c8dd9
rol rdx, 3: 48c1c203
ror sil, 1: 40d0ce
inc byte ptr [rsp + rsi - 0x3f87610e]: fe8434f29e78c0
jno 0x7ffb72c71a8b: 0f81e3492a00

bytecode len: 140 -   ffc54c8994c4a8c0aeeb4231ac04ff75ffff98415a48d3ce48ffc64863ed48d3f848994803dd4a8b2c0a488dbc363c7c8dd948c1c20340d0cefe8434f29e78c00f81e3492a00

block IDs [duplicates]: [344]
['mov edx, dword ptr [r11]', 'mov esi, 0x9c2c0598', 'mov ebp, 0xd0b1cf31', 'xor edx, r10d', 'call 0x7ffb72e16115']

bytes: mov edx, dword ptr [r11]: 418b13
mov esi, 0x9c2c0598: be98052c9c
mov ebp, 0xd0b1cf31: bd31cfb1d0
xor edx, r10d: 4133d2
call 0x7ffb72e16115: e8d7c24500

bytecode len: 42 -   418b13be98052c9cbd31cfb1d04133d2e8d7c24500

block IDs [duplicates]: [345]
['xor r8, r10', 'and ebp, 0xbba4f58f', 'dec r8', 'xadd word ptr [rsp + rdx + 6], dx', 'add cx, di', 'xchg word ptr [rsp + rdx + 3], di', 'bswap r8', 'bts bp, 0x82', 'pop rdx', 'sal rcx, cl', 'lea r8, [r8 + rdx*2 - 0x211e3693]', 'jb 0x7ffb72b59755']

bytes: xor r8, r10: 4d33c2
and ebp, 0xbba4f58f: 81e58ff5a4bb
dec r8: 49ffc8
xadd word ptr [rsp + rdx + 6], dx: 660fc1541406
add cx, di: 6603cf
xchg word ptr [rsp + rdx + 3], di: 66877c1403
bswap r8: 490fc8
bts bp, 0x82: 660fbaed82
pop rdx: 5a
sal rcx, cl: 48d3f1
lea r8, [r8 + rdx*2 - 0x211e3693]: 4d8d84506dc9e1de
jb 0x7ffb72b59755: 0f82f80c2600

bytecode len: 104 -   4d33c281e58ff5a4bb49ffc8660fc15414066603cf66877c1403490fc8660fbaed825a48d3f14d8d84506dc9e1de0f82f80c2600

block IDs [duplicates]: [346]
['ror r8, 3', 'dec rdx', 'lea rdx, [rsp + rdx - 0x2021fab8]', 'call 0x7ffb72bb57d1']

bytes: ror r8, 3: 49c1c803
dec rdx: 48ffca
lea rdx, [rsp + rdx - 0x2021fab8]: 488d94144805dedf
call 0x7ffb72bb57d1: e87e900e00

bytecode len: 40 -   49c1c80348ffca488d94144805dedfe87e900e00

block IDs [duplicates]: [347]
['mov ecx, 0xe40ad73b', 'mov r8d, dword ptr [r11]', 'movsx edi, cl', 'xor r8d, r10d', 'lea r8d, [r8 + rdi - 0x8bbc548]', 'lea rdx, [rdi*8 + 0x77050505]', 'rol r8d, 3', 'xadd rdx, rcx', 'sal dx, 0x2e', 'neg r8d', 'mov eax, edi', 'lea rsi, [rdx*2 + 0x289ba4ab]', 'not r8d', 'push r10', 'sal rsi, 0x68', 'xor dword ptr [rsp + rcx - 0x770506dd], r8d', 'pop r10', 'call 0x7ffb72c1e6e7']

bytes: mov ecx, 0xe40ad73b: b93bd70ae4
mov r8d, dword ptr [r11]: 458b03
movsx edi, cl: 0fbef9
xor r8d, r10d: 4533c2
lea r8d, [r8 + rdi - 0x8bbc548]: 458d8438b83a44f7
lea rdx, [rdi*8 + 0x77050505]: 488d14fd05050577
rol r8d, 3: 41c1c003
xadd rdx, rcx: 480fc1ca
sal dx, 0x2e: 66c1f22e
neg r8d: 41f7d8
mov eax, edi: 8bc7
lea rsi, [rdx*2 + 0x289ba4ab]: 488d3455aba49b28
not r8d: 41f7d0
push r10: 4152
sal rsi, 0x68: 48c1f668
xor dword ptr [rsp + rcx - 0x770506dd], r8d: 4431840c23f9fa88
pop r10: 415a
call 0x7ffb72c1e6e7: e827642800

bytecode len: 158 -   b93bd70ae4458b030fbef94533c2458d8438b83a44f7488d14fd0505057741c1c003480fc1ca66c1f22e41f7d88bc7488d3455aba49b2841f7d0415248c1f6684431840c23f9fa88415ae827642800

block IDs [duplicates]: [348]
['mov ecx, 0xe1b9143d', 'movzx edi, cx', 'lea rdx, [rdi + rcx - 0x3ac2e376]', 'mov eax, dword ptr [rdi + r11 - 0x143d]', 'lea r11, [rdi + r11 - 0x1439]', 'mov r8d, 0x8a2a3c16', 'ror r8, cl', 'ror rdx, cl', 'xor eax, r10d', 'lea eax, [rax + rdi*2 - 0x8bbed87]', 'rol eax, 3', 'not ecx', 'bts edx, edi', 'jb 0x7ffb72b9f3a3']

bytes: mov ecx, 0xe1b9143d: b93d14b9e1
movzx edi, cx: 0fb7f9
lea rdx, [rdi + rcx - 0x3ac2e376]: 488d940f8a1c3dc5
mov eax, dword ptr [rdi + r11 - 0x143d]: 428b841fc3ebffff
lea r11, [rdi + r11 - 0x1439]: 4e8d9c1fc7ebffff
mov r8d, 0x8a2a3c16: 41b8163c2a8a
ror r8, cl: 49d3c8
ror rdx, cl: 48d3ca
xor eax, r10d: 4133c2
lea eax, [rax + rdi*2 - 0x8bbed87]: 8d8478791244f7
rol eax, 3: c1c003
not ecx: f7d1
bts edx, edi: 0fabfa
jb 0x7ffb72b9f3a3: 0f82ef330200

bytecode len: 136 -   b93d14b9e10fb7f9488d940f8a1c3dc5428b841fc3ebffff4e8d9c1fc7ebffff41b8163c2a8a49d3c848d3ca4133c28d8478791244f7c1c003f7d10fabfa0f82ef330200

block IDs [duplicates]: [349]
['neg eax', 'sar edx, 0x36', 'movzx esi, r8b', 'not eax', 'jb 0x7ffb72dfed18']

bytes: neg eax: f7d8
sar edx, 0x36: c1fa36
movzx esi, r8b: 410fb6f0
not eax: f7d0
jb 0x7ffb72dfed18: 0f8264f92500

bytecode len: 34 -   f7d8c1fa36410fb6f0f7d00f8264f92500

block IDs [duplicates]: [350]
['push -0x849a358', 'mov r8, r9', 'inc dword ptr [rsp + 4]', 'mov qword ptr [r9 - 8], r8', 'mov rsi, qword ptr [r11]', 'shl dword ptr [rsp + 4], 0x6d', 'xor rsi, r10', 'mov edi, 0x56200cae', 'pop r8', 'dec rsi', 'shr edi, 0xb7', 'not r8w', 'ja 0x7ffb72b9ec73']

bytes: push -0x849a358: 68a85cb6f7
mov r8, r9: 4d8bc1
inc dword ptr [rsp + 4]: ff442404
mov qword ptr [r9 - 8], r8: 4d8941f8
mov rsi, qword ptr [r11]: 498b33
shl dword ptr [rsp + 4], 0x6d: c16424046d
xor rsi, r10: 4933f2
mov edi, 0x56200cae: bfae0c2056
pop r8: 4158
dec rsi: 48ffce
shr edi, 0xb7: c1efb7
not r8w: 6641f7d0
ja 0x7ffb72b9ec73: 0f870dfc1e00

bytecode len: 100 -   68a85cb6f74d8bc1ff4424044d8941f8498b33c16424046d4933f2bfae0c2056415848ffcec1efb76641f7d00f870dfc1e00

block IDs [duplicates]: [351]
['not rsi', 'call 0x7ffb72bd7e0b']

bytes: not rsi: 48f7d6
call 0x7ffb72bd7e0b: e890910300

bytecode len: 16 -   48f7d6e890910300

block IDs [duplicates]: [352]
['sar word ptr [rsp + rax - 0xb1], 0x4f', 'sub dl, dil', 'rol ecx, 1', 'sal dword ptr [rsp + rax - 0xb6], 0x2d', 'and byte ptr [rsp + rdx*2 - 0x71599e52], 0x80', 'not ecx', 'mov qword ptr [rsp + rdx - 0x38accf25], r10', 'xor dword ptr [rsp + rdx - 0x38accf25], ecx', 'lea rbp, [rsi + rdx*2 + 0x238cd51f]', 'mov r10, qword ptr [rsp + rax - 0xb6]', 'lea r8, [rdx + rax*2 - 0x3e535742]', 'movsxd rcx, ecx', 'rol dl, 0xe4', 'mov qword ptr [rsp + rdx - 0x38accfd2], -0x3a45c268', 'adc rbx, rcx', 'mov rdi, r9', 'shr sil, 0x43', 'jae 0x7ffb72bd2332']

bytes: sar word ptr [rsp + rax - 0xb1], 0x4f: 66c1bc044fffffff4f
sub dl, dil: 402ad7
rol ecx, 1: d1c1
sal dword ptr [rsp + rax - 0xb6], 0x2d: c1b4044affffff2d
and byte ptr [rsp + rdx*2 - 0x71599e52], 0x80: 80a454ae61a68e80
not ecx: f7d1
mov qword ptr [rsp + rdx - 0x38accf25], r10: 4c899414db3053c7
xor dword ptr [rsp + rdx - 0x38accf25], ecx: 318c14db3053c7
lea rbp, [rsi + rdx*2 + 0x238cd51f]: 488dac561fd58c23
mov r10, qword ptr [rsp + rax - 0xb6]: 4c8b94044affffff
lea r8, [rdx + rax*2 - 0x3e535742]: 4c8d8442bea8acc1
movsxd rcx, ecx: 4863c9
rol dl, 0xe4: c0c2e4
mov qword ptr [rsp + rdx - 0x38accfd2], -0x3a45c268: 48c784142e3053c7983dbac5
adc rbx, rcx: 4813d9
mov rdi, r9: 498bf9
shr sil, 0x43: 40c0ee43
jae 0x7ffb72bd2332: 0f8368602400

bytecode len: 210 -   66c1bc044fffffff4f402ad7d1c1c1b4044affffff2d80a454ae61a68e80f7d14c899414db3053c7318c14db3053c7488dac561fd58c234c8b94044affffff4c8d8442bea8acc14863c9c0c2e448c784142e3053c7983dbac54813d9498bf940c0ee430f8368602400

block IDs [duplicates]: [353]
['mov rcx, rdi', 'sub r8b, al', 'pop rbp', 'mov rdi, qword ptr ss:[rcx + rdx*2 - 0x71599fa4]', 'mov qword ptr [rax + r9 - 0xc6], rdi', 'push rbp', 'lea r9, [rdx + r9 - 0x38accfda]', 'mov qword ptr [rsp + rdx*2 - 0x71599f9c], 0x19a37212', 'and bpl, 0x2b', 'pop rcx', 'pop rdx', 'ja 0x7ffb72acc73a']

bytes: mov rcx, rdi: 488bcf
sub r8b, al: 442ac0
pop rbp: 5d
mov rdi, qword ptr ss:[rcx + rdx*2 - 0x71599fa4]: 36488bbc515c60a68e
mov qword ptr [rax + r9 - 0xc6], rdi: 4a89bc083affffff
push rbp: 55
lea r9, [rdx + r9 - 0x38accfda]: 4e8d8c0a263053c7
mov qword ptr [rsp + rdx*2 - 0x71599f9c], 0x19a37212: 48c784546460a68e1272a319
and bpl, 0x2b: 4080e52b
pop rcx: 59
pop rdx: 5a
ja 0x7ffb72acc73a: 0f872f041400

bytecode len: 114 -   488bcf442ac05d36488bbc515c60a68e4a89bc083affffff554e8d8c0a263053c748c784546460a68e1272a3194080e52b595a0f872f041400

block IDs [duplicates]: [354]
['mov edx, 0xac38f594', 'lea rdi, [rdx + 0x2c3b29b4]', 'movzx ebp, dil', 'mov rbp, qword ptr [rbp + r9 - 0x48]', 'call 0x7ffb728b8833']

bytes: mov edx, 0xac38f594: ba94f538ac
lea rdi, [rdx + 0x2c3b29b4]: 488dbab4293b2c
movzx ebp, dil: 400fb6ef
mov rbp, qword ptr [rbp + r9 - 0x48]: 4a8b6c0db8
call 0x7ffb728b8833: e8ce61faff

bytecode len: 52 -   ba94f538ac488dbab4293b2c400fb6ef4a8b6c0db8e8ce61faff

block IDs [duplicates]: [355]
['mov qword ptr [rsp], rdi', 'rol word ptr [rsp + 3], 0x88', 'mov rdx, qword ptr [r9 + 8]', 'jb 0x7ffb72bce792']

bytes: mov qword ptr [rsp], rdi: 48897c2400
rol word ptr [rsp + 3], 0x88: 66c144240388
mov rdx, qword ptr [r9 + 8]: 498b542108
jb 0x7ffb72bce792: 0f82495f3100

bytecode len: 44 -   48897c240066c144240388498b5421080f82495f3100

block IDs [duplicates]: [356]
['setae dil', 'and rbp, rdx', 'sub qword ptr [rsp], 0x12b4b7bc', 'not rbp', 'sub dword ptr [rsp + 3], 0x2eb78e1d', 'lea rsi, [rdi + rdi + 0x4d913039]', 'jp 0x7ffb72c607b6']

bytes: setae dil: 400f93c7
and rbp, rdx: 4823ea
sub qword ptr [rsp], 0x12b4b7bc: 48816c2400bcb7b412
not rbp: 48f7d5
sub dword ptr [rsp + 3], 0x2eb78e1d: 816c24031d8eb72e
lea rsi, [rdi + rdi + 0x4d913039]: 488db43f3930914d
jp 0x7ffb72c607b6: 0f8a417f3a00

bytecode len: 82 -   400f93c74823ea48816c2400bcb7b41248f7d5816c24031d8eb72e488db43f3930914d0f8a417f3a00

block IDs [duplicates]: [357]
['mov qword ptr [r9 + 8], rbp', 'mov eax, dword ptr [r11 + rax*2 - 0x7c04]', 'push rdi', 'add si, 0xf281', 'sbb r11, -5', 'mov edx, esi', 'dec byte ptr [rsp + 1]', 'setg byte ptr [rsp + 4]', 'inc byte ptr [rsp + 0xc]', 'movzx r8d, byte ptr [rsp + 0xc]', 'xor byte ptr [rsp + r8*2 - 0x91], 0x29', 'movzx ecx, di', 'lea eax, [r8 + rax + 0x1a30afcf]', 'rol eax, cl', 'sar rdi, 0x9a', 'mov qword ptr [rsp + rdi - 0x2e], r10', 'pop r8', 'xor dword ptr [rsp + rdi*8 - 0x1b0], eax', 'shr r8w, 0x62', 'pop r10', 'inc sil', 'movsxd rax, eax', 'add rbx, rax', 'xchg rbp, rcx', 'mov eax, edx', 'neg ecx', 'mov r9, qword ptr [r9 + rdi*8 - 0x1a8]', 'jne 0x7ffb72acc73a']

bytes: mov qword ptr [r9 + 8], rbp: 49896c2108
mov eax, dword ptr [r11 + rax*2 - 0x7c04]: 418b8443fc83ffff
push rdi: 57
add si, 0xf281: 6681c681f2
sbb r11, -5: 4983dbfb
mov edx, esi: 8bd6
dec byte ptr [rsp + 1]: fe4c2401
setg byte ptr [rsp + 4]: 0f9f442404
inc byte ptr [rsp + 0xc]: fe44240c
movzx r8d, byte ptr [rsp + 0xc]: 440fb644240c
xor byte ptr [rsp + r8*2 - 0x91], 0x29: 4280b4446fffffff29
movzx ecx, di: 0fb7cf
lea eax, [r8 + rax + 0x1a30afcf]: 418d8400cfaf301a
rol eax, cl: d3c0
sar rdi, 0x9a: 48c1ff9a
mov qword ptr [rsp + rdi - 0x2e], r10: 4c89543cd2
pop r8: 4158
xor dword ptr [rsp + rdi*8 - 0x1b0], eax: 3184fc50feffff
shr r8w, 0x62: 6641c1e862
pop r10: 415a
inc sil: 40fec6
movsxd rax, eax: 4863c0
add rbx, rax: 4803d8
xchg rbp, rcx: 4887cd
mov eax, edx: 8bc2
neg ecx: f7d9
mov r9, qword ptr [r9 + rdi*8 - 0x1a8]: 4d8b8cf958feffff
jne 0x7ffb72acc73a: 0f854ffa0200

bytecode len: 242 -   49896c2108418b8443fc83ffff576681c681f24983dbfb8bd6fe4c24010f9f442404fe44240c440fb644240c4280b4446fffffff290fb7cf418d8400cfaf301ad3c048c1ff9a4c89543cd241583184fc50feffff6641c1e862415a40fec64863c04803d84887cd8bc2f7d94d8b8cf958feffff0f854ffa0200

block IDs [duplicates]: [358]
['mov edi, 0x26a3f7b3', 'mov rax, rsp', 'lea rsi, [rdi + rdi + 0x2194f7b5]', 'lea ecx, [rsi - 0x6edce5a3]', 'sub edi, 0x3f31a631', 'lea rdx, [r9 + rsi - 0x6edce79b]', 'dec si', 'and rdx, 0xfffffffffffffff0', 'sub rdx, rcx', 'bswap rsi', 'mov rsp, rdx', 'push 0x6632cf04', 'push qword ptr [rsp + 8]', 'popfq', 'lea rsp, [rsp + 0x10]', 'jmp rbx']

bytes: mov edi, 0x26a3f7b3: bfb3f7a326
mov rax, rsp: 488bc4
lea rsi, [rdi + rdi + 0x2194f7b5]: 488db43fb5f79421
lea ecx, [rsi - 0x6edce5a3]: 8d8e5d1a2391
sub edi, 0x3f31a631: 81ef31a6313f
lea rdx, [r9 + rsi - 0x6edce79b]: 498d943165182391
dec si: 66ffce
and rdx, 0xfffffffffffffff0: 4881e2f0ffffff
sub rdx, rcx: 482bd1
bswap rsi: 480fce
mov rsp, rdx: 488be2
push 0x6632cf04: 6804cf3266
push qword ptr [rsp + 8]: ff742408
popfq: 9d
lea rsp, [rsp + 0x10]: 488d642410
jmp rbx: ffe3

bytecode len: 144 -   bfb3f7a326488bc4488db43fb5f794218d8e5d1a239181ef31a6313f498d94316518239166ffce4881e2f0ffffff482bd1480fce488be26804cf3266ff7424089d488d642410ffe3

block IDs [duplicates]: [359]
['xor edx, r10d', 'bswap r8d', 'movzx eax, bp', 'xor edx, 0xbca3de00', 'sar r8b, 0xe6', 'mov edi, esi', 'and rsi, r8', 'inc edx', 'shl eax, 0x5a', 'rol edx, 1', 'rol eax, 0x4c', 'sal r8d, 0x61', 'not edx', 'xor rdi, rcx', 'push rbp', 'mov qword ptr [rsp + rsi - 4], r10', 'xor dword ptr [rsp + rsi - 4], edx', 'sub dil, cl', 'pop r10', 'shr eax, 0xcf', 'movsxd rdx, edx', 'rol rdi, 0xde', 'adc rbx, rdx', 'or rax, r9', 'movzx edx, di', 'mov rsi, rax', 'lea rbp, [rsp + rcx*2 - 0x2abfc0]', 'mov qword ptr [rbp + rcx*2 - 0x2ac100], rsi', 'add rdx, rbx', 'jmp rdx']

bytes: xor edx, r10d: 4133d2
bswap r8d: 410fc8
movzx eax, bp: 0fb7c5
xor edx, 0xbca3de00: 81f200dea3bc
sar r8b, 0xe6: 41c0f8e6
mov edi, esi: 8bfe
and rsi, r8: 4923f0
inc edx: ffc2
shl eax, 0x5a: c1e05a
rol edx, 1: d1c2
rol eax, 0x4c: c1c04c
sal r8d, 0x61: 41c1f061
not edx: f7d2
xor rdi, rcx: 4833f9
push rbp: 55
mov qword ptr [rsp + rsi - 4], r10: 4c895434fc
xor dword ptr [rsp + rsi - 4], edx: 315434fc
sub dil, cl: 402af9
pop r10: 415a
shr eax, 0xcf: c1e8cf
movsxd rdx, edx: 4863d2
rol rdi, 0xde: 48c1c7de
adc rbx, rdx: 4813da
or rax, r9: 490bc1
movzx edx, di: 0fb7d7
mov rsi, rax: 488bf0
lea rbp, [rsp + rcx*2 - 0x2abfc0]: 488dac4c4040d5ff
mov qword ptr [rbp + rcx*2 - 0x2ac100], rsi: 4889b44d003fd5ff
add rdx, rbx: 4803d3
jmp rdx: ffe2

bytecode len: 202 -   4133d2410fc80fb7c581f200dea3bc41c0f8e68bfe4923f0ffc2c1e05ad1c2c1c04c41c1f061f7d24833f9554c895434fc315434fc402af9415ac1e8cf4863d248c1c7de4813da490bc10fb7d7488bf0488dac4c4040d5ff4889b44d003fd5ff4803d3ffe2

block IDs [duplicates]: [360]
['mov ebp, 0x8a21c3ad', 'lea rbp, [rbp*2 - 0x24ff625f]', 'movzx eax, byte ptr [r11]', 'movsx esi, bp', 'ror sil, 0xa4', 'lea rdi, [rbp + 0x133f12b3]', 'lea r11, [r11 + rsi*4 - 0x92fb]', 'jae 0x7ffb729119e3']

bytes: mov ebp, 0x8a21c3ad: bdadc3218a
lea rbp, [rbp*2 - 0x24ff625f]: 488d2c6da19d00db
movzx eax, byte ptr [r11]: 410fb60423
movsx esi, bp: 0fbff5
ror sil, 0xa4: 40c0cea4
lea rdi, [rbp + 0x133f12b3]: 488dbdb3123f13
lea r11, [r11 + rsi*4 - 0x92fb]: 4d8d9cb3056dffff
jae 0x7ffb729119e3: 0f839d26ecff

bytecode len: 92 -   bdadc3218a488d2c6da19d00db410fb604230fbff540c0cea4488dbdb3123f134d8d9cb3056dffff0f839d26ecff

block IDs [duplicates]: [361]
['movsx r8d, si', 'add bpl, r8b', 'xor al, r10b', 'xor al, 0x22', 'mov ecx, edi', 'sub al, 0x38', 'push rsi', 'pop rsi', 'not sil', 'xor al, 0x15', 'xor ebp, r8d', 'jae 0x7ffb72c2c22e']

bytes: movsx r8d, si: 440fbfc6
add bpl, r8b: 4102e8
xor al, r10b: 4132c2
xor al, 0x22: 3422
mov ecx, edi: 8bcf
sub al, 0x38: 2c38
push rsi: 56
pop rsi: 5e
not sil: 40f6d6
xor al, 0x15: 3415
xor ebp, r8d: 4133e8
jae 0x7ffb72c2c22e: 0f83c8ce1d00

bytecode len: 64 -   440fbfc64102e84132c234228bcf2c38565e40f6d634154133e80f83c8ce1d00

block IDs [duplicates]: [362]
['xor ecx, r10d', 'xadd bp, r8w', 'btr di, si', 'lea ecx, [rcx + rax - 0x2b104328]', 'cdq', 'jb 0x7ffb72aefb2c']

bytes: xor ecx, r10d: 4133ca
xadd bp, r8w: 66440fc1c5
btr di, si: 660fb3f7
lea ecx, [rcx + rax - 0x2b104328]: 8d8c01d8bcefd4
cdq: 99
jb 0x7ffb72aefb2c: 0f822fc8f8ff

bytecode len: 52 -   4133ca66440fc1c5660fb3f78d8c01d8bcefd4990f822fc8f8ff

block IDs [duplicates]: [363]
['bswap ecx', 'neg ecx', 'neg rax', 'neg rdx', 'sub bp, 0xa12b', 'adc ecx, edx', 'add ax, r8w', 'bts di, dx', 'cmovb edx, r8d', 'push r10', 'call 0x7ffb72d38732']

bytes: bswap ecx: 0fc9
neg ecx: f7d9
neg rax: 48f7d8
neg rdx: 48f7da
sub bp, 0xa12b: 6681ed2ba1
adc ecx, edx: 13ca
add ax, r8w: 664103c0
bts di, dx: 660fabd7
cmovb edx, r8d: 410f42d0
push r10: 4152
call 0x7ffb72d38732: e8e28b2400

bytecode len: 72 -   0fc9f7d948f7d848f7da6681ed2ba113ca664103c0660fabd7410f42d04152e8e28b2400

block IDs [duplicates]: [364]
['and r8d, eax', 'xor r8, rdx', 'rol eax, 0xb2', 'btr eax, edi', 'call 0x7ffb7299b2fd']

bytes: and r8d, eax: 4423c0
xor r8, rdx: 4c33c2
rol eax, 0xb2: c1c0b2
btr eax, edi: 0fb3f8
call 0x7ffb7299b2fd: e8d4b2feff

bytecode len: 34 -   4423c04c33c2c1c0b20fb3f8e8d4b2feff

block IDs [duplicates]: [365]
['movzx eax, byte ptr [r11 + rcx*2 - 0x400005]', 'mov qword ptr [rsp + rdi + 0x1fc8ea6b], rcx', 'mov edx, ecx', 'cmovb edx, edi', 'xor al, r10b', 'xor rdx, rdi', 'call 0x7ffb72ac31ec']

bytes: movzx eax, byte ptr [r11 + rcx*2 - 0x400005]: 410fb6844bfbffbfff
mov qword ptr [rsp + rdi + 0x1fc8ea6b], rcx: 48898c3c6beac81f
mov edx, ecx: 8bd1
cmovb edx, edi: 0f42d7
xor al, r10b: 4132c2
xor rdx, rdi: 4833d7
call 0x7ffb72ac31ec: e8ce7e1200

bytecode len: 66 -   410fb6844bfbffbfff48898c3c6beac81f8bd10f42d74132c24833d7e8ce7e1200

block IDs [duplicates]: [366]
['rol al, 1', 'inc al', 'mov qword ptr [rsp + rcx*2 - 0x3ffffe], -0x6ac4d86e', 'movzx esi, byte ptr [rsp + rdi + 0x1fc8ea77]', 'xadd esi, edx', 'xor al, 0x1a', 'bts rdx, rcx', 'sbb al, 0x91', 'shl di, 0xc5', 'rol di, cl', 'xor r10b, al', 'push rdx', 'lea rax, [rsp + rax + 0x20]', 'bts edi, 0x8b', 'mov qword ptr [rsp + rcx*4 - 0x800004], 0x11a5b60f', 'adc sil, byte ptr [rsp + rcx*2 - 0x3fffed]', 'mov qword ptr [rax + rcx*2 - 0x400006], r8', 'mov eax, dword ptr [rcx + r11 - 0x200001]', 'lea r11, [r11 + rcx - 0x1ffffd]', 'shr rcx, 0xed', 'and rsi, 0xb2af484', 'xor eax, r10d', 'movzx r8d, byte ptr [rsp + rcx + 0x18]', 'neg eax', 'dec eax', 'neg eax', 'btc rdi, rsi', 'ror di, 0xe1', 'rol word ptr [rsp + rcx + 0x1e], 0xe4', 'bswap eax', 'or edx, 0x3d06921e', 'or di, 0x4e8f', 'lea eax, [rax + rcx*8 + 0x57301ebc]', 'call 0x7ffb72d07de2']

bytes: rol al, 1: d0c0
inc al: fec0
mov qword ptr [rsp + rcx*2 - 0x3ffffe], -0x6ac4d86e: 48c7844c0200c0ff92273b95
movzx esi, byte ptr [rsp + rdi + 0x1fc8ea77]: 0fb6b43c77eac81f
xadd esi, edx: 0fc1d6
xor al, 0x1a: 341a
bts rdx, rcx: 480fabca
sbb al, 0x91: 1c91
shl di, 0xc5: 66c1e7c5
rol di, cl: 66d3c7
xor r10b, al: 4432d0
push rdx: 52
lea rax, [rsp + rax + 0x20]: 488d440420
bts edi, 0x8b: 0fbaef8b
mov qword ptr [rsp + rcx*4 - 0x800004], 0x11a5b60f: 48c7848cfcff7fff0fb6a511
adc sil, byte ptr [rsp + rcx*2 - 0x3fffed]: 4012b44c1300c0ff
mov qword ptr [rax + rcx*2 - 0x400006], r8: 4c898448faffbfff
mov eax, dword ptr [rcx + r11 - 0x200001]: 428b8419ffffdfff
lea r11, [r11 + rcx - 0x1ffffd]: 4d8d9c0b0300e0ff
shr rcx, 0xed: 48c1e9ed
and rsi, 0xb2af484: 4881e684f42a0b
xor eax, r10d: 4133c2
movzx r8d, byte ptr [rsp + rcx + 0x18]: 440fb6440c18
neg eax: f7d8
dec eax: ffc8
neg eax: f7d8
btc rdi, rsi: 480fbbf7
ror di, 0xe1: 66c1cfe1
rol word ptr [rsp + rcx + 0x1e], 0xe4: 66c1440c1ee4
bswap eax: 0fc8
or edx, 0x3d06921e: 81ca1e92063d
or di, 0x4e8f: 6681cf8f4e
lea eax, [rax + rcx*8 + 0x57301ebc]: 8d84c8bc1e3057
call 0x7ffb72d07de2: e84e4b2400

bytecode len: 328 -   d0c0fec048c7844c0200c0ff92273b950fb6b43c77eac81f0fc1d6341a480fabca1c9166c1e7c566d3c74432d052488d4404200fbaef8b48c7848cfcff7fff0fb6a5114012b44c1300c0ff4c898448faffbfff428b8419ffffdfff4d8d9c0b0300e0ff48c1e9ed4881e684f42a0b4133c2440fb6440c18f7d8ffc8f7d8480fbbf766c1cfe166c1440c1ee40fc881ca1e92063d6681cf8f4e8d84c8bc1e3057e84e4b2400

block IDs [duplicates]: [367]
['mov esi, eax', 'xor dl, r10b', 'mov ebp, eax', 'inc ebp', 'not dl', 'add dl, 0x2e', 'rol dl, 1', 'call 0x7ffb72d80223']

bytes: mov esi, eax: 8bf0
xor dl, r10b: 4132d2
mov ebp, eax: 8be8
inc ebp: ffc5
not dl: f6d2
add dl, 0x2e: 80c22e
rol dl, 1: d0c2
call 0x7ffb72d80223: e8a2ca2c00

bytecode len: 42 -   8bf04132d28be8ffc5f6d280c22ed0c2e8a2ca2c00

block IDs [duplicates]: [368]
['mov ecx, 0x27a7a481', 'movsx esi, cx', 'shr esi, 0xd9', 'movsx edi, cx', 'lea r8, [rcx - 0x6bd804c8]', 'xor esi, 0x8b86f29', 'adc cl, r8b', 'inc edi', 'lea edx, [rcx + rdx + 0x2a8c504c]', 'or edi, esi', 'ja 0x7ffb72c4d2fe']

bytes: mov ecx, 0x27a7a481: b981a4a727
movsx esi, cx: 0fbff1
shr esi, 0xd9: c1eed9
movsx edi, cx: 0fbff9
lea r8, [rcx - 0x6bd804c8]: 4c8d8138fb2794
xor esi, 0x8b86f29: 81f6296fb808
adc cl, r8b: 4112c8
inc edi: ffc7
lea edx, [rcx + rdx + 0x2a8c504c]: 8d94114c508c2a
or edi, esi: 0bfe
ja 0x7ffb72c4d2fe: 0f87b6d02100

bytecode len: 94 -   b981a4a7270fbff1c1eed90fbff94c8d8138fb279481f6296fb8084112c8ffc78d94114c508c2a0bfe0f87b6d02100

block IDs [duplicates]: [369]
['and rdx, 0xffffffffcd36bfb6', 'mov esi, dword ptr [rdx + r9 - 0x10a2]', 'not r8d', 'shl ecx, cl', 'push rcx', 'not esi', 'cwd', 'setbe dl', 'or r8d, esi', 'mov eax, r8d', 'mov edx, dword ptr [rdx + r9 - 0xfef9]', 'neg edi', 'lea rsi, [rdi*4 + 0x193e6280]', 'not eax', 'pop r8', 'sal rdi, 0xf3', 'mov qword ptr [rsp + rbp - 0x10ee], rbp', 'not edx', 'or eax, edx', 'neg bpl', 'mov dword ptr [r9 + rbp - 0x100a], eax', 'setnp r8b', 'lea r9, [rbp + r9 - 0x100a]', 'bts rbp, 0x28', 'movsx edx, word ptr [rsp + rsi - 0x193e63b9]', 'shl dword ptr [rsp + rsi - 0x193e63bb], 0x30', 'mov qword ptr [rsp + rsi*4 - 0x64f98ef0], rbx', 'ret']

bytes: and rdx, 0xffffffffcd36bfb6: 4881e2b6bf36cd
mov esi, dword ptr [rdx + r9 - 0x10a2]: 428bb40a5eefffff
not r8d: 41f7d0
shl ecx, cl: d3e1
push rcx: 51
not esi: f7d6
cwd: 6699
setbe dl: 0f96c2
or r8d, esi: 440bc6
mov eax, r8d: 418bc0
mov edx, dword ptr [rdx + r9 - 0xfef9]: 428b940a0701ffff
neg edi: f7df
lea rsi, [rdi*4 + 0x193e6280]: 488d34bd80623e19
not eax: f7d0
pop r8: 4158
sal rdi, 0xf3: 48c1f7f3
mov qword ptr [rsp + rbp - 0x10ee], rbp: 4889ac2c12efffff
not edx: f7d2
or eax, edx: 0bc2
neg bpl: 40f6dd
mov dword ptr [r9 + rbp - 0x100a], eax: 41898429f6efffff
setnp r8b: 410f9bc0
lea r9, [rbp + r9 - 0x100a]: 4e8d8c0df6efffff
bts rbp, 0x28: 480fbaed28
movsx edx, word ptr [rsp + rsi - 0x193e63b9]: 0fbf9434479cc1e6
shl dword ptr [rsp + rsi - 0x193e63bb], 0x30: c1a434459cc1e630
mov qword ptr [rsp + rsi*4 - 0x64f98ef0], rbx: 48899cb41071069b
ret: c3

bytecode len: 250 -   4881e2b6bf36cd428bb40a5eefffff41f7d0d3e151f7d666990f96c2440bc6418bc0428b940a0701fffff7df488d34bd80623e19f7d0415848c1f7f34889ac2c12effffff7d20bc240f6dd41898429f6efffff410f9bc04e8d8c0df6efffff480fbaed280fbf9434479cc1e6c1a434459cc1e63048899cb41071069bc3

block IDs [duplicates]: [370]
['adc byte ptr [rsp + rsi - 0x38], al', 'and dl, cl', 'mov word ptr [r9 + rsi*8 - 0x1e6], dx', 'cbw', 'not rbp', 'mov edi, dword ptr [r11 + rsi*2 - 0x7a]', 'xor edi, r10d', 'lea rcx, [rsi + rsi*2 - 0x5664d6ee]', 'lea edi, [rdi + rcx - 0x3bcf2b56]', 'push rbp', 'mov qword ptr [rsp + rsi*2 - 0x72], r8', 'rol edi, 3', 'inc edi', 'movzx edx, byte ptr [rsp + rsi - 0x37]', 'xchg byte ptr [rsp + rsi*2 - 0x77], ah', 'rol edi, 1', 'xadd byte ptr [rsp + rsi*4 - 0xf0], ah', 'not dx', 'mov qword ptr [rsp + rsi - 0x35], r10', 'xor dword ptr [rsp + rsi*2 - 0x72], edi', 'mov r10, qword ptr [rsp + rsi*2 - 0x72]', 'pop r8', 'mov qword ptr [rsp + rsi*2 - 0x7a], rsi', 'push rcx', 'movsxd rdi, edi', 'ror qword ptr [rsp + rsi - 0x38], cl', 'add rbx, rdi', 'sal qword ptr [rsp + rsi - 0x35], cl', 'dec qword ptr [rsp + rsi - 0x39]', 'mov r8w, word ptr [rsi + r9 - 0x3b]', 'lea r9, [r9 + rbp + 0x42]', 'sal dx, 0x42', 'movsx edi, bpl', 'movzx eax, byte ptr [r11 + rsi*2 - 0x76]', 'push rsi', 'push rdi', 'shr rdi, 0x58', 'lea r11, [rsi + r11 - 0x38]', 'shl dil, 0xe1', 'adc rbp, rsi', 'xor al, r10b', 'dec al', 'btr di, 0x99', 'rol al, 1', 'sub al, 0x30', 'neg al', 'sub dword ptr [rsp + rbp], ebp', 'jle 0x7ffb728b12c1']

bytes: adc byte ptr [rsp + rsi - 0x38], al: 104434c8
and dl, cl: 22d1
mov word ptr [r9 + rsi*8 - 0x1e6], dx: 66418994f11afeffff
cbw: 6698
not rbp: 48f7d5
mov edi, dword ptr [r11 + rsi*2 - 0x7a]: 418b7c7386
xor edi, r10d: 4133fa
lea rcx, [rsi + rsi*2 - 0x5664d6ee]: 488d8c7612299ba9
lea edi, [rdi + rcx - 0x3bcf2b56]: 8dbc0faad430c4
push rbp: 55
mov qword ptr [rsp + rsi*2 - 0x72], r8: 4c8944748e
rol edi, 3: c1c703
inc edi: ffc7
movzx edx, byte ptr [rsp + rsi - 0x37]: 0fb65434c9
xchg byte ptr [rsp + rsi*2 - 0x77], ah: 86647489
rol edi, 1: d1c7
xadd byte ptr [rsp + rsi*4 - 0xf0], ah: 0fc0a4b410ffffff
not dx: 66f7d2
mov qword ptr [rsp + rsi - 0x35], r10: 4c895434cb
xor dword ptr [rsp + rsi*2 - 0x72], edi: 317c748e
mov r10, qword ptr [rsp + rsi*2 - 0x72]: 4c8b54748e
pop r8: 4158
mov qword ptr [rsp + rsi*2 - 0x7a], rsi: 4889747486
push rcx: 51
movsxd rdi, edi: 4863ff
ror qword ptr [rsp + rsi - 0x38], cl: 48d34c34c8
add rbx, rdi: 4803df
sal qword ptr [rsp + rsi - 0x35], cl: 48d37434cb
dec qword ptr [rsp + rsi - 0x39]: 48ff4c34c7
mov r8w, word ptr [rsi + r9 - 0x3b]: 66468b440ec5
lea r9, [r9 + rbp + 0x42]: 4d8d4c2942
sal dx, 0x42: 66c1f242
movsx edi, bpl: 400fbefd
movzx eax, byte ptr [r11 + rsi*2 - 0x76]: 410fb644738a
push rsi: 56
push rdi: 57
shr rdi, 0x58: 48c1ef58
lea r11, [rsi + r11 - 0x38]: 4e8d5c1ec8
shl dil, 0xe1: 40c0e7e1
adc rbp, rsi: 4813ee
xor al, r10b: 4132c2
dec al: fec8
btr di, 0x99: 660fbaf799
rol al, 1: d0c0
sub al, 0x30: 2c30
neg al: f6d8
sub dword ptr [rsp + rbp], ebp: 292c2c
jle 0x7ffb728b12c1: 0f8e2888dfff

bytecode len: 374 -   104434c822d166418994f11afeffff669848f7d5418b7c73864133fa488d8c7612299ba98dbc0faad430c4554c8944748ec1c703ffc70fb65434c986647489d1c70fc0a4b410ffffff66f7d24c895434cb317c748e4c8b54748e41584889747486514863ff48d34c34c84803df48d37434cb48ff4c34c766468b440ec54d8d4c294266c1f242400fbefd410fb644738a565748c1ef584e8d5c1ec840c0e7e14813ee4132c2fec8660fbaf799d0c02c30f6d8292c2c0f8e2888dfff

block IDs [duplicates]: [371]
['push rsi', 'xor r10b, al', 'lea rax, [rsp + rax + 0x28]', 'mov byte ptr [rax + rsi*2 - 0x7a], r8b', 'add rbp, qword ptr [rsp + rsi - 0x1d]', 'shl edx, 0xeb', 'mov qword ptr [rsp + rsi - 0x3d], rbx', 'ret 0x20']

bytes: push rsi: 56
xor r10b, al: 4432d0
lea rax, [rsp + rax + 0x28]: 488d440428
mov byte ptr [rax + rsi*2 - 0x7a], r8b: 4488447086
add rbp, qword ptr [rsp + rsi - 0x1d]: 48036c34e3
shl edx, 0xeb: c1e2eb
mov qword ptr [rsp + rsi - 0x3d], rbx: 48895c34c3
ret 0x20: c22000

bytecode len: 60 -   564432d0488d440428448844708648036c34e3c1e2eb48895c34c3c22000

block IDs [duplicates]: [372]
['xor r10b, al', 'mov qword ptr [rsp + r8 - 1], rsi', 'xor rdi, qword ptr [rsp + r8*8 - 8]', 'ror word ptr [rsp + r8], 0x6b', 'lea rax, [rsp + rax + 8]', 'and rbp, rbp', 'jnp 0x7ffb72c4718d']

bytes: xor r10b, al: 4432d0
mov qword ptr [rsp + r8 - 1], rsi: 4a897404ff
xor rdi, qword ptr [rsp + r8*8 - 8]: 4a337cc4f8
ror word ptr [rsp + r8], 0x6b: 6642c10c046b
lea rax, [rsp + rax + 8]: 488d440408
and rbp, rbp: 4823ed
jnp 0x7ffb72c4718d: 0f8b23270d00

bytecode len: 66 -   4432d04a897404ff4a337cc4f86642c10c046b488d4404084823ed0f8b23270d00

block IDs [duplicates]: [373]
['mov dword ptr [rax + r8 - 1], edx', 'ja 0x7ffb729a33c6']

bytes: mov dword ptr [rax + r8 - 1], edx: 42895400ff
ja 0x7ffb729a33c6: 0f8751e9e2ff

bytecode len: 22 -   42895400ff0f8751e9e2ff

block IDs [duplicates]: [374]
['xchg qword ptr [rsp + r8 - 1], rbp', 'ja 0x7ffb72b84fca']

bytes: xchg qword ptr [rsp + r8 - 1], rbp: 4a876c04ff
ja 0x7ffb72b84fca: 0f87f91b1e00

bytecode len: 22 -   4a876c04ff0f87f91b1e00

block IDs [duplicates]: [375]
['mov eax, dword ptr [r11 + r8*8 - 7]', 'rol r8w, 0x88', 'lea rdx, [rsi*2 - 0xc5a6174]', 'or bpl, sil', 'xor eax, r10d', 'dec dword ptr [rsp + r8 - 0xfc]', 'lea eax, [rax + rdi*2 - 0x20dd378]', 'btc r8, rdx', 'push rbp', 'bswap eax', 'neg eax', 'xor sil, sil', 'bswap eax', 'inc eax', 'mov qword ptr [rsp + r8*2 - 0x20001f8], r10', 'xor dword ptr [rsp + r8 - 0x10000f8], eax', 'dec bp', 'mov r10, qword ptr [rsp + r8*8 - 0x80007f8]', 'jge 0x7ffb729b29d0']

bytes: mov eax, dword ptr [r11 + r8*8 - 7]: 438b44c3f9
rol r8w, 0x88: 6641c1c088
lea rdx, [rsi*2 - 0xc5a6174]: 488d14758c9ea5f3
or bpl, sil: 400aee
xor eax, r10d: 4133c2
dec dword ptr [rsp + r8 - 0xfc]: 42ff8c0404ffffff
lea eax, [rax + rdi*2 - 0x20dd378]: 8d8478882cf2fd
btc r8, rdx: 490fbbd0
push rbp: 55
bswap eax: 0fc8
neg eax: f7d8
xor sil, sil: 4032f6
bswap eax: 0fc8
inc eax: ffc0
mov qword ptr [rsp + r8*2 - 0x20001f8], r10: 4e89944408fefffd
xor dword ptr [rsp + r8 - 0x10000f8], eax: 4231840408fffffe
dec bp: 66ffcd
mov r10, qword ptr [rsp + r8*8 - 0x80007f8]: 4e8b94c408f8fff7
jge 0x7ffb729b29d0: 0f8da4d9e2ff

bytecode len: 176 -   438b44c3f96641c1c088488d14758c9ea5f3400aee4133c242ff8c0404ffffff8d8478882cf2fd490fbbd0550fc8f7d84032f60fc8ffc04e89944408fefffd4231840408fffffe66ffcd4e8b94c408f8fff70f8da4d9e2ff

block IDs [duplicates]: [376]
['mov qword ptr [rsp + r8*8 - 0x80007f8], rsi', 'mov dword ptr [r9 + r8 - 0x1000100], eax', 'ror qword ptr [rsp + r8*2 - 0x20001f8], 0x4b', 'shl si, 0x87', 'mov rax, qword ptr [r11 + r8 - 0x10000fb]', 'xor rax, r10', 'xadd cx, bp', 'call 0x7ffb72c1a846']

bytes: mov qword ptr [rsp + r8*8 - 0x80007f8], rsi: 4a89b4c408f8fff7
mov dword ptr [r9 + r8 - 0x1000100], eax: 4389840100fffffe
ror qword ptr [rsp + r8*2 - 0x20001f8], 0x4b: 4ac18c4408fefffd4b
shl si, 0x87: 66c1e687
mov rax, qword ptr [r11 + r8 - 0x10000fb]: 4b8b840305fffffe
xor rax, r10: 4933c2
xadd cx, bp: 660fc1e9
call 0x7ffb72c1a846: e8e6570900

bytecode len: 98 -   4a89b4c408f8fff74389840100fffffe4ac18c4408fefffd4b66c1e6874b8b840305fffffe4933c2660fc1e9e8e6570900

block IDs [duplicates]: [377]
['ror esi, 1', 'mov qword ptr [rsp + r8*8 - 0x2000000], 0x13001993', 'pop rbp', 'inc esi', 'shl qword ptr [rsp + r8*4 - 0x1000000], 0xa4', 'rol r8b, cl', 'mov qword ptr [rsp + r8*4 - 0x1000000], r10', 'movsx r10d, dil', 'mov eax, 0x13843815', 'not edi', 'xor dword ptr [rsp + r8*4 - 0x1000000], esi', 'or rbp, rcx', 'jge 0x7ffb72bb9bb0']

bytes: ror esi, 1: d1ce
mov qword ptr [rsp + r8*8 - 0x2000000], 0x13001993: 4ac784c4000000fe93190013
pop rbp: 5d
inc esi: ffc6
shl qword ptr [rsp + r8*4 - 0x1000000], 0xa4: 4ac1a484000000ffa4
rol r8b, cl: 41d2c0
mov qword ptr [rsp + r8*4 - 0x1000000], r10: 4e899484000000ff
movsx r10d, dil: 440fbed7
mov eax, 0x13843815: b815388413
not edi: f7d7
xor dword ptr [rsp + r8*4 - 0x1000000], esi: 4231b484000000ff
or rbp, rcx: 480be9
jge 0x7ffb72bb9bb0: 0f8d8cf02e00

bytecode len: 130 -   d1ce4ac784c4000000fe931900135dffc64ac1a484000000ffa441d2c04e899484000000ff440fbed7b815388413f7d74231b484000000ff480be90f8d8cf02e00

block IDs [duplicates]: [378]
['neg esi', 'sar word ptr [rsp + rbp - 0x14f3], 0x44', 'lea esi, [rsi + rbp*4 - 0x4aa0b124]', 'lea r8, [rcx - 0xd499871]', 'bswap esi', 'neg cl', 'mov qword ptr [rsp + r8*2 + 0x1a921612], r10', 'xor dword ptr [rsp + r8 + 0xd490b11], esi', 'shl dword ptr [rsp + r8*4 + 0x35242c10], cl', 'mov r10, qword ptr [rsp + r8*4 + 0x35242c14]', 'pop rbp', 'adc rbp, 0x18e6d', 'jmp rbp']

bytes: neg esi: f7de
sar word ptr [rsp + rbp - 0x14f3], 0x44: 66c1bc2c0debffff44
lea esi, [rsi + rbp*4 - 0x4aa0b124]: 8db4aedc4e5fb5
lea r8, [rcx - 0xd499871]: 4c8d818f67b6f2
bswap esi: 0fce
neg cl: f6d9
mov qword ptr [rsp + r8*2 + 0x1a921612], r10: 4e8994441216921a
xor dword ptr [rsp + r8 + 0xd490b11], esi: 4231b404110b490d
shl dword ptr [rsp + r8*4 + 0x35242c10], cl: 42d3a484102c2435
mov r10, qword ptr [rsp + r8*4 + 0x35242c14]: 4e8b9484142c2435
pop rbp: 5d
adc rbp, 0x18e6d: 4881d56d8e0100
jmp rbp: ffe5

bytecode len: 142 -   f7de66c1bc2c0debffff448db4aedc4e5fb54c8d818f67b6f20fcef6d94e8994441216921a4231b404110b490d42d3a484102c24354e8b9484142c24355d4881d56d8e0100ffe5

block IDs [duplicates]: [379]
['call 0x7ffb72d1b0cd']

bytes: call 0x7ffb72d1b0cd: e86bb52800

bytecode len: 10 -   e86bb52800

block IDs [duplicates]: [380]
['xor eax, r10d', 'mov r8d, 0x5183adb8', 'movsx ebp, r8w', 'lea eax, [rax + r8 - 0x39757184]', 'mov qword ptr [rsp + r8 - 0x5183adb8], 0x480f5ba9', 'rol word ptr [rsp + r8 - 0x5183adb7], 0x4e', 'pop rcx', 'neg eax', 'lea rsi, [rbp + rcx*8 - 0x436f074c]', 'dec eax', 'sub rbp, 0x18af0730', 'mov qword ptr [rsp + r8 - 0x5183adb8], rsi', 'lea rdx, [rsi + rbp*4 - 0x74d6f6da]', 'not eax', 'btc rbp, rdx', 'call 0x7ffb72c4e259']

bytes: xor eax, r10d: 4133c2
mov r8d, 0x5183adb8: 41b8b8ad8351
movsx ebp, r8w: 410fbfe8
lea eax, [rax + r8 - 0x39757184]: 428d84007c8e8ac6
mov qword ptr [rsp + r8 - 0x5183adb8], 0x480f5ba9: 4ac7840448527caea95b0f48
rol word ptr [rsp + r8 - 0x5183adb7], 0x4e: 6642c1840449527cae4e
pop rcx: 59
neg eax: f7d8
lea rsi, [rbp + rcx*8 - 0x436f074c]: 488db4cdb4f890bc
dec eax: ffc8
sub rbp, 0x18af0730: 4881ed3007af18
mov qword ptr [rsp + r8 - 0x5183adb8], rsi: 4a89b40448527cae
lea rdx, [rsi + rbp*4 - 0x74d6f6da]: 488d94ae2609298b
not eax: f7d0
btc rbp, rdx: 480fbbd5
call 0x7ffb72c4e259: e89cb50a00

bytecode len: 180 -   4133c241b8b8ad8351410fbfe8428d84007c8e8ac64ac7840448527caea95b0f486642c1840449527cae4e59f7d8488db4cdb4f890bcffc84881ed3007af184a89b40448527cae488d94ae2609298bf7d0480fbbd5e89cb50a00

block IDs [duplicates]: [381]
['mov r8d, dword ptr [r11]', 'mov edi, 0xf2093502', 'mov esi, edi', 'lea rcx, [rdi + rsi*8 + 0x6091f12c]', 'xor r8d, r10d', 'bswap r8d', 'xchg al, dil', 'lea r8d, [r8 + rax - 0x335012d5]', 'add ecx, eax', 'ror r8d, 1', 'mov ebp, 0x1b836710', 'or rdi, rsi', 'call 0x7ffb72d889e2']

bytes: mov r8d, dword ptr [r11]: 458b03
mov edi, 0xf2093502: bf023509f2
mov esi, edi: 8bf7
lea rcx, [rdi + rsi*8 + 0x6091f12c]: 488d8cf72cf19160
xor r8d, r10d: 4533c2
bswap r8d: 410fc8
xchg al, dil: 4086f8
lea r8d, [r8 + rax - 0x335012d5]: 458d84002bedafcc
add ecx, eax: 03c8
ror r8d, 1: 41d1c8
mov ebp, 0x1b836710: bd1067831b
or rdi, rsi: 480bfe
call 0x7ffb72d889e2: e8af0b3000

bytecode len: 106 -   458b03bf023509f28bf7488d8cf72cf191604533c2410fc84086f8458d84002bedafcc03c841d1c8bd1067831b480bfee8af0b3000

block IDs [duplicates]: [382]
['mov r10, qword ptr [rsp + rcx - 0xd4edfc]', 'movsxd r8, r8d', 'cdqe', 'pop rdx', 'add rbx, r8', 'cdq', 'mov edi, dword ptr [r9 + rcx - 0xd4ee04]', 'movzx r8d, byte ptr [r11 + rax*2 + 0x1bed9600]', 'neg cx', 'dec sil', 'xor r8b, r10b', 'ror r8b, 1', 'xor r8b, dl', 'mov qword ptr [rsp + rcx*2 - 0x1a823f8], rax', 'add r8b, sil', 'ror r8b, 1', 'inc dx', 'cwde', 'xor r8b, 0xac', 'rol rcx, 0x10', 'rol r8b, 1', 'call 0x7ffb72e82dab']

bytes: mov r10, qword ptr [rsp + rcx - 0xd4edfc]: 4c8b940c04122bff
movsxd r8, r8d: 4d63c0
cdqe: 4898
pop rdx: 5a
add rbx, r8: 4903d8
cdq: 99
mov edi, dword ptr [r9 + rcx - 0xd4ee04]: 418bbc09fc112bff
movzx r8d, byte ptr [r11 + rax*2 + 0x1bed9600]: 450fb684430096ed1b
neg cx: 66f7d9
dec sil: 40fece
xor r8b, r10b: 4532c2
ror r8b, 1: 41d0c8
xor r8b, dl: 4432c2
mov qword ptr [rsp + rcx*2 - 0x1a823f8], rax: 4889844c08dc57fe
add r8b, sil: 4402c6
ror r8b, 1: 41d0c8
inc dx: 66ffc2
cwde: 98
xor r8b, 0xac: 4180f0ac
rol rcx, 0x10: 48c1c110
rol r8b, 1: 41d0c0
call 0x7ffb72e82dab: e87b7f2d00

bytecode len: 168 -   4c8b940c04122bff4d63c048985a4903d899418bbc09fc112bff450fb684430096ed1b66f7d940fece4532c241d0c84432c24889844c08dc57fe4402c641d0c866ffc2984180f0ac48c1c11041d0c0e87b7f2d00

block IDs [duplicates]: [383]
['lea rcx, [rax + rdx + 0x3f8a6c3f]', 'mov qword ptr [rsp + rax*2], rcx', 'pop rax', 'pop rsi', 'dec rdx', 'lea rdx, [rsp + rdx - 0x2021fab8]', 'call 0x7ffb72bb57d1']

bytes: lea rcx, [rax + rdx + 0x3f8a6c3f]: 488d8c103f6c8a3f
mov qword ptr [rsp + rax*2], rcx: 48890c44
pop rax: 58
pop rsi: 5e
dec rdx: 48ffca
lea rdx, [rsp + rdx - 0x2021fab8]: 488d94144805dedf
call 0x7ffb72bb57d1: e87e900e00

bytecode len: 60 -   488d8c103f6c8a3f48890c44585e48ffca488d94144805dedfe87e900e00

block IDs [duplicates]: [384]
['mov rsi, qword ptr [r9]', 'mov ecx, 0x4b05383f', 'movzx eax, cl', 'mov rcx, qword ptr [r9 + rax - 0x37]', 'mov r8d, 0x6b61b93', 'call 0x7ffb72bf81de']

bytes: mov rsi, qword ptr [r9]: 498b31
mov ecx, 0x4b05383f: b93f38054b
movzx eax, cl: 0fb6c1
mov rcx, qword ptr [r9 + rax - 0x37]: 498b4c01c9
mov r8d, 0x6b61b93: 41b8931bb606
call 0x7ffb72bf81de: e862ff0500

bytecode len: 54 -   498b31b93f38054b0fb6c1498b4c01c941b8931bb606e862ff0500

block IDs [duplicates]: [385]
['sub sil, r8b', 'xor dword ptr [rsp + rax - 0x3f], edx', 'inc al', 'movsx ebp, ax', 'pop r10', 'movsxd rdx, edx', 'lea rcx, [rbp + rdi + 0x3b45f88]', 'add rbx, rdx', 'mov rdi, qword ptr [rax + r11 - 0x3c]', 'lea r11, [r11 + rax - 0x34]', 'xor rdi, r10', 'cdqe', 'shl al, 6', 'inc rbp', 'xor rdi, 0x1195460c', 'lea rdi, [rdi + rax*4 - 0x547c2dd7]', 'call 0x7ffb72da24c0']

bytes: sub sil, r8b: 412af0
xor dword ptr [rsp + rax - 0x3f], edx: 315404c1
inc al: fec0
movsx ebp, ax: 0fbfe8
pop r10: 415a
movsxd rdx, edx: 4863d2
lea rcx, [rbp + rdi + 0x3b45f88]: 488d8c3d885fb403
add rbx, rdx: 4803da
mov rdi, qword ptr [rax + r11 - 0x3c]: 4a8b7c18c4
lea r11, [r11 + rax - 0x34]: 4d8d5c03cc
xor rdi, r10: 4933fa
cdqe: 4898
shl al, 6: c0e006
inc rbp: 48ffc5
xor rdi, 0x1195460c: 4881f70c469511
lea rdi, [rdi + rax*4 - 0x547c2dd7]: 488dbc8729d283ab
call 0x7ffb72da24c0: e80f732000

bytecode len: 138 -   412af0315404c1fec00fbfe8415a4863d2488d8c3d885fb4034803da4a8b7c18c44d8d5c03cc4933fa4898c0e00648ffc54881f70c469511488dbc8729d283abe80f732000

block IDs [duplicates]: [401, 401]
['lea r8d, [r8 + rdi - 0x62f26b46]', 'rol r8d, 3', 'cdqe', 'neg dil', 'neg r8d', 'sar word ptr [rsp + rdi - 0x5a36a6c6], 0xc', 'not r8d', 'mov qword ptr [rsp + rax - 0x7810417], r10', 'xor dword ptr [rsp + rdi - 0x5a36a6c7], r8d', 'pop r10', 'movsxd r8, r8d', 'add rbx, r8', 'mov eax, 0x529dcf2f', 'mov rax, qword ptr [rax + r9 - 0x529dcf2f]', 'mov rdx, qword ptr [r9 + 8]', 'mov r8d, 0x7927a78a', 'add rax, rdx', 'mov qword ptr [r9 + r8 - 0x7927a782], rax', 'movsx esi, r8b', 'lea rcx, [rsi*4 + 0x6a3dcfab]', 'mov esi, dword ptr [r8 + r11 - 0x7927a78a]', 'ror r8b, 0x65', 'lea rbp, [rcx - 0x40cd14ff]', 'not r8w', 'lea r11, [r11 + r8 - 0x792758a7]', 'xor esi, r10d', 'sub esi, 0x8bbc50d', 'sal ebp, cl', 'sal cl, 0x61', 'rol esi, 3', 'btr ebp, r8d', 'movzx edx, cl', 'mov eax, 0xd1bb53b3', 'neg esi', 'bts eax, r8d', 'ror eax, 0xab', 'push rax', 'not esi', 'movsx edi, cl', 'and qword ptr [rsp + rdx - 0xa6], rcx', 'mov qword ptr [rsp + r8 - 0x792758ab], r10', 'xor dword ptr [rsp + r8 - 0x792758ab], esi', 'pop r10', 'movsxd rsi, esi', 'lea rcx, [rsi + rsi*8 + 0x509170b5]', 'xor ebp, r10d', 'pop rsi', 'add rsi, -0x124b87', 'jmp rsi']

bytes: lea r8d, [r8 + rdi - 0x62f26b46]: 458d8438ba940d9d
rol r8d, 3: 41c1c003
cdqe: 4898
neg dil: 40f6df
neg r8d: 41f7d8
sar word ptr [rsp + rdi - 0x5a36a6c6], 0xc: 66c1bc3c3a59c9a50c
not r8d: 41f7d0
mov qword ptr [rsp + rax - 0x7810417], r10: 4c899404e9fb7ef8
xor dword ptr [rsp + rdi - 0x5a36a6c7], r8d: 4431843c3959c9a5
pop r10: 415a
movsxd r8, r8d: 4d63c0
add rbx, r8: 4903d8
mov eax, 0x529dcf2f: b82fcf9d52
mov rax, qword ptr [rax + r9 - 0x529dcf2f]: 4a8b8408d13062ad
mov rdx, qword ptr [r9 + 8]: 498b542108
mov r8d, 0x7927a78a: 41b88aa72779
add rax, rdx: 4803c2
mov qword ptr [r9 + r8 - 0x7927a782], rax: 4b8984017e58d886
movsx esi, r8b: 410fbef0
lea rcx, [rsi*4 + 0x6a3dcfab]: 488d0cb5abcf3d6a
mov esi, dword ptr [r8 + r11 - 0x7927a78a]: 438bb4187658d886
ror r8b, 0x65: 41c0c865
lea rbp, [rcx - 0x40cd14ff]: 488da901eb32bf
not r8w: 6641f7d0
lea r11, [r11 + r8 - 0x792758a7]: 4f8d9c0359a7d886
xor esi, r10d: 4133f2
sub esi, 0x8bbc50d: 81ee0dc5bb08
sal ebp, cl: d3f5
sal cl, 0x61: c0f161
rol esi, 3: c1c603
btr ebp, r8d: 440fb3c5
movzx edx, cl: 0fb6d1
mov eax, 0xd1bb53b3: b8b353bbd1
neg esi: f7de
bts eax, r8d: 440fabc0
ror eax, 0xab: c1c8ab
push rax: 50
not esi: f7d6
movsx edi, cl: 0fbef9
and qword ptr [rsp + rdx - 0xa6], rcx: 48218c145affffff
mov qword ptr [rsp + r8 - 0x792758ab], r10: 4e89940455a7d886
xor dword ptr [rsp + r8 - 0x792758ab], esi: 4231b40455a7d886
pop r10: 415a
movsxd rsi, esi: 4863f6
lea rcx, [rsi + rsi*8 + 0x509170b5]: 488d8cf6b5709150
xor ebp, r10d: 4133ea
pop rsi: 5e
add rsi, -0x124b87: 4881c679b4edff
jmp rsi: ffe6

bytecode len: 456 -   458d8438ba940d9d41c1c003489840f6df41f7d866c1bc3c3a59c9a50c41f7d04c899404e9fb7ef84431843c3959c9a5415a4d63c04903d8b82fcf9d524a8b8408d13062ad498b54210841b88aa727794803c24b8984017e58d886410fbef0488d0cb5abcf3d6a438bb4187658d88641c0c865488da901eb32bf6641f7d04f8d9c0359a7d8864133f281ee0dc5bb08d3f5c0f161c1c603440fb3c50fb6d1b8b353bbd1f7de440fabc0c1c8ab50f7d60fbef948218c145affffff4e89940455a7d8864231b40455a7d886415a4863f6488d8cf6b57091504133ea5e4881c679b4edffffe6

block IDs [duplicates]: [387]
['neg r8w', 'call 0x7ffb72db6ff2']

bytes: neg r8w: 6641f7d8
call 0x7ffb72db6ff2: e8d2bd2200

bytecode len: 18 -   6641f7d8e8d2bd2200

block IDs [duplicates]: [388]
['sbb eax, 0xa388371a', 'ror eax, 1', 'neg eax', 'xor edx, ebp', 'lea eax, [rax + rdi - 0x72c6fb58]', 'call 0x7ffb72bf1157']

bytes: sbb eax, 0xa388371a: 1d1a3788a3
ror eax, 1: d1c8
neg eax: f7d8
xor edx, ebp: 33d5
lea eax, [rax + rdi - 0x72c6fb58]: 8d8438a804398d
call 0x7ffb72bf1157: e82d493400

bytecode len: 46 -   1d1a3788a3d1c8f7d833d58d8438a804398de82d493400

block IDs [duplicates]: [389]
['mov edx, dword ptr [r11]', 'add r11, 4', 'mov edi, 0x9f27e08c', 'call 0x7ffb72c164d7']

bytes: mov edx, dword ptr [r11]: 418b13
add r11, 4: 4983c304
mov edi, 0x9f27e08c: bf8ce0279f
call 0x7ffb72c164d7: e8dc452800

bytecode len: 34 -   418b134983c304bf8ce0279fe8dc452800

block IDs [duplicates]: [390]
['sal cx, 0x61', 'mov r8d, edi', 'mov word ptr [r9 + rcx - 0x64e46342], dx', 'btr rcx, r8', 'mov qword ptr [rsp + rcx - 0x64e46350], rcx', 'lea r9, [rcx + r9 - 0x64e46342]', 'mov ebp, edi', 'mov qword ptr [rsp + rcx - 0x64e46350], rbx', 'ret']

bytes: sal cx, 0x61: 66c1f161
mov r8d, edi: 448bc7
mov word ptr [r9 + rcx - 0x64e46342], dx: 6641899409be9c1b9b
btr rcx, r8: 4c0fb3c1
mov qword ptr [rsp + rcx - 0x64e46350], rcx: 48898c0cb09c1b9b
lea r9, [rcx + r9 - 0x64e46342]: 4e8d8c09be9c1b9b
mov ebp, edi: 8bef
mov qword ptr [rsp + rcx - 0x64e46350], rbx: 48899c0cb09c1b9b
ret: c3

bytecode len: 94 -   66c1f161448bc76641899409be9c1b9b4c0fb3c148898c0cb09c1b9b4e8d8c09be9c1b9b8bef48899c0cb09c1b9bc3

block IDs [duplicates]: [391]
['mov ecx, 0xd8859106', 'mov r8d, 0x6ea670bf', 'mov rdi, qword ptr [r9 + r8 - 0x6ea670bf]', 'movsx ebp, cl', 'lea rsi, [r8 + rcx*4 + 0x2d001a91]', 'mov ax, word ptr [rdi + rbp*4 - 0x18]', 'xadd r8w, bp', 'shr sil, 0xa7', 'push rbp', 'mov di, ax', 'call 0x7ffb72d0156c']

bytes: mov ecx, 0xd8859106: b9069185d8
mov r8d, 0x6ea670bf: 41b8bf70a66e
mov rdi, qword ptr [r9 + r8 - 0x6ea670bf]: 4b8bbc01418f5991
movsx ebp, cl: 0fbee9
lea rsi, [r8 + rcx*4 + 0x2d001a91]: 498db488911a002d
mov ax, word ptr [rdi + rbp*4 - 0x18]: 668b44afe8
xadd r8w, bp: 66410fc1e8
shr sil, 0xa7: 40c0eea7
push rbp: 55
mov di, ax: 668bf8
call 0x7ffb72d0156c: e82c021700

bytecode len: 106 -   b9069185d841b8bf70a66e4b8bbc01418f59910fbee9498db488911a002d668b44afe866410fc1e840c0eea755668bf8e82c021700

block IDs [duplicates]: [392]
['inc bpl', 'btc rax, r8', 'xor bpl, 0x19', 'btc rcx, r8', 'sub cx, r8w', 'adc bpl, 0xbd', 'push rsi', 'neg bpl', 'sal dil, 0xc3', 'call 0x7ffb72ede580']

bytes: inc bpl: 40fec5
btc rax, r8: 4c0fbbc0
xor bpl, 0x19: 4080f519
btc rcx, r8: 4c0fbbc1
sub cx, r8w: 66412bc8
adc bpl, 0xbd: 4080d5bd
push rsi: 56
neg bpl: 40f6dd
sal dil, 0xc3: 40c0f7c3
call 0x7ffb72ede580: e849a36200

bytecode len: 72 -   40fec54c0fbbc04080f5194c0fbbc166412bc84080d5bd5640f6dd40c0f7c3e849a36200

block IDs [duplicates]: [393]
['xor dword ptr [rsp + rdi - 0xffb1], edx', 'xchg eax, r8d', 'sal edi, cl', 'pop r10', 'sbb dil, 0xa7', 'btr si, r8w', 'mov ebp, edi', 'movsxd rdx, edx', 'adc r8d, eax', 'jbe 0x7ffb72c6e981']

bytes: xor dword ptr [rsp + rdi - 0xffb1], edx: 31943c4f00ffff
xchg eax, r8d: 4190
sal edi, cl: d3f7
pop r10: 415a
sbb dil, 0xa7: 4080dfa7
btr si, r8w: 66440fb3c6
mov ebp, edi: 8bef
movsxd rdx, edx: 4863d2
adc r8d, eax: 4413c0
jbe 0x7ffb72c6e981: 0f869fa13200

bytecode len: 72 -   31943c4f00ffff4190d3f7415a4080dfa766440fb3c68bef4863d24413c00f869fa13200

block IDs [duplicates]: [394]
['mov dl, byte ptr [r9 + 2]', 'adc dil, dl', 'xadd r8w, bp', 'mov edx, 0xcc233791', 'ja 0x7ffb72cfa182']

bytes: mov dl, byte ptr [r9 + 2]: 418a542102
adc dil, dl: 4012fa
xadd r8w, bp: 66410fc1e8
mov edx, 0xcc233791: ba913723cc
ja 0x7ffb72cfa182: 0f8795c63800

bytecode len: 48 -   418a5421024012fa66410fc1e8ba913723cc0f8795c63800

block IDs [duplicates]: [395]
['dec dword ptr [rsp + r8*2 - 0x8289]', 'ror word ptr [rsp + r8 - 0x4143], 0x6d', 'mov qword ptr [rsp + r8 - 0x4152], rbx', 'ret 0x18']

bytes: dec dword ptr [rsp + r8*2 - 0x8289]: 42ff8c44777dffff
ror word ptr [rsp + r8 - 0x4143], 0x6d: 6642c18c04bdbeffff6d
mov qword ptr [rsp + r8 - 0x4152], rbx: 4a899c04aebeffff
ret 0x18: c21800

bytecode len: 58 -   42ff8c44777dffff6642c18c04bdbeffff6d4a899c04aebeffffc21800

block IDs [duplicates]: [396]
['movsxd rsi, esi', 'adc rbx, rsi', 'mov dl, byte ptr [r11 + rdi + 4]', 'lea r11, [r11 + rdi*8 + 5]', 'push rcx', 'mov esi, ecx', 'dec byte ptr [rsp + rdi + 9]', 'xor dl, r10b', 'xor dl, 0x3f', 'sar qword ptr [rsp + rdi + 8], cl', 'xadd dword ptr [rsp + rdi + 6], ebp', 'adc dl, 0xaf', 'mov qword ptr [rsp + rdi + 0x10], rcx', 'dec word ptr [rsp + rdi*2 + 0xa]', 'not dl', 'or dil, 0xa2', 'ror dl, 1', 'xor dl, 0x2e', 'add dl, 0xb2', 'call 0x7ffb72c72e52']

bytes: movsxd rsi, esi: 4863f6
adc rbx, rsi: 4813de
mov dl, byte ptr [r11 + rdi + 4]: 418a543b04
lea r11, [r11 + rdi*8 + 5]: 4d8d5cfb05
push rcx: 51
mov esi, ecx: 8bf1
dec byte ptr [rsp + rdi + 9]: fe4c3c09
xor dl, r10b: 4132d2
xor dl, 0x3f: 80f23f
sar qword ptr [rsp + rdi + 8], cl: 48d37c3c08
xadd dword ptr [rsp + rdi + 6], ebp: 0fc16c3c06
adc dl, 0xaf: 80d2af
mov qword ptr [rsp + rdi + 0x10], rcx: 48894c3c10
dec word ptr [rsp + rdi*2 + 0xa]: 66ff4c7c0a
not dl: f6d2
or dil, 0xa2: 4080cfa2
ror dl, 1: d0ca
xor dl, 0x2e: 80f22e
add dl, 0xb2: 80c2b2
call 0x7ffb72c72e52: e82a463700

bytecode len: 142 -   4863f64813de418a543b044d8d5cfb05518bf1fe4c3c094132d280f23f48d37c3c080fc16c3c0680d2af48894c3c1066ff4c7c0af6d24080cfa2d0ca80f22e80c2b2e82a463700

block IDs [duplicates]: [419, 419]
['mov eax, 0xd2eba93', 'dec rdx', 'lea rdx, [rsp + rdx - 0x2021fab8]', 'call 0x7ffb72bb57d1']

bytes: mov eax, 0xd2eba93: b893ba2e0d
dec rdx: 48ffca
lea rdx, [rsp + rdx - 0x2021fab8]: 488d94144805dedf
call 0x7ffb72bb57d1: e87e900e00

bytecode len: 42 -   b893ba2e0d48ffca488d94144805dedfe87e900e00

block IDs [duplicates]: [398]
['xor dword ptr [rsp + rax - 4], ecx', 'pop r10', 'sub dx, ax', 'movsxd rcx, ecx', 'bts edx, esi', 'adc rbx, rcx', 'sub rax, rbp', 'sar si, 0x41', 'mov r8d, 0xa3a9c738', 'mov di, word ptr [rax + r9 - 4]', 'jnp 0x7ffb72c21323']

bytes: xor dword ptr [rsp + rax - 4], ecx: 314c04fc
pop r10: 415a
sub dx, ax: 662bd0
movsxd rcx, ecx: 4863c9
bts edx, esi: 0fabf2
adc rbx, rcx: 4813d9
sub rax, rbp: 482bc5
sar si, 0x41: 66c1fe41
mov r8d, 0xa3a9c738: 41b838c7a9a3
mov di, word ptr [rax + r9 - 4]: 66428b7c08fc
jnp 0x7ffb72c21323: 0f8bbba51c00

bytecode len: 86 -   314c04fc415a662bd04863c90fabf24813d9482bc566c1fe4141b838c7a9a366428b7c08fc0f8bbba51c00

block IDs [duplicates]: [399]
['mov r8d, 0x5fa9ac99', 'mov rax, qword ptr [r9 + r8 - 0x5fa9ac99]', 'dec r8d', 'mov cl, byte ptr [r8 + r9 - 0x5fa9ac90]', 'mov edi, r8d', 'shr rax, cl', 'call 0x7ffb72e81f1a']

bytes: mov r8d, 0x5fa9ac99: 41b899aca95f
mov rax, qword ptr [r9 + r8 - 0x5fa9ac99]: 4b8b8401675356a0
dec r8d: 41ffc8
mov cl, byte ptr [r8 + r9 - 0x5fa9ac90]: 438a8c08705356a0
mov edi, r8d: 418bf8
shr rax, cl: 48d3e8
call 0x7ffb72e81f1a: e853d62e00

bytecode len: 72 -   41b899aca95f4b8b8401675356a041ffc8438a8c08705356a0418bf848d3e8e853d62e00

block IDs [duplicates]: [400]
['bswap r8', 'xor r10, r8', 'cdq', 'mov qword ptr [rsp + rcx - 0x57], 0x34aa7612', 'mov qword ptr [rcx + r9 - 0x5d], r8', 'lea rsi, [rdx + rdi*4 + 0x5519d6a6]', 'lea r9, [r9 + rcx - 0x5d]', 'mov r8d, dword ptr [rcx + r11 - 0x4f]', 'bts bp, si', 'sbb byte ptr [rsp + rcx*8 - 0x2ad], ah', 'lea r11, [rcx + r11 - 0x4b]', 'sal eax, 0x8b', 'xor r8d, r10d', 'neg qword ptr [rsp + rcx - 0x51]', 'call 0x7ffb72da5903']

bytes: bswap r8: 490fc8
xor r10, r8: 4d33d0
cdq: 99
mov qword ptr [rsp + rcx - 0x57], 0x34aa7612: 48c7440ca91276aa34
mov qword ptr [rcx + r9 - 0x5d], r8: 4e894409a3
lea rsi, [rdx + rdi*4 + 0x5519d6a6]: 488db4baa6d61955
lea r9, [r9 + rcx - 0x5d]: 4d8d4c09a3
mov r8d, dword ptr [rcx + r11 - 0x4f]: 468b4419b1
bts bp, si: 660fabf5
sbb byte ptr [rsp + rcx*8 - 0x2ad], ah: 18a4cc53fdffff
lea r11, [rcx + r11 - 0x4b]: 4e8d5c19b5
sal eax, 0x8b: c1f08b
xor r8d, r10d: 4533c2
neg qword ptr [rsp + rcx - 0x51]: 48f75c0caf
call 0x7ffb72da5903: e881524300

bytecode len: 142 -   490fc84d33d09948c7440ca91276aa344e894409a3488db4baa6d619554d8d4c09a3468b4419b1660fabf518a4cc53fdffff4e8d5c19b5c1f08b4533c248f75c0cafe881524300

block IDs [duplicates]: [402]
['ror r8w, 0xc6', 'btr r8, rdx', 'sbb ebp, edx', 'xor ebp, 0xb337be9f', 'ror ecx, 3', 'push rcx', 'mov eax, 0x997d818', 'not ebp', 'ror eax, 0xe4', 'inc r8', 'shl dword ptr [rsp + r8 - 0x5071daff], 0x8e', 'xor ebp, 0x71ae42aa', 'or dword ptr [rsp + rdi*2 + 4], edx', 'sbb ax, di', 'jp 0x7ffb7298c8ee']

bytes: ror r8w, 0xc6: 6641c1c8c6
btr r8, rdx: 490fb3d0
sbb ebp, edx: 1bea
xor ebp, 0xb337be9f: 81f59fbe37b3
ror ecx, 3: c1c903
push rcx: 51
mov eax, 0x997d818: b818d89709
not ebp: f7d5
ror eax, 0xe4: c1c8e4
inc r8: 49ffc0
shl dword ptr [rsp + r8 - 0x5071daff], 0x8e: 42c1a40401258eaf8e
xor ebp, 0x71ae42aa: 81f5aa42ae71
or dword ptr [rsp + rdi*2 + 4], edx: 09547c04
sbb ax, di: 661bc7
jp 0x7ffb7298c8ee: 0f8ab261efff

bytecode len: 124 -   6641c1c8c6490fb3d01bea81f59fbe37b3c1c90351b818d89709f7d5c1c8e449ffc042c1a40401258eaf8e81f5aa42ae7109547c04661bc70f8ab261efff

block IDs [duplicates]: [403]
['bswap ebp', 'movsx esi, di', 'add dword ptr [rsp + r8 - 0x5071dafe], edi', 'rol ebp, 2', 'lea ebp, [rbp + r8*2 + 0x2cdb5598]', 'rol ebp, 1', 'bswap ebp', 'and edi, ecx', 'shl word ptr [rsp + r8 - 0x5071dafb], 0x6a', 'ror ebp, 3', 'lea r8, [rcx*8 - 0x1ccdd0f1]', 'dec ebp', 'not qword ptr [rsp + rdi]', 'btc r8d, esi', 'xor esi, ecx', 'mov qword ptr [rsp + r8 - 0x7c363e6], r10', 'bts si, cx', 'xor dword ptr [rsp + r8*2 - 0xf86c7cc], ebp', 'pop r10', 'not si', 'sar edx, cl', 'movsxd rbp, ebp', 'adc rbx, rbp', 'neg edx', 'mov rcx, qword ptr [rdx + r9]', 'lea rbp, [rsi*4 - 0x556f884e]', 'shl r8b, 0xc3', 'mov rax, qword ptr [r9 + rdx*2 + 8]', 'inc dx', 'ror r8, 0xd8', 'not rcx', 'sar r8w, 0xcc', 'sub dil, bpl', 'jb 0x7ffb72c48310']

bytes: bswap ebp: 0fcd
movsx esi, di: 0fbff7
add dword ptr [rsp + r8 - 0x5071dafe], edi: 4201bc0402258eaf
rol ebp, 2: c1c502
lea ebp, [rbp + r8*2 + 0x2cdb5598]: 428dac459855db2c
rol ebp, 1: d1c5
bswap ebp: 0fcd
and edi, ecx: 23f9
shl word ptr [rsp + r8 - 0x5071dafb], 0x6a: 6642c1a40405258eaf6a
ror ebp, 3: c1cd03
lea r8, [rcx*8 - 0x1ccdd0f1]: 4c8d04cd0f2f32e3
dec ebp: ffcd
not qword ptr [rsp + rdi]: 48f7143c
btc r8d, esi: 410fbbf0
xor esi, ecx: 33f1
mov qword ptr [rsp + r8 - 0x7c363e6], r10: 4e8994041a9c3cf8
bts si, cx: 660fabce
xor dword ptr [rsp + r8*2 - 0xf86c7cc], ebp: 4231ac44343879f0
pop r10: 415a
not si: 66f7d6
sar edx, cl: d3fa
movsxd rbp, ebp: 4863ed
adc rbx, rbp: 4813dd
neg edx: f7da
mov rcx, qword ptr [rdx + r9]: 4a8b0c0a
lea rbp, [rsi*4 - 0x556f884e]: 488d2cb5b27790aa
shl r8b, 0xc3: 41c0e0c3
mov rax, qword ptr [r9 + rdx*2 + 8]: 498b445108
inc dx: 66ffc2
ror r8, 0xd8: 49c1c8d8
not rcx: 48f7d1
sar r8w, 0xcc: 6641c1f8cc
sub dil, bpl: 402afd
jb 0x7ffb72c48310: 0f8286b92b00

bytecode len: 286 -   0fcd0fbff74201bc0402258eafc1c502428dac459855db2cd1c50fcd23f96642c1a40405258eaf6ac1cd034c8d04cd0f2f32e3ffcd48f7143c410fbbf033f14e8994041a9c3cf8660fabce4231ac44343879f0415a66f7d6d3fa4863ed4813ddf7da4a8b0c0a488d2cb5b27790aa41c0e0c3498b44510866ffc249c1c8d848f7d16641c1f8cc402afd0f8286b92b00

block IDs [duplicates]: [404]
['not rax', 'btr bp, 0xa4', 'inc dl', 'adc r8d, 0xe30e882', 'or rcx, rax', 'mov qword ptr [r9 + rdx*8 - 8], rcx', 'lea r9, [rdx + r9 + 6]', 'neg rdx', 'jmp rbx']

bytes: not rax: 48f7d0
btr bp, 0xa4: 660fbaf5a4
inc dl: fec2
adc r8d, 0xe30e882: 4181d082e8300e
or rcx, rax: 480bc8
mov qword ptr [r9 + rdx*8 - 8], rcx: 49894cd1f8
lea r9, [rdx + r9 + 6]: 4e8d4c0a06
neg rdx: 48f7da
jmp rbx: ffe3

bytecode len: 70 -   48f7d0660fbaf5a4fec24181d082e8300e480bc849894cd1f84e8d4c0a0648f7daffe3

block IDs [duplicates]: [405]
['xor dword ptr [rsp + rdx*2], esi', 'add di, bp', 'pop r10', 'xadd bp, cx', 'cqo', 'lea rax, [rbp + rbp*4 + 0x549317a4]', 'movsxd rsi, esi', 'btr ebp, edi', 'sar rax, cl', 'jns 0x7ffb7292013b']

bytes: xor dword ptr [rsp + rdx*2], esi: 313454
add di, bp: 6603fd
pop r10: 415a
xadd bp, cx: 660fc1cd
cqo: 4899
lea rax, [rbp + rbp*4 + 0x549317a4]: 488d84ada4179354
movsxd rsi, esi: 4863f6
btr ebp, edi: 0fb3fd
sar rax, cl: 48d3f8
jns 0x7ffb7292013b: 0f8931010700

bytecode len: 74 -   3134546603fd415a660fc1cd4899488d84ada41793544863f60fb3fd48d3f80f8931010700

block IDs [duplicates]: [406]
['adc rbx, rsi', 'mov rdi, qword ptr [rdx + r9 + 8]', 'push rax', 'call 0x7ffb72c61146']

bytes: adc rbx, rsi: 4813de
mov rdi, qword ptr [rdx + r9 + 8]: 4a8b7c0a08
push rax: 50
call 0x7ffb72c61146: e8fd0f3400

bytecode len: 28 -   4813de4a8b7c0a0850e8fd0f3400

block IDs [duplicates]: [407]
['mov ecx, 0x1eb81b2c', 'lea rdi, [rcx + rcx - 0x14d5b7d3]', 'mov ecx, dword ptr [r11 + rcx - 0x1eb81b2c]', 'movsx eax, di', 'xor ecx, r10d', 'bts edi, eax', 'movsx r8d, di', 'neg ecx', 'mov qword ptr [rsp + rdi*2 - 0x5134fd4a], 0x9b64316', 'sub r8, qword ptr [rsp + rdi - 0x289a7ea5]', 'dec ecx', 'neg ecx', 'mov edx, dword ptr [rsp + rdi*2 - 0x5134fd47]', 'not dword ptr [rsp + rdi*2 - 0x5134fd48]', 'bswap ecx', 'add ax, word ptr [rsp + rax*4 - 0x1fa10]', 'mov ebp, 0x23bd19a8', 'shl di, 0x84', 'lea ecx, [rcx + rdi*2 + 0x5fa4a1c]', 'mov qword ptr [rsp + rdi - 0x289aea50], r10', 'inc r8b', 'movsx esi, di', 'xor dword ptr [rsp + rax - 0x7e84], ecx', 'pop r10', 'bts eax, r8d', 'neg bpl', 'bswap esi', 'movsxd rcx, ecx', 'add rbx, rcx', 'mov rdi, qword ptr [r9 + rdi - 0x289aea50]', 'cwde', 'mov ecx, 0xc6318c2f', 'not eax', 'movzx r8d, byte ptr [r11 + rdx*2 - 0xe]', 'push rdx', 'sub dx, 0xc027', 'xor r8b, r10b', 'xor r8b, 0x2a', 'ror r8b, 1', 'sub r8b, sil', 'and bp, dx', 'rol r8b, 1', 'ror dword ptr [rsp + rdx - 0x3fe0], 0xc1', 'adc r8b, 0x93', 'xor r10b, r8b', 'neg rax', 'setno byte ptr [rsp + rdx*4 - 0xff88]', 'lea r8, [rsp + r8 + 8]', 'add word ptr [rsp + rdx*4 - 0xff86], 0x49b9', 'call 0x7ffb72c31e65']

bytes: mov ecx, 0x1eb81b2c: b92c1bb81e
lea rdi, [rcx + rcx - 0x14d5b7d3]: 488dbc092d482aeb
mov ecx, dword ptr [r11 + rcx - 0x1eb81b2c]: 418b8c0bd4e447e1
movsx eax, di: 0fbfc7
xor ecx, r10d: 4133ca
bts edi, eax: 0fabc7
movsx r8d, di: 440fbfc7
neg ecx: f7d9
mov qword ptr [rsp + rdi*2 - 0x5134fd4a], 0x9b64316: 48c7847cb602cbae1643b609
sub r8, qword ptr [rsp + rdi - 0x289a7ea5]: 4c2b843c5b8165d7
dec ecx: ffc9
neg ecx: f7d9
mov edx, dword ptr [rsp + rdi*2 - 0x5134fd47]: 8b947cb902cbae
not dword ptr [rsp + rdi*2 - 0x5134fd48]: f7947cb802cbae
bswap ecx: 0fc9
add ax, word ptr [rsp + rax*4 - 0x1fa10]: 66038484f005feff
mov ebp, 0x23bd19a8: bda819bd23
shl di, 0x84: 66c1e784
lea ecx, [rcx + rdi*2 + 0x5fa4a1c]: 8d8c791c4afa05
mov qword ptr [rsp + rdi - 0x289aea50], r10: 4c89943cb01565d7
inc r8b: 41fec0
movsx esi, di: 0fbff7
xor dword ptr [rsp + rax - 0x7e84], ecx: 318c047c81ffff
pop r10: 415a
bts eax, r8d: 440fabc0
neg bpl: 40f6dd
bswap esi: 0fce
movsxd rcx, ecx: 4863c9
add rbx, rcx: 4803d9
mov rdi, qword ptr [r9 + rdi - 0x289aea50]: 498bbc39b01565d7
cwde: 98
mov ecx, 0xc6318c2f: b92f8c31c6
not eax: f7d0
movzx r8d, byte ptr [r11 + rdx*2 - 0xe]: 450fb64453f2
push rdx: 52
sub dx, 0xc027: 6681ea27c0
xor r8b, r10b: 4532c2
xor r8b, 0x2a: 4180f02a
ror r8b, 1: 41d0c8
sub r8b, sil: 442ac6
and bp, dx: 6623ea
rol r8b, 1: 41d0c0
ror dword ptr [rsp + rdx - 0x3fe0], 0xc1: c18c1420c0ffffc1
adc r8b, 0x93: 4180d093
xor r10b, r8b: 4532d0
neg rax: 48f7d8
setno byte ptr [rsp + rdx*4 - 0xff88]: 0f9184947800ffff
lea r8, [rsp + r8 + 8]: 4e8d440408
add word ptr [rsp + rdx*4 - 0xff86], 0x49b9: 668184947a00ffffb949
call 0x7ffb72c31e65: e877d42100

bytecode len: 462 -   b92c1bb81e488dbc092d482aeb418b8c0bd4e447e10fbfc74133ca0fabc7440fbfc7f7d948c7847cb602cbae1643b6094c2b843c5b8165d7ffc9f7d98b947cb902cbaef7947cb802cbae0fc966038484f005feffbda819bd2366c1e7848d8c791c4afa054c89943cb01565d741fec00fbff7318c047c81ffff415a440fabc040f6dd0fce4863c94803d9498bbc39b01565d798b92f8c31c6f7d0450fb64453f2526681ea27c04532c24180f02a41d0c8442ac66623ea41d0c0c18c1420c0ffffc14180d0934532d048f7d80f9184947800ffff4e8d440408668184947a00ffffb949e877d42100

block IDs [duplicates]: [408]
['setnp byte ptr [rsp + rdx*2 - 0x7fc4]', 'push rsi', 'lea r11, [r11 + rdx*2 - 0x7fbd]', 'not byte ptr [rsp + rdx - 0x3fdc]', 'not eax', 'mov edi, esi', 'xor r8w, r10w', 'btc edx, ebp', 'xchg sil, dil', 'neg si', 'rol r8w, 1', 'and bpl, dil', 'bswap rdi', 'not r8w', 'xor r8w, 0xb1a4', 'dec dx', 'shl word ptr [rsp + rdx - 0x3fe1], 0x25', 'xchg dword ptr [rsp + rdx - 0x3fd6], eax', 'sub r8w, si', 'cbw', 'xor r8w, 0x7b88', 'xor r10w, r8w', 'push rdx', 'lea r8, [rsp + r8 + 0x18]', 'mov qword ptr [r8 + rdx*8 - 0x1ff10], rcx', 'inc dword ptr [rsp + rdx*4 - 0xff83]', 'mov qword ptr [rsp + rdx*2 - 0x7fc4], rbx', 'ret 0x10']

bytes: setnp byte ptr [rsp + rdx*2 - 0x7fc4]: 0f9b84543c80ffff
push rsi: 56
lea r11, [r11 + rdx*2 - 0x7fbd]: 4d8d9c534380ffff
not byte ptr [rsp + rdx - 0x3fdc]: f6941424c0ffff
not eax: f7d0
mov edi, esi: 8bfe
xor r8w, r10w: 664533c2
btc edx, ebp: 0fbbea
xchg sil, dil: 4086fe
neg si: 66f7de
rol r8w, 1: 6641d1c0
and bpl, dil: 4022ef
bswap rdi: 480fcf
not r8w: 6641f7d0
xor r8w, 0xb1a4: 664181f0a4b1
dec dx: 66ffca
shl word ptr [rsp + rdx - 0x3fe1], 0x25: 66c1a4141fc0ffff25
xchg dword ptr [rsp + rdx - 0x3fd6], eax: 8784142ac0ffff
sub r8w, si: 66442bc6
cbw: 6698
xor r8w, 0x7b88: 664181f0887b
xor r10w, r8w: 664533d0
push rdx: 52
lea r8, [rsp + r8 + 0x18]: 4e8d440418
mov qword ptr [r8 + rdx*8 - 0x1ff10], rcx: 49898cd0f000feff
inc dword ptr [rsp + rdx*4 - 0xff83]: ff84947d00ffff
mov qword ptr [rsp + rdx*2 - 0x7fc4], rbx: 48899c543c80ffff
ret 0x10: c21000

bytecode len: 256 -   0f9b84543c80ffff564d8d9c534380fffff6941424c0fffff7d08bfe664533c20fbbea4086fe66f7de6641d1c04022ef480fcf6641f7d0664181f0a4b166ffca66c1a4141fc0ffff258784142ac0ffff66442bc66698664181f0887b664533d0524e8d44041849898cd0f000feffff84947d00ffff48899c543c80ffffc21000

block IDs [duplicates]: [409]
['mov rcx, qword ptr [rdi + rbp - 0x3fad]', 'mov qword ptr [r9 + r8*4 - 0x3ffd4], rcx', 'lea r9, [r9 + rdi - 0x3fbd]', 'xor rax, rsi', 'xor r8w, 0xe202', 'jae 0x7ffb72acc73a']

bytes: mov rcx, qword ptr [rdi + rbp - 0x3fad]: 488b8c2f53c0ffff
mov qword ptr [r9 + r8*4 - 0x3ffd4], rcx: 4b898c812c00fcff
lea r9, [r9 + rdi - 0x3fbd]: 4d8d8c3943c0ffff
xor rax, rsi: 4833c6
xor r8w, 0xe202: 664181f002e2
jae 0x7ffb72acc73a: 0f836175f3ff

bytecode len: 78 -   488b8c2f53c0ffff4b898c812c00fcff4d8d8c3943c0ffff4833c6664181f002e20f836175f3ff

block IDs [duplicates]: [410]
['movzx ecx, byte ptr [r11]', 'xor cl, r10b', 'mov ebp, 0x259de697', 'lea rax, [rbp + rbp*2 + 0x6c880239]', 'neg cl', 'lea rsi, [rax + rax*8 + 0x70a83434]', 'lea rax, [rbp + rbp*2 - 0x4cca4341]', 'rol ax, 0xc6', 'sbb cl, 0xaa', 'push rax', 'neg cl', 'movsx r8d, bpl', 'shl byte ptr [rsp + rbp*2 - 0x4b3bcd29], 0x25', 'inc cl', 'xor r10b, cl', 'lea rcx, [rsp + rcx + 8]', 'xor bpl, sil', 'mov rbp, qword ptr [rcx + rbp - 0x259de6b5]', 'cqo', 'cbw', 'call 0x7ffb72c885ee']

bytes: movzx ecx, byte ptr [r11]: 410fb60b
xor cl, r10b: 4132ca
mov ebp, 0x259de697: bd97e69d25
lea rax, [rbp + rbp*2 + 0x6c880239]: 488d846d3902886c
neg cl: f6d9
lea rsi, [rax + rax*8 + 0x70a83434]: 488db4c03434a870
lea rax, [rbp + rbp*2 - 0x4cca4341]: 488d846dbfbc35b3
rol ax, 0xc6: 66c1c0c6
sbb cl, 0xaa: 80d9aa
push rax: 50
neg cl: f6d9
movsx r8d, bpl: 440fbec5
shl byte ptr [rsp + rbp*2 - 0x4b3bcd29], 0x25: c0a46cd732c4b425
inc cl: fec1
xor r10b, cl: 4432d1
lea rcx, [rsp + rcx + 8]: 488d4c0c08
xor bpl, sil: 4032ee
mov rbp, qword ptr [rcx + rbp - 0x259de6b5]: 488bac294b1962da
cqo: 4899
cbw: 6698
call 0x7ffb72c885ee: e8364b3b00

bytecode len: 180 -   410fb60b4132cabd97e69d25488d846d3902886cf6d9488db4c03434a870488d846dbfbc35b366c1c0c680d9aa50f6d9440fbec5c0a46cd732c4b425fec14432d1488d4c0c084032ee488bac294b1962da48996698e8364b3b00

block IDs [duplicates]: [411]
['and qword ptr [rsp + rax - 0x240f001c], 0xffffffffe0884ca0', 'xor ebp, r10d', 'neg ebp', 'mov r8d, 0x4b053cbd', 'push rsi', 'dec ebp', 'ror ebp, 1', 'dec ebp', 'not eax', 'xchg cx, di', 'mov qword ptr [rsp + rdx - 0xffffff0], r10', 'xor dword ptr [rsp + rdx - 0xffffff0], ebp', 'mov r10, qword ptr [rsp + rdx*4 - 0x3ffffff0]', 'add ecx, edx', 'jne 0x7ffb72de7ed5']

bytes: and qword ptr [rsp + rax - 0x240f001c], 0xffffffffe0884ca0: 4881a404e4fff0dba04c88e0
xor ebp, r10d: 4133ea
neg ebp: f7dd
mov r8d, 0x4b053cbd: 41b8bd3c054b
push rsi: 56
dec ebp: ffcd
ror ebp, 1: d1cd
dec ebp: ffcd
not eax: f7d0
xchg cx, di: 6687f9
mov qword ptr [rsp + rdx - 0xffffff0], r10: 4c899414100000f0
xor dword ptr [rsp + rdx - 0xffffff0], ebp: 31ac14100000f0
mov r10, qword ptr [rsp + rdx*4 - 0x3ffffff0]: 4c8b9494100000c0
add ecx, edx: 03ca
jne 0x7ffb72de7ed5: 0f85e5f24300

bytecode len: 132 -   4881a404e4fff0dba04c88e04133eaf7dd41b8bd3c054b56ffcdd1cdffcdf7d06687f94c899414100000f031ac14100000f04c8b9494100000c003ca0f85e5f24300

block IDs [duplicates]: [412]
['mov ecx, 0x942daa32', 'mov edx, dword ptr [r11]', 'movsx ebp, cx', 'movsx eax, bpl', 'xor edx, r10d', 'push rbp', 'inc edx', 'call 0x7ffb72973ea0']

bytes: mov ecx, 0x942daa32: b932aa2d94
mov edx, dword ptr [r11]: 418b13
movsx ebp, cx: 0fbfe9
movsx eax, bpl: 400fbec5
xor edx, r10d: 4133d2
push rbp: 55
inc edx: ffc2
call 0x7ffb72973ea0: e85f73feff

bytecode len: 52 -   b932aa2d94418b130fbfe9400fbec54133d255ffc2e85f73feff

block IDs [duplicates]: [413]
['neg edx', 'lea rsi, [rcx*4 + 0x6a999ea0]', 'inc edx', 'sub word ptr [rsp + rax - 0x24], si', 'mov qword ptr [rsp + rax*2 - 0x64], rcx', 'xor edx, 0x9321c286', 'movsx r8d, byte ptr [rsp + rax - 0x30]', 'mov qword ptr [rsp + rax*4 - 0xc0], r10', 'sal rax, 0x93', 'shr qword ptr [rsp + rax*8 - 0xc800000], 0x4b', 'and r8d, dword ptr [rsp + rax - 0x18fffff]', 'xor dword ptr [rsp + rax*2 - 0x31ffff8], edx', 'mov r10, qword ptr [rsp + rax*2 - 0x31ffff8]', 'movsxd rdx, edx', 'dec bp', 'mov qword ptr [rsp + rax - 0x18ffff8], rbp', 'add rbx, rdx', 'xchg dword ptr [rsp + rax*2 - 0x31ffff7], r8d', 'movzx ebp, byte ptr [r11 + rax - 0x18ffffc]', 'lea rdi, [rax*8 + 0x503ecd0c]', 'xor bpl, r10b', 'adc bpl, al', 'ror bpl, 1', 'neg bpl', 'rol bpl, 1', 'xor r10b, bpl', 'xor qword ptr [rsp + rax*2 - 0x3200000], rcx', 'rol word ptr [rsp + rax - 0x18ffff2], 0xa5', 'lea rbp, [rsp + rbp + 0x10]', 'cdq', 'lea rsi, [rdx + rdi*8 + 0xaad6f89]', 'and rdi, 0x88fed1c', 'add dl, byte ptr [rax + rbp - 0x1900000]', 'btc rax, rdi', 'pop rbp', 'pop rbp', 'mov ax, dx', 'cmovae edi, esi', 'movzx ax, al', 'mov r8b, byte ptr [r9 + rbp - 0x531]', 'inc rbp', 'not al', 'movsx edx, di', 'not r8b', 'and al, r8b', 'sal sil, 0xc3', 'call 0x7ffb72a9c4e2']

bytes: neg edx: f7da
lea rsi, [rcx*4 + 0x6a999ea0]: 488d348da09e996a
inc edx: ffc2
sub word ptr [rsp + rax - 0x24], si: 66297404dc
mov qword ptr [rsp + rax*2 - 0x64], rcx: 48894c449c
xor edx, 0x9321c286: 81f286c22193
movsx r8d, byte ptr [rsp + rax - 0x30]: 440fbe4404d0
mov qword ptr [rsp + rax*4 - 0xc0], r10: 4c89948440ffffff
sal rax, 0x93: 48c1f093
shr qword ptr [rsp + rax*8 - 0xc800000], 0x4b: 48c1acc4000080f34b
and r8d, dword ptr [rsp + rax - 0x18fffff]: 44238404010070fe
xor dword ptr [rsp + rax*2 - 0x31ffff8], edx: 3194440800e0fc
mov r10, qword ptr [rsp + rax*2 - 0x31ffff8]: 4c8b94440800e0fc
movsxd rdx, edx: 4863d2
dec bp: 66ffcd
mov qword ptr [rsp + rax - 0x18ffff8], rbp: 4889ac04080070fe
add rbx, rdx: 4803da
xchg dword ptr [rsp + rax*2 - 0x31ffff7], r8d: 448784440900e0fc
movzx ebp, byte ptr [r11 + rax - 0x18ffffc]: 410fb6ac03040070fe
lea rdi, [rax*8 + 0x503ecd0c]: 488d3cc50ccd3e50
xor bpl, r10b: 4132ea
adc bpl, al: 4012e8
ror bpl, 1: 40d0cd
neg bpl: 40f6dd
rol bpl, 1: 40d0c5
xor r10b, bpl: 4432d5
xor qword ptr [rsp + rax*2 - 0x3200000], rcx: 48318c440000e0fc
rol word ptr [rsp + rax - 0x18ffff2], 0xa5: 66c184040e0070fea5
lea rbp, [rsp + rbp + 0x10]: 488d6c2c10
cdq: 99
lea rsi, [rdx + rdi*8 + 0xaad6f89]: 488db4fa896fad0a
and rdi, 0x88fed1c: 4881e71ced8f08
add dl, byte ptr [rax + rbp - 0x1900000]: 029428000070fe
btc rax, rdi: 480fbbf8
pop rbp: 5d
pop rbp: 5d
mov ax, dx: 668bc2
cmovae edi, esi: 0f43fe
movzx ax, al: 660fb6c0
mov r8b, byte ptr [r9 + rbp - 0x531]: 458a8429cffaffff
inc rbp: 48ffc5
not al: f6d0
movsx edx, di: 0fbfd7
not r8b: 41f6d0
and al, r8b: 4122c0
sal sil, 0xc3: 40c0f6c3
call 0x7ffb72a9c4e2: e83f851200

bytecode len: 460 -   f7da488d348da09e996affc266297404dc48894c449c81f286c22193440fbe4404d04c89948440ffffff48c1f09348c1acc4000080f34b44238404010070fe3194440800e0fc4c8b94440800e0fc4863d266ffcd4889ac04080070fe4803da448784440900e0fc410fb6ac03040070fe488d3cc50ccd3e504132ea4012e840d0cd40f6dd40d0c54432d548318c440000e0fc66c184040e0070fea5488d6c2c1099488db4fa896fad0a4881e71ced8f08029428000070fe480fbbf85d5d668bc20f43fe660fb6c0458a8429cffaffff48ffc5f6d00fbfd741f6d04122c040c0f6c3e83f851200

block IDs [duplicates]: [414]
['mov qword ptr [rsp + rbp - 0x532], rsi', 'mov word ptr [r9 + rbp - 0x532], ax', 'lea rax, [rdi - 0x2ee1b7f7]', 'movzx edx, byte ptr [rbp + r11 - 0x52d]', 'lea r11, [r11 + rbp*4 - 0x14c2]', 'xor dl, r10b', 'rol dl, 1', 'neg dl', 'neg ebp', 'setae byte ptr [rsp + 5]', 'xor dl, 0x37', 'sub sil, cl', 'sbb dl, 0xbb', 'or word ptr [rsp + 5], bp', 'push rsi', 'xor dl, 0x37', 'push rbp', 'call 0x7ffb72de7cbe']

bytes: mov qword ptr [rsp + rbp - 0x532], rsi: 4889b42ccefaffff
mov word ptr [r9 + rbp - 0x532], ax: 6641898429cefaffff
lea rax, [rdi - 0x2ee1b7f7]: 488d8709481ed1
movzx edx, byte ptr [rbp + r11 - 0x52d]: 420fb6941dd3faffff
lea r11, [r11 + rbp*4 - 0x14c2]: 4d8d9cab3eebffff
xor dl, r10b: 4132d2
rol dl, 1: d0c2
neg dl: f6da
neg ebp: f7dd
setae byte ptr [rsp + 5]: 0f93442405
xor dl, 0x37: 80f237
sub sil, cl: 402af1
sbb dl, 0xbb: 80dabb
or word ptr [rsp + 5], bp: 66096c2405
push rsi: 56
xor dl, 0x37: 80f237
push rbp: 55
call 0x7ffb72de7cbe: e88db73400

bytecode len: 158 -   4889b42ccefaffff6641898429cefaffff488d8709481ed1420fb6941dd3faffff4d8d9cab3eebffff4132d2d0c2f6daf7dd0f9344240580f237402af180dabb66096c24055680f23755e88db73400

block IDs [duplicates]: [415]
['movzx bp, byte ptr [r9]', 'mov edi, 0x1c213b84', 'mov dl, byte ptr [r9 + rdi*4 - 0x7084ee0e]', 'or bpl, dl', 'not bpl', 'btr di, 0x1e', 'xor rax, 0xffffffff981cb304', 'mov word ptr [r9 + rdi - 0x1c213b82], bp', 'lea r8, [rdi + rdi*2 - 0x49454f80]', 'movzx eax, word ptr [r11 + rdi - 0x1c213b84]', 'jae 0x7ffb7290c733']

bytes: movzx bp, byte ptr [r9]: 66410fb629
mov edi, 0x1c213b84: bf843b211c
mov dl, byte ptr [r9 + rdi*4 - 0x7084ee0e]: 418a94b9f2117b8f
or bpl, dl: 400aea
not bpl: 40f6d5
btr di, 0x1e: 660fbaf71e
xor rax, 0xffffffff981cb304: 4881f004b31c98
mov word ptr [r9 + rdi - 0x1c213b82], bp: 664189ac397ec4dee3
lea r8, [rdi + rdi*2 - 0x49454f80]: 4c8d847f80b0bab6
movzx eax, word ptr [r11 + rdi - 0x1c213b84]: 410fb7843b7cc4dee3
jae 0x7ffb7290c733: 0f8371890200

bytecode len: 136 -   66410fb629bf843b211c418a94b9f2117b8f400aea40f6d5660fbaf71e4881f004b31c98664189ac397ec4dee34c8d847f80b0bab6410fb7843b7cc4dee30f8371890200

block IDs [duplicates]: [416]
['xor ax, r10w', 'ror ax, 1', 'lea rsi, [r8*8 + 0x10aa3e38]', 'push rsi', 'movsx ebp, r8w', 'inc ax', 'not ax', 'rol ax, 1', 'inc byte ptr [rsp + rdi*2 - 0x38427708]', 'shl word ptr [rsp + rdi - 0x1c213b7e], 0xa', 'xor r10w, ax', 'xadd qword ptr [rsp + r8 - 0xb1e630c], rbp', 'inc r8d', 'mov word ptr [r9 + rdi*4 - 0x7084ee10], ax', 'mov eax, dword ptr [r11 + rdi - 0x1c213b82]', 'add dword ptr [rsp + rdi - 0x1c213b83], 0x53ad349c', 'xor eax, r10d', 'shl rbp, 0x3c', 'btr di, 0xb0', 'neg eax', 'not bp', 'pop rdx', 'xor edx, 0x7422b91a', 'dec eax', 'xadd r8w, di', 'movsx ecx, di', 'ror eax, 1', 'dec eax', 'call 0x7ffb72e821ad']

bytes: xor ax, r10w: 664133c2
ror ax, 1: 66d1c8
lea rsi, [r8*8 + 0x10aa3e38]: 4a8d34c5383eaa10
push rsi: 56
movsx ebp, r8w: 410fbfe8
inc ax: 66ffc0
not ax: 66f7d0
rol ax, 1: 66d1c0
inc byte ptr [rsp + rdi*2 - 0x38427708]: fe847cf888bdc7
shl word ptr [rsp + rdi - 0x1c213b7e], 0xa: 66c1a43c82c4dee30a
xor r10w, ax: 664433d0
xadd qword ptr [rsp + r8 - 0xb1e630c], rbp: 4a0fc1ac04f49ce1f4
inc r8d: 41ffc0
mov word ptr [r9 + rdi*4 - 0x7084ee10], ax: 66418984b9f0117b8f
mov eax, dword ptr [r11 + rdi - 0x1c213b82]: 418b843b7ec4dee3
add dword ptr [rsp + rdi - 0x1c213b83], 0x53ad349c: 81843c7dc4dee39c34ad53
xor eax, r10d: 4133c2
shl rbp, 0x3c: 48c1e53c
btr di, 0xb0: 660fbaf7b0
neg eax: f7d8
not bp: 66f7d5
pop rdx: 5a
xor edx, 0x7422b91a: 81f21ab92274
dec eax: ffc8
xadd r8w, di: 66410fc1f8
movsx ecx, di: 0fbfcf
ror eax, 1: d1c8
dec eax: ffc8
call 0x7ffb72e821ad: e8ea595700

bytecode len: 264 -   664133c266d1c84a8d34c5383eaa1056410fbfe866ffc066f7d066d1c0fe847cf888bdc766c1a43c82c4dee30a664433d04a0fc1ac04f49ce1f441ffc066418984b9f0117b8f418b843b7ec4dee381843c7dc4dee39c34ad534133c248c1e53c660fbaf7b0f7d866f7d55a81f21ab92274ffc866410fc1f80fbfcfd1c8ffc8e8ea595700

block IDs [duplicates]: [417]
['inc r8d', 'add sil, r8b', 'movsxd rax, eax', 'neg rdi', 'xchg dl, dil', 'add edi, 0xe708d0b6', 'add rbx, rax', 'mov r8, qword ptr [r11 + r8*4 - 0x2c79fffe]', 'mov eax, edi', 'sub sil, bpl', 'lea r11, [r11 + rsi - 0x699d41fc]', 'ror bpl, 0xa1', 'ror si, cl', 'rol cx, 0xd', 'sub bp, 0x2abf', 'lea r8, [rdx + r8 - 0x7dff4d8f]', 'rol rdi, 0x74', 'not r8', 'setb bpl', 'xor r10, r8', 'mov qword ptr [rsi + r9 - 0x699d105a], r8', 'lea r9, [rsi + r9 - 0x699d105a]', 'neg cx', 'jne 0x7ffb72acc73a']

bytes: inc r8d: 41ffc0
add sil, r8b: 4102f0
movsxd rax, eax: 4863c0
neg rdi: 48f7df
xchg dl, dil: 4086fa
add edi, 0xe708d0b6: 81c7b6d008e7
add rbx, rax: 4803d8
mov r8, qword ptr [r11 + r8*4 - 0x2c79fffe]: 4f8b8483020086d3
mov eax, edi: 8bc7
sub sil, bpl: 402af5
lea r11, [r11 + rsi - 0x699d41fc]: 4d8d9c3304be6296
ror bpl, 0xa1: 40c0cda1
ror si, cl: 66d3ce
rol cx, 0xd: 66c1c10d
sub bp, 0x2abf: 6681edbf2a
lea r8, [rdx + r8 - 0x7dff4d8f]: 4e8d840271b20082
rol rdi, 0x74: 48c1c774
not r8: 49f7d0
setb bpl: 400f92c5
xor r10, r8: 4d33d0
mov qword ptr [rsi + r9 - 0x699d105a], r8: 4e89840ea6ef6296
lea r9, [rsi + r9 - 0x699d105a]: 4e8d8c0ea6ef6296
neg cx: 66f7d9
jne 0x7ffb72acc73a: 0f854ffa0200

bytecode len: 216 -   41ffc04102f04863c048f7df4086fa81c7b6d008e74803d84f8b8483020086d38bc7402af54d8d9c3304be629640c0cda166d3ce66c1c10d6681edbf2a4e8d840271b2008248c1c77449f7d0400f92c54d33d04e89840ea6ef62964e8d8c0ea6ef629666f7d90f854ffa0200

block IDs [duplicates]: [418]
['pop r8', 'pop rcx', 'jne 0x7ffb72acc73a']

bytes: pop r8: 4158
pop rcx: 59
jne 0x7ffb72acc73a: 0f854ffa0200

bytecode len: 18 -   4158590f854ffa0200

block IDs [duplicates]: [420]
['mov eax, 0x529dcf2f', 'mov rax, qword ptr [rax + r9 - 0x529dcf2f]', 'mov rdx, qword ptr [r9 + 8]', 'mov r8d, 0x7927a78a', 'add rax, rdx', 'mov qword ptr [r9 + r8 - 0x7927a782], rax', 'movsx esi, r8b', 'lea rcx, [rsi*4 + 0x6a3dcfab]', 'mov esi, dword ptr [r8 + r11 - 0x7927a78a]', 'ror r8b, 0x65', 'not r8w', 'lea r11, [r11 + r8 - 0x792758a7]', 'xor esi, r10d', 'sub esi, 0x8bbc50d', 'sal cl, 0x61', 'rol esi, 3', 'movzx edx, cl', 'mov eax, 0xd1bb53b3', 'neg esi', 'bts eax, r8d', 'ror eax, 0xab', 'push rax', 'not esi', 'and qword ptr [rsp + rdx - 0xa6], rcx', 'mov qword ptr [rsp + r8 - 0x792758ab], r10', 'xor dword ptr [rsp + r8 - 0x792758ab], esi', 'pop r10', 'mov ebp, 0x3706d088', 'mov rax, qword ptr [rbp + r9 - 0x3706d088]', 'lea rdx, [rbp*8 + 0x48261f37]', 'mov rbp, qword ptr ss:[rax + rbp*2 - 0x6e0da110]', 'mov edi, edx', 'mov qword ptr [r9 + rdi*8 - 0x2e51bb8], rbp', 'mov ebp, dword ptr [rdi + r11 - 0x5ca377]', 'lea rax, [rdx + rdx*4 - 0x1ae173ed]', 'lea r11, [r11 + rdi*2 - 0xb946ea]', 'mov r8d, edx', 'or di, r8w', 'lea rsi, [rax*2 + 0x2ba2e831]', 'xor ebp, r10d', 'sal rsi, 0x3b', 'ror ebp, 3', 'and si, dx', 'lea ebp, [rbp + rdi*4 + 0x633297e0]', 'ror ebp, 1', 'shl ax, 7', 'bswap ebp', 'push r10', 'xor dword ptr [rsp + rdi*4 - 0x1728ddc], ebp', 'pop r10', 'xor rsi, 0x21927399', 'movsxd rbp, ebp', 'adc rbx, rbp', 'shr edi, 0x94', 'mov rcx, qword ptr [r9 + rdi - 5]', 'shr eax, 0x45', 'mov r8, qword ptr [r9 + rdi*4 - 0xc]', 'adc dil, 0x1f', 'shr rsi, 0x9f', 'movzx ebp, al', 'or rcx, r8', 'rol ax, 0xe', 'cwd', 'not rcx', 'cmovb rdi, rdx', 'bswap esi', 'mov qword ptr [rdi + r9 - 0x1c], rcx', 'xor rdx, 0x4d16bfbb', 'mov ecx, esi', 'lea r9, [r9 + rdi*8 - 0x118]', 'lea r8, [rcx*2 + 0x7407cc9c]', 'jg 0x7ffb72bb866f']

bytes: mov eax, 0x529dcf2f: b82fcf9d52
mov rax, qword ptr [rax + r9 - 0x529dcf2f]: 4a8b8408d13062ad
mov rdx, qword ptr [r9 + 8]: 498b542108
mov r8d, 0x7927a78a: 41b88aa72779
add rax, rdx: 4803c2
mov qword ptr [r9 + r8 - 0x7927a782], rax: 4b8984017e58d886
movsx esi, r8b: 410fbef0
lea rcx, [rsi*4 + 0x6a3dcfab]: 488d0cb5abcf3d6a
mov esi, dword ptr [r8 + r11 - 0x7927a78a]: 438bb4187658d886
ror r8b, 0x65: 41c0c865
not r8w: 6641f7d0
lea r11, [r11 + r8 - 0x792758a7]: 4f8d9c0359a7d886
xor esi, r10d: 4133f2
sub esi, 0x8bbc50d: 81ee0dc5bb08
sal cl, 0x61: c0f161
rol esi, 3: c1c603
movzx edx, cl: 0fb6d1
mov eax, 0xd1bb53b3: b8b353bbd1
neg esi: f7de
bts eax, r8d: 440fabc0
ror eax, 0xab: c1c8ab
push rax: 50
not esi: f7d6
and qword ptr [rsp + rdx - 0xa6], rcx: 48218c145affffff
mov qword ptr [rsp + r8 - 0x792758ab], r10: 4e89940455a7d886
xor dword ptr [rsp + r8 - 0x792758ab], esi: 4231b40455a7d886
pop r10: 415a
mov ebp, 0x3706d088: bd88d00637
mov rax, qword ptr [rbp + r9 - 0x3706d088]: 4a8b840d782ff9c8
lea rdx, [rbp*8 + 0x48261f37]: 488d14ed371f2648
mov rbp, qword ptr ss:[rax + rbp*2 - 0x6e0da110]: 36488bac68f05ef291
mov edi, edx: 8bfa
mov qword ptr [r9 + rdi*8 - 0x2e51bb8], rbp: 4989acf948e41afd
mov ebp, dword ptr [rdi + r11 - 0x5ca377]: 428bac1f895ca3ff
lea rax, [rdx + rdx*4 - 0x1ae173ed]: 488d8492138c1ee5
lea r11, [r11 + rdi*2 - 0xb946ea]: 4d8d9c7b16b946ff
mov r8d, edx: 448bc2
or di, r8w: 66410bf8
lea rsi, [rax*2 + 0x2ba2e831]: 488d344531e8a22b
xor ebp, r10d: 4133ea
sal rsi, 0x3b: 48c1f63b
ror ebp, 3: c1cd03
and si, dx: 6623f2
lea ebp, [rbp + rdi*4 + 0x633297e0]: 8dacbde0973263
ror ebp, 1: d1cd
shl ax, 7: 66c1e007
bswap ebp: 0fcd
push r10: 4152
xor dword ptr [rsp + rdi*4 - 0x1728ddc], ebp: 31acbc24728dfe
pop r10: 415a
xor rsi, 0x21927399: 4881f699739221
movsxd rbp, ebp: 4863ed
adc rbx, rbp: 4813dd
shr edi, 0x94: c1ef94
mov rcx, qword ptr [r9 + rdi - 5]: 498b4c39fb
shr eax, 0x45: c1e845
mov r8, qword ptr [r9 + rdi*4 - 0xc]: 4d8b44b9f4
adc dil, 0x1f: 4080d71f
shr rsi, 0x9f: 48c1ee9f
movzx ebp, al: 0fb6e8
or rcx, r8: 490bc8
rol ax, 0xe: 66c1c00e
cwd: 6699
not rcx: 48f7d1
cmovb rdi, rdx: 480f42fa
bswap esi: 0fce
mov qword ptr [rdi + r9 - 0x1c], rcx: 4a894c0fe4
xor rdx, 0x4d16bfbb: 4881f2bbbf164d
mov ecx, esi: 8bce
lea r9, [r9 + rdi*8 - 0x118]: 4d8d8cf9e8feffff
lea r8, [rcx*2 + 0x7407cc9c]: 4c8d044d9ccc0774
jg 0x7ffb72bb866f: 0f8f3a610200

bytecode len: 688 -   b82fcf9d524a8b8408d13062ad498b54210841b88aa727794803c24b8984017e58d886410fbef0488d0cb5abcf3d6a438bb4187658d88641c0c8656641f7d04f8d9c0359a7d8864133f281ee0dc5bb08c0f161c1c6030fb6d1b8b353bbd1f7de440fabc0c1c8ab50f7d648218c145affffff4e89940455a7d8864231b40455a7d886415abd88d006374a8b840d782ff9c8488d14ed371f264836488bac68f05ef2918bfa4989acf948e41afd428bac1f895ca3ff488d8492138c1ee54d8d9c7b16b946ff448bc266410bf8488d344531e8a22b4133ea48c1f63bc1cd036623f28dacbde0973263d1cd66c1e0070fcd415231acbc24728dfe415a4881f6997392214863ed4813ddc1ef94498b4c39fbc1e8454d8b44b9f44080d71f48c1ee9f0fb6e8490bc866c1c00e669948f7d1480f42fa0fce4a894c0fe44881f2bbbf164d8bce4d8d8cf9e8feffff4c8d044d9ccc07740f8f3a610200

block IDs [duplicates]: [421]
['mov rdx, qword ptr [r9]', 'mov esi, 0xcc956dbf', 'and rsi, rsi', 'mov rbp, qword ptr [r9 + 8]', 'call 0x7ffb729d2e63']

bytes: mov rdx, qword ptr [r9]: 498b11
mov esi, 0xcc956dbf: bebf6d95cc
and rsi, rsi: 4823f6
mov rbp, qword ptr [r9 + 8]: 498b6c2108
call 0x7ffb729d2e63: e8aa760a00

bytecode len: 42 -   498b11bebf6d95cc4823f6498b6c2108e8aa760a00

block IDs [duplicates]: [422]
['mov qword ptr [rsp], 0x750496b2', 'movzx eax, sil', 'lea r9, [r9 + rax - 0xaf]', 'adc rdx, rbp', 'mov ecx, dword ptr [rsp + rax*8 - 0x5f6]', 'shr qword ptr [rsp + rax - 0xbf], cl', 'mov rax, rdx', 'movzx edx, byte ptr [r11 + rcx - 0x7504]', 'not byte ptr [rsp + rcx - 0x7504]', 'movzx edi, cx', 'pop r8', 'xor dl, r10b', 'sub ecx, esi', 'btr rcx, rdi', 'rol dl, 1', 'lea rsi, [r8 + rsi*2 + 0x538bcc17]', 'lea rbp, [rdi + rdi - 0x77c6adc7]', 'neg dl', 'xadd dil, cl', 'not edi', 'ror dl, 1', 'neg dl', 'inc rdi', 'setge dil', 'xor r10b, dl', 'ror rdi, 0xbd', 'adc rdx, rsp', 'sar rbp, cl', 'mov qword ptr [rdx + rcx - 0x336b0704], rax', 'not ecx', 'movsx edx, bp', 'lea r11, [rbp + r11 + 0x77c5c41]', 'sbb esi, ebp', 'xchg bp, si', 'bts edx, 0x9e', 'sar edx, 0x8a', 'movsx eax, bpl', 'bts rdx, 0x30', 'bts rdi, 0x15', 'btr rdi, 0x38', 'lea r8d, [rcx + r8 - 0x7564da3f]', 'adc esi, 0xc3265c34', 'push r10', 'call 0x7ffb72bbd739']

bytes: mov qword ptr [rsp], 0x750496b2: 48c7442400b2960475
movzx eax, sil: 400fb6c6
lea r9, [r9 + rax - 0xaf]: 4d8d8c0151ffffff
adc rdx, rbp: 4813d5
mov ecx, dword ptr [rsp + rax*8 - 0x5f6]: 8b8cc40afaffff
shr qword ptr [rsp + rax - 0xbf], cl: 48d3ac0441ffffff
mov rax, rdx: 488bc2
movzx edx, byte ptr [r11 + rcx - 0x7504]: 410fb6940bfc8affff
not byte ptr [rsp + rcx - 0x7504]: f6940cfc8affff
movzx edi, cx: 0fb7f9
pop r8: 4158
xor dl, r10b: 4132d2
sub ecx, esi: 2bce
btr rcx, rdi: 480fb3f9
rol dl, 1: d0c2
lea rsi, [r8 + rsi*2 + 0x538bcc17]: 498db47017cc8b53
lea rbp, [rdi + rdi - 0x77c6adc7]: 488dac3f39523988
neg dl: f6da
xadd dil, cl: 400fc0cf
not edi: f7d7
ror dl, 1: d0ca
neg dl: f6da
inc rdi: 48ffc7
setge dil: 400f9dc7
xor r10b, dl: 4432d2
ror rdi, 0xbd: 48c1cfbd
adc rdx, rsp: 4813d4
sar rbp, cl: 48d3fd
mov qword ptr [rdx + rcx - 0x336b0704], rax: 4889840afcf894cc
not ecx: f7d1
movsx edx, bp: 0fbfd5
lea r11, [rbp + r11 + 0x77c5c41]: 4e8d9c1d415c7c07
sbb esi, ebp: 1bf5
xchg bp, si: 6687f5
bts edx, 0x9e: 0fbaea9e
sar edx, 0x8a: c1fa8a
movsx eax, bpl: 400fbec5
bts rdx, 0x30: 480fbaea30
bts rdi, 0x15: 480fbaef15
btr rdi, 0x38: 480fbaf738
lea r8d, [rcx + r8 - 0x7564da3f]: 468d8401c1259b8a
adc esi, 0xc3265c34: 81d6345c26c3
push r10: 4152
call 0x7ffb72bbd739: e8eba71e00

bytecode len: 390 -   48c7442400b2960475400fb6c64d8d8c0151ffffff4813d58b8cc40afaffff48d3ac0441ffffff488bc2410fb6940bfc8afffff6940cfc8affff0fb7f941584132d22bce480fb3f9d0c2498db47017cc8b53488dac3f39523988f6da400fc0cff7d7d0caf6da48ffc7400f9dc74432d248c1cfbd4813d448d3fd4889840afcf894ccf7d10fbfd54e8d9c1d415c7c071bf56687f50fbaea9ec1fa8a400fbec5480fbaea30480fbaef15480fbaf738468d8401c1259b8a81d6345c26c34152e8eba71e00

block IDs [duplicates]: [423]
['xor dil, 0x1a', 'neg bp', 'lea r8, [rax + rbp*2 + 0x771d288f]', 'push rsi', 'sbb dil, 0x90', 'push rbp', 'xor r10b, dil', 'lea rdi, [rsp + rdi + 0x38]', 'mov qword ptr [rdi + rdx], rcx', 'mov qword ptr [rsp + rdx], rbx', 'ret 0x30']

bytes: xor dil, 0x1a: 4080f71a
neg bp: 66f7dd
lea r8, [rax + rbp*2 + 0x771d288f]: 4c8d84688f281d77
push rsi: 56
sbb dil, 0x90: 4080df90
push rbp: 55
xor r10b, dil: 4432d7
lea rdi, [rsp + rdi + 0x38]: 488d7c3c38
mov qword ptr [rdi + rdx], rcx: 48890c17
mov qword ptr [rsp + rdx], rbx: 48891c14
ret 0x30: c23000

bytecode len: 80 -   4080f71a66f7dd4c8d84688f281d77564080df90554432d7488d7c3c3848890c1748891c14c23000

block IDs [duplicates]: [424]
['mov ecx, 0xc631d99a', 'movsx edi, cx', 'mov rsi, qword ptr [r9]', 'movzx ecx, word ptr [r11]', 'xor cx, r10w', 'mov ebp, edi', 'movzx eax, bp', 'movsx r8d, di', 'rol cx, 1', 'call 0x7ffb72dbcfd7']

bytes: mov ecx, 0xc631d99a: b99ad931c6
movsx edi, cx: 0fbff9
mov rsi, qword ptr [r9]: 498b31
movzx ecx, word ptr [r11]: 410fb70c23
xor cx, r10w: 664133ca
mov ebp, edi: 8bef
movzx eax, bp: 0fb7c5
movsx r8d, di: 440fbfc7
rol cx, 1: 66d1c1
call 0x7ffb72dbcfd7: e8c3814800

bytecode len: 74 -   b99ad931c60fbff9498b31410fb70c23664133ca8bef0fb7c5440fbfc766d1c1e8c3814800

block IDs [duplicates]: [425]
['mov r8, qword ptr [r11]', 'mov edi, 0xa41e0b28', 'mov esi, edi', 'and edi, esi', 'xor r8, r10', 'xor r8, 0xffffffffc8bc4ab1', 'xchg rcx, rdi', 'mov edx, ecx', 'rol r8, 7', 'neg r8', 'movsx eax, cx', 'movsx ebp, dx', 'xor r8, 0xfffffffff821cbaa', 'neg esi', 'call 0x7ffb72d7919f']

bytes: mov r8, qword ptr [r11]: 4d8b03
mov edi, 0xa41e0b28: bf280b1ea4
mov esi, edi: 8bf7
and edi, esi: 23fe
xor r8, r10: 4d33c2
xor r8, 0xffffffffc8bc4ab1: 4981f0b14abcc8
xchg rcx, rdi: 4887f9
mov edx, ecx: 8bd1
rol r8, 7: 49c1c007
neg r8: 49f7d8
movsx eax, cx: 0fbfc1
movsx ebp, dx: 0fbfea
xor r8, 0xfffffffff821cbaa: 4981f0aacb21f8
neg esi: f7de
call 0x7ffb72d7919f: e8fcb83000

bytecode len: 108 -   4d8b03bf280b1ea48bf723fe4d33c24981f0b14abcc84887f98bd149c1c00749f7d80fbfc10fbfea4981f0aacb21f8f7dee8fcb83000

block IDs [duplicates]: [426]
['shl esi, 0x8a', 'adc rdx, rbp', 'shr cl, 4', 'movsx ebp, word ptr [rsp + rdi*2 + 2]', 'cmovp bp, di', 'mov qword ptr [r9 + rdi - 8], rdx', 'rol qword ptr [rsp + rdi], 0x4b', 'adc si, cx', 'lea r9, [r9 + rdi - 8]', 'pop rax', 'not rbp', 'add edi, dword ptr [rdi + r11 + 8]', 'btc cx, r8w', 'lea rdx, [rcx + r8*2 - 0x7ed63ce3]', 'lea r11, [r8 + r11 - 0x4f]', 'xor edi, r10d', 'btc rcx, r8', 'lea edi, [rdi + r8 - 0x8bbc568]', 'call 0x7ffb72d2f54a']

bytes: shl esi, 0x8a: c1e68a
adc rdx, rbp: 4813d5
shr cl, 4: c0e904
movsx ebp, word ptr [rsp + rdi*2 + 2]: 0fbf6c7c02
cmovp bp, di: 660f4aef
mov qword ptr [r9 + rdi - 8], rdx: 49895439f8
rol qword ptr [rsp + rdi], 0x4b: 48c1043c4b
adc si, cx: 6613f1
lea r9, [r9 + rdi - 8]: 4d8d4c39f8
pop rax: 58
not rbp: 48f7d5
add edi, dword ptr [rdi + r11 + 8]: 42037c1f08
btc cx, r8w: 66440fbbc1
lea rdx, [rcx + r8*2 - 0x7ed63ce3]: 4a8d94411dc32981
lea r11, [r8 + r11 - 0x4f]: 4f8d5c18b1
xor edi, r10d: 4133fa
btc rcx, r8: 4c0fbbc1
lea edi, [rdi + r8 - 0x8bbc568]: 428dbc07983a44f7
call 0x7ffb72d2f54a: e8fc793a00

bytecode len: 166 -   c1e68a4813d5c0e9040fbf6c7c02660f4aef49895439f848c1043c4b6613f14d8d4c39f85848f7d542037c1f0866440fbbc14a8d94411dc329814f8d5c18b14133fa4c0fbbc1428dbc07983a44f7e8fc793a00

block IDs [duplicates]: [427]
['mov eax, 0x3aac6396', 'mov rsi, qword ptr [r9 + rax*2 - 0x7558c72c]', 'ror eax, 0xef', 'call 0x7ffb72cd13e1']

bytes: mov eax, 0x3aac6396: b89663ac3a
mov rsi, qword ptr [r9 + rax*2 - 0x7558c72c]: 498bb441d438a78a
ror eax, 0xef: c1c8ef
call 0x7ffb72cd13e1: e8de9c1300

bytecode len: 42 -   b89663ac3a498bb441d438a78ac1c8efe8de9c1300

block IDs [duplicates]: [428]
['lea ebp, [rdx + rbp - 0x8bbc582]', 'rol ebp, 3', 'neg ebp', 'pop rax', 'neg dil', 'ror sil, 0x63', 'not ebp', 'mov qword ptr [rsp + rdx - 0x75], rsi', 'mov qword ptr [rsp + rdx*4 - 0x1d4], r10', 'dec r8b', 'shl esi, 0x4d', 'xor dword ptr [rsp + rdx*8 - 0x3a8], ebp', 'pop r10', 'lea rdx, [rsi*4 + 0xe1bf3be]', 'movsxd rbp, ebp', 'sub r8b, 0x9d', 'add rbx, rbp', 'xchg ax, dx', 'jmp rbx']

bytes: lea ebp, [rdx + rbp - 0x8bbc582]: 8dac2a7e3a44f7
rol ebp, 3: c1c503
neg ebp: f7dd
pop rax: 58
neg dil: 40f6df
ror sil, 0x63: 40c0ce63
not ebp: f7d5
mov qword ptr [rsp + rdx - 0x75], rsi: 488974148b
mov qword ptr [rsp + rdx*4 - 0x1d4], r10: 4c8994942cfeffff
dec r8b: 41fec8
shl esi, 0x4d: c1e64d
xor dword ptr [rsp + rdx*8 - 0x3a8], ebp: 31acd458fcffff
pop r10: 415a
lea rdx, [rsi*4 + 0xe1bf3be]: 488d14b5bef31b0e
movsxd rbp, ebp: 4863ed
sub r8b, 0x9d: 4180e89d
add rbx, rbp: 4803dd
xchg ax, dx: 6692
jmp rbx: ffe3

bytecode len: 144 -   8dac2a7e3a44f7c1c503f7dd5840f6df40c0ce63f7d5488974148b4c8994942cfeffff41fec8c1e64d31acd458fcffff415a488d14b5bef31b0e4863ed4180e89d4803dd6692ffe3

block IDs [duplicates]: [429]
['mov esi, r8d', 'add rbp, qword ptr [rsp + rdx - 0xf1ea]', 'ror al, 1', 'pop rdi', 'neg al', 'inc ecx', 'add al, cl', 'and dword ptr [rsp + rcx*2 + 0xb], 0xfe81ffa7', 'rol al, cl', 'xor byte ptr [rsp + rcx*2 + 7], sil', 'neg qword ptr [rsp + rcx + 0xd]', 'not al', 'sar rsi, 0xaf', 'xor al, 0x13', 'add edx, 0xa8abc80', 'xor r10b, al', 'lea rax, [rsp + rax + 0x18]', 'dec sil', 'sar byte ptr [rsp + rcx + 4], cl', 'add dword ptr [rsp + rcx*4 + 4], r8d', 'mov r8, qword ptr [rax + rcx*2 - 2]', 'sar ecx, 2', 'mov qword ptr [r9 + rcx], r8', 'btr cx, si', 'shl byte ptr [rsp + rcx*8 + 7], 0x87', 'mov qword ptr [rsp + rcx], rbx', 'ret 0x10']

bytes: mov esi, r8d: 418bf0
add rbp, qword ptr [rsp + rdx - 0xf1ea]: 4803ac14160effff
ror al, 1: d0c8
pop rdi: 5f
neg al: f6d8
inc ecx: ffc1
add al, cl: 02c1
and dword ptr [rsp + rcx*2 + 0xb], 0xfe81ffa7: 81644c0ba7ff81fe
rol al, cl: d2c0
xor byte ptr [rsp + rcx*2 + 7], sil: 4030744c07
neg qword ptr [rsp + rcx + 0xd]: 48f75c0c0d
not al: f6d0
sar rsi, 0xaf: 48c1feaf
xor al, 0x13: 3413
add edx, 0xa8abc80: 81c280bc8a0a
xor r10b, al: 4432d0
lea rax, [rsp + rax + 0x18]: 488d440418
dec sil: 40fece
sar byte ptr [rsp + rcx + 4], cl: d27c0c04
add dword ptr [rsp + rcx*4 + 4], r8d: 4401448c04
mov r8, qword ptr [rax + rcx*2 - 2]: 4c8b4448fe
sar ecx, 2: c1f902
mov qword ptr [r9 + rcx], r8: 4d890409
btr cx, si: 660fb3f1
shl byte ptr [rsp + rcx*8 + 7], 0x87: c064cc0787
mov qword ptr [rsp + rcx], rbx: 48891c0c
ret 0x10: c21000

bytecode len: 204 -   418bf04803ac14160effffd0c85ff6d8ffc102c181644c0ba7ff81fed2c04030744c0748f75c0c0df6d048c1feaf341381c280bc8a0a4432d0488d44041840feced27c0c044401448c044c8b4448fec1f9024d890409660fb3f1c064cc078748891c0cc21000

block IDs [duplicates]: [430]
['pop r8', 'xor ax, r10w', 'call 0x7ffb72df65d0']

bytes: pop r8: 4158
xor ax, r10w: 664133c2
call 0x7ffb72df65d0: e80e343f00

bytecode len: 22 -   4158664133c2e80e343f00

block IDs [duplicates]: [431]
['inc rsi', 'lea rax, [rdx*4 - 0x466242c5]', 'not bp', 'dec sil', 'xor byte ptr [rsp + rdi - 0xe725], dil', 'dec bp', 'xchg dil, sil', 'sar word ptr [rsp + rdi - 0xe722], 0x41', 'shl r8w, 0x85', 'xor r10w, bp', 'call 0x7ffb72c8de16']

bytes: inc rsi: 48ffc6
lea rax, [rdx*4 - 0x466242c5]: 488d04953bbd9db9
not bp: 66f7d5
dec sil: 40fece
xor byte ptr [rsp + rdi - 0xe725], dil: 4030bc3cdb18ffff
dec bp: 66ffcd
xchg dil, sil: 4086f7
sar word ptr [rsp + rdi - 0xe722], 0x41: 66c1bc3cde18ffff41
shl r8w, 0x85: 6641c1e085
xor r10w, bp: 664433d5
call 0x7ffb72c8de16: e8c2002000

bytecode len: 108 -   48ffc6488d04953bbd9db966f7d540fece4030bc3cdb18ffff66ffcd4086f766c1bc3cde18ffff416641c1e085664433d5e8c2002000

block IDs [duplicates]: [432]
['lea rbp, [r8*8 - 0x1687a79]', 'rol cx, 1', 'and sil, 0x35', 'mov qword ptr [rsp + rsi - 0x51a3925], rbp', 'xor cx, 0xe222', 'pop rdi', 'lea rbp, [r8 + rsi*4 + 0x7b2b434]', 'ror cx, 1', 'shr r8d, 0x1c', 'sal rsi, 0x7b', 'sar di, 0x87', 'not cx', 'ror rsi, 0xbd', 'movzx eax, si', 'xor r10w, cx', 'neg di', 'btr rdi, rbp', 'adc rcx, rsp', 'bts bp, r8w', 'dec r8b', 'mov rsi, qword ptr [rcx + rsi*8 - 8]', 'lea rcx, [rdi - 0x4a61564d]', 'bswap r8d', 'mov qword ptr [r9 + rbp*2 - 0x4fa6eb3a], rsi', 'sub r8w, 0x3a95', 'cwde', 'movzx ebp, byte ptr [r11 + rbp*2 - 0x4fa6eb30]', 'xor bpl, r10b', 'add bpl, al', 'movsx esi, cx', 'rol bpl, 1', 'sub eax, ecx', 'cwd', 'sbb bpl, 1', 'rol bpl, 1', 'ror r8b, 0x81', 'dec si', 'shl r8w, 0x48', 'xor bpl, 0x85', 'not r8', 'xor r10b, bpl', 'sal dl, 0xc7', 'not eax', 'je 0x7ffb72c2bd4f']

bytes: lea rbp, [r8*8 - 0x1687a79]: 4a8d2cc5878597fe
rol cx, 1: 66d1c1
and sil, 0x35: 4080e635
mov qword ptr [rsp + rsi - 0x51a3925], rbp: 4889ac34dbc6e5fa
xor cx, 0xe222: 6681f122e2
pop rdi: 5f
lea rbp, [r8 + rsi*4 + 0x7b2b434]: 498dacb034b4b207
ror cx, 1: 66d1c9
shr r8d, 0x1c: 41c1e81c
sal rsi, 0x7b: 48c1f67b
sar di, 0x87: 66c1ff87
not cx: 66f7d1
ror rsi, 0xbd: 48c1cebd
movzx eax, si: 0fb7c6
xor r10w, cx: 664433d1
neg di: 66f7df
btr rdi, rbp: 480fb3ef
adc rcx, rsp: 4813cc
bts bp, r8w: 66440fabc5
dec r8b: 41fec8
mov rsi, qword ptr [rcx + rsi*8 - 8]: 488b74f1f8
lea rcx, [rdi - 0x4a61564d]: 488d8fb3a99eb5
bswap r8d: 410fc8
mov qword ptr [r9 + rbp*2 - 0x4fa6eb3a], rsi: 4989b469c61459b0
sub r8w, 0x3a95: 664181e8953a
cwde: 98
movzx ebp, byte ptr [r11 + rbp*2 - 0x4fa6eb30]: 410fb6ac6bd01459b0
xor bpl, r10b: 4132ea
add bpl, al: 4002e8
movsx esi, cx: 0fbff1
rol bpl, 1: 40d0c5
sub eax, ecx: 2bc1
cwd: 6699
sbb bpl, 1: 4080dd01
rol bpl, 1: 40d0c5
ror r8b, 0x81: 41c0c881
dec si: 66ffce
shl r8w, 0x48: 6641c1e048
xor bpl, 0x85: 4080f585
not r8: 49f7d0
xor r10b, bpl: 4432d5
sal dl, 0xc7: c0f2c7
not eax: f7d0
je 0x7ffb72c2bd4f: 0f8421721d00

bytecode len: 358 -   4a8d2cc5878597fe66d1c14080e6354889ac34dbc6e5fa6681f122e25f498dacb034b4b20766d1c941c1e81c48c1f67b66c1ff8766f7d148c1cebd0fb7c6664433d166f7df480fb3ef4813cc66440fabc541fec8488b74f1f8488d8fb3a99eb5410fc84989b469c61459b0664181e8953a98410fb6ac6bd01459b04132ea4002e80fbff140d0c52bc166994080dd0140d0c541c0c88166ffce6641c1e0484080f58549f7d04432d5c0f2c7f7d00f8421721d00

block IDs [duplicates]: [433]
['xor dword ptr [rsp + r8 - 0x5aff4ba7], eax', 'sar cl, 0x81', 'mov r10, qword ptr [rsp + r8 - 0x5aff4ba7]', 'movsxd rax, eax', 'add rbx, rax', 'pop rax', 'add rax, 0x312cc', 'jmp rax']

bytes: xor dword ptr [rsp + r8 - 0x5aff4ba7], eax: 4231840459b400a5
sar cl, 0x81: c0f981
mov r10, qword ptr [rsp + r8 - 0x5aff4ba7]: 4e8b940459b400a5
movsxd rax, eax: 4863c0
add rbx, rax: 4803d8
pop rax: 58
add rax, 0x312cc: 4805cc120300
jmp rax: ffe0

bytecode len: 68 -   4231840459b400a5c0f9814e8b940459b400a54863c04803d8584805cc120300ffe0

block IDs [duplicates]: [434]
['mov qword ptr [rsp + rdi - 0x5c56ff27], rdx', 'xor r10b, sil', 'sar r8w, 0x64', 'lea rsi, [rsp + rsi + 0x18]', 'xor dword ptr [rsp + rdx*2 - 0x1ffec], eax', 'add rbp, qword ptr [rsi + rdx*2 - 0x1fffe]', 'xchg dx, di', 'neg r8w', 'mov qword ptr [rdi + r9 - 0x5c570017], rbp', 'jl 0x7ffb72cf22dc']

bytes: mov qword ptr [rsp + rdi - 0x5c56ff27], rdx: 4889943cd900a9a3
xor r10b, sil: 4432d6
sar r8w, 0x64: 6641c1f864
lea rsi, [rsp + rsi + 0x18]: 488d743418
xor dword ptr [rsp + rdx*2 - 0x1ffec], eax: 3184541400feff
add rbp, qword ptr [rsi + rdx*2 - 0x1fffe]: 4803ac560200feff
xchg dx, di: 6687fa
neg r8w: 6641f7d8
mov qword ptr [rdi + r9 - 0x5c570017], rbp: 4a89ac0fe9ffa8a3
jl 0x7ffb72cf22dc: 0f8c976f1600

bytecode len: 114 -   4889943cd900a9a34432d66641c1f864488d7434183184541400feff4803ac560200feff6687fa6641f7d84a89ac0fe9ffa8a30f8c976f1600

block IDs [duplicates]: [435]
['mov ecx, 0x3931f136', 'push rcx', 'mov rdx, qword ptr [r9 + rcx*2 - 0x7263e26c]', 'sub rbp, rdx', 'mov r10d, 0xda962391', 'lea r8, [r10 + r10*8 + 0x4803c381]', 'lea r9, [rip - 0x15]', 'mov r10d, dword ptr [r11]', 'movzx eax, r8b', 'mov ecx, eax', 'lea r11, [r11 + rax*4 - 0x264]', 'xadd eax, r8d', 'movzx edi, cx', 'xor r10d, ebp', 'push rcx', 'bswap eax', 'dec r10d', 'shr byte ptr [rsp + r8*2 - 0x132], 6', 'bswap r10d', 'shl al, 0xc1', 'shr rax, 0x16', 'mov edx, r8d', 'ror r10d, 3', 'xor al, dil', 'lea r10d, [r10 + r8*2 + 0x3228c97a]', 'xchg qword ptr [rsp + r8*2 - 0x134], rcx', 'lea rsi, [rcx + 0x7a6de21]', 'xor r10d, 0xd7940b1e', 'neg word ptr [rsp + r8*2 - 0x130]', 'mov qword ptr [rsp + r8*2 - 0x134], rbp', 'cmovg rcx, rsi', 'shl r8, 0xb', 'xor dword ptr [rsp + r8 - 0x4d000], r10d', 'pop rbp', 'push rax', 'inc r8d', 'movsxd r10, r10d', 'add r9, r10', 'mov qword ptr [rsp + r8 - 0x4d001], r9', 'ret']

bytes: mov ecx, 0x3931f136: b936f13139
push rcx: 51
mov rdx, qword ptr [r9 + rcx*2 - 0x7263e26c]: 498b9449941d9c8d
sub rbp, rdx: 482bea
mov r10d, 0xda962391: 41ba912396da
lea r8, [r10 + r10*8 + 0x4803c381]: 4f8d84d281c30348
lea r9, [rip - 0x15]: 4c8d0debffffff
mov r10d, dword ptr [r11]: 458b1423
movzx eax, r8b: 410fb6c0
mov ecx, eax: 8bc8
lea r11, [r11 + rax*4 - 0x264]: 4d8d9c839cfdffff
xadd eax, r8d: 440fc1c0
movzx edi, cx: 0fb7f9
xor r10d, ebp: 4433d5
push rcx: 51
bswap eax: 0fc8
dec r10d: 41ffca
shr byte ptr [rsp + r8*2 - 0x132], 6: 42c0ac44cefeffff06
bswap r10d: 410fca
shl al, 0xc1: c0e0c1
shr rax, 0x16: 48c1e816
mov edx, r8d: 418bd0
ror r10d, 3: 41c1ca03
xor al, dil: 4032c7
lea r10d, [r10 + r8*2 + 0x3228c97a]: 478d94427ac92832
xchg qword ptr [rsp + r8*2 - 0x134], rcx: 4a878c44ccfeffff
lea rsi, [rcx + 0x7a6de21]: 488db121dea607
xor r10d, 0xd7940b1e: 4181f21e0b94d7
neg word ptr [rsp + r8*2 - 0x130]: 6642f79c44d0feffff
mov qword ptr [rsp + r8*2 - 0x134], rbp: 4a89ac44ccfeffff
cmovg rcx, rsi: 480f4fce
shl r8, 0xb: 49c1e00b
xor dword ptr [rsp + r8 - 0x4d000], r10d: 463194040030fbff
pop rbp: 5d
push rax: 50
inc r8d: 41ffc0
movsxd r10, r10d: 4d63d2
add r9, r10: 4d03ca
mov qword ptr [rsp + r8 - 0x4d001], r9: 4e898c04ff2ffbff
ret: c3

bytecode len: 368 -   b936f1313951498b9449941d9c8d482bea41ba912396da4f8d84d281c303484c8d0debffffff458b1423410fb6c08bc84d8d9c839cfdffff440fc1c00fb7f94433d5510fc841ffca42c0ac44cefeffff06410fcac0e0c148c1e816418bd041c1ca034032c7478d94427ac928324a878c44ccfeffff488db121dea6074181f21e0b94d76642f79c44d0feffff4a89ac44ccfeffff480f4fce49c1e00b463194040030fbff5d5041ffc04d63d24d03ca4e898c04ff2ffbffc3

block IDs [duplicates]: [437]
['mov rdi, qword ptr [rbx]', 'mov rdx, qword ptr [rbx + 8]', 'call 0x7ffb72c76055']

bytes: mov rdi, qword ptr [rbx]: 488b3c23
mov rdx, qword ptr [rbx + 8]: 488b5308
call 0x7ffb72c76055: e8a6f53b00

bytecode len: 26 -   488b3c23488b5308e8a6f53b00

block IDs [duplicates]: [438]
['mov r10d, 0xa587bb20', 'mov edx, dword ptr [r11]', 'movsx esi, r10b', 'lea rdi, [rsi*4 - 0x4afb744b]', 'lea rcx, [r10*2 - 0x5a4bd6c1]', 'xor edx, ebp', 'mov eax, r10d', 'xor word ptr [rsp + rsi*4 - 0x70], 0xefbf', 'mov qword ptr [rsp + rsi - 0x10], rbp', 'pop r10', 'adc ecx, eax', 'mov qword ptr [rsp + rsi*8 - 0x100], rsi', 'xor dword ptr [rsp + rsi - 0x18], edx', 'inc byte ptr [rsp + rsi - 0x1d]', 'mov word ptr [rsp + rsi*4 - 0x7d], si', 'sub si, word ptr [rsp + rsi - 0x1c]', 'mov rbp, qword ptr [rsp + rdi*2 + 8]', 'movsxd rdx, edx', 'inc al', 'mov r10d, 0x3b944b9a', 'adc r9, rdx', 'or di, word ptr [r11 + rdi + 4]', 'cqo', 'neg rcx', 'jbe 0x7ffb72d07207']

bytes: mov r10d, 0xa587bb20: 41ba20bb87a5
mov edx, dword ptr [r11]: 418b13
movsx esi, r10b: 410fbef2
lea rdi, [rsi*4 - 0x4afb744b]: 488d3cb5b58b04b5
lea rcx, [r10*2 - 0x5a4bd6c1]: 4a8d0c553f29b4a5
xor edx, ebp: 33d5
mov eax, r10d: 418bc2
xor word ptr [rsp + rsi*4 - 0x70], 0xefbf: 668174b490bfef
mov qword ptr [rsp + rsi - 0x10], rbp: 48896c34f0
pop r10: 415a
adc ecx, eax: 13c8
mov qword ptr [rsp + rsi*8 - 0x100], rsi: 4889b4f400ffffff
xor dword ptr [rsp + rsi - 0x18], edx: 315434e8
inc byte ptr [rsp + rsi - 0x1d]: fe4434e3
mov word ptr [rsp + rsi*4 - 0x7d], si: 668974b483
sub si, word ptr [rsp + rsi - 0x1c]: 662b7434e4
mov rbp, qword ptr [rsp + rdi*2 + 8]: 488b6c7c08
movsxd rdx, edx: 4863d2
inc al: fec0
mov r10d, 0x3b944b9a: 41ba9a4b943b
adc r9, rdx: 4c13ca
or di, word ptr [r11 + rdi + 4]: 66410b7c3b04
cqo: 4899
neg rcx: 48f7d9
jbe 0x7ffb72d07207: 0f86f8b42400

bytecode len: 224 -   41ba20bb87a5418b13410fbef2488d3cb5b58b04b54a8d0c553f29b4a533d5418bc2668174b490bfef48896c34f0415a13c84889b4f400ffffff315434e8fe4434e3668974b483662b7434e4488b6c7c084863d2fec041ba9a4b943b4c13ca66410b7c3b04489948f7d90f86f8b42400

block IDs [duplicates]: [439]
['lea rdi, [rsp + rdi + 0x18]', 'mov rax, qword ptr [rax + rdi - 0x1b287b4]', 'add dword ptr [rsp + rdx*4 - 0x76], 0x4597891b', 'mov qword ptr [rbx + rdx*2 - 0x48], rax', 'rol word ptr [rsp + rdx - 0xc], 0x63', 'mov qword ptr [rsp + rdx - 0x20], 0x2d317236', 'jnp 0x7ffb72d2d188']

bytes: lea rdi, [rsp + rdi + 0x18]: 488d7c3c18
mov rax, qword ptr [rax + rdi - 0x1b287b4]: 488b84384c784dfe
add dword ptr [rsp + rdx*4 - 0x76], 0x4597891b: 8144948a1b899745
mov qword ptr [rbx + rdx*2 - 0x48], rax: 48894453b8
rol word ptr [rsp + rdx - 0xc], 0x63: 66c14414f463
mov qword ptr [rsp + rdx - 0x20], 0x2d317236: 48c74414e03672312d
jnp 0x7ffb72d2d188: 0f8bc8363400

bytecode len: 94 -   488d7c3c18488b84384c784dfe8144948a1b89974548894453b866c14414f46348c74414e03672312d0f8bc8363400

block IDs [duplicates]: [440]
['mov dl, byte ptr [r11 + rdx*2 - 0x3a]', 'dec r8w', 'mov eax, 0x88b65c05', 'lea r11, [r11 + r8 - 0xfff8]', 'sub r10d, 0xf4017e9c', 'lea r8, [rsi + r8*4 - 0x1cec797d]', 'mov edi, dword ptr [rsp + r10 - 0xbfe832e]', 'xor dl, bpl', 'call 0x7ffb72eeae63']

bytes: mov dl, byte ptr [r11 + rdx*2 - 0x3a]: 418a5453c6
dec r8w: 6641ffc8
mov eax, 0x88b65c05: b8055cb688
lea r11, [r11 + r8 - 0xfff8]: 4f8d9c030800ffff
sub r10d, 0xf4017e9c: 4181ea9c7e01f4
lea r8, [rsi + r8*4 - 0x1cec797d]: 4e8d8486838613e3
mov edi, dword ptr [rsp + r10 - 0xbfe832e]: 428bbc14d27c01f4
xor dl, bpl: 4032d5
call 0x7ffb72eeae63: e86e135000

bytecode len: 106 -   418a5453c66641ffc8b8055cb6884f8d9c030800ffff4181ea9c7e01f44e8d8486838613e3428bbc14d27c01f44032d5e86e135000

block IDs [duplicates]: [441]
['mov r10d, 0x6291040f', 'lea r11, [r10 + r11 - 0x6291040b]', 'movzx ecx, r10w', 'movsx r8d, cl', 'lea rdi, [r10 + r10*4 - 0x43c41f46]', 'rol r10, 0x34', 'lea esi, [rcx + rsi + 0x7ea02780]', 'push r8', 'neg qword ptr [rsp + rcx*4 - 0x103c]', 'movsx eax, cl', 'ror esi, 1', 'bswap esi', 'cqo', 'push r10', 'call 0x7ffb72b70412']

bytes: mov r10d, 0x6291040f: 41ba0f049162
lea r11, [r10 + r11 - 0x6291040b]: 4f8d9c1af5fb6e9d
movzx ecx, r10w: 410fb7ca
movsx r8d, cl: 440fbec1
lea rdi, [r10 + r10*4 - 0x43c41f46]: 4b8dbc92bae03bbc
rol r10, 0x34: 49c1c234
lea esi, [rcx + rsi + 0x7ea02780]: 8db4318027a07e
push r8: 4150
neg qword ptr [rsp + rcx*4 - 0x103c]: 48f79c8cc4efffff
movsx eax, cl: 0fbec1
ror esi, 1: d1ce
bswap esi: 0fce
cqo: 4899
push r10: 4152
call 0x7ffb72b70412: e896b90000

bytecode len: 134 -   41ba0f0491624f8d9c1af5fb6e9d410fb7ca440fbec14b8dbc92bae03bbc49c1c2348db4318027a07e415048f79c8cc4efffff0fbec1d1ce0fce48994152e896b90000

block IDs [duplicates]: [442]
['rol esi, 3', 'xor r10d, ecx', 'push rdi', 'mov qword ptr [rsp + r10 - 0x62d07], rbp', 'mov qword ptr [rsp + r10*2 - 0xc5a36], rax', 'inc byte ptr [rsp + r10*4 - 0x18b475]', 'xor dword ptr [rsp + r10*2 - 0xc5a26], esi', 'not byte ptr [rsp + r10 - 0x62d1c]', 'mov rbp, qword ptr [rsp + r10*2 - 0xc5a26]', 'movsxd rsi, esi', 'dec qword ptr [rsp + r10 - 0x62d0f]', 'add r9, rsi', 'xchg dword ptr [rsp + r10 - 0x62d18], edi', 'or rdx, qword ptr [rsp + r10 - 0x62d0f]', 'shr cl, 0x61', 'mov r10, qword ptr [rbx + r10 - 0x62d1f]', 'xor di, 0xb9bb', 'lea rbx, [rbx + rcx - 0x3ff]', 'dec cl', 'or eax, dword ptr [rsp + rcx - 0x400]', 'mov qword ptr [rsp + rcx*2 - 0x7f4], rax', 'mov r8w, word ptr [r11 + r8*2 - 0x1e]', 'movsx esi, dil', 'bts edi, 0xa9', 'ror sil, 0x21', 'lea r11, [rcx + r11 - 0x404]', 'xor r8w, bp', 'dec byte ptr [rsp + rcx*2 - 0x7fe]', 'or al, cl', 'ror r8w, 1', 'neg r8w', 'push rax', 'not r8w', 'inc esi', 'inc r8w', 'xchg qword ptr [rsp + rcx*4 - 0x104a], rdx', 'ror cl, 0xe4', 'xor bp, r8w', 'shr edx, cl', 'inc dword ptr [rsp + rdi*2 - 0x16d5c]', 'lea r8, [rsp + r8 + 0x28]', 'shl rax, cl', 'xchg eax, edi', 'mov qword ptr [r8 + rcx*2 - 0x1204], r10', 'jae 0x7ffb72d744b2']

bytes: rol esi, 3: c1c603
xor r10d, ecx: 4433d1
push rdi: 57
mov qword ptr [rsp + r10 - 0x62d07], rbp: 4a89ac14f9d2f9ff
mov qword ptr [rsp + r10*2 - 0xc5a36], rax: 4a898454caa5f3ff
inc byte ptr [rsp + r10*4 - 0x18b475]: 42fe84948b4be7ff
xor dword ptr [rsp + r10*2 - 0xc5a26], esi: 4231b454daa5f3ff
not byte ptr [rsp + r10 - 0x62d1c]: 42f69414e4d2f9ff
mov rbp, qword ptr [rsp + r10*2 - 0xc5a26]: 4a8bac54daa5f3ff
movsxd rsi, esi: 4863f6
dec qword ptr [rsp + r10 - 0x62d0f]: 4aff8c14f1d2f9ff
add r9, rsi: 4c03ce
xchg dword ptr [rsp + r10 - 0x62d18], edi: 4287bc14e8d2f9ff
or rdx, qword ptr [rsp + r10 - 0x62d0f]: 4a0b9414f1d2f9ff
shr cl, 0x61: c0e961
mov r10, qword ptr [rbx + r10 - 0x62d1f]: 4e8b9413e1d2f9ff
xor di, 0xb9bb: 6681f7bbb9
lea rbx, [rbx + rcx - 0x3ff]: 488d9c0b01fcffff
dec cl: fec9
or eax, dword ptr [rsp + rcx - 0x400]: 0b840c00fcffff
mov qword ptr [rsp + rcx*2 - 0x7f4], rax: 4889844c0cf8ffff
mov r8w, word ptr [r11 + r8*2 - 0x1e]: 66478b4443e2
movsx esi, dil: 400fbef7
bts edi, 0xa9: 0fbaefa9
ror sil, 0x21: 40c0ce21
lea r11, [rcx + r11 - 0x404]: 4e8d9c19fcfbffff
xor r8w, bp: 664433c5
dec byte ptr [rsp + rcx*2 - 0x7fe]: fe8c4c02f8ffff
or al, cl: 0ac1
ror r8w, 1: 6641d1c8
neg r8w: 6641f7d8
push rax: 50
not r8w: 6641f7d0
inc esi: ffc6
inc r8w: 6641ffc0
xchg qword ptr [rsp + rcx*4 - 0x104a], rdx: 4887948cb6efffff
ror cl, 0xe4: c0c9e4
xor bp, r8w: 664133e8
shr edx, cl: d3ea
inc dword ptr [rsp + rdi*2 - 0x16d5c]: ff847ca492feff
lea r8, [rsp + r8 + 0x28]: 4e8d440428
shl rax, cl: 48d3e0
xchg eax, edi: 97
mov qword ptr [r8 + rcx*2 - 0x1204], r10: 4d899448fcedffff
jae 0x7ffb72d744b2: 0f83af3f2000

bytecode len: 462 -   c1c6034433d1574a89ac14f9d2f9ff4a898454caa5f3ff42fe84948b4be7ff4231b454daa5f3ff42f69414e4d2f9ff4a8bac54daa5f3ff4863f64aff8c14f1d2f9ff4c03ce4287bc14e8d2f9ff4a0b9414f1d2f9ffc0e9614e8b9413e1d2f9ff6681f7bbb9488d9c0b01fcfffffec90b840c00fcffff4889844c0cf8ffff66478b4443e2400fbef70fbaefa940c0ce214e8d9c19fcfbffff664433c5fe8c4c02f8ffff0ac16641d1c86641f7d8506641f7d0ffc66641ffc04887948cb6efffffc0c9e4664133e8d3eaff847ca492feff4e8d44042848d3e0974d899448fcedffff0f83af3f2000

block IDs [duplicates]: [443]
['push rax', 'xor ecx, 0x689d25ab', 'bswap ecx', 'not ecx', 'neg ecx', 'pop rdi', 'mov qword ptr [rsp + r8*4 - 0x1c1f4], rbp', 'cbw', 'xor dword ptr [rsp + r8 - 0x706b], ecx', 'push rax', 'mov rbp, qword ptr [rsp + r8*2 - 0xe0e6]', 'movsxd rcx, ecx', 'mov qword ptr [rsp + r8*2 - 0xe0f6], r8', 'sar dword ptr [rsp + r8 - 0x7081], 0x6e', 'adc r9, rcx', 'push r8', 'rol qword ptr [rsp + r8*2 - 0xe0fe], 0xd7', 'push r10', 'mov rsi, qword ptr [rbx + r8 - 0x708b]', 'movzx edi, byte ptr [r11 + r8 - 0x707e]', 'lea r11, [r11 + r8*8 - 0x38412]', 'call 0x7ffb72a9aa4b']

bytes: push rax: 50
xor ecx, 0x689d25ab: 81f1ab259d68
bswap ecx: 0fc9
not ecx: f7d1
neg ecx: f7d9
pop rdi: 5f
mov qword ptr [rsp + r8*4 - 0x1c1f4], rbp: 4a89ac840c3efeff
cbw: 6698
xor dword ptr [rsp + r8 - 0x706b], ecx: 42318c04958fffff
push rax: 50
mov rbp, qword ptr [rsp + r8*2 - 0xe0e6]: 4a8bac441a1fffff
movsxd rcx, ecx: 4863c9
mov qword ptr [rsp + r8*2 - 0xe0f6], r8: 4e8984440a1fffff
sar dword ptr [rsp + r8 - 0x7081], 0x6e: 42c1bc047f8fffff6e
adc r9, rcx: 4c13c9
push r8: 4150
rol qword ptr [rsp + r8*2 - 0xe0fe], 0xd7: 4ac18444021fffffd7
push r10: 4152
mov rsi, qword ptr [rbx + r8 - 0x708b]: 4a8bb403758fffff
movzx edi, byte ptr [r11 + r8 - 0x707e]: 430fb6bc03828fffff
lea r11, [r11 + r8*8 - 0x38412]: 4f8d9cc3ee7bfcff
call 0x7ffb72a9aa4b: e894121500

bytecode len: 214 -   5081f1ab259d680fc9f7d1f7d95f4a89ac840c3efeff669842318c04958fffff504a8bac441a1fffff4863c94e8984440a1fffff42c1bc047f8fffff6e4c13c941504ac18444021fffffd741524a8bb403758fffff430fb6bc03828fffff4f8d9cc3ee7bfcffe894121500

block IDs [duplicates]: [444]
['xadd r10, rax', 'cmove rdx, rax', 'xor dil, bpl', 'xor dil, 0x80', 'inc word ptr [rsp + r8 - 0x7066]', 'lea rax, [r10 + 0x7a087083]', 'rol dil, 1', 'mov ecx, dword ptr [rsp + r8 - 0x7052]', 'xchg r10, rcx', 'not dil', 'add dil, 0xa4', 'inc rax', 'rol ax, 6', 'mov qword ptr [rsp + r8 - 0x7083], rcx', 'xor bpl, dil', 'mov qword ptr [rsp + r8*4 - 0x1c1ec], rdx', 'sub r8, -0x157683ef', 'lea rdi, [rsp + rdi + 0x40]', 'mov qword ptr [rsp + r8*2 - 0x2aede8ac], rax', 'mov qword ptr [rdi + r8*4 - 0x55dbd1c8], rsi', 'mov esi, ecx', 'mov qword ptr [rsp + r8*2 - 0x2aede8e4], r9', 'ret 0x38']

bytes: xadd r10, rax: 490fc1c2
cmove rdx, rax: 480f44d0
xor dil, bpl: 4032fd
xor dil, 0x80: 4080f780
inc word ptr [rsp + r8 - 0x7066]: 6642ff84049a8fffff
lea rax, [r10 + 0x7a087083]: 498d828370087a
rol dil, 1: 40d0c7
mov ecx, dword ptr [rsp + r8 - 0x7052]: 428b8c04ae8fffff
xchg r10, rcx: 4987ca
not dil: 40f6d7
add dil, 0xa4: 4080c7a4
inc rax: 48ffc0
rol ax, 6: 66c1c006
mov qword ptr [rsp + r8 - 0x7083], rcx: 4a898c047d8fffff
xor bpl, dil: 4032ef
mov qword ptr [rsp + r8*4 - 0x1c1ec], rdx: 4a899484143efeff
sub r8, -0x157683ef: 4981e8117c89ea
lea rdi, [rsp + rdi + 0x40]: 488d7c3c40
mov qword ptr [rsp + r8*2 - 0x2aede8ac], rax: 4a898444541712d5
mov qword ptr [rdi + r8*4 - 0x55dbd1c8], rsi: 4a89b487382e24aa
mov esi, ecx: 8bf1
mov qword ptr [rsp + r8*2 - 0x2aede8e4], r9: 4e898c441c1712d5
ret 0x38: c23800

bytecode len: 238 -   490fc1c2480f44d04032fd4080f7806642ff84049a8fffff498d828370087a40d0c7428b8c04ae8fffff4987ca40f6d74080c7a448ffc066c1c0064a898c047d8fffff4032ef4a899484143efeff4981e8117c89ea488d7c3c404a898444541712d54a89b487382e24aa8bf14e898c441c1712d5c23800

block IDs [duplicates]: [445]
['movzx r8d, byte ptr [r11]', 'mov ecx, 0x391268a6', 'lea rdx, [rcx*8 - 0xa403771]', 'lea rdi, [rcx + rdx*8 - 0x56dca8f2]', 'xor r8b, bpl', 'ror r8b, 1', 'movsx esi, cl', 'inc r8b', 'mov eax, 0x54ac3cb9', 'neg r8b', 'ror r8b, 1', 'xor r8b, 0x2c', 'dec r8b', 'lea rcx, [r10 + rcx + 0x17d0c5d9]', 'rol rcx, 1', 'lea rcx, [rcx + r10 + 0x7f47f23b]', 'xor rcx, 0xffffffffe31c4620', 'xor rbp, rcx', 'shr sil, 0x63', 'mov qword ptr [rdi + rbx - 0xa801eb5], rcx', 'neg al', 'shr ax, 0x43', 'movzx edx, byte ptr [r11 + rdi - 0xa801ea5]', 'xor dl, bpl', 'call 0x7ffb72c71f52']

bytes: movzx r8d, byte ptr [r11]: 450fb603
mov ecx, 0x391268a6: b9a6681239
lea rdx, [rcx*8 - 0xa403771]: 488d14cd8fc8bff5
lea rdi, [rcx + rdx*8 - 0x56dca8f2]: 488dbcd10e5723a9
xor r8b, bpl: 4432c5
ror r8b, 1: 41d0c8
movsx esi, cl: 0fbef1
inc r8b: 41fec0
mov eax, 0x54ac3cb9: b8b93cac54
neg r8b: 41f6d8
ror r8b, 1: 41d0c8
xor r8b, 0x2c: 4180f02c
dec r8b: 41fec8
lea rcx, [r10 + rcx + 0x17d0c5d9]: 498d8c0ad9c5d017
rol rcx, 1: 48d1c1
lea rcx, [rcx + r10 + 0x7f47f23b]: 4a8d8c113bf2477f
xor rcx, 0xffffffffe31c4620: 4881f120461ce3
xor rbp, rcx: 4833e9
shr sil, 0x63: 40c0ee63
mov qword ptr [rdi + rbx - 0xa801eb5], rcx: 48898c1f4be17ff5
neg al: f6d8
shr ax, 0x43: 66c1e843
movzx edx, byte ptr [r11 + rdi - 0xa801ea5]: 410fb6943b5be17ff5
xor dl, bpl: 4032d5
call 0x7ffb72c71f52: e85d3c1000

bytecode len: 238 -   450fb603b9a6681239488d14cd8fc8bff5488dbcd10e5723a94432c541d0c80fbef141fec0b8b93cac5441f6d841d0c84180f02c41fec8498d8c0ad9c5d01748d1c14a8d8c113bf2477f4881f120461ce34833e940c0ee6348898c1f4be17ff5f6d866c1e843410fb6943b5be17ff54032d5e85d3c1000

block IDs [duplicates]: [446]
['mov rdi, qword ptr [rbx]', 'mov rcx, qword ptr [rbx + 8]', 'mov r8d, 0x6fa7a31f', 'mov esi, r8d', 'lea r10, [r8*4 + 0x671d0402]', 'add rdi, rcx', 'mov qword ptr [r8 + rbx - 0x6fa7a317], rdi', 'movzx edi, word ptr [r8 + r11 - 0x6fa7a31f]', 'xor di, bp', 'and r10b, 0xb8', 'rol di, 1', 'not di', 'not r8w', 'push r8', 'add di, 0xf4af', 'movzx ecx, word ptr [rsp + r8 - 0x6fa75cde]', 'not di', 'shl rsi, 0xe5', 'xor word ptr [rsp + r8 - 0x6fa75cda], r8w', 'mov eax, 0x2414098a', 'sbb di, 0xa234', 'xor di, 0xb437', 'dec di', 'or dword ptr [rsp + rcx - 0x6fa7], eax', 'cqo', 'ror di, 1', 'ror r8d, 0x62', 'pop rax', 'call 0x7ffb729d998b']

bytes: mov rdi, qword ptr [rbx]: 488b3c23
mov rcx, qword ptr [rbx + 8]: 488b4b08
mov r8d, 0x6fa7a31f: 41b81fa3a76f
mov esi, r8d: 418bf0
lea r10, [r8*4 + 0x671d0402]: 4e8d148502041d67
add rdi, rcx: 4803f9
mov qword ptr [r8 + rbx - 0x6fa7a317], rdi: 4989bc18e95c5890
movzx edi, word ptr [r8 + r11 - 0x6fa7a31f]: 430fb7bc18e15c5890
xor di, bp: 6633fd
and r10b, 0xb8: 4180e2b8
rol di, 1: 66d1c7
not di: 66f7d7
not r8w: 6641f7d0
push r8: 4150
add di, 0xf4af: 6681c7aff4
movzx ecx, word ptr [rsp + r8 - 0x6fa75cde]: 420fb78c0422a35890
not di: 66f7d7
shl rsi, 0xe5: 48c1e6e5
xor word ptr [rsp + r8 - 0x6fa75cda], r8w: 664631840426a35890
mov eax, 0x2414098a: b88a091424
sbb di, 0xa234: 6681df34a2
xor di, 0xb437: 6681f737b4
dec di: 66ffcf
or dword ptr [rsp + rcx - 0x6fa7], eax: 09840c5990ffff
cqo: 4899
ror di, 1: 66d1cf
ror r8d, 0x62: 41c1c862
pop rax: 58
call 0x7ffb729d998b: e8926e0c00

bytecode len: 268 -   488b3c23488b4b0841b81fa3a76f418bf04e8d148502041d674803f94989bc18e95c5890430fb7bc18e15c58906633fd4180e2b866d1c766f7d76641f7d041506681c7aff4420fb78c0422a3589066f7d748c1e6e5664631840426a35890b88a0914246681df34a26681f737b466ffcf09840c5990ffff489966d1cf41c1c86258e8926e0c00

block IDs [duplicates]: [447]
['xor bp, di', 'bswap rdx', 'lea rdi, [rsp + rdi + 8]', 'mov qword ptr [rsp + r8*2 - 0x37d3ae70], rdx', 'mov r10, qword ptr [rdi + rdx*2]', 'sar eax, 0x27', 'xchg qword ptr [rsp + r8*2 - 0x37d3ae70], rsi', 'mov qword ptr [rbx + rsi*8], r10', 'neg r8', 'push rcx', 'mov dword ptr [rsp + rsi + 8], esi', 'sub word ptr [rsp + r8 + 0x1be9d73d], cx', 'mov r10d, dword ptr [rsp + r8 + 0x1be9d73a]', 'add r10w, dx', 'inc word ptr [rsp + r8 + 0x1be9d73b]', 'lea edi, [r8 + rdi - 0x63a42c56]', 'dec ecx', 'rol edi, 2', 'ror edx, 0x91', 'call 0x7ffb72c59ec8']

bytes: xor bp, di: 6633ef
bswap rdx: 480fca
lea rdi, [rsp + rdi + 8]: 488d7c3c08
mov qword ptr [rsp + r8*2 - 0x37d3ae70], rdx: 4a89944490512cc8
mov r10, qword ptr [rdi + rdx*2]: 4c8b1457
sar eax, 0x27: c1f827
xchg qword ptr [rsp + r8*2 - 0x37d3ae70], rsi: 4a87b44490512cc8
mov qword ptr [rbx + rsi*8], r10: 4c8914f3
neg r8: 49f7d8
push rcx: 51
mov dword ptr [rsp + rsi + 8], esi: 89743408
sub word ptr [rsp + r8 + 0x1be9d73d], cx: 6642298c043dd7e91b
mov r10d, dword ptr [rsp + r8 + 0x1be9d73a]: 468b94043ad7e91b
add r10w, dx: 664403d2
inc word ptr [rsp + r8 + 0x1be9d73b]: 6642ff84043bd7e91b
lea edi, [r8 + rdi - 0x63a42c56]: 418dbc38aad35b9c
dec ecx: ffc9
rol edi, 2: c1c702
ror edx, 0x91: c1ca91
call 0x7ffb72c59ec8: e8c3042800

bytecode len: 194 -   6633ef480fca488d7c3c084a89944490512cc84c8b1457c1f8274a87b44490512cc84c8914f349f7d851897434086642298c043dd7e91b468b94043ad7e91b664403d26642ff84043bd7e91b418dbc38aad35b9cffc9c1c702c1ca91e8c3042800

block IDs [duplicates]: [448]
['mov word ptr [rsi + rbx - 0x1325], r8w', 'mov edi, dword ptr [r11 + rsi*2 - 0x2645]', 'inc si', 'lea r11, [r11 + rsi - 0x131f]', 'xor edi, ebp', 'mov eax, r10d', 'or rsi, 0x682b4f33', 'rol cl, 0x67', 'xor edi, 0x9036b897', 'xadd rsi, r10', 'call 0x7ffb72c80895']

bytes: mov word ptr [rsi + rbx - 0x1325], r8w: 664489841edbecffff
mov edi, dword ptr [r11 + rsi*2 - 0x2645]: 418bbc73bbd9ffff
inc si: 66ffc6
lea r11, [r11 + rsi - 0x131f]: 4d8d9c33e1ecffff
xor edi, ebp: 33fd
mov eax, r10d: 418bc2
or rsi, 0x682b4f33: 4881ce334f2b68
rol cl, 0x67: c0c167
xor edi, 0x9036b897: 81f797b83690
xadd rsi, r10: 4c0fc1d6
call 0x7ffb72c80895: e803e23200

bytecode len: 116 -   664489841edbecffff418bbc73bbd9ffff66ffc64d8d9c33e1ecffff33fd418bc24881ce334f2b68c0c16781f797b836904c0fc1d6e803e23200

block IDs [duplicates]: [449]
['shl eax, 0x1d', 'sbb dl, al', 'not dl', 'sbb dl, 0x1d', 'mov edi, r8d', 'xor bpl, dl', 'xadd di, cx', 'xadd dil, r8b', 'adc rdx, rsp', 'or r8w, di', 'dec cx', 'mov byte ptr [rax + rdx - 0x20000000], sil', 'cdq', 'xor dil, dl', 'mov r10d, dword ptr [r11 + rax*2 - 0x3fffffff]', 'dec eax', 'sal edi, cl', 'xor r10d, ebp', 'not r10d', 'inc edi', 'xor r8w, 0xb53d', 'rol r10d, 1', 'rol rdx, cl', 'lea rsi, [r8 + rdx*8 + 0x5a84db2e]', 'inc r10d', 'push r8', 'shl al, 0xc3', 'xadd edx, eax', 'not r10d', 'not r8b', 'inc qword ptr [rsp + rax]', 'lea rax, [rdx + rsi*2 - 0x4f59397e]', 'sbb r10d, 0xe9243939', 'dec rcx', 'not r10d', 'bswap r10d', 'xor r10d, 0x6a81ef09', 'xadd dword ptr [rsp + rcx - 0x2800510f], esi', 'inc r10d', 'dec ecx', 'not r10d', 'lea r10d, [r10 + r8 - 0x64e0b7ab]', 'push rsi', 'xchg byte ptr [rsp + rdi - 0x10a6f7f6], sil', 'bswap r10d', 'sub dword ptr [rsp + rdi - 0x10a6f7fc], 0x4b1b5102', 'sal word ptr [rsp + rcx - 0x28005107], 0x87', 'mov qword ptr [rsp + rcx - 0x28005108], rbp', 'xor dword ptr [rsp + rcx - 0x28005108], r10d', 'mov rbp, qword ptr [rsp + rcx*2 - 0x5000a218]', 'sbb dil, 0xb2', 'movsxd r10, r10d', 'add r9, r10', 'movzx r8d, word ptr [rcx + r11 - 0x2800510b]', 'pop rsi', 'mov r10d, esi', 'neg sil', 'xor r8w, bp', 'xchg rcx, r10', 'dec rax', 'not r8w', 'neg si', 'mov qword ptr [rsp + rcx - 0x830800], rcx', 'btr rsi, rax', 'neg r8w', 'lea rdx, [rsi*2 + 0x8118faf]', 'neg rsi', 'sar ax, 0x48', 'xor r8w, 0x5da4', 'sub r8w, 0xd53e', 'xor r8w, 0xe018', 'shl ax, 1', 'xor bp, r8w', 'cdqe', 'call 0x7ffb72b9954d']

bytes: shl eax, 0x1d: c1e01d
sbb dl, al: 1ad0
not dl: f6d2
sbb dl, 0x1d: 80da1d
mov edi, r8d: 418bf8
xor bpl, dl: 4032ea
xadd di, cx: 660fc1cf
xadd dil, r8b: 440fc0c7
adc rdx, rsp: 4813d4
or r8w, di: 66440bc7
dec cx: 66ffc9
mov byte ptr [rax + rdx - 0x20000000], sil: 4088b410000000e0
cdq: 99
xor dil, dl: 4032fa
mov r10d, dword ptr [r11 + rax*2 - 0x3fffffff]: 458b9443010000c0
dec eax: ffc8
sal edi, cl: d3f7
xor r10d, ebp: 4433d5
not r10d: 41f7d2
inc edi: ffc7
xor r8w, 0xb53d: 664181f03db5
rol r10d, 1: 41d1c2
rol rdx, cl: 48d3c2
lea rsi, [r8 + rdx*8 + 0x5a84db2e]: 498db4d02edb845a
inc r10d: 41ffc2
push r8: 4150
shl al, 0xc3: c0e0c3
xadd edx, eax: 0fc1c2
not r10d: 41f7d2
not r8b: 41f6d0
inc qword ptr [rsp + rax]: 48ff0404
lea rax, [rdx + rsi*2 - 0x4f59397e]: 488d847282c6a6b0
sbb r10d, 0xe9243939: 4181da393924e9
dec rcx: 48ffc9
not r10d: 41f7d2
bswap r10d: 410fca
xor r10d, 0x6a81ef09: 4181f209ef816a
xadd dword ptr [rsp + rcx - 0x2800510f], esi: 0fc1b40cf1aeffd7
inc r10d: 41ffc2
dec ecx: ffc9
not r10d: 41f7d2
lea r10d, [r10 + r8 - 0x64e0b7ab]: 478d940255481f9b
push rsi: 56
xchg byte ptr [rsp + rdi - 0x10a6f7f6], sil: 4086b43c0a0859ef
bswap r10d: 410fca
sub dword ptr [rsp + rdi - 0x10a6f7fc], 0x4b1b5102: 81ac3c040859ef02511b4b
sal word ptr [rsp + rcx - 0x28005107], 0x87: 66c1b40cf9aeffd787
mov qword ptr [rsp + rcx - 0x28005108], rbp: 4889ac0cf8aeffd7
xor dword ptr [rsp + rcx - 0x28005108], r10d: 4431940cf8aeffd7
mov rbp, qword ptr [rsp + rcx*2 - 0x5000a218]: 488bac4ce85dffaf
sbb dil, 0xb2: 4080dfb2
movsxd r10, r10d: 4d63d2
add r9, r10: 4d03ca
movzx r8d, word ptr [rcx + r11 - 0x2800510b]: 460fb78419f5aeffd7
pop rsi: 5e
mov r10d, esi: 448bd6
neg sil: 40f6de
xor r8w, bp: 664433c5
xchg rcx, r10: 4c87d1
dec rax: 48ffc8
not r8w: 6641f7d0
neg si: 66f7de
mov qword ptr [rsp + rcx - 0x830800], rcx: 48898c0c00f87cff
btr rsi, rax: 480fb3c6
neg r8w: 6641f7d8
lea rdx, [rsi*2 + 0x8118faf]: 488d1475af8f1108
neg rsi: 48f7de
sar ax, 0x48: 66c1f848
xor r8w, 0x5da4: 664181f0a45d
sub r8w, 0xd53e: 664181e83ed5
xor r8w, 0xe018: 664181f018e0
shl ax, 1: 66d1e0
xor bp, r8w: 664133e8
cdqe: 4898
call 0x7ffb72b9954d: e813b91d00

bytecode len: 648 -   c1e01d1ad0f6d280da1d418bf84032ea660fc1cf440fc0c74813d466440bc766ffc94088b410000000e0994032fa458b9443010000c0ffc8d3f74433d541f7d2ffc7664181f03db541d1c248d3c2498db4d02edb845a41ffc24150c0e0c30fc1c241f7d241f6d048ff0404488d847282c6a6b04181da393924e948ffc941f7d2410fca4181f209ef816a0fc1b40cf1aeffd741ffc2ffc941f7d2478d940255481f9b564086b43c0a0859ef410fca81ac3c040859ef02511b4b66c1b40cf9aeffd7874889ac0cf8aeffd74431940cf8aeffd7488bac4ce85dffaf4080dfb24d63d24d03ca460fb78419f5aeffd75e448bd640f6de664433c54c87d148ffc86641f7d066f7de48898c0c00f87cff480fb3c66641f7d8488d1475af8f110848f7de66c1f848664181f0a45d664181e83ed5664181f018e066d1e0664133e84898e813b91d00

block IDs [duplicates]: [450]
['mov word ptr [rbx + rax + 0x743dff6e], r8w', 'mov rcx, qword ptr [r11 + rcx*4 - 0x20c1ff9]', 'call 0x7ffb72b91996']

bytes: mov word ptr [rbx + rax + 0x743dff6e], r8w: 66448984036eff3d74
mov rcx, qword ptr [r11 + rcx*4 - 0x20c1ff9]: 498b8c8b07e0f3fd
call 0x7ffb72b91996: e83384ffff

bytecode len: 44 -   66448984036eff3d74498b8c8b07e0f3fde83384ffff

block IDs [duplicates]: [451]
['pop r10', 'add r10, 0x24387', 'jmp r10']

bytes: pop r10: 415a
add r10, 0x24387: 4981c287430200
jmp r10: 41ffe2

bytecode len: 24 -   415a4981c28743020041ffe2

block IDs [duplicates]: [452]
['xor r10b, 0xbf', 'shr dil, 0xa3', 'movsx r8d, sil', 'not r10b', 'xor bpl, r10b', 'mov qword ptr [rsp + rdi - 0x1ed06], rsi', 'shl edi, 0x17', 'lea r10, [rsp + r10 + 0x10]', 'jbe 0x7ffb72cc44d6']

bytes: xor r10b, 0xbf: 4180f2bf
shr dil, 0xa3: 40c0efa3
movsx r8d, sil: 440fbec6
not r10b: 41f6d2
xor bpl, r10b: 4132ea
mov qword ptr [rsp + rdi - 0x1ed06], rsi: 4889b43cfa12feff
shl edi, 0x17: c1e717
lea r10, [rsp + r10 + 0x10]: 4e8d541410
jbe 0x7ffb72cc44d6: 0f861c914100

bytecode len: 80 -   4180f2bf40c0efa3440fbec641f6d24132ea4889b43cfa12feffc1e7174e8d5414100f861c914100

block IDs [duplicates]: [453]
['shl dil, 0x23', 'js 0x7ffb72b14d3a']

bytes: shl dil, 0x23: 40c0e723
js 0x7ffb72b14d3a: 0f8876992600

bytecode len: 20 -   40c0e7230f8876992600

block IDs [duplicates]: [454]
['xor cl, byte ptr [r10 + rax]', 'cwde', 'push rsi', 'mov word ptr [rbx + rax], cx', 'neg dx', 'mov r10d, 0x348c7420', 'cwd', 'mov qword ptr [rsp + rax], r9', 'ret 0x10']

bytes: xor cl, byte ptr [r10 + rax]: 41320c02
cwde: 98
push rsi: 56
mov word ptr [rbx + rax], cx: 66890c03
neg dx: 66f7da
mov r10d, 0x348c7420: 41ba20748c34
cwd: 6699
mov qword ptr [rsp + rax], r9: 4c890c04
ret 0x10: c21000

bytecode len: 56 -   41320c02985666890c0366f7da41ba20748c3466994c890c04c21000

block IDs [duplicates]: [455]
['mov dil, byte ptr [rbx + 2]', 'or dword ptr [rsp + 0xa], 0xb7343727', 'je 0x7ffb72e0ea0f']

bytes: mov dil, byte ptr [rbx + 2]: 408a7b02
or dword ptr [rsp + 0xa], 0xb7343727: 814c240a273734b7
je 0x7ffb72e0ea0f: 0f84f4c64300

bytecode len: 36 -   408a7b02814c240a273734b70f84f4c64300

block IDs [duplicates]: [493, 493, 493]
['and sil, dil', 'not sil', 'mov word ptr [rbx + 2], si', 'mov esi, dword ptr [r11]', 'xor esi, ebp', 'pop rcx', 'not qword ptr [rsp]', 'push -0x2dea5664', 'dec esi', 'mov ecx, dword ptr [rsp + 7]', 'neg esi', 'movzx edi, byte ptr [rsp + rcx - 0x48095cfa]', 'cmove rdx, qword ptr [rsp + r8 - 0xa]', 'dec eax', 'neg eax', 'add esi, 0xf915612c', 'inc eax', 'xadd cx, r8w', 'xadd qword ptr [rsp + r8 - 0xae], rsi', 'not eax', 'dec r8w', 'inc byte ptr [rsp + r8*2 - 0x15a]', 'and r10, r8', 'mov qword ptr [rsp + r8*8 - 0x568], rbp', 'xor dword ptr [rsp + r8 - 0xad], eax', 'sub cl, r8b', 'ror r8w, 0x21', 'pop rbp', 'inc rcx', 'bts r8w, cx', 'lea rcx, [r10 + rsi*4 - 0x7cd2e9e6]', 'movsxd rax, eax', 'xor esi, 0x8ba57b8d', 'push rcx', 'adc r9, rax', 'rol word ptr [rsp + r8*8 - 0x482ac], 0xab', 'mov qword ptr [rsp + r8 - 0x9056], r9', 'ret']

bytes: and sil, dil: 4022f7
not sil: 40f6d6
mov word ptr [rbx + 2], si: 66897302
mov esi, dword ptr [r11]: 418b33
xor esi, ebp: 33f5
pop rcx: 59
not qword ptr [rsp]: 48f7542400
push -0x2dea5664: 689ca915d2
dec esi: ffce
mov ecx, dword ptr [rsp + 7]: 8b4c2407
neg esi: f7de
movzx edi, byte ptr [rsp + rcx - 0x48095cfa]: 0fb6bc0c06a3f6b7
cmove rdx, qword ptr [rsp + r8 - 0xa]: 4a0f445404f6
dec eax: ffc8
neg eax: f7d8
add esi, 0xf915612c: 81c62c6115f9
inc eax: ffc0
xadd cx, r8w: 66440fc1c1
xadd qword ptr [rsp + r8 - 0xae], rsi: 4a0fc1b40452ffffff
not eax: f7d0
dec r8w: 6641ffc8
inc byte ptr [rsp + r8*2 - 0x15a]: 42fe8444a6feffff
and r10, r8: 4d23d0
mov qword ptr [rsp + r8*8 - 0x568], rbp: 4a89acc498faffff
xor dword ptr [rsp + r8 - 0xad], eax: 4231840453ffffff
sub cl, r8b: 412ac8
ror r8w, 0x21: 6641c1c821
pop rbp: 5d
inc rcx: 48ffc1
bts r8w, cx: 66410fabc8
lea rcx, [r10 + rsi*4 - 0x7cd2e9e6]: 498d8cb21a162d83
movsxd rax, eax: 4863c0
xor esi, 0x8ba57b8d: 81f68d7ba58b
push rcx: 51
adc r9, rax: 4c13c8
rol word ptr [rsp + r8*8 - 0x482ac], 0xab: 6642c184c4547dfbffab
mov qword ptr [rsp + r8 - 0x9056], r9: 4e898c04aa6fffff
ret: c3

bytecode len: 328 -   4022f740f6d666897302418b3333f55948f7542400689ca915d2ffce8b4c2407f7de0fb6bc0c06a3f6b74a0f445404f6ffc8f7d881c62c6115f9ffc066440fc1c14a0fc1b40452fffffff7d06641ffc842fe8444a6feffff4d23d04a89acc498faffff4231840453ffffff412ac86641c1c8215d48ffc166410fabc8498d8cb21a162d834863c081f68d7ba58b514c13c86642c184c4547dfbffab4e898c04aa6fffffc3

block IDs [duplicates]: [458]
['shr qword ptr [rsp + rdx*2 - 0x5975f9a4], 0x7c', 'rol dil, 1', 'dec dil', 'movzx ecx, r8w', 'rol dil, 1', 'dec dil', 'bswap r10', 'cqo', 'neg dil', 'sal r10w, 0xab', 'xor bpl, dil', 'lea rdi, [rsp + rdi + 0x18]', 'and dl, ah', 'setle byte ptr [rsp + rdx + 3]', 'movzx si, byte ptr [rdi + rdx*4]', 'mov word ptr [rbx + rdx - 4], si', 'lea rbx, [rbx + rdx - 4]', 'mov edi, dword ptr [r11 + rdx + 2]', 'mov esi, r10d', 'xadd word ptr [rsp + rdx + 5], cx', 'lea r11, [rdx + r11 + 6]', 'call 0x7ffb72b930df']

bytes: shr qword ptr [rsp + rdx*2 - 0x5975f9a4], 0x7c: 48c1ac545c068aa67c
rol dil, 1: 40d0c7
dec dil: 40fecf
movzx ecx, r8w: 410fb7c8
rol dil, 1: 40d0c7
dec dil: 40fecf
bswap r10: 490fca
cqo: 4899
neg dil: 40f6df
sal r10w, 0xab: 6641c1f2ab
xor bpl, dil: 4032ef
lea rdi, [rsp + rdi + 0x18]: 488d7c3c18
and dl, ah: 22d4
setle byte ptr [rsp + rdx + 3]: 0f9e441403
movzx si, byte ptr [rdi + rdx*4]: 660fb63497
mov word ptr [rbx + rdx - 4], si: 66897413fc
lea rbx, [rbx + rdx - 4]: 488d5c13fc
mov edi, dword ptr [r11 + rdx + 2]: 418b7c1302
mov esi, r10d: 418bf2
xadd word ptr [rsp + rdx + 5], cx: 660fc14c1405
lea r11, [rdx + r11 + 6]: 4e8d5c1a06
call 0x7ffb72b930df: e804f60200

bytecode len: 184 -   48c1ac545c068aa67c40d0c740fecf410fb7c840d0c740fecf490fca489940f6df6641c1f2ab4032ef488d7c3c1822d40f9e441403660fb6349766897413fc488d5c13fc418b7c1302418bf2660fc14c14054e8d5c1a06e804f60200

block IDs [duplicates]: [459]
['sub r8, 0x2b806807', 'xor edi, ebp', 'xor r8w, word ptr [rsp + rdx*2 + 0x14]', 'sar dl, 0x45', 'dec edi', 'pop rcx', 'ror qword ptr [rsp + rdx + 2], 0xe7', 'neg edi', 'push r10', 'push rsi', 'xor edi, 0x44afaea1', 'mov rax, qword ptr [rsp + 0x20]', 'add rax, 0xf7e25', 'jmp rax']

bytes: sub r8, 0x2b806807: 4981e80768802b
xor edi, ebp: 33fd
xor r8w, word ptr [rsp + rdx*2 + 0x14]: 664433445414
sar dl, 0x45: c0fa45
dec edi: ffcf
pop rcx: 59
ror qword ptr [rsp + rdx + 2], 0xe7: 48c14c1402e7
neg edi: f7df
push r10: 4152
push rsi: 56
xor edi, 0x44afaea1: 81f7a1aeaf44
mov rax, qword ptr [rsp + 0x20]: 488b442420
add rax, 0xf7e25: 4805257e0f00
jmp rax: ffe0

bytecode len: 102 -   4981e80768802b33fd664433445414c0fa45ffcf5948c14c1402e7f7df41525681f7a1aeaf44488b4424204805257e0f00ffe0

block IDs [duplicates]: [495, 495]
['mov rbp, qword ptr [rsp + rax - 0x6b536a]', 'mov esi, dword ptr [r11 + rsi - 0x13ff8953]', 'mov edx, r10d', 'lea r11, [r11 + rdi*4 - 0xfa486f]', 'xadd edx, r10d', 'sar cx, 0x61', 'movzx r8d, dx', 'xor esi, ebp', 'dec cx', 'lea esi, [rsi + r10 - 0x2bdf27cf]', 'ror esi, 2', 'dec esi', 'rol esi, 3', 'not r10b', 'dec esi', 'cdq', 'inc dl', 'sub r10w, 0xf25', 'not esi', 'and dl, cl', 'push rbp', 'jge 0x7ffb72a182f8']

bytes: mov rbp, qword ptr [rsp + rax - 0x6b536a]: 488bac0496ac94ff
mov esi, dword ptr [r11 + rsi - 0x13ff8953]: 418bb433ad7600ec
mov edx, r10d: 418bd2
lea r11, [r11 + rdi*4 - 0xfa486f]: 4d8d9cbb91b705ff
xadd edx, r10d: 440fc1d2
sar cx, 0x61: 66c1f961
movzx r8d, dx: 440fb7c2
xor esi, ebp: 33f5
dec cx: 66ffc9
lea esi, [rsi + r10 - 0x2bdf27cf]: 428db41631d820d4
ror esi, 2: c1ce02
dec esi: ffce
rol esi, 3: c1c603
not r10b: 41f6d2
dec esi: ffce
cdq: 99
inc dl: fec2
sub r10w, 0xf25: 664181ea250f
not esi: f7d6
and dl, cl: 22d1
push rbp: 55
jge 0x7ffb72a182f8: 0f8d3e300300

bytecode len: 170 -   488bac0496ac94ff418bb433ad7600ec418bd24d8d9cbb91b705ff440fc1d266c1f961440fb7c233f566ffc9428db41631d820d4c1ce02ffcec1c60341f6d2ffce99fec2664181ea250ff7d622d1550f8d3e300300

block IDs [duplicates]: [461]
['mov r10d, 0xa3b13c9c', 'movzx eax, r10b', 'cqo', 'shl r10w, 0x29', 'lea r11, [r11 + rdx*2 + 4]', 'movsx r8d, dx', 'movsx edi, r8b', 'dec edi', 'not ax', 'lea esi, [r10 + rsi - 0x77820b7a]', 'ror esi, 1', 'movzx ecx, al', 'dec r10', 'neg r8d', 'sbb esi, 0x90ada59c', 'neg esi', 'shr r8w, cl', 'cbw', 'sbb esi, edi', 'cqo', 'sal edx, 0x3b', 'push rbp', 'setp cl', 'xor dword ptr [rsp + rdx], esi', 'pop rbp', 'and di, cx', 'push rdi', 'movsxd rsi, esi', 'shr qword ptr [rsp + rdx*4], cl', 'add r9, rsi', 'add r10d, edx', 'mov ax, word ptr [rbx + rdx]', 'dec edx', 'xor r8w, word ptr [rbx + r8 + 2]', 'xor ax, dx', 'xor r8w, dx', 'xor dword ptr [rsp + rcx*8 - 5], r10d', 'or ax, r8w', 'dec edx', 'pop rdi', 'mov word ptr [rcx + rbx + 1], ax', 'lea rdi, [rcx + rbx + 1]', 'mov r8d, 0x6f0cff90', 'mov r10, rdi', 'mov si, word ptr ss:[r10 + rcx*2 - 2]', 'jle 0x7ffb72c990b3']

bytes: mov r10d, 0xa3b13c9c: 41ba9c3cb1a3
movzx eax, r10b: 410fb6c2
cqo: 4899
shl r10w, 0x29: 6641c1e229
lea r11, [r11 + rdx*2 + 4]: 4d8d5c5304
movsx r8d, dx: 440fbfc2
movsx edi, r8b: 410fbef8
dec edi: ffcf
not ax: 66f7d0
lea esi, [r10 + rsi - 0x77820b7a]: 418db43286f47d88
ror esi, 1: d1ce
movzx ecx, al: 0fb6c8
dec r10: 49ffca
neg r8d: 41f7d8
sbb esi, 0x90ada59c: 81de9ca5ad90
neg esi: f7de
shr r8w, cl: 6641d3e8
cbw: 6698
sbb esi, edi: 1bf7
cqo: 4899
sal edx, 0x3b: c1f23b
push rbp: 55
setp cl: 0f9ac1
xor dword ptr [rsp + rdx], esi: 313414
pop rbp: 5d
and di, cx: 6623f9
push rdi: 57
movsxd rsi, esi: 4863f6
shr qword ptr [rsp + rdx*4], cl: 48d32c94
add r9, rsi: 4c03ce
add r10d, edx: 4403d2
mov ax, word ptr [rbx + rdx]: 668b0413
dec edx: ffca
xor r8w, word ptr [rbx + r8 + 2]: 664633440302
xor ax, dx: 6633c2
xor r8w, dx: 664433c2
xor dword ptr [rsp + rcx*8 - 5], r10d: 443154ccfb
or ax, r8w: 66410bc0
dec edx: ffca
pop rdi: 5f
mov word ptr [rcx + rbx + 1], ax: 6689441901
lea rdi, [rcx + rbx + 1]: 488d7c1901
mov r8d, 0x6f0cff90: 41b890ff0c6f
mov r10, rdi: 4c8bd7
mov si, word ptr ss:[r10 + rcx*2 - 2]: 3666418b744afe
jle 0x7ffb72c990b3: 0f8edee01e00

bytecode len: 326 -   41ba9c3cb1a3410fb6c248996641c1e2294d8d5c5304440fbfc2410fbef8ffcf66f7d0418db43286f47d88d1ce0fb6c849ffca41f7d881de9ca5ad90f7de6641d3e866981bf74899c1f23b550f9ac13134145d6623f9574863f648d32c944c03ce4403d2668b0413ffca6646334403026633c2664433c2443154ccfb66410bc0ffca5f6689441901488d7c190141b890ff0c6f4c8bd73666418b744afe0f8edee01e00

block IDs [duplicates]: [462]
['movzx ecx, ax', 'mov cx, word ptr [rcx + rbx - 0x5093]', 'call 0x7ffb72be3ad2']

bytes: movzx ecx, ax: 0fb7c8
mov cx, word ptr [rcx + rbx - 0x5093]: 668b8c196dafffff
call 0x7ffb72be3ad2: e8d61e2e00

bytecode len: 32 -   0fb7c8668b8c196dafffffe8d61e2e00

block IDs [duplicates]: [463]
['xchg byte ptr [rsp + rax - 0x2b6fff5], dl', 'not edx', 'sub esi, edx', 'sal r8b, 0x45', 'inc dil', 'add r10w, r8w', 'xor esi, edx', 'lea rax, [r8 + r10*2 + 0x1d0f190c]', 'lea esi, [rsi + r8*2 + 0x18ba2e52]', 'cwd', 'mov qword ptr [rsp + r8*2 - 0x56e00c0], rdi', 'sub qword ptr [rsp + r8*2 - 0x56e0098], 0x2589b527', 'bswap esi', 'mov ecx, 0x898f8c07', 'xor edi, edi', 'mov qword ptr [rsp + r8*2 - 0x56e0098], rbp', 'xor dword ptr [rsp + r8 - 0x2b70038], esi', 'shr byte ptr [rsp + r8*2 - 0x56e00a0], cl', 'ror edi, 0xb1', 'mov rbp, qword ptr [rsp + r8 - 0x2b70038]', 'movsxd rsi, esi', 'adc r9, rsi', 'and word ptr [rsp + r8 - 0x2b7003f], di', 'mov qword ptr [rsp + r8 - 0x2b70038], r8', 'pop rax', 'add di, word ptr [rax + r11 - 1]', 'xor di, bp', 'shl r8d, cl', 'xor di, 0xb821', 'cbw', 'add qword ptr [rsp + rax*2 + 0x14], rax', 'sub byte ptr [rsp + rax], r10b', 'sbb di, dx', 'pop rax', 'xor word ptr [rsp + r8 - 0x5b802fed], r8w', 'call 0x7ffb72cc9d2e']

bytes: xchg byte ptr [rsp + rax - 0x2b6fff5], dl: 8694040b0049fd
not edx: f7d2
sub esi, edx: 2bf2
sal r8b, 0x45: 41c0f045
inc dil: 40fec7
add r10w, r8w: 664503d0
xor esi, edx: 33f2
lea rax, [r8 + r10*2 + 0x1d0f190c]: 4b8d84500c190f1d
lea esi, [rsi + r8*2 + 0x18ba2e52]: 428db446522eba18
cwd: 6699
mov qword ptr [rsp + r8*2 - 0x56e00c0], rdi: 4a89bc4440ff91fa
sub qword ptr [rsp + r8*2 - 0x56e0098], 0x2589b527: 4a81ac4468ff91fa27b58925
bswap esi: 0fce
mov ecx, 0x898f8c07: b9078c8f89
xor edi, edi: 33ff
mov qword ptr [rsp + r8*2 - 0x56e0098], rbp: 4a89ac4468ff91fa
xor dword ptr [rsp + r8 - 0x2b70038], esi: 4231b404c8ff48fd
shr byte ptr [rsp + r8*2 - 0x56e00a0], cl: 42d2ac4460ff91fa
ror edi, 0xb1: c1cfb1
mov rbp, qword ptr [rsp + r8 - 0x2b70038]: 4a8bac04c8ff48fd
movsxd rsi, esi: 4863f6
adc r9, rsi: 4c13ce
and word ptr [rsp + r8 - 0x2b7003f], di: 664221bc04c1ff48fd
mov qword ptr [rsp + r8 - 0x2b70038], r8: 4e898404c8ff48fd
pop rax: 58
add di, word ptr [rax + r11 - 1]: 6642037c18ff
xor di, bp: 6633fd
shl r8d, cl: 41d3e0
xor di, 0xb821: 6681f721b8
cbw: 6698
add qword ptr [rsp + rax*2 + 0x14], rax: 4801444414
sub byte ptr [rsp + rax], r10b: 44281404
sbb di, dx: 661bfa
pop rax: 58
xor word ptr [rsp + r8 - 0x5b802fed], r8w: 664631840413d07fa4
call 0x7ffb72cc9d2e: e8c8c14000

bytecode len: 352 -   8694040b0049fdf7d22bf241c0f04540fec7664503d033f24b8d84500c190f1d428db446522eba1866994a89bc4440ff91fa4a81ac4468ff91fa27b589250fceb9078c8f8933ff4a89ac4468ff91fa4231b404c8ff48fd42d2ac4460ff91fac1cfb14a8bac04c8ff48fd4863f64c13ce664221bc04c1ff48fd4e898404c8ff48fd586642037c18ff6633fd41d3e06681f721b86698480144441444281404661bfa58664631840413d07fa4e8c8c14000

block IDs [duplicates]: [464]
['ror di, 1', 'push rdx', 'mov qword ptr [rsp + r8 - 0x5b802ff2], rdx', 'xadd byte ptr [rsp + r8 - 0x5b802fee], al', 'sbb di, 0x1306', 'xor bp, di', 'call 0x7ffb72c38518']

bytes: ror di, 1: 66d1cf
push rdx: 52
mov qword ptr [rsp + r8 - 0x5b802ff2], rdx: 4a8994040ed07fa4
xadd byte ptr [rsp + r8 - 0x5b802fee], al: 420fc0840412d07fa4
sbb di, 0x1306: 6681df0613
xor bp, di: 6633ef
call 0x7ffb72c38518: e8391c1800

bytecode len: 68 -   66d1cf524a8994040ed07fa4420fc0840412d07fa46681df06136633efe8391c1800

block IDs [duplicates]: [465]
['btr rdi, 0x19', 'xor bp, ax', 'rol dil, 0xc4', 'setb cl', 'mov word ptr [rdi + rbx - 0x58943a1e], ax', 'push rdi', 'shl cl, 0x46', 'mov qword ptr [rsp + rdi - 0x58943a1e], r9', 'ret']

bytes: btr rdi, 0x19: 480fbaf719
xor bp, ax: 6633e8
rol dil, 0xc4: 40c0c7c4
setb cl: 0f92c1
mov word ptr [rdi + rbx - 0x58943a1e], ax: 6689841fe2c56ba7
push rdi: 57
shl cl, 0x46: c0e146
mov qword ptr [rsp + rdi - 0x58943a1e], r9: 4c898c3ce2c56ba7
ret: c3

bytecode len: 72 -   480fbaf7196633e840c0c7c40f92c16689841fe2c56ba757c0e1464c898c3ce2c56ba7c3

block IDs [duplicates]: [466]
['mov rsi, qword ptr [rbx + r8 - 0x7ffffefc]', 'pop rcx', 'adc rcx, -0xeeb7b', 'jmp rcx']

bytes: mov rsi, qword ptr [rbx + r8 - 0x7ffffefc]: 4a8bb40304010080
pop rcx: 59
adc rcx, -0xeeb7b: 4881d18514f1ff
jmp rcx: ffe1

bytecode len: 36 -   4a8bb40304010080594881d18514f1ffffe1

block IDs [duplicates]: [467]
['ror eax, 0xc7', 'mov rcx, qword ptr [r8 + rbx - 0x7ffffef4]', 'call 0x7ffb72d17a0c']

bytes: ror eax, 0xc7: c1c8c7
mov rcx, qword ptr [r8 + rbx - 0x7ffffef4]: 498b8c180c010080
call 0x7ffb72d17a0c: e8896f1c00

bytecode len: 32 -   c1c8c7498b8c180c010080e8896f1c00

block IDs [duplicates]: [468]
['mov rax, qword ptr [r8 + rcx - 0x5c1c4290]', 'movzx r8d, cx', 'neg r8b', 'mov qword ptr [rbx + rcx - 0x5c1c4298], rax', 'mov dx, word ptr [r11 + rcx - 0x5c1c428e]', 'mov edi, 0x1599d183', 'jb 0x7ffb72bb7146']

bytes: mov rax, qword ptr [r8 + rcx - 0x5c1c4290]: 498b840870bde3a3
movzx r8d, cx: 440fb7c1
neg r8b: 41f6d8
mov qword ptr [rbx + rcx - 0x5c1c4298], rax: 4889840b68bde3a3
mov dx, word ptr [r11 + rcx - 0x5c1c428e]: 66418b940b72bde3a3
mov edi, 0x1599d183: bf83d19915
jb 0x7ffb72bb7146: 0f82448f2200

bytecode len: 86 -   498b840870bde3a3440fb7c141f6d84889840b68bde3a366418b940b72bde3a3bf83d199150f82448f2200

block IDs [duplicates]: [469]
['mov qword ptr [rsp], 0x1ea57f1e', 'mov r10, qword ptr [rbx + 8]', 'not rax', 'mov ecx, 0xf80846b9', 'movsx edx, cl', 'not r10', 'lea r8, [rdi + rdi - 0x675966e2]', 'inc r8', 'and rax, r10', 'not cx', 'mov qword ptr [rbx + 8], rax', 'rol word ptr [rsp + 6], cl', 'mov r10d, edi', 'not edx', 'mov ecx, dword ptr [r11 + rdx - 0x46]', 'xchg qword ptr [rsp + rdx*2 - 0x8c], r8', 'xor ecx, ebp', 'neg ecx', 'shl word ptr [rsp + r8 - 0x1ea57f19], 0xa6', 'neg qword ptr [rsp + rdx - 0x46]', 'add r10b, byte ptr [rsp + rdx*4 - 0x111]', 'lea ecx, [rcx + r8*4 + 0x1f055ab8]', 'ror ecx, 1', 'movsx esi, r8w', 'not ecx', 'jnp 0x7ffb72dd5462']

bytes: mov qword ptr [rsp], 0x1ea57f1e: 48c74424001e7fa51e
mov r10, qword ptr [rbx + 8]: 4c8b542308
not rax: 48f7d0
mov ecx, 0xf80846b9: b9b94608f8
movsx edx, cl: 0fbed1
not r10: 49f7d2
lea r8, [rdi + rdi - 0x675966e2]: 4c8d843f1e99a698
inc r8: 49ffc0
and rax, r10: 4923c2
not cx: 66f7d1
mov qword ptr [rbx + 8], rax: 4889442308
rol word ptr [rsp + 6], cl: 66d3442406
mov r10d, edi: 448bd7
not edx: f7d2
mov ecx, dword ptr [r11 + rdx - 0x46]: 418b4c13ba
xchg qword ptr [rsp + rdx*2 - 0x8c], r8: 4c87845474ffffff
xor ecx, ebp: 33cd
neg ecx: f7d9
shl word ptr [rsp + r8 - 0x1ea57f19], 0xa6: 6642c1a404e7805ae1a6
neg qword ptr [rsp + rdx - 0x46]: 48f75c14ba
add r10b, byte ptr [rsp + rdx*4 - 0x111]: 44029494effeffff
lea ecx, [rcx + r8*4 + 0x1f055ab8]: 428d8c81b85a051f
ror ecx, 1: d1c9
movsx esi, r8w: 410fbff0
not ecx: f7d1
jnp 0x7ffb72dd5462: 0f8b933b4900

bytecode len: 244 -   48c74424001e7fa51e4c8b54230848f7d0b9b94608f80fbed149f7d24c8d843f1e99a69849ffc04923c266f7d1488944230866d3442406448bd7f7d2418b4c13ba4c87845474ffffff33cdf7d96642c1a404e7805ae1a648f75c14ba44029494effeffff428d8c81b85a051fd1c9410fbff0f7d10f8b933b4900

block IDs [duplicates]: [471]
['mov r10d, 0xda962391', 'lea r8, [r10 + r10*8 + 0x4803c381]', 'lea r9, [rip - 0x15]', 'mov r10d, dword ptr [r11]', 'movzx eax, r8b', 'mov ecx, eax', 'lea r11, [r11 + rax*4 - 0x264]', 'xadd eax, r8d', 'movzx edi, cx', 'xor r10d, ebp', 'push rcx', 'bswap eax', 'dec r10d', 'shr byte ptr [rsp + r8*2 - 0x132], 6', 'bswap r10d', 'shl al, 0xc1', 'shr rax, 0x16', 'mov edx, r8d', 'ror r10d, 3', 'xor al, dil', 'lea r10d, [r10 + r8*2 + 0x3228c97a]', 'xchg qword ptr [rsp + r8*2 - 0x134], rcx', 'lea rsi, [rcx + 0x7a6de21]', 'xor r10d, 0xd7940b1e', 'neg word ptr [rsp + r8*2 - 0x130]', 'mov qword ptr [rsp + r8*2 - 0x134], rbp', 'cmovg rcx, rsi', 'shl r8, 0xb', 'xor dword ptr [rsp + r8 - 0x4d000], r10d', 'pop rbp', 'push rax', 'inc r8d', 'movsxd r10, r10d', 'add r9, r10', 'mov qword ptr [rsp + r8 - 0x4d001], r9', 'ret']

bytes: mov r10d, 0xda962391: 41ba912396da
lea r8, [r10 + r10*8 + 0x4803c381]: 4f8d84d281c30348
lea r9, [rip - 0x15]: 4c8d0debffffff
mov r10d, dword ptr [r11]: 458b1423
movzx eax, r8b: 410fb6c0
mov ecx, eax: 8bc8
lea r11, [r11 + rax*4 - 0x264]: 4d8d9c839cfdffff
xadd eax, r8d: 440fc1c0
movzx edi, cx: 0fb7f9
xor r10d, ebp: 4433d5
push rcx: 51
bswap eax: 0fc8
dec r10d: 41ffca
shr byte ptr [rsp + r8*2 - 0x132], 6: 42c0ac44cefeffff06
bswap r10d: 410fca
shl al, 0xc1: c0e0c1
shr rax, 0x16: 48c1e816
mov edx, r8d: 418bd0
ror r10d, 3: 41c1ca03
xor al, dil: 4032c7
lea r10d, [r10 + r8*2 + 0x3228c97a]: 478d94427ac92832
xchg qword ptr [rsp + r8*2 - 0x134], rcx: 4a878c44ccfeffff
lea rsi, [rcx + 0x7a6de21]: 488db121dea607
xor r10d, 0xd7940b1e: 4181f21e0b94d7
neg word ptr [rsp + r8*2 - 0x130]: 6642f79c44d0feffff
mov qword ptr [rsp + r8*2 - 0x134], rbp: 4a89ac44ccfeffff
cmovg rcx, rsi: 480f4fce
shl r8, 0xb: 49c1e00b
xor dword ptr [rsp + r8 - 0x4d000], r10d: 463194040030fbff
pop rbp: 5d
push rax: 50
inc r8d: 41ffc0
movsxd r10, r10d: 4d63d2
add r9, r10: 4d03ca
mov qword ptr [rsp + r8 - 0x4d001], r9: 4e898c04ff2ffbff
ret: c3

bytecode len: 334 -   41ba912396da4f8d84d281c303484c8d0debffffff458b1423410fb6c08bc84d8d9c839cfdffff440fc1c00fb7f94433d5510fc841ffca42c0ac44cefeffff06410fcac0e0c148c1e816418bd041c1ca034032c7478d94427ac928324a878c44ccfeffff488db121dea6074181f21e0b94d76642f79c44d0feffff4a89ac44ccfeffff480f4fce49c1e00b463194040030fbff5d5041ffc04d63d24d03ca4e898c04ff2ffbffc3

block IDs [duplicates]: [472]
['mov ecx, 0x27357e26', 'movsx eax, cl', 'mov r10, qword ptr [rbx + rcx*2 - 0x4e6afc4c]', 'ror al, 0x46', 'movsx edx, cl', 'add edx, 0x39ba4b1c', 'movzx edi, word ptr [rcx + r11 - 0x27357e26]', 'xor di, bp', 'call 0x7ffb72be78c2']

bytes: mov ecx, 0x27357e26: b9267e3527
movsx eax, cl: 0fbec1
mov r10, qword ptr [rbx + rcx*2 - 0x4e6afc4c]: 4c8b944bb40395b1
ror al, 0x46: c0c846
movsx edx, cl: 0fbed1
add edx, 0x39ba4b1c: 81c21c4bba39
movzx edi, word ptr [rcx + r11 - 0x27357e26]: 420fb7bc19da81cad8
xor di, bp: 6633fd
call 0x7ffb72be78c2: e885173200

bytecode len: 90 -   b9267e35270fbec14c8b944bb40395b1c0c8460fbed181c21c4bba39420fb7bc19da81cad86633fde885173200

block IDs [duplicates]: [473]
['mov edx, 0xa819427', 'movzx r8d, byte ptr [r11 + rdx*2 - 0x1503284e]', 'bts dx, 0xa7', 'xor r8b, bpl', 'movsx r10d, dl', 'or rdx, 0x8999606', 'xor r8b, 0xb6', 'lea rsi, [r10 + rdx*2 - 0x34c0314c]', 'lea rdi, [r10*4 - 0xd4f9fc2]', 'add si, 0x54a9', 'not r8b', 'shr r10, 0xcb', 'ror r8b, 1', 'call 0x7ffb72b90681']

bytes: mov edx, 0xa819427: ba2794810a
movzx r8d, byte ptr [r11 + rdx*2 - 0x1503284e]: 450fb68453b2d7fcea
bts dx, 0xa7: 660fbaeaa7
xor r8b, bpl: 4432c5
movsx r10d, dl: 440fbed2
or rdx, 0x8999606: 4881ca06969908
xor r8b, 0xb6: 4180f0b6
lea rsi, [r10 + rdx*2 - 0x34c0314c]: 498db452b4ce3fcb
lea rdi, [r10*4 - 0xd4f9fc2]: 4a8d3c953e60b0f2
add si, 0x54a9: 6681c6a954
not r8b: 41f6d0
shr r10, 0xcb: 49c1eacb
ror r8b, 1: 41d0c8
call 0x7ffb72b90681: e8bd202200

bytecode len: 146 -   ba2794810a450fb68453b2d7fcea660fbaeaa74432c5440fbed24881ca069699084180f0b6498db452b4ce3fcb4a8d3c953e60b0f26681c6a95441f6d049c1eacb41d0c8e8bd202200

block IDs [duplicates]: [474]
['add r8b, r10b', 'movzx eax, dl', 'rol rax, 0x6a', 'mov qword ptr [rsp + rdx - 0xa9996a7], rdx', 'xor r8b, r10b', 'xor bpl, r8b', 'lea r8, [rsp + r8 + 8]', 'mov edx, 0x1706ce2b', 'movzx r10d, dl', 'mov r8d, dword ptr [r11 + rdx*2 - 0x2e0d9c56]', 'movzx edi, dl', 'xor r8d, ebp', 'movzx ecx, dil', 'shl dx, 0xa5', 'ror r8d, 1', 'lea rsi, [rdx + rcx*8 + 0x719ec1b2]', 'inc r8d', 'lea rsi, [rsi*2 + 0x4e9d55b9]', 'xor r8d, 0x16348688', 'bts si, dx', 'ror dl, 0x67', 'inc r8d', 'btr edx, r10d', 'jae 0x7ffb728f353e']

bytes: add r8b, r10b: 4502c2
movzx eax, dl: 0fb6c2
rol rax, 0x6a: 48c1c06a
mov qword ptr [rsp + rdx - 0xa9996a7], rdx: 48899414596966f5
xor r8b, r10b: 4532c2
xor bpl, r8b: 4132e8
lea r8, [rsp + r8 + 8]: 4e8d440408
mov edx, 0x1706ce2b: ba2bce0617
movzx r10d, dl: 440fb6d2
mov r8d, dword ptr [r11 + rdx*2 - 0x2e0d9c56]: 458b8453aa63f2d1
movzx edi, dl: 0fb6fa
xor r8d, ebp: 4433c5
movzx ecx, dil: 400fb6cf
shl dx, 0xa5: 66c1e2a5
ror r8d, 1: 41d1c8
lea rsi, [rdx + rcx*8 + 0x719ec1b2]: 488db4cab2c19e71
inc r8d: 41ffc0
lea rsi, [rsi*2 + 0x4e9d55b9]: 488d3475b9559d4e
xor r8d, 0x16348688: 4181f088863416
bts si, dx: 660fabd6
ror dl, 0x67: c0ca67
inc r8d: 41ffc0
btr edx, r10d: 440fb3d2
jae 0x7ffb728f353e: 0f8371c6d4ff

bytecode len: 218 -   4502c20fb6c248c1c06a48899414596966f54532c24132e84e8d440408ba2bce0617440fb6d2458b8453aa63f2d10fb6fa4433c5400fb6cf66c1e2a541d1c8488db4cab2c19e7141ffc0488d3475b9559d4e4181f088863416660fabd6c0ca6741ffc0440fb3d20f8371c6d4ff

block IDs [duplicates]: [475]
['mov edx, 0x1706ce2b', 'movzx r10d, dl', 'mov r8d, dword ptr [r11 + rdx*2 - 0x2e0d9c56]', 'movzx edi, dl', 'xor r8d, ebp', 'movzx ecx, dil', 'shl dx, 0xa5', 'ror r8d, 1', 'lea rsi, [rdx + rcx*8 + 0x719ec1b2]', 'inc r8d', 'lea rsi, [rsi*2 + 0x4e9d55b9]', 'xor r8d, 0x16348688', 'bts si, dx', 'ror dl, 0x67', 'inc r8d', 'btr edx, r10d', 'jae 0x7ffb728f353e']

bytes: mov edx, 0x1706ce2b: ba2bce0617
movzx r10d, dl: 440fb6d2
mov r8d, dword ptr [r11 + rdx*2 - 0x2e0d9c56]: 458b8453aa63f2d1
movzx edi, dl: 0fb6fa
xor r8d, ebp: 4433c5
movzx ecx, dil: 400fb6cf
shl dx, 0xa5: 66c1e2a5
ror r8d, 1: 41d1c8
lea rsi, [rdx + rcx*8 + 0x719ec1b2]: 488db4cab2c19e71
inc r8d: 41ffc0
lea rsi, [rsi*2 + 0x4e9d55b9]: 488d3475b9559d4e
xor r8d, 0x16348688: 4181f088863416
bts si, dx: 660fabd6
ror dl, 0x67: c0ca67
inc r8d: 41ffc0
btr edx, r10d: 440fb3d2
jae 0x7ffb728f353e: 0f8371c6d4ff

bytecode len: 160 -   ba2bce0617440fb6d2458b8453aa63f2d10fb6fa4433c5400fb6cf66c1e2a541d1c8488db4cab2c19e7141ffc0488d3475b9559d4e4181f088863416660fabd6c0ca6741ffc0440fb3d20f8371c6d4ff

block IDs [duplicates]: [476]
['mov ecx, 0xa43b3020', 'lea rsi, [rcx*4 + 0x74064384]', 'movzx r10d, byte ptr [r11]', 'xor r10b, bpl', 'movsx r8d, cx', 'sbb r10b, 0x9c', 'movsx eax, sil', 'shr si, 0xab', 'rol r10b, 1', 'dec r10b', 'neg r10b', 'xor bpl, r10b', 'cqo', 'add r10, rsp', 'call 0x7ffb728ae0d0']

bytes: mov ecx, 0xa43b3020: b920303ba4
lea rsi, [rcx*4 + 0x74064384]: 488d348d84430674
movzx r10d, byte ptr [r11]: 450fb61423
xor r10b, bpl: 4432d5
movsx r8d, cx: 440fbfc1
sbb r10b, 0x9c: 4180da9c
movsx eax, sil: 400fbec6
shr si, 0xab: 66c1eeab
rol r10b, 1: 41d0c2
dec r10b: 41feca
neg r10b: 41f6da
xor bpl, r10b: 4132ea
cqo: 4899
add r10, rsp: 4c03d4
call 0x7ffb728ae0d0: e81e7af8ff

bytecode len: 118 -   b920303ba4488d348d84430674450fb614234432d5440fbfc14180da9c400fbec666c1eeab41d0c241feca41f6da4132ea48994c03d4e81e7af8ff

block IDs [duplicates]: [477]
['mov qword ptr [rsp + r8 - 0x3020], rcx', 'movzx r8w, byte ptr [r10 + r8 - 0x3020]', 'mov edi, eax', 'bswap eax', 'rol dword ptr [rsp + rax*2 - 0x8000000], 0xd5', 'mov word ptr [rax + rbx - 0x4000002], r8w', 'adc edx, dword ptr [rax + r11 - 0x3ffffff]', 'sub dword ptr [rsp + rax - 0x3ffffff], eax', 'cdqe', 'mov r10d, esi', 'xor edx, ebp', 'dec edx', 'btr ecx, r10d', 'neg edx', 'sal word ptr [rsp + rax*4 - 0xffffffb], 0x2d', 'dec si', 'call 0x7ffb729fe09d']

bytes: mov qword ptr [rsp + r8 - 0x3020], rcx: 4a898c04e0cfffff
movzx r8w, byte ptr [r10 + r8 - 0x3020]: 66470fb68402e0cfffff
mov edi, eax: 8bf8
bswap eax: 0fc8
rol dword ptr [rsp + rax*2 - 0x8000000], 0xd5: c18444000000f8d5
mov word ptr [rax + rbx - 0x4000002], r8w: 6644898418fefffffb
adc edx, dword ptr [rax + r11 - 0x3ffffff]: 42139418010000fc
sub dword ptr [rsp + rax - 0x3ffffff], eax: 298404010000fc
cdqe: 4898
mov r10d, esi: 448bd6
xor edx, ebp: 33d5
dec edx: ffca
btr ecx, r10d: 440fb3d1
neg edx: f7da
sal word ptr [rsp + rax*4 - 0xffffffb], 0x2d: 66c1b484050000f02d
dec si: 66ffce
call 0x7ffb729fe09d: e877ff1400

bytecode len: 172 -   4a898c04e0cfffff66470fb68402e0cfffff8bf80fc8c18444000000f8d56644898418fefffffb42139418010000fc298404010000fc4898448bd633d5ffca440fb3d1f7da66c1b484050000f02d66ffcee877ff1400

block IDs [duplicates]: [478]
['xor edx, 0x44afaea1', 'shr r10b, 0xa3', 'sbb cx, cx', 'and cl, r10b', 'bswap edx', 'mov qword ptr [rsp + rax - 0x3fffff8], rbp', 'mov qword ptr [rsp + rax*4 - 0x10000000], rcx', 'xor dword ptr [rsp + rax*4 - 0xffffff8], edx', 'mov rbp, qword ptr [rsp + rax - 0x3fffff8]', 'lea rax, [rax - 0x7c7fc0f7]', 'movsxd rdx, edx', 'add r9, rdx', 'movsx r8d, byte ptr [rsp + rax + 0x787fc0f9]', 'movzx ecx, byte ptr [rax + r11 + 0x787fc0fc]', 'mov qword ptr [rsp + rax + 0x787fc0ff], rax', 'lea r11, [r11 + rdi*4 - 0xa]', 'movsx edx, byte ptr [rsp + rdi*2 - 3]', 'xor cl, bpl', 'xor cl, 0xb6', 'rol qword ptr [rsp + rdi + 4], 0xde', 'inc dil', 'call 0x7ffb72a180c9']

bytes: xor edx, 0x44afaea1: 81f2a1aeaf44
shr r10b, 0xa3: 41c0eaa3
sbb cx, cx: 661bc9
and cl, r10b: 4122ca
bswap edx: 0fca
mov qword ptr [rsp + rax - 0x3fffff8], rbp: 4889ac04080000fc
mov qword ptr [rsp + rax*4 - 0x10000000], rcx: 48898c84000000f0
xor dword ptr [rsp + rax*4 - 0xffffff8], edx: 319484080000f0
mov rbp, qword ptr [rsp + rax - 0x3fffff8]: 488bac04080000fc
lea rax, [rax - 0x7c7fc0f7]: 488d80093f8083
movsxd rdx, edx: 4863d2
add r9, rdx: 4c03ca
movsx r8d, byte ptr [rsp + rax + 0x787fc0f9]: 440fbe8404f9c07f78
movzx ecx, byte ptr [rax + r11 + 0x787fc0fc]: 420fb68c18fcc07f78
mov qword ptr [rsp + rax + 0x787fc0ff], rax: 48898404ffc07f78
lea r11, [r11 + rdi*4 - 0xa]: 4d8d5cbbf6
movsx edx, byte ptr [rsp + rdi*2 - 3]: 0fbe547cfd
xor cl, bpl: 4032cd
xor cl, 0xb6: 80f1b6
rol qword ptr [rsp + rdi + 4], 0xde: 48c1443c04de
inc dil: 40fec7
call 0x7ffb72a180c9: e8b39f0100

bytecode len: 236 -   81f2a1aeaf4441c0eaa3661bc94122ca0fca4889ac04080000fc48898c84000000f0319484080000f0488bac04080000fc488d80093f80834863d24c03ca440fbe8404f9c07f78420fb68c18fcc07f7848898404ffc07f784d8d5cbbf60fbe547cfd4032cd80f1b648c1443c04de40fec7e8b39f0100

block IDs [duplicates]: [479]
['not cl', 'mov qword ptr [rsp + rax + 0x787fc0f7], 0x2a9ae70f', 'ror cl, 1', 'pop rdx', 'push r8', 'sar dx, 0x6c', 'dec cl', 'add dword ptr [rsp + rdi*4 - 0x10], edx', 'lea rsi, [r8*2 + 0x57bb1d1b]', 'sbb word ptr [rsp + rsi - 0x57bb1d7f], 0x1b81', 'not cl', 'inc rsi', 'add al, dl', 'xor bpl, cl', 'lea rcx, [rsp + rcx + 0x18]', 'mov edi, dword ptr [rcx + rax + 0x787fc0f9]', 'inc rax', 'mov dword ptr [rsi + rbx - 0x57bb1d98], edi', 'lea rax, [rbx + r10*2 - 0x9e60006]', 'ja 0x7ffb72aa7653']

bytes: not cl: f6d1
mov qword ptr [rsp + rax + 0x787fc0f7], 0x2a9ae70f: 48c78404f7c07f780fe79a2a
ror cl, 1: d0c9
pop rdx: 5a
push r8: 4150
sar dx, 0x6c: 66c1fa6c
dec cl: fec9
add dword ptr [rsp + rdi*4 - 0x10], edx: 0154bcf0
lea rsi, [r8*2 + 0x57bb1d1b]: 4a8d34451b1dbb57
sbb word ptr [rsp + rsi - 0x57bb1d7f], 0x1b81: 66819c3481e244a8811b
not cl: f6d1
inc rsi: 48ffc6
add al, dl: 02c2
xor bpl, cl: 4032e9
lea rcx, [rsp + rcx + 0x18]: 488d4c0c18
mov edi, dword ptr [rcx + rax + 0x787fc0f9]: 8bbc01f9c07f78
inc rax: 48ffc0
mov dword ptr [rsi + rbx - 0x57bb1d98], edi: 89bc1e68e244a8
lea rax, [rbx + r10*2 - 0x9e60006]: 4a8d8453faff19f6
ja 0x7ffb72aa7653: 0f8727f50800

bytecode len: 186 -   f6d148c78404f7c07f780fe79a2ad0c95a415066c1fa6cfec90154bcf04a8d34451b1dbb5766819c3481e244a8811bf6d148ffc602c24032e9488d4c0c188bbc01f9c07f7848ffc089bc1e68e244a84a8d8453faff19f60f8727f50800

block IDs [duplicates]: [480]
['mov qword ptr [rbx + r10*8 - 0x2798000e], rax', 'ror r8, 0x38', 'pop r10', 'xadd dword ptr [rsp + rsi - 0x57bb1d90], r8d', 'lea rbx, [rdx + rbx - 0x2a9b000c]', 'pop r8', 'pop rax', 'jg 0x7ffb72eb83a2']

bytes: mov qword ptr [rbx + r10*8 - 0x2798000e], rax: 4a8984d3f2ff67d8
ror r8, 0x38: 49c1c838
pop r10: 415a
xadd dword ptr [rsp + rsi - 0x57bb1d90], r8d: 440fc1843470e244a8
lea rbx, [rdx + rbx - 0x2a9b000c]: 488d9c1af4ff64d5
pop r8: 4158
pop rax: 58
jg 0x7ffb72eb83a2: 0f8f270d4100

bytecode len: 80 -   4a8984d3f2ff67d849c1c838415a440fc1843470e244a8488d9c1af4ff64d54158580f8f270d4100

block IDs [duplicates]: [481]
['mov rcx, qword ptr [rbx]', 'mov edi, 0x6929aa32', 'mov edx, 0xf5aa7009', 'movzx esi, dil', 'mov edi, dword ptr ss:[rcx + rdi - 0x6929aa32]', 'movzx ecx, sil', 'lea rbx, [rbx + rsi*4 - 0xc4]', 'mov dword ptr [rsi + rbx - 0x32], edi', 'mov edi, edx', 'mov eax, ecx', 'mov r8d, dword ptr [rsi + r11 - 0x32]', 'sar si, 0xa5', 'lea r11, [r11 + rax - 0x2e]', 'sal dl, 0x61', 'xor r8d, ebp', 'neg r8d', 'ror r8d, 2', 'btc eax, edx', 'call 0x7ffb72b62e80']

bytes: mov rcx, qword ptr [rbx]: 488b0b
mov edi, 0x6929aa32: bf32aa2969
mov edx, 0xf5aa7009: ba0970aaf5
movzx esi, dil: 400fb6f7
mov edi, dword ptr ss:[rcx + rdi - 0x6929aa32]: 368bbc39ce55d696
movzx ecx, sil: 400fb6ce
lea rbx, [rbx + rsi*4 - 0xc4]: 488d9cb33cffffff
mov dword ptr [rsi + rbx - 0x32], edi: 897c1ece
mov edi, edx: 8bfa
mov eax, ecx: 8bc1
mov r8d, dword ptr [rsi + r11 - 0x32]: 468b441ece
sar si, 0xa5: 66c1fea5
lea r11, [r11 + rax - 0x2e]: 4d8d5c03d2
sal dl, 0x61: c0f261
xor r8d, ebp: 4433c5
neg r8d: 41f7d8
ror r8d, 2: 41c1c802
btc eax, edx: 0fbbd0
call 0x7ffb72b62e80: e8f1a70200

bytecode len: 160 -   488b0bbf32aa2969ba0970aaf5400fb6f7368bbc39ce55d696400fb6ce488d9cb33cffffff897c1ece8bfa8bc1468b441ece66c1fea54d8d5c03d2c0f2614433c541f7d841c1c8020fbbd0e8f1a70200

block IDs [duplicates]: [482]
['lea r8d, [r8 + rdi - 0x161aece7]', 'mov qword ptr [rsp + rsi*2 - 6], -0x3f5c70f0', 'dec dx', 'movzx r10d, word ptr [rsp + rsi - 2]', 'bswap r8d', 'xor r8d, 0xc5acd3b3', 'mov qword ptr [rsp + rsi*2 - 6], rbp', 'call 0x7ffb72a3c30d']

bytes: lea r8d, [r8 + rdi - 0x161aece7]: 458d84381913e5e9
mov qword ptr [rsp + rsi*2 - 6], -0x3f5c70f0: 48c74474fa108fa3c0
dec dx: 66ffca
movzx r10d, word ptr [rsp + rsi - 2]: 440fb75434fe
bswap r8d: 410fc8
xor r8d, 0xc5acd3b3: 4181f0b3d3acc5
mov qword ptr [rsp + rsi*2 - 6], rbp: 48896c74fa
call 0x7ffb72a3c30d: e86d280e00

bytecode len: 92 -   458d84381913e5e948c74474fa108fa3c066ffca440fb75434fe410fc84181f0b3d3acc548896c74fae86d280e00

block IDs [duplicates]: [483]
['mov edx, 0xa214a84', 'xchg dh, dl', 'mov ecx, dword ptr [r11 + rdx*8 - 0x510c2250]', 'xor ecx, ebp', 'lea ecx, [rcx + rdx + 0x2909b60]', 'mov qword ptr [rsp + rdx - 0xa21844a], rdx', 'not ecx', 'inc ecx', 'sar qword ptr [rsp + rdx - 0xa21844a], 0xba', 'bswap ecx', 'dec ecx', 'neg byte ptr [rsp + rdx - 0xa218446]', 'movzx r8d, dl', 'or qword ptr [rsp + rdx - 0xa21844a], rbp', 'movsx esi, r8w', 'xor dword ptr [rsp + rdx*8 - 0x510c2250], ecx', 'movsx edi, sil', 'pop rbp', 'mov eax, edi', 'movsxd rcx, ecx', 'add r9, rcx', 'lea r8, [rax - 0x7e4e0ad9]', 'mov edi, dword ptr [rdx + rbx - 0xa21844a]', 'and si, dx', 'mov eax, dword ptr [rbx + rdx*4 - 0x28861124]', 'bts r8, rsi', 'lea rcx, [rsi + r8*2 + 0x5e23d23b]', 'call 0x7ffb729644e4']

bytes: mov edx, 0xa214a84: ba844a210a
xchg dh, dl: 86d6
mov ecx, dword ptr [r11 + rdx*8 - 0x510c2250]: 418b8cd3b0ddf3ae
xor ecx, ebp: 33cd
lea ecx, [rcx + rdx + 0x2909b60]: 8d8c11609b9002
mov qword ptr [rsp + rdx - 0xa21844a], rdx: 48899414b67bdef5
not ecx: f7d1
inc ecx: ffc1
sar qword ptr [rsp + rdx - 0xa21844a], 0xba: 48c1bc14b67bdef5ba
bswap ecx: 0fc9
dec ecx: ffc9
neg byte ptr [rsp + rdx - 0xa218446]: f69c14ba7bdef5
movzx r8d, dl: 440fb6c2
or qword ptr [rsp + rdx - 0xa21844a], rbp: 4809ac14b67bdef5
movsx esi, r8w: 410fbff0
xor dword ptr [rsp + rdx*8 - 0x510c2250], ecx: 318cd4b0ddf3ae
movsx edi, sil: 400fbefe
pop rbp: 5d
mov eax, edi: 8bc7
movsxd rcx, ecx: 4863c9
add r9, rcx: 4c03c9
lea r8, [rax - 0x7e4e0ad9]: 4c8d8027f5b181
mov edi, dword ptr [rdx + rbx - 0xa21844a]: 8bbc1ab67bdef5
and si, dx: 6623f2
mov eax, dword ptr [rbx + rdx*4 - 0x28861124]: 8b8493dcee79d7
bts r8, rsi: 490fabf0
lea rcx, [rsi + r8*2 + 0x5e23d23b]: 4a8d8c463bd2235e
call 0x7ffb729644e4: e8a281f1ff

bytecode len: 266 -   ba844a210a86d6418b8cd3b0ddf3ae33cd8d8c11609b900248899414b67bdef5f7d1ffc148c1bc14b67bdef5ba0fc9ffc9f69c14ba7bdef5440fb6c24809ac14b67bdef5410fbff0318cd4b0ddf3ae400fbefe5d8bc74863c94c03c94c8d8027f5b1818bbc1ab67bdef56623f28b8493dcee79d7490fabf04a8d8c463bd2235ee8a281f1ff

block IDs [duplicates]: [484]
['inc r8', 'inc edx', 'mov r10d, edi', 'or sil, 0x9d', 'movzx eax, byte ptr [r11 + rdx*2 - 0x14430892]', 'xor al, bpl', 'mov qword ptr [rsp + rdx - 0xa21844b], 0x3517e30a', 'movsx edi, r8b', 'push rdi', 'dec al', 'shr dl, 0x43', 'rol al, 1', 'shr word ptr [rsp + rdx*2 - 0x1443080e], 0xc2', 'sbb al, 0x18', 'shr byte ptr [rsp + rdx - 0xa2183fe], 0x65', 'not al', 'mov ecx, dword ptr [rsp + rdx*4 - 0x28861019]', 'pop r8', 'add al, cl', 'inc dx', 'xor bpl, al', 'shr r8b, cl', 'ror si, 9', 'or rdi, rcx', 'lea rax, [rsp + rax + 8]', 'mov dword ptr [rax + rdx - 0xa21840a], r10d', 'mov eax, dword ptr [r11 + rdx - 0xa218405]', 'lea r10, [rsi*8 + 0x4199570e]', 'lea r11, [rdx + r11 - 0xa218401]', 'xor eax, ebp', 'rol cx, 0xaa', 'sar qword ptr [rsp + rdx*8 - 0x510c2050], 0x4c', 'adc word ptr [rsp + rdx - 0xa21840a], si', 'bswap eax', 'ror cl, 0x65', 'xchg qword ptr [rsp + r8*2 - 0x72], rcx', 'inc rdi', 'xor eax, 0x39ae4229', 'sub eax, 0x9d290498', 'ror eax, 3', 'xadd si, di', 'or dword ptr [rsp + rdx*4 - 0x28861028], r8d', 'seto sil', 'inc eax', 'lea rcx, [r8 + 0x708b380]', 'xchg qword ptr [rsp + rdx - 0xa21840a], rsi', 'neg eax', 'not r8b', 'add dword ptr [rsp + rdx*4 - 0x28861025], r8d', 'bswap eax', 'or word ptr [rsp + rdx*2 - 0x1443080f], r8w', 'sal qword ptr [rsp + rdx - 0xa21840a], 0x3a', 'ror eax, 3', 'xor eax, 0x1f0f9da6', 'or qword ptr [rsp + rdx - 0xa21840a], rbp', 'xadd di, cx', 'shr dil, 0xa1', 'xor dword ptr [rsp + rdx - 0xa21840a], eax', 'bts si, cx', 'sal edx, 0x2d', 'pop rbp', 'ror r8b, 0x45', 'mov dword ptr [rbx + rdx - 0x30813ffa], eax', 'setns sil', 'lea rbx, [rbx + r8*2 - 0x66]', 'add r8b, cl', 'xadd edi, ecx', 'jmp r9']

bytes: inc r8: 49ffc0
inc edx: ffc2
mov r10d, edi: 448bd7
or sil, 0x9d: 4080ce9d
movzx eax, byte ptr [r11 + rdx*2 - 0x14430892]: 410fb684536ef7bceb
xor al, bpl: 4032c5
mov qword ptr [rsp + rdx - 0xa21844b], 0x3517e30a: 48c78414b57bdef50ae31735
movsx edi, r8b: 410fbef8
push rdi: 57
dec al: fec8
shr dl, 0x43: c0ea43
rol al, 1: d0c0
shr word ptr [rsp + rdx*2 - 0x1443080e], 0xc2: 66c1ac54f2f7bcebc2
sbb al, 0x18: 1c18
shr byte ptr [rsp + rdx - 0xa2183fe], 0x65: c0ac14027cdef565
not al: f6d0
mov ecx, dword ptr [rsp + rdx*4 - 0x28861019]: 8b8c94e7ef79d7
pop r8: 4158
add al, cl: 02c1
inc dx: 66ffc2
xor bpl, al: 4032e8
shr r8b, cl: 41d2e8
ror si, 9: 66c1ce09
or rdi, rcx: 480bf9
lea rax, [rsp + rax + 8]: 488d440408
mov dword ptr [rax + rdx - 0xa21840a], r10d: 44899410f67bdef5
mov eax, dword ptr [r11 + rdx - 0xa218405]: 418b8413fb7bdef5
lea r10, [rsi*8 + 0x4199570e]: 4c8d14f50e579941
lea r11, [rdx + r11 - 0xa218401]: 4e8d9c1aff7bdef5
xor eax, ebp: 33c5
rol cx, 0xaa: 66c1c1aa
sar qword ptr [rsp + rdx*8 - 0x510c2050], 0x4c: 48c1bcd4b0dff3ae4c
adc word ptr [rsp + rdx - 0xa21840a], si: 6611b414f67bdef5
bswap eax: 0fc8
ror cl, 0x65: c0c965
xchg qword ptr [rsp + r8*2 - 0x72], rcx: 4a874c448e
inc rdi: 48ffc7
xor eax, 0x39ae4229: 352942ae39
sub eax, 0x9d290498: 2d9804299d
ror eax, 3: c1c803
xadd si, di: 660fc1fe
or dword ptr [rsp + rdx*4 - 0x28861028], r8d: 44098494d8ef79d7
seto sil: 400f90c6
inc eax: ffc0
lea rcx, [r8 + 0x708b380]: 498d8880b30807
xchg qword ptr [rsp + rdx - 0xa21840a], rsi: 4887b414f67bdef5
neg eax: f7d8
not r8b: 41f6d0
add dword ptr [rsp + rdx*4 - 0x28861025], r8d: 44018494dbef79d7
bswap eax: 0fc8
or word ptr [rsp + rdx*2 - 0x1443080f], r8w: 6644098454f1f7bceb
sal qword ptr [rsp + rdx - 0xa21840a], 0x3a: 48c1b414f67bdef53a
ror eax, 3: c1c803
xor eax, 0x1f0f9da6: 35a69d0f1f
or qword ptr [rsp + rdx - 0xa21840a], rbp: 4809ac14f67bdef5
xadd di, cx: 660fc1cf
shr dil, 0xa1: 40c0efa1
xor dword ptr [rsp + rdx - 0xa21840a], eax: 318414f67bdef5
bts si, cx: 660fabce
sal edx, 0x2d: c1f22d
pop rbp: 5d
ror r8b, 0x45: 41c0c845
mov dword ptr [rbx + rdx - 0x30813ffa], eax: 89841306c07ecf
setns sil: 400f99c6
lea rbx, [rbx + r8*2 - 0x66]: 4a8d5c439a
add r8b, cl: 4402c1
xadd edi, ecx: 0fc1cf
jmp r9: 41ffe1

bytecode len: 632 -   49ffc0ffc2448bd74080ce9d410fb684536ef7bceb4032c548c78414b57bdef50ae31735410fbef857fec8c0ea43d0c066c1ac54f2f7bcebc21c18c0ac14027cdef565f6d08b8c94e7ef79d7415802c166ffc24032e841d2e866c1ce09480bf9488d44040844899410f67bdef5418b8413fb7bdef54c8d14f50e5799414e8d9c1aff7bdef533c566c1c1aa48c1bcd4b0dff3ae4c6611b414f67bdef50fc8c0c9654a874c448e48ffc7352942ae392d9804299dc1c803660fc1fe44098494d8ef79d7400f90c6ffc0498d8880b308074887b414f67bdef5f7d841f6d044018494dbef79d70fc86644098454f1f7bceb48c1b414f67bdef53ac1c80335a69d0f1f4809ac14f67bdef5660fc1cf40c0efa1318414f67bdef5660fabcec1f22d5d41c0c84589841306c07ecf400f99c64a8d5c439a4402c10fc1cf41ffe1

block IDs [duplicates]: [485]
['mov ecx, 0x8313f523', 'movzx edi, byte ptr [r11]', 'movsx esi, cl', 'call 0x7ffb72c60391']

bytes: mov ecx, 0x8313f523: b923f51383
movzx edi, byte ptr [r11]: 410fb63b
movsx esi, cl: 0fbef1
call 0x7ffb72c60391: e848610b00

bytecode len: 34 -   b923f51383410fb63b0fbef1e848610b00

block IDs [duplicates]: [486]
['movzx di, byte ptr [rdx + rbx - 0xe]', 'mov ecx, 0xa6989184', 'mov al, byte ptr [rbx + rdx*4 - 0x36]', 'lea rbx, [rdx + rbx - 0xc]', 'movzx r10d, dl', 'add dil, al', 'shr edx, cl', 'movsx esi, cx', 'mov word ptr [rbx + rdx*4], di', 'jb 0x7ffb72e49dc7']

bytes: movzx di, byte ptr [rdx + rbx - 0xe]: 660fb67c1af2
mov ecx, 0xa6989184: b9849198a6
mov al, byte ptr [rbx + rdx*4 - 0x36]: 8a4493ca
lea rbx, [rdx + rbx - 0xc]: 488d5c1af4
movzx r10d, dl: 440fb6d2
add dil, al: 4002f8
shr edx, cl: d3ea
movsx esi, cx: 0fbff1
mov word ptr [rbx + rdx*4], di: 66893c93
jb 0x7ffb72e49dc7: 0f823b283e00

bytecode len: 84 -   660fb67c1af2b9849198a68a4493ca488d5c1af4440fb6d24002f8d3ea0fbff166893c930f823b283e00

block IDs [duplicates]: [487]
['bts r8d, 0x39', 'lea r10d, [rcx + r10 + 0x4a7182b8]', 'push rdx', 'xor r10d, 0xf4b4fd06', 'xadd dx, di', 'xchg word ptr [rsp + rdx*4 + 4], cx', 'adc di, r8w', 'dec r10d', 'neg r10d', 'cdq', 'inc rcx', 'cwde', 'xor r10d, 0x223c1d1d', 'shl qword ptr [rsp + rdx], 0xcb', 'not dil', 'mov qword ptr [rsp + rdx], rbp', 'xor dword ptr [rsp + rdi - 0xff], r10d', 'cdq', 'xadd esi, r8d', 'push rcx', 'mov rbp, qword ptr [rsp + rsi - 0x1ff917c]', 'or rax, rdi', 'xor edi, 0x2c8e96a2', 'movsxd r10, r10d', 'adc r9, r10', 'mov qword ptr [rsp + rsi - 0x1ff9184], r9', 'ret 8']

bytes: bts r8d, 0x39: 410fbae839
lea r10d, [rcx + r10 + 0x4a7182b8]: 468d9411b882714a
push rdx: 52
xor r10d, 0xf4b4fd06: 4181f206fdb4f4
xadd dx, di: 660fc1fa
xchg word ptr [rsp + rdx*4 + 4], cx: 66874c9404
adc di, r8w: 664113f8
dec r10d: 41ffca
neg r10d: 41f7da
cdq: 99
inc rcx: 48ffc1
cwde: 98
xor r10d, 0x223c1d1d: 4181f21d1d3c22
shl qword ptr [rsp + rdx], 0xcb: 48c12414cb
not dil: 40f6d7
mov qword ptr [rsp + rdx], rbp: 48892c14
xor dword ptr [rsp + rdi - 0xff], r10d: 4431943c01ffffff
cdq: 99
xadd esi, r8d: 440fc1c6
push rcx: 51
mov rbp, qword ptr [rsp + rsi - 0x1ff917c]: 488bac34846e00fe
or rax, rdi: 480bc7
xor edi, 0x2c8e96a2: 81f7a2968e2c
movsxd r10, r10d: 4d63d2
adc r9, r10: 4d13ca
mov qword ptr [rsp + rsi - 0x1ff9184], r9: 4c898c347c6e00fe
ret 8: c20800

bytecode len: 224 -   410fbae839468d9411b882714a524181f206fdb4f4660fc1fa66874c9404664113f841ffca41f7da9948ffc1984181f21d1d3c2248c12414cb40f6d748892c144431943c01ffffff99440fc1c651488bac34846e00fe480bc781f7a2968e2c4d63d24d13ca4c898c347c6e00fec20800

block IDs [duplicates]: [488]
['dec eax', 'sub r10, 0x6aaca5ac', 'add dx, si', 'not eax', 'dec rdi', 'push rbp', 'xor dword ptr [rsp + rsi - 0x6f], eax', 'pop rbp', 'push rcx', 'movsxd rax, eax', 'add r9, rax', 'or sil, 0x99', 'shr ecx, 0x86', 'mov r8w, word ptr [rsi + rbx - 0xff]', 'sar byte ptr [rsp + rsi - 0xfd], cl', 'call 0x7ffb72ccc49c']

bytes: dec eax: ffc8
sub r10, 0x6aaca5ac: 4981eaaca5ac6a
add dx, si: 6603d6
not eax: f7d0
dec rdi: 48ffcf
push rbp: 55
xor dword ptr [rsp + rsi - 0x6f], eax: 31443491
pop rbp: 5d
push rcx: 51
movsxd rax, eax: 4863c0
add r9, rax: 4c03c8
or sil, 0x99: 4080ce99
shr ecx, 0x86: c1e986
mov r8w, word ptr [rsi + rbx - 0xff]: 66448b841e01ffffff
sar byte ptr [rsp + rsi - 0xfd], cl: d2bc3403ffffff
call 0x7ffb72ccc49c: e8eb5d2800

bytecode len: 116 -   ffc84981eaaca5ac6a6603d6f7d048ffcf55314434915d514863c04c03c84080ce99c1e98666448b841e01ffffffd2bc3403ffffffe8eb5d2800

block IDs [duplicates]: [489]
['sal word ptr [rsp + rsi*2 - 0x1eb], 0x6e', 'dec dx', 'adc r10b, 0x2c', 'ror r10b, 1', 'pop rsi', 'neg r10b', 'rol dl, 0xa4', 'ror r10b, 1', 'xor bpl, r10b', 'ror dword ptr [rsp + rcx*2 - 0x6fdc7e5], cl', 'lea r10, [rsp + r10 + 0x20]', 'push rdi', 'mov byte ptr [rcx + r10 - 0x37ee3ff], r8b', 'mov rcx, qword ptr [rcx + r11 - 0x37ee3fa]', 'mov eax, edi', 'pop rsi', 'movsx r8d, dl', 'sbb r11, -0xd', 'lea rsi, [rdx + rsi*8 - 0x69c54e7b]', 'sal esi, 0x61', 'pop r10', 'add r10, -0x3bc0cd', 'jmp r10']

bytes: sal word ptr [rsp + rsi*2 - 0x1eb], 0x6e: 66c1b47415feffff6e
dec dx: 66ffca
adc r10b, 0x2c: 4180d22c
ror r10b, 1: 41d0ca
pop rsi: 5e
neg r10b: 41f6da
rol dl, 0xa4: c0c2a4
ror r10b, 1: 41d0ca
xor bpl, r10b: 4132ea
ror dword ptr [rsp + rcx*2 - 0x6fdc7e5], cl: d38c4c1b3802f9
lea r10, [rsp + r10 + 0x20]: 4e8d541420
push rdi: 57
mov byte ptr [rcx + r10 - 0x37ee3ff], r8b: 46888411011c81fc
mov rcx, qword ptr [rcx + r11 - 0x37ee3fa]: 4a8b8c19061c81fc
mov eax, edi: 8bc7
pop rsi: 5e
movsx r8d, dl: 440fbec2
sbb r11, -0xd: 4983dbf3
lea rsi, [rdx + rsi*8 - 0x69c54e7b]: 488db4f285b13a96
sal esi, 0x61: c1f661
pop r10: 415a
add r10, -0x3bc0cd: 4981c2333fc4ff
jmp r10: 41ffe2

bytecode len: 190 -   66c1b47415feffff6e66ffca4180d22c41d0ca5e41f6dac0c2a441d0ca4132ead38c4c1b3802f94e8d5414205746888411011c81fc4a8b8c19061c81fc8bc75e440fbec24983dbf3488db4f285b13a96c1f661415a4981c2333fc4ff41ffe2

block IDs [duplicates]: [490]
['xor rcx, rbp', 'inc rcx', 'xor r8b, r8b', 'adc dl, byte ptr [rsp + rsi - 0x7720933d]', 'neg r8b', 'xor rcx, 0x3ca8de17', 'xchg dword ptr [rsp + rsi - 0x77209336], edi', 'call 0x7ffb72d3fe08']

bytes: xor rcx, rbp: 4833cd
inc rcx: 48ffc1
xor r8b, r8b: 4532c0
adc dl, byte ptr [rsp + rsi - 0x7720933d]: 129434c36cdf88
neg r8b: 41f6d8
xor rcx, 0x3ca8de17: 4881f117dea83c
xchg dword ptr [rsp + rsi - 0x77209336], edi: 87bc34ca6cdf88
call 0x7ffb72d3fe08: e84ae63400

bytecode len: 76 -   4833cd48ffc14532c0129434c36cdf8841f6d84881f117dea83c87bc34ca6cdf88e84ae63400

block IDs [duplicates]: [492]
['ror edi, 2', 'neg al', 'mov qword ptr [rsp + r8 - 0xcb7e], rcx', 'call 0x7ffb72ed6f0c']

bytes: ror edi, 2: c1cf02
neg al: f6d8
mov qword ptr [rsp + r8 - 0xcb7e], rcx: 4a898c048234ffff
call 0x7ffb72ed6f0c: e8c6944400

bytecode len: 36 -   c1cf02f6d84a898c048234ffffe8c6944400

block IDs [duplicates]: [494]
['lea rdi, [r8*8 - 0x7b5a6867]', 'movzx si, byte ptr [r10 + r8 - 0x5d9d]', 'mov qword ptr [rsp + rdi + 0x7b577b7f], r8', 'lea rbx, [rbx + rdi + 0x7b577b85]', 'mov word ptr [rbx + r8*2 - 0xbb3a], si', 'mov esi, dword ptr [r11 + r8*2 - 0xbb3a]', 'cbw', 'and r8d, dword ptr [rsp + r8*2 - 0xbb38]', 'lea r11, [rdi + r11 + 0x7b577b83]', 'and word ptr [rsp + r8 + 1], di', 'xor esi, ebp', 'xor esi, 0xa61191bb', 'ror esi, 1', 'movzx r10d, dil', 'inc esi', 'sar qword ptr [rsp + rdi + 0x7b577b7f], 0xc3', 'bswap esi', 'adc r8b, 0x3e', 'mov qword ptr [rsp + rdi + 0x7b577b7f], rbp', 'xor dword ptr [rsp + r8 - 0x3f], esi', 'pop rbp', 'movsxd rsi, esi', 'cqo', 'add r9, rsi', 'sar r8w, 0xea', 'or r8, r9', 'jmp r8']

bytes: lea rdi, [r8*8 - 0x7b5a6867]: 4a8d3cc59997a584
movzx si, byte ptr [r10 + r8 - 0x5d9d]: 66430fb6b40263a2ffff
mov qword ptr [rsp + rdi + 0x7b577b7f], r8: 4c89843c7f7b577b
lea rbx, [rbx + rdi + 0x7b577b85]: 488d9c3b857b577b
mov word ptr [rbx + r8*2 - 0xbb3a], si: 664289b443c644ffff
mov esi, dword ptr [r11 + r8*2 - 0xbb3a]: 438bb443c644ffff
cbw: 6698
and r8d, dword ptr [rsp + r8*2 - 0xbb38]: 46238444c844ffff
lea r11, [rdi + r11 + 0x7b577b83]: 4e8d9c1f837b577b
and word ptr [rsp + r8 + 1], di: 6642217c0401
xor esi, ebp: 33f5
xor esi, 0xa61191bb: 81f6bb9111a6
ror esi, 1: d1ce
movzx r10d, dil: 440fb6d7
inc esi: ffc6
sar qword ptr [rsp + rdi + 0x7b577b7f], 0xc3: 48c1bc3c7f7b577bc3
bswap esi: 0fce
adc r8b, 0x3e: 4180d03e
mov qword ptr [rsp + rdi + 0x7b577b7f], rbp: 4889ac3c7f7b577b
xor dword ptr [rsp + r8 - 0x3f], esi: 42317404c1
pop rbp: 5d
movsxd rsi, esi: 4863f6
cqo: 4899
add r9, rsi: 4c03ce
sar r8w, 0xea: 6641c1f8ea
or r8, r9: 4d0bc1
jmp r8: 41ffe0

bytecode len: 278 -   4a8d3cc59997a58466430fb6b40263a2ffff4c89843c7f7b577b488d9c3b857b577b664289b443c644ffff438bb443c644ffff669846238444c844ffff4e8d9c1f837b577b6642217c040133f581f6bb9111a6d1ce440fb6d7ffc648c1bc3c7f7b577bc30fce4180d03e4889ac3c7f7b577b42317404c15d4863f648994c03ce6641c1f8ea4d0bc141ffe0

block IDs [duplicates]: [496]
['xor dword ptr [rsp + rdi - 0x3e921d], esi', 'sbb dl, r8b', 'pop rbp', 'movsxd rsi, esi', 'xor r8, rdi', 'push rcx', 'neg rdi', 'add r9, rsi', 'lea r10, [rdi - 0xef70c75]', 'not edx', 'mov qword ptr [rsp + r10 + 0xf359e92], r9', 'ret']

bytes: xor dword ptr [rsp + rdi - 0x3e921d], esi: 31b43ce36dc1ff
sbb dl, r8b: 411ad0
pop rbp: 5d
movsxd rsi, esi: 4863f6
xor r8, rdi: 4c33c7
push rcx: 51
neg rdi: 48f7df
add r9, rsi: 4c03ce
lea r10, [rdi - 0xef70c75]: 4c8d978bf308f1
not edx: f7d2
mov qword ptr [rsp + r10 + 0xf359e92], r9: 4e898c14929e350f
ret: c3

bytecode len: 84 -   31b43ce36dc1ff411ad05d4863f64c33c75148f7df4c03ce4c8d978bf308f1f7d24e898c14929e350fc3

block IDs [duplicates]: [497]
['movzx r10d, byte ptr [r11]', 'xor r10b, bpl', 'mov ecx, 0x50a413a', 'ror r10b, 1', 'mov r8d, ecx', 'xor r10b, 8', 'movsx edx, r8w', 'call 0x7ffb72e28299']

bytes: movzx r10d, byte ptr [r11]: 450fb61423
xor r10b, bpl: 4432d5
mov ecx, 0x50a413a: b93a410a05
ror r10b, 1: 41d0ca
mov r8d, ecx: 448bc1
xor r10b, 8: 4180f208
movsx edx, r8w: 410fbfd0
call 0x7ffb72e28299: e86cae5100

bytecode len: 64 -   450fb614234432d5b93a410a0541d0ca448bc14180f208410fbfd0e86cae5100

block IDs [duplicates]: [498]
['mov qword ptr [rsp + r8*2 - 0x11d4a202], 0x6a86d11c', 'not dword ptr [rsp + rdx*8 - 0x47528808]', 'movzx r8d, byte ptr [r11 + r8 - 0x8ea50fc]', 'cdqe', 'lea r11, [rax + r11 - 0x607d4134]', 'push rsi', 'cwde', 'dec rax', 'xor r8b, bpl', 'cdq', 'xor eax, esi', 'sbb eax, esi', 'adc r8b, 0x2f', 'rol al, 5', 'add r10b, 0x88', 'jb 0x7ffb72c0460e']

bytes: mov qword ptr [rsp + r8*2 - 0x11d4a202], 0x6a86d11c: 4ac78444fe5d2bee1cd1866a
not dword ptr [rsp + rdx*8 - 0x47528808]: f794d4f877adb8
movzx r8d, byte ptr [r11 + r8 - 0x8ea50fc]: 470fb6840304af15f7
cdqe: 4898
lea r11, [rax + r11 - 0x607d4134]: 4e8d9c18ccbe829f
push rsi: 56
cwde: 98
dec rax: 48ffc8
xor r8b, bpl: 4432c5
cdq: 99
xor eax, esi: 33c6
sbb eax, esi: 1bc6
adc r8b, 0x2f: 4180d02f
rol al, 5: c0c005
add r10b, 0x88: 4180c288
jb 0x7ffb72c0460e: 0f82af281400

bytecode len: 136 -   4ac78444fe5d2bee1cd1866af794d4f877adb8470fb6840304af15f748984e8d9c18ccbe829f569848ffc84432c59933c61bc64180d02fc0c0054180c2880f82af281400

block IDs [duplicates]: [499]
['neg r8b', 'inc r8b', 'xor r10, qword ptr [rsp + rsi + 0x603e961b]', 'rol edx, 0x22', 'xor r8b, 0xa0', 'xor bpl, r8b', 'lea rdi, [rsi + rax*4 - 0x4cc15954]', 'lea r8, [rsp + r8 + 0x10]', 'sub word ptr [rsp + rdx + 5], di', 'adc byte ptr [rsp + rsi + 0x603e961f], dh', 'rol rdi, 0x73', 'mov byte ptr [r8 + rdx], cl', 'lea r8, [rsi*2 - 0x65703146]', 'mov qword ptr [rsp + rdx*2], r9', 'ret 8']

bytes: neg r8b: 41f6d8
inc r8b: 41fec0
xor r10, qword ptr [rsp + rsi + 0x603e961b]: 4c3394341b963e60
rol edx, 0x22: c1c222
xor r8b, 0xa0: 4180f0a0
xor bpl, r8b: 4132e8
lea rdi, [rsi + rax*4 - 0x4cc15954]: 488dbc86aca63eb3
lea r8, [rsp + r8 + 0x10]: 4e8d440410
sub word ptr [rsp + rdx + 5], di: 66297c1405
adc byte ptr [rsp + rsi + 0x603e961f], dh: 10b4341f963e60
rol rdi, 0x73: 48c1c773
mov byte ptr [r8 + rdx], cl: 41880c10
lea r8, [rsi*2 - 0x65703146]: 4c8d0475bace8f9a
mov qword ptr [rsp + rdx*2], r9: 4c890c54
ret 8: c20800

bytecode len: 144 -   41f6d841fec04c3394341b963e60c1c2224180f0a04132e8488dbc86aca63eb34e8d44041066297c140510b4341f963e6048c1c77341880c104c8d0475bace8f9a4c890c54c20800

block IDs [duplicates]: [500]
['mov eax, 0xc9a46715', 'movzx r10d, al', 'movzx esi, byte ptr [r11 + r10*8 - 0xa8]', 'lea r11, [r11 + r10 - 0x14]', 'xor sil, bpl', 'sub sil, 5', 'neg sil', 'dec sil', 'neg r10w', 'mov r8d, 0x751d5caf', 'sub eax, eax', 'xor sil, 0xbf', 'not sil', 'lea rcx, [r10 + r8*8 - 0x23fa6b7b]', 'sar cx, 0x6b', 'xor bpl, sil', 'lea rdi, [r8 + r10*8 - 0x6a44ba7c]', 'call 0x7ffb729336db']

bytes: mov eax, 0xc9a46715: b81567a4c9
movzx r10d, al: 440fb6d0
movzx esi, byte ptr [r11 + r10*8 - 0xa8]: 430fb6b4d358ffffff
lea r11, [r11 + r10 - 0x14]: 4f8d5c13ec
xor sil, bpl: 4032f5
sub sil, 5: 4080ee05
neg sil: 40f6de
dec sil: 40fece
neg r10w: 6641f7da
mov r8d, 0x751d5caf: 41b8af5c1d75
sub eax, eax: 2bc0
xor sil, 0xbf: 4080f6bf
not sil: 40f6d6
lea rcx, [r10 + r8*8 - 0x23fa6b7b]: 4b8d8cc2859405dc
sar cx, 0x6b: 66c1f96b
xor bpl, sil: 4032ee
lea rdi, [r8 + r10*8 - 0x6a44ba7c]: 4b8dbcd08445bb95
call 0x7ffb729336db: e8acacdcff

bytecode len: 166 -   b81567a4c9440fb6d0430fb6b4d358ffffff4f8d5c13ec4032f54080ee0540f6de40fece6641f7da41b8af5c1d752bc04080f6bf40f6d64b8d8cc2859405dc66c1f96b4032ee4b8dbcd08445bb95e8acacdcff

block IDs [duplicates]: [501]
['cbw', 'lea rsi, [rsp + rsi + 8]', 'pop r8', 'movzx r10w, byte ptr [rax + rsi]', 'sal edi, cl', 'lea r8, [rax + rdi*4 - 0x35f649ea]', 'btc eax, 0xaf', 'lea rbx, [rax + rbx - 0x8002]', 'call 0x7ffb72ba512b']

bytes: cbw: 6698
lea rsi, [rsp + rsi + 8]: 488d743408
pop r8: 4158
movzx r10w, byte ptr [rax + rsi]: 66440fb61430
sal edi, cl: d3f7
lea r8, [rax + rdi*4 - 0x35f649ea]: 4c8d84b816b609ca
btc eax, 0xaf: 0fbaf8af
lea rbx, [rax + rbx - 0x8002]: 488d9c18fe7fffff
call 0x7ffb72ba512b: e8261a2700

bytecode len: 84 -   6698488d743408415866440fb61430d3f74c8d84b816b609ca0fbaf8af488d9c18fe7fffffe8261a2700

block IDs [duplicates]: [502]
['mov word ptr [rdi + rbx - 0x50718000], r10w', 'movzx esi, di', 'mov edx, dword ptr [r11 + rax - 0x8000]', 'mov qword ptr [rsp + rax - 0x8000], rcx', 'lea r11, [r11 + rax*2 - 0xfffc]', 'sub cl, byte ptr [rsp + rax*4 - 0x1ffff]', 'shr cl, 7', 'xor edx, ebp', 'sal byte ptr [rsp + rax*4 - 0x1fffe], 0xe2', 'and di, r8w', 'dec edx', 'pop r10', 'ror edi, 0xa1', 'cwde', 'neg edx', 'shl rdi, 0x50', 'sbb cx, di', 'bswap edx', 'push rbp', 'jae 0x7ffb72b27ced']

bytes: mov word ptr [rdi + rbx - 0x50718000], r10w: 664489941f00808eaf
movzx esi, di: 0fb7f7
mov edx, dword ptr [r11 + rax - 0x8000]: 418b94030080ffff
mov qword ptr [rsp + rax - 0x8000], rcx: 48898c040080ffff
lea r11, [r11 + rax*2 - 0xfffc]: 4d8d9c430400ffff
sub cl, byte ptr [rsp + rax*4 - 0x1ffff]: 2a8c840100feff
shr cl, 7: c0e907
xor edx, ebp: 33d5
sal byte ptr [rsp + rax*4 - 0x1fffe], 0xe2: c0b4840200feffe2
and di, r8w: 664123f8
dec edx: ffca
pop r10: 415a
ror edi, 0xa1: c1cfa1
cwde: 98
neg edx: f7da
shl rdi, 0x50: 48c1e750
sbb cx, di: 661bcf
bswap edx: 0fca
push rbp: 55
jae 0x7ffb72b27ced: 0f83f6771700

bytecode len: 172 -   664489941f00808eaf0fb7f7418b94030080ffff48898c040080ffff4d8d9c430400ffff2a8c840100feffc0e90733d5c0b4840200feffe2664123f8ffca415ac1cfa198f7da48c1e750661bcf0fca550f83f6771700

block IDs [duplicates]: [503]
['rol r10, 9', 'xor dword ptr [rsp + rsi*8 - 0x407f8], edx', 'add cl, al', 'sub sil, dil', 'pop rbp', 'xadd rcx, r10', 'sal si, cl', 'movsxd rdx, edx', 'add r9, rdx', 'xor cx, r8w', 'movsx edx, cl', 'ja 0x7ffb72eb83a2']

bytes: rol r10, 9: 49c1c209
xor dword ptr [rsp + rsi*8 - 0x407f8], edx: 3194f408f8fbff
add cl, al: 02c8
sub sil, dil: 402af7
pop rbp: 5d
xadd rcx, r10: 4c0fc1d1
sal si, cl: 66d3f6
movsxd rdx, edx: 4863d2
add r9, rdx: 4c03ca
xor cx, r8w: 664133c8
movsx edx, cl: 0fbed1
ja 0x7ffb72eb83a2: 0f8785063900

bytecode len: 86 -   49c1c2093194f408f8fbff02c8402af75d4c0fc1d166d3f64863d24c03ca664133c80fbed10f8785063900

block IDs [duplicates]: [504]
['dec eax', 'rol eax, 1', 'lea eax, [rax + rdx*8 - 0x57e54e56]', 'bswap edx', 'mov qword ptr [rsp + r8 - 0xf81598c], r8', 'pop rdi', 'rol eax, 2', 'add rdx, rdi', 'push rbp', 'js 0x7ffb72af3f42']

bytes: dec eax: ffc8
rol eax, 1: d1c0
lea eax, [rax + rdx*8 - 0x57e54e56]: 8d84d0aab11aa8
bswap edx: 0fca
mov qword ptr [rsp + r8 - 0xf81598c], r8: 4e89840474a67ef0
pop rdi: 5f
rol eax, 2: c1c002
add rdx, rdi: 4803d7
push rbp: 55
js 0x7ffb72af3f42: 0f8888f11d00

bytecode len: 70 -   ffc8d1c08d84d0aab11aa80fca4e89840474a67ef05fc1c0024803d7550f8888f11d00

block IDs [duplicates]: [505]
['sbb dx, r10w', 'xor dword ptr [rsp + r8*4 - 0x3e056630], eax', 'pop rbp', 'inc r10d', 'bts rdx, r10', 'shr dil, 0xc6', 'movsxd rax, eax', 'sal r10d, 0xb7', 'add di, 0x2cb9', 'call 0x7ffb72ac4d8d']

bytes: sbb dx, r10w: 66411bd2
xor dword ptr [rsp + r8*4 - 0x3e056630], eax: 42318484d099fac1
pop rbp: 5d
inc r10d: 41ffc2
bts rdx, r10: 4c0fabd2
shr dil, 0xc6: 40c0efc6
movsxd rax, eax: 4863c0
sal r10d, 0xb7: 41c1f2b7
add di, 0x2cb9: 6681c7b92c
call 0x7ffb72ac4d8d: e8a7ff1a00

bytecode len: 82 -   66411bd242318484d099fac15d41ffc24c0fabd240c0efc64863c041c1f2b76681c7b92ce8a7ff1a00

block IDs [duplicates]: [506]
['adc r9, rax', 'sub r10b, dil', 'movzx edi, word ptr [r8 + r11 - 0xf81598c]', 'mov qword ptr [rsp + r8 - 0xf81598c], r10', 'jae 0x7ffb72936264']

bytes: adc r9, rax: 4c13c8
sub r10b, dil: 442ad7
movzx edi, word ptr [r8 + r11 - 0xf81598c]: 430fb7bc1874a67ef0
mov qword ptr [rsp + r8 - 0xf81598c], r10: 4e89940474a67ef0
jae 0x7ffb72936264: 0f83ba14e7ff

bytecode len: 58 -   4c13c8442ad7430fb7bc1874a67ef04e89940474a67ef00f83ba14e7ff

block IDs [duplicates]: [507]
['xor dword ptr [rsp + r8*2 - 0x1f02b317], 0x5a27dc04', 'lea r11, [r11 + r8*2 - 0x1f02b316]', 'xchg qword ptr [rsp + r8 - 0xf81598c], rcx', 'pop rdx', 'mov esi, 0x6ad3312', 'lea r10, [rsi*2 - 0x5cfa8c4]', 'movsx edx, sil', 'mov rdi, qword ptr [rsi + rbx - 0x6ad3312]', 'neg dl', 'mov r8b, byte ptr [rbx + rsi - 0x6ad330a]', 'not si', 'lea rbx, [rbx + rsi - 0x6adcce3]', 'movsx ecx, r10w', 'xadd r10d, esi', 'or cx, 0x541b', 'mov byte ptr [rdi + rsi - 0x78abd60], r8b', 'mov r8d, edx', 'shl r10b, 0xc3', 'mov edi, dword ptr [r11 + r10 - 0xe388a68]', 'inc dx', 'bts ecx, r10d', 'call 0x7ffb72bcb071']

bytes: xor dword ptr [rsp + r8*2 - 0x1f02b317], 0x5a27dc04: 4281b444e94cfde004dc275a
lea r11, [r11 + r8*2 - 0x1f02b316]: 4f8d9c43ea4cfde0
xchg qword ptr [rsp + r8 - 0xf81598c], rcx: 4a878c0474a67ef0
pop rdx: 5a
mov esi, 0x6ad3312: be1233ad06
lea r10, [rsi*2 - 0x5cfa8c4]: 4c8d14753c5730fa
movsx edx, sil: 400fbed6
mov rdi, qword ptr [rsi + rbx - 0x6ad3312]: 488bbc1eeecc52f9
neg dl: f6da
mov r8b, byte ptr [rbx + rsi - 0x6ad330a]: 448a8433f6cc52f9
not si: 66f7d6
lea rbx, [rbx + rsi - 0x6adcce3]: 488d9c331d3352f9
movsx ecx, r10w: 410fbfca
xadd r10d, esi: 410fc1f2
or cx, 0x541b: 6681c91b54
mov byte ptr [rdi + rsi - 0x78abd60], r8b: 44888437a04275f8
mov r8d, edx: 448bc2
shl r10b, 0xc3: 41c0e2c3
mov edi, dword ptr [r11 + r10 - 0xe388a68]: 438bbc139875c7f1
inc dx: 66ffc2
bts ecx, r10d: 440fabd1
call 0x7ffb72bcb071: e88a281000

bytecode len: 246 -   4281b444e94cfde004dc275a4f8d9c43ea4cfde04a878c0474a67ef05abe1233ad064c8d14753c5730fa400fbed6488bbc1eeecc52f9f6da448a8433f6cc52f966f7d6488d9c331d3352f9410fbfca410fc1f26681c91b5444888437a04275f8448bc241c0e2c3438bbc139875c7f166ffc2440fabd1e88a281000

block IDs [duplicates]: [508]
['xchg rdx, rsi', 'mov qword ptr [rsp + rdx - 0x38a99038], -0xf5d08df', 'add r10, rcx', 'pop r8', 'mov qword ptr [rbx + rdx*2 - 0x71532068], r10', 'xchg dword ptr [rsp + r8*8 + 0x7ae846fb], edx', 'push rdx', 'mov rdi, qword ptr [r11 + rdx*2 - 0xd6]', 'xchg byte ptr [rsp + rdx*2 - 0xcc], sil', 'not byte ptr [rsp + rdx - 0x66]', 'xor rdi, rbp', 'rol rdi, 6', 'neg rdi', 'inc r8w', 'shl dl, 0x21', 'shr dword ptr [rsp + rdx - 0xd6], 0x5c', 'xor rdi, 0xffffffffc88d0731', 'mov r10d, 0x15a92286', 'shl edx, 0xe6', 'shr word ptr [rsp + rdx - 0x357f], 0x61', 'not rdi', 'lea rcx, [rdx*8 + 0x3d36fc97]', 'push r8', 'movsx eax, byte ptr [rsp + rdx - 0x3572]', 'xor rbp, rdi', 'mov qword ptr [rbx + rdx - 0x3580], rdi', 'call 0x7ffb72be08e6']

bytes: xchg rdx, rsi: 4887f2
mov qword ptr [rsp + rdx - 0x38a99038], -0xf5d08df: 48c78414c86f56c721f7a2f0
add r10, rcx: 4c03d1
pop r8: 4158
mov qword ptr [rbx + rdx*2 - 0x71532068], r10: 4c89945398dfac8e
xchg dword ptr [rsp + r8*8 + 0x7ae846fb], edx: 428794c4fb46e87a
push rdx: 52
mov rdi, qword ptr [r11 + rdx*2 - 0xd6]: 498bbc532affffff
xchg byte ptr [rsp + rdx*2 - 0xcc], sil: 4086b45434ffffff
not byte ptr [rsp + rdx - 0x66]: f654149a
xor rdi, rbp: 4833fd
rol rdi, 6: 48c1c706
neg rdi: 48f7df
inc r8w: 6641ffc0
shl dl, 0x21: c0e221
shr dword ptr [rsp + rdx - 0xd6], 0x5c: c1ac142affffff5c
xor rdi, 0xffffffffc88d0731: 4881f731078dc8
mov r10d, 0x15a92286: 41ba8622a915
shl edx, 0xe6: c1e2e6
shr word ptr [rsp + rdx - 0x357f], 0x61: 66c1ac1481caffff61
not rdi: 48f7d7
lea rcx, [rdx*8 + 0x3d36fc97]: 488d0cd597fc363d
push r8: 4150
movsx eax, byte ptr [rsp + rdx - 0x3572]: 0fbe84148ecaffff
xor rbp, rdi: 4833ef
mov qword ptr [rbx + rdx - 0x3580], rdi: 4889bc1380caffff
call 0x7ffb72be08e6: e831c10800

bytecode len: 288 -   4887f248c78414c86f56c721f7a2f04c03d141584c89945398dfac8e428794c4fb46e87a52498bbc532affffff4086b45434fffffff654149a4833fd48c1c70648f7df6641ffc0c0e221c1ac142affffff5c4881f731078dc841ba8622a915c1e2e666c1ac1481caffff6148f7d7488d0cd597fc363d41500fbe84148ecaffff4833ef4889bc1380caffffe831c10800

block IDs [duplicates]: [510]
['add r10w, cx', 'btc rcx, 0x84', 'push rbp', 'xor dword ptr [rsp + rdi - 0x57b1], r8d', 'pop rbp', 'cdq', 'movsxd r8, r8d', 'sal rdi, 0xdf', 'shr rsi, 0xd2', 'call 0x7ffb72934d41']

bytes: add r10w, cx: 664403d1
btc rcx, 0x84: 480fbaf984
push rbp: 55
xor dword ptr [rsp + rdi - 0x57b1], r8d: 4431843c4fa8ffff
pop rbp: 5d
cdq: 99
movsxd r8, r8d: 4d63c0
sal rdi, 0xdf: 48c1f7df
shr rsi, 0xd2: 48c1eed2
call 0x7ffb72934d41: e86debffff

bytecode len: 72 -   664403d1480fbaf984554431843c4fa8ffff5d994d63c048c1f7df48c1eed2e86debffff

block IDs [duplicates]: [511]
['add r9, r8', 'mov r10, qword ptr [r11 + rdx*2 + 6]', 'mov qword ptr [rsp + rdx*2], rdi', 'and ax, di', 'neg byte ptr [rsp + rdx + 4]', 'lea r11, [r11 + rdx*4 + 0xe]', 'movzx r8d, si', 'rol si, 0xe1', 'xor r10, rbp', 'shr byte ptr [rsp + rdx*4 + 2], 0x66', 'bswap r10', 'sub qword ptr [rsp + rdx*2], rcx', 'cmovp ecx, r8d', 'lea r10, [r10 + rsi + 0x12df62d]', 'not r10', 'inc word ptr [rsp + rsi - 0x2a5a]', 'adc byte ptr [rsp + rdx*4 + 3], al', 'inc r10', 'neg r10', 'bswap rax', 'xor rbp, r10', 'mov qword ptr [rdx + rbx - 8], r10', 'mov r10d, dword ptr [rsp + rdx + 4]', 'lea rbx, [rbx + rdx*4 - 8]', 'cbw', 'neg dil', 'pop rdi', 'jns 0x7ffb72eb83a2']

bytes: add r9, r8: 4d03c8
mov r10, qword ptr [r11 + rdx*2 + 6]: 4d8b545306
mov qword ptr [rsp + rdx*2], rdi: 48893c54
and ax, di: 6623c7
neg byte ptr [rsp + rdx + 4]: f65c1404
lea r11, [r11 + rdx*4 + 0xe]: 4d8d5c930e
movzx r8d, si: 440fb7c6
rol si, 0xe1: 66c1c6e1
xor r10, rbp: 4c33d5
shr byte ptr [rsp + rdx*4 + 2], 0x66: c06c940266
bswap r10: 490fca
sub qword ptr [rsp + rdx*2], rcx: 48290c54
cmovp ecx, r8d: 410f4ac8
lea r10, [r10 + rsi + 0x12df62d]: 4d8d94322df62d01
not r10: 49f7d2
inc word ptr [rsp + rsi - 0x2a5a]: 66ff8434a6d5ffff
adc byte ptr [rsp + rdx*4 + 3], al: 10449403
inc r10: 49ffc2
neg r10: 49f7da
bswap rax: 480fc8
xor rbp, r10: 4933ea
mov qword ptr [rdx + rbx - 8], r10: 4c89541af8
mov r10d, dword ptr [rsp + rdx + 4]: 448b541404
lea rbx, [rbx + rdx*4 - 8]: 488d5c93f8
cbw: 6698
neg dil: 40f6df
pop rdi: 5f
jns 0x7ffb72eb83a2: 0f89f0355800

bytecode len: 226 -   4d03c84d8b54530648893c546623c7f65c14044d8d5c930e440fb7c666c1c6e14c33d5c06c940266490fca48290c54410f4ac84d8d94322df62d0149f7d266ff8434a6d5ffff1044940349ffc249f7da480fc84933ea4c89541af8448b541404488d5c93f8669840f6df5f0f89f0355800

block IDs [duplicates]: [512]
['mov rbp, qword ptr [rsp + rdi*2 - 0x4822]', 'btr di, 0xb2', 'call 0x7ffb72d67800']

bytes: mov rbp, qword ptr [rsp + rdi*2 - 0x4822]: 488bac7cdeb7ffff
btr di, 0xb2: 660fbaf7b2
call 0x7ffb72d67800: e863c02f00

bytecode len: 36 -   488bac7cdeb7ffff660fbaf7b2e863c02f00

block IDs [duplicates]: [513]
['lea r11, [r11 + rdi*2 - 0x481d]', 'xor rdx, qword ptr [rsp + rdi - 0x23fb]', 'push r8', 'inc rdi', 'xor r10b, bpl', 'rol r10b, 1', 'xor r10b, 0xbb', 'add r10b, 0x98', 'xadd cx, dx', 'cbw', 'jbe 0x7ffb72b3cd60']

bytes: lea r11, [r11 + rdi*2 - 0x481d]: 4d8d9c7be3b7ffff
xor rdx, qword ptr [rsp + rdi - 0x23fb]: 4833943c05dcffff
push r8: 4150
inc rdi: 48ffc7
xor r10b, bpl: 4432d5
rol r10b, 1: 41d0c2
xor r10b, 0xbb: 4180f2bb
add r10b, 0x98: 4180c298
xadd cx, dx: 660fc1d1
cbw: 6698
jbe 0x7ffb72b3cd60: 0f860e2a1400

bytecode len: 94 -   4d8d9c7be3b7ffff4833943c05dcffff415048ffc74432d541d0c24180f2bb4180c298660fc1d166980f860e2a1400

block IDs [duplicates]: [514]
['xor r10b, 0x88', 'sar dword ptr [rsp + rdi - 0x2410], cl', 'push rcx', 'sbb r10b, 0x91', 'not al', 'dec al', 'xor esi, dword ptr [rsp + rdi*2 - 0x47fa]', 'xor r10b, 0x2c', 'xor bpl, r10b', 'add dl, 0x24', 'mov word ptr [rbx + rdi - 0x2410], r10w', 'sub ax, di', 'lea rbx, [rbx + rdi*4 - 0x9046]', 'mov qword ptr [rsp + rdi - 0x2412], r9', 'ret 0x28']

bytes: xor r10b, 0x88: 4180f288
sar dword ptr [rsp + rdi - 0x2410], cl: d3bc3cf0dbffff
push rcx: 51
sbb r10b, 0x91: 4180da91
not al: f6d0
dec al: fec8
xor esi, dword ptr [rsp + rdi*2 - 0x47fa]: 33b47c06b8ffff
xor r10b, 0x2c: 4180f22c
xor bpl, r10b: 4132ea
add dl, 0x24: 80c224
mov word ptr [rbx + rdi - 0x2410], r10w: 664489943bf0dbffff
sub ax, di: 662bc7
lea rbx, [rbx + rdi*4 - 0x9046]: 488d9cbbba6fffff
mov qword ptr [rsp + rdi - 0x2412], r9: 4c898c3ceedbffff
ret 0x28: c22800

bytecode len: 136 -   4180f288d3bc3cf0dbffff514180da91f6d0fec833b47c06b8ffff4180f22c4132ea80c224664489943bf0dbffff662bc7488d9cbbba6fffff4c898c3ceedbffffc22800

block IDs [duplicates]: [515]
['mov edi, 0x3f90b89d', 'movzx r8d, di', 'movzx ecx, byte ptr [rdi + r11 - 0x3f90b89d]', 'not r8', 'movsx r10d, r8b', 'xor cl, bpl', 'sub cl, 5', 'sub r8w, 0x3694', 'jns 0x7ffb7291cfc7']

bytes: mov edi, 0x3f90b89d: bf9db8903f
movzx r8d, di: 440fb7c7
movzx ecx, byte ptr [rdi + r11 - 0x3f90b89d]: 420fb68c1f63476fc0
not r8: 49f7d0
movsx r10d, r8b: 450fbed0
xor cl, bpl: 4032cd
sub cl, 5: 80e905
sub r8w, 0x3694: 664181e89436
jns 0x7ffb7291cfc7: 0f89a4cef3ff

bytecode len: 86 -   bf9db8903f440fb7c7420fb68c1f63476fc049f7d0450fbed04032cd80e905664181e894360f89a4cef3ff

block IDs [duplicates]: [516]
['neg cl', 'sar di, 0x2d', 'dec cl', 'xor cl, 0xbf', 'mov edx, r8d', 'not cl', 'xor bpl, cl', 'add rcx, rsp', 'neg dil', 'mov r10b, byte ptr [rcx + rdi - 0x3f90ff03]', 'mov word ptr [rbx + rdi - 0x3f90ff05], r10w', 'movsx r10d, dl', 'rol edi, 0xf7', 'lea edx, [rdi + rdx + 0x6f6a4bbd]', 'xor edx, 0xf4b4fd06', 'dec edx', 'btr di, r10w', 'neg edx', 'xor edx, 0x223c1d1d', 'ror r8w, 0xc4', 'push rbp', 'xor dword ptr [rsp + r8 + 0x1ef4], edx', 'pop rbp', 'lea rax, [rcx + rdx*4 + 0x709e09a6]', 'not r10b', 'movzx esi, dl', 'mov word ptr [rdx + rbx - 0x6d1ee5ad], r10w', 'movsx r8d, cl', 'movsx r10d, ax', 'mov eax, dword ptr [r11 + rsi*4 - 0x2bc]', 'mov qword ptr [rsp + rsi*2 - 0x15e], rdx', 'dec byte ptr [rsp + rsi - 0xad]', 'lea rcx, [rdx*2 - 0x1ce6716b]', 'xor eax, ebp', 'shl dword ptr [rsp + rdx - 0x6d1ee5ac], cl', 'jbe 0x7ffb72b58b6a']

bytes: neg cl: f6d9
sar di, 0x2d: 66c1ff2d
dec cl: fec9
xor cl, 0xbf: 80f1bf
mov edx, r8d: 418bd0
not cl: f6d1
xor bpl, cl: 4032e9
add rcx, rsp: 4803cc
neg dil: 40f6df
mov r10b, byte ptr [rcx + rdi - 0x3f90ff03]: 448a9439fd006fc0
mov word ptr [rbx + rdi - 0x3f90ff05], r10w: 664489943bfb006fc0
movsx r10d, dl: 440fbed2
rol edi, 0xf7: c1c7f7
lea edx, [rdi + rdx + 0x6f6a4bbd]: 8d9417bd4b6a6f
xor edx, 0xf4b4fd06: 81f206fdb4f4
dec edx: ffca
btr di, r10w: 66440fb3d7
neg edx: f7da
xor edx, 0x223c1d1d: 81f21d1d3c22
ror r8w, 0xc4: 6641c1c8c4
push rbp: 55
xor dword ptr [rsp + r8 + 0x1ef4], edx: 42319404f41e0000
pop rbp: 5d
lea rax, [rcx + rdx*4 + 0x709e09a6]: 488d8491a6099e70
not r10b: 41f6d2
movzx esi, dl: 0fb6f2
mov word ptr [rdx + rbx - 0x6d1ee5ad], r10w: 664489941a531ae192
movsx r8d, cl: 440fbec1
movsx r10d, ax: 440fbfd0
mov eax, dword ptr [r11 + rsi*4 - 0x2bc]: 418b84b344fdffff
mov qword ptr [rsp + rsi*2 - 0x15e], rdx: 48899474a2feffff
dec byte ptr [rsp + rsi - 0xad]: fe8c3453ffffff
lea rcx, [rdx*2 - 0x1ce6716b]: 488d0c55958e19e3
xor eax, ebp: 33c5
shl dword ptr [rsp + rdx - 0x6d1ee5ac], cl: d3a414541ae192
jbe 0x7ffb72b58b6a: 0f86924b1100

bytecode len: 338 -   f6d966c1ff2dfec980f1bf418bd0f6d14032e94803cc40f6df448a9439fd006fc0664489943bfb006fc0440fbed2c1c7f78d9417bd4b6a6f81f206fdb4f4ffca66440fb3d7f7da81f21d1d3c226641c1c8c45542319404f41e00005d488d8491a6099e7041f6d20fb6f2664489941a531ae192440fbec1440fbfd0418b84b344fdffff48899474a2fefffffe8c3453ffffff488d0c55958e19e333c5d3a414541ae1920f86924b1100

block IDs [duplicates]: [517]
['jp 0x7ffb7292ee41']

bytes: jp 0x7ffb7292ee41: 0f8a63aeeeff

bytecode len: 12 -   0f8a63aeeeff

block IDs [duplicates]: [518]
['bswap eax', 'jae 0x7ffb72e58272']

bytes: bswap eax: 0fc8
jae 0x7ffb72e58272: 0f8329945200

bytecode len: 16 -   0fc80f8329945200

block IDs [duplicates]: [519]
['not r10d', 'call 0x7ffb72d4e379']

bytes: not r10d: 41f7d2
call 0x7ffb72d4e379: e8a2a54400

bytecode len: 16 -   41f7d2e8a2a54400

block IDs [duplicates]: [520]
['movsxd r10, r10d', 'adc r9, r10', 'sbb al, dil', 'movzx si, byte ptr [rbx + r8*4 - 0x72354abc]', 'jb 0x7ffb72d9ae5f']

bytes: movsxd r10, r10d: 4d63d2
adc r9, r10: 4d13ca
sbb al, dil: 401ac7
movzx si, byte ptr [rbx + r8*4 - 0x72354abc]: 66420fb6b48344b5ca8d
jb 0x7ffb72d9ae5f: 0f82ac272e00

bytecode len: 50 -   4d63d24d13ca401ac766420fb6b48344b5ca8d0f82ac272e00

block IDs [duplicates]: [521]
['mov esi, 0xc5a2e18e', 'movsx r10d, si', 'sal r10d, 7', 'lea rdi, [rsp + 0x18]', 'sar si, 0xe6', 'inc r10b', 'lea rdx, [r10 + rsi*4 + 0x5881ac08]', 'mov rcx, qword ptr [rdi]', 'lea rdi, [rdx + rdx*2 - 0xc53d662]', 'mov r8, rcx', 'mov cl, byte ptr [rbx]', 'shr r8, cl', 'movzx eax, si', 'btr r10, 0xba', 'mov qword ptr [rbx + rax - 0xff8c], r8', 'lea rbx, [rax + rbx - 0xff8c]', 'dec si', 'mov edx, dword ptr [rax + r11 - 0xff86]', 'ror rdi, 0x3f', 'movsx r8d, al', 'lea r11, [r11 + rax*4 - 0x3fe14]', 'setne r10b', 'xadd r10w, si', 'sub al, r8b', 'xor edx, ebp', 'not edx', 'not r10d', 'or si, di', 'sbb edx, 0xdd98f1a7', 'call 0x7ffb72d22c5a']

bytes: mov esi, 0xc5a2e18e: be8ee1a2c5
movsx r10d, si: 440fbfd6
sal r10d, 7: 41c1f207
lea rdi, [rsp + 0x18]: 488d7c2418
sar si, 0xe6: 66c1fee6
inc r10b: 41fec2
lea rdx, [r10 + rsi*4 + 0x5881ac08]: 498d94b208ac8158
mov rcx, qword ptr [rdi]: 488b0c27
lea rdi, [rdx + rdx*2 - 0xc53d662]: 488dbc529e29acf3
mov r8, rcx: 4c8bc1
mov cl, byte ptr [rbx]: 8a4c2300
shr r8, cl: 49d3e8
movzx eax, si: 0fb7c6
btr r10, 0xba: 490fbaf2ba
mov qword ptr [rbx + rax - 0xff8c], r8: 4c8984037400ffff
lea rbx, [rax + rbx - 0xff8c]: 488d9c187400ffff
dec si: 66ffce
mov edx, dword ptr [rax + r11 - 0xff86]: 428b94187a00ffff
ror rdi, 0x3f: 48c1cf3f
movsx r8d, al: 440fbec0
lea r11, [r11 + rax*4 - 0x3fe14]: 4d8d9c83ec01fcff
setne r10b: 410f95c2
xadd r10w, si: 66410fc1f2
sub al, r8b: 412ac0
xor edx, ebp: 33d5
not edx: f7d2
not r10d: 41f7d2
or si, di: 660bf7
sbb edx, 0xdd98f1a7: 81daa7f198dd
call 0x7ffb72d22c5a: e81abf4200

bytecode len: 278 -   be8ee1a2c5440fbfd641c1f207488d7c241866c1fee641fec2498d94b208ac8158488b0c27488dbc529e29acf34c8bc18a4c230049d3e80fb7c6490fbaf2ba4c8984037400ffff488d9c187400ffff66ffce428b94187a00ffff48c1cf3f440fbec04d8d9c83ec01fcff410f95c266410fc1f2412ac033d5f7d241f7d2660bf781daa7f198dde81abf4200

block IDs [duplicates]: [522]
['bswap edx', 'inc dil', 'xadd rdi, r10', 'btc r8, 0x33', 'not edx', 'rol r10d, 0xdf', 'rol edx, 3', 'push rbp', 'xor dword ptr [rsp + rax - 0xff00], edx', 'add ax, r8w', 'pop rbp', 'movsxd rdx, edx', 'sub r8d, r10d', 'or rax, rdi', 'adc r9, rdx', 'bswap rax', 'mov qword ptr [rsp + rcx - 0x1e96abbc], rdi', 'dec rax', 'bts rsi, 1', 'call 0x7ffb72bcf8f8']

bytes: bswap edx: 0fca
inc dil: 40fec7
xadd rdi, r10: 4c0fc1d7
btc r8, 0x33: 490fbaf833
not edx: f7d2
rol r10d, 0xdf: 41c1c2df
rol edx, 3: c1c203
push rbp: 55
xor dword ptr [rsp + rax - 0xff00], edx: 3194040001ffff
add ax, r8w: 664103c0
pop rbp: 5d
movsxd rdx, edx: 4863d2
sub r8d, r10d: 452bc2
or rax, rdi: 480bc7
adc r9, rdx: 4c13ca
bswap rax: 480fc8
mov qword ptr [rsp + rcx - 0x1e96abbc], rdi: 4889bc0c445469e1
dec rax: 48ffc8
bts rsi, 1: 480fbaee01
call 0x7ffb72bcf8f8: e8e6682300

bytecode len: 144 -   0fca40fec74c0fc1d7490fbaf833f7d241c1c2dfc1c203553194040001ffff664103c05d4863d2452bc2480bc74c13ca480fc84889bc0c445469e148ffc8480fbaee01e8e6682300

block IDs [duplicates]: [523]
['mov ecx, dword ptr [r11]', 'mov edx, 0x2c29210a', 'mov edi, edx', 'xor ecx, ebp', 'push rdi', 'neg ecx', 'sar dx, 0xca', 'sbb dword ptr [rsp + rdx*2 - 0x5852000e], edx', 'movsx r8d, dx', 'sbb ecx, 0x859d3727', 'not r8w', 'adc dl, 0x31', 'and word ptr [rsp + r10 + 0xc], r10w', 'mov qword ptr [rsp + r10], rsi', 'neg qword ptr [rsp + r10*2 + 9]', 'xor bpl, dl', 'shl qword ptr [rsp + r10 + 5], 0xbf', 'lea rdx, [rsp + rdx + 0x18]', 'mov byte ptr [rsp + r10*8 + 0xc], sil', 'shr r10d, cl', 'jne 0x7ffb72bc1057']

bytes: mov ecx, dword ptr [r11]: 418b0b
mov edx, 0x2c29210a: ba0a21292c
mov edi, edx: 8bfa
xor ecx, ebp: 33cd
push rdi: 57
neg ecx: f7d9
sar dx, 0xca: 66c1faca
sbb dword ptr [rsp + rdx*2 - 0x5852000e], edx: 199454f2ffada7
movsx r8d, dx: 440fbfc2
sbb ecx, 0x859d3727: 81d927379d85
not r8w: 6641f7d0
adc dl, 0x31: 80d231
and word ptr [rsp + r10 + 0xc], r10w: 66462154140c
mov qword ptr [rsp + r10], rsi: 4a893414
neg qword ptr [rsp + r10*2 + 9]: 4af75c5409
xor bpl, dl: 4032ea
shl qword ptr [rsp + r10 + 5], 0xbf: 4ac1641405bf
lea rdx, [rsp + rdx + 0x18]: 488d541418
mov byte ptr [rsp + r10*8 + 0xc], sil: 428874d40c
shr r10d, cl: 41d3ea
jne 0x7ffb72bc1057: 0f85a2af0400

bytecode len: 172 -   418b0bba0a21292c8bfa33cd57f7d966c1faca199454f2ffada7440fbfc281d927379d856641f7d080d23166462154140c4a8934144af75c54094032ea4ac1641405bf488d541418428874d40c41d3ea0f85a2af0400

block IDs [duplicates]: [524]
['xor r8d, ebp', 'shl ecx, 0x5c', 'call 0x7ffb72dc6b47']

bytes: xor r8d, ebp: 4433c5
shl ecx, 0x5c: c1e15c
call 0x7ffb72dc6b47: e805903d00

bytecode len: 22 -   4433c5c1e15ce805903d00

block IDs [duplicates]: [525]
['xor sil, 1', 'inc sil', 'neg sil', 'dec sil', 'xadd qword ptr [rsp + r8 - 0xe520], rcx', 'push rdi', 'xor bpl, sil', 'movzx si, sil', 'mov al, byte ptr [rbx + rax - 0x20]', 'inc r8w', 'sub ecx, 0x3bb81408', 'and sil, al', 'neg dword ptr [rsp + r8*4 - 0x39483]', 'sar dword ptr [rsp + rcx - 0x5450d113], 0xab', 'push r8', 'not sil', 'xchg qword ptr [rsp + rcx - 0x5450d110], rcx', 'mov word ptr [rbx + rdi - 8], si', 'mov esi, 0xbdb9573a', 'lea rax, [rsi*4 + 0x4f3c8708]', 'mov r8, qword ptr [rbx]', 'lea rdi, [rsi + 0x6e80c9a6]', 'movzx r10w, byte ptr ss:[r8]', 'mov edx, 0x5216a99b', 'neg edx', 'add edi, esi', 'mov word ptr [rbx + 6], r10w', 'lea rcx, [rsi + rsi*2 - 0x18da4a7f]', 'jnp 0x7ffb72d3158e']

bytes: xor sil, 1: 4080f601
inc sil: 40fec6
neg sil: 40f6de
dec sil: 40fece
xadd qword ptr [rsp + r8 - 0xe520], rcx: 4a0fc18c04e01affff
push rdi: 57
xor bpl, sil: 4032ee
movzx si, sil: 66400fb6f6
mov al, byte ptr [rbx + rax - 0x20]: 8a4403e0
inc r8w: 6641ffc0
sub ecx, 0x3bb81408: 81e90814b83b
and sil, al: 4022f0
neg dword ptr [rsp + r8*4 - 0x39483]: 42f79c847d6bfcff
sar dword ptr [rsp + rcx - 0x5450d113], 0xab: c1bc0ced2eafabab
push r8: 4150
not sil: 40f6d6
xchg qword ptr [rsp + rcx - 0x5450d110], rcx: 48878c0cf02eafab
mov word ptr [rbx + rdi - 8], si: 6689743bf8
mov esi, 0xbdb9573a: be3a57b9bd
lea rax, [rsi*4 + 0x4f3c8708]: 488d04b508873c4f
mov r8, qword ptr [rbx]: 4c8b0423
lea rdi, [rsi + 0x6e80c9a6]: 488dbea6c9806e
movzx r10w, byte ptr ss:[r8]: 3666450fb61420
mov edx, 0x5216a99b: ba9ba91652
neg edx: f7da
add edi, esi: 03fe
mov word ptr [rbx + 6], r10w: 664489542306
lea rcx, [rsi + rsi*2 - 0x18da4a7f]: 488d8c7681b525e7
jnp 0x7ffb72d3158e: 0f8b3bf62600

bytecode len: 284 -   4080f60140fec640f6de40fece4a0fc18c04e01affff574032ee66400fb6f68a4403e06641ffc081e90814b83b4022f042f79c847d6bfcffc1bc0ced2eafabab415040f6d648878c0cf02eafab6689743bf8be3a57b9bd488d04b508873c4f4c8b0423488dbea6c9806e3666450fb61420ba9ba91652f7da03fe664489542306488d8c7681b525e70f8b3bf62600

block IDs [duplicates]: [526]
['push rbp', 'call 0x7ffb72d77306']

bytes: push rbp: 55
call 0x7ffb72d77306: e8f7713f00

bytecode len: 12 -   55e8f7713f00

block IDs [duplicates]: [528]
['mov qword ptr [rbx + r10*2 - 0xcf94], rsi', 'mov edi, dword ptr [r10 + r11 - 0x67c5]', 'adc word ptr [rsp + r10*2 - 0xcf84], 0x4ea0', 'xor cx, ax', 'jno 0x7ffb72d0e3b0']

bytes: mov qword ptr [rbx + r10*2 - 0xcf94], rsi: 4a89b4536c30ffff
mov edi, dword ptr [r10 + r11 - 0x67c5]: 438bbc1a3b98ffff
adc word ptr [rsp + r10*2 - 0xcf84], 0x4ea0: 66428194547c30ffffa04e
xor cx, ax: 6633c8
jno 0x7ffb72d0e3b0: 0f81165a4000

bytecode len: 72 -   4a89b4536c30ffff438bbc1a3b98ffff66428194547c30ffffa04e6633c80f81165a4000

